From e6ed337a38c9e86db6b7e399fc300f9995944283 Mon Sep 17 00:00:00 2001
From: liamHowatt <30486941+liamHowatt@users.noreply.github.com>
Date: Mon, 25 Mar 2024 15:02:06 -0400
Subject: [PATCH 03/35] fix(cache): gradient key computing (#5930)

---
 src/draw/sw/lv_draw_sw_gradient.c | 22 ++++++++++++++--------
 1 file changed, 14 insertions(+), 8 deletions(-)

diff --git a/src/draw/sw/lv_draw_sw_gradient.c b/src/draw/sw/lv_draw_sw_gradient.c
index 15fcab3af..f5b774efb 100644
--- a/src/draw/sw/lv_draw_sw_gradient.c
+++ b/src/draw/sw/lv_draw_sw_gradient.c
@@ -45,7 +45,7 @@ static lv_res_t find_oldest_item_life(lv_grad_t * c, void * ctx);
 static lv_res_t kill_oldest_item(lv_grad_t * c, void * ctx);
 static lv_res_t find_item(lv_grad_t * c, void * ctx);
 static void free_item(lv_grad_t * c);
-static  uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t w, lv_coord_t h);
+static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w);
 
 /**********************
  *   STATIC VARIABLE
@@ -56,16 +56,22 @@ static uint8_t * grad_cache_end = 0;
 /**********************
  *   STATIC FUNCTIONS
  **********************/
-union void_cast {
-    const void * ptr;
-    const uint32_t value;
-};
 
 static uint32_t compute_key(const lv_grad_dsc_t * g, lv_coord_t size, lv_coord_t w)
 {
-    union void_cast v;
-    v.ptr = g;
-    return (v.value ^ size ^ (w >> 1)); /*Yes, this is correct, it's like a hash that changes if the width changes*/
+    uint32_t key =
+        ((uint32_t) g->stops_count) |
+        (((uint32_t) g->dir) << 8) |
+        (((uint32_t) g->dither) << 16);
+    uint32_t frac_product = 1;
+    for(uint8_t i = 0; i < g->stops_count; i++) {
+        key ^= (uint32_t) g->stops[i].color.full;
+        frac_product *= ((uint32_t) g->stops[i].frac) + 1;
+    }
+    key ^= frac_product;
+    key ^= (uint32_t) size;
+    key ^= ((uint32_t) w) >> 1; /*Yes, this is correct, it's like a hash that changes if the width changes*/
+    return key;
 }
 
 static size_t get_cache_item_size(lv_grad_t * c)
-- 
2.25.1



rtthread.elf:     file format elf32-littlearm


Disassembly of section .ddr.vectors:

00000000 <__Vectors>:
   0:	00080000 	.word	0x00080000
   4:	00000141 	.word	0x00000141
   8:	00000185 	.word	0x00000185
   c:	00004163 	.word	0x00004163
  10:	00000185 	.word	0x00000185
  14:	00000185 	.word	0x00000185
  18:	00000185 	.word	0x00000185
	...
  2c:	00000185 	.word	0x00000185
  30:	00000185 	.word	0x00000185
  34:	00000000 	.word	0x00000000
  38:	000040db 	.word	0x000040db
  3c:	00000185 	.word	0x00000185
	...

00000140 <Reset_Handler>:
 140:	4c11      	ldr	r4, [pc, #68]	; (188 <BusFault_Handler+0x4>)
 142:	4d12      	ldr	r5, [pc, #72]	; (18c <BusFault_Handler+0x8>)
 144:	42ac      	cmp	r4, r5
 146:	da09      	bge.n	15c <Reset_Handler+0x1c>
 148:	6821      	ldr	r1, [r4, #0]
 14a:	6862      	ldr	r2, [r4, #4]
 14c:	68a3      	ldr	r3, [r4, #8]
 14e:	3b04      	subs	r3, #4
 150:	db02      	blt.n	158 <Reset_Handler+0x18>
 152:	58c8      	ldr	r0, [r1, r3]
 154:	50d0      	str	r0, [r2, r3]
 156:	e7fa      	b.n	14e <Reset_Handler+0xe>
 158:	340c      	adds	r4, #12
 15a:	e7f3      	b.n	144 <Reset_Handler+0x4>
 15c:	4b0c      	ldr	r3, [pc, #48]	; (190 <BusFault_Handler+0xc>)
 15e:	4c0d      	ldr	r4, [pc, #52]	; (194 <BusFault_Handler+0x10>)
 160:	42a3      	cmp	r3, r4
 162:	da08      	bge.n	176 <Reset_Handler+0x36>
 164:	6819      	ldr	r1, [r3, #0]
 166:	685a      	ldr	r2, [r3, #4]
 168:	2000      	movs	r0, #0
 16a:	3a04      	subs	r2, #4
 16c:	db01      	blt.n	172 <Reset_Handler+0x32>
 16e:	5088      	str	r0, [r1, r2]
 170:	e7fb      	b.n	16a <Reset_Handler+0x2a>
 172:	3308      	adds	r3, #8
 174:	e7f4      	b.n	160 <Reset_Handler+0x20>
 176:	4b08      	ldr	r3, [pc, #32]	; (198 <BusFault_Handler+0x14>)
 178:	f383 8808 	msr	MSP, r3
 17c:	f007 fd38 	bl	7bf0 <SystemInit>
 180:	f009 f8c2 	bl	9308 <entry>

00000184 <BusFault_Handler>:
 184:	e7fe      	b.n	184 <BusFault_Handler>
 186:	0000      	.short	0x0000
 188:	00017918 	.word	0x00017918
 18c:	00017924 	.word	0x00017924
 190:	00017924 	.word	0x00017924
 194:	00017934 	.word	0x00017934
 198:	00080000 	.word	0x00080000

Disassembly of section .tcm.text:

20000000 <iterate>:
{
    ee_u32 i;
    ee_u16 crc;
    core_results *res = (core_results *)pres;
    ee_u32 iterations = res->iterations;
    res->crc = 0;
20000000:	2300      	movs	r3, #0
{
20000002:	b570      	push	{r4, r5, r6, lr}
    ee_u32 iterations = res->iterations;
20000004:	69c6      	ldr	r6, [r0, #28]
{
20000006:	0004      	movs	r4, r0
    res->crc = 0;
20000008:	6383      	str	r3, [r0, #56]	; 0x38
    res->crclist = 0;
    res->crcmatrix = 0;
2000000a:	63c3      	str	r3, [r0, #60]	; 0x3c
    res->crcstate = 0;

    for (i = 0; i < iterations; i++)
2000000c:	2e00      	cmp	r6, #0
2000000e:	d02e      	beq.n	2000006e <iterate+0x6e>
20000010:	2500      	movs	r5, #0
20000012:	07f3      	lsls	r3, r6, #31
20000014:	d42d      	bmi.n	20000072 <iterate+0x72>
    {
        //__asm__ ("nop");
        crc = core_bench_list(res, 1);
20000016:	2101      	movs	r1, #1
20000018:	0020      	movs	r0, r4
2000001a:	f000 fe1b 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
2000001e:	8f21      	ldrh	r1, [r4, #56]	; 0x38
20000020:	f002 fcac 	bl	2000297c <crcu16>
20000024:	8720      	strh	r0, [r4, #56]	; 0x38
        crc = core_bench_list(res, -1);
20000026:	2001      	movs	r0, #1
20000028:	4241      	negs	r1, r0
2000002a:	0020      	movs	r0, r4
2000002c:	f000 fe12 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
20000030:	8f21      	ldrh	r1, [r4, #56]	; 0x38
20000032:	f002 fca3 	bl	2000297c <crcu16>
20000036:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i == 0) res->crclist = res->crc;
20000038:	2d00      	cmp	r5, #0
2000003a:	d100      	bne.n	2000003e <iterate+0x3e>
2000003c:	8760      	strh	r0, [r4, #58]	; 0x3a
        crc = core_bench_list(res, 1);
2000003e:	2101      	movs	r1, #1
20000040:	0020      	movs	r0, r4
20000042:	f000 fe07 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
20000046:	8f21      	ldrh	r1, [r4, #56]	; 0x38
20000048:	f002 fc98 	bl	2000297c <crcu16>
        crc = core_bench_list(res, -1);
2000004c:	2201      	movs	r2, #1
        res->crc = crcu16(crc, res->crc);
2000004e:	8720      	strh	r0, [r4, #56]	; 0x38
        crc = core_bench_list(res, -1);
20000050:	4251      	negs	r1, r2
20000052:	0020      	movs	r0, r4
20000054:	f000 fdfe 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
20000058:	8f21      	ldrh	r1, [r4, #56]	; 0x38
2000005a:	f002 fc8f 	bl	2000297c <crcu16>
    for (i = 0; i < iterations; i++)
2000005e:	3501      	adds	r5, #1
        res->crc = crcu16(crc, res->crc);
20000060:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i == 0) res->crclist = res->crc;
20000062:	2d00      	cmp	r5, #0
20000064:	d100      	bne.n	20000068 <iterate+0x68>
20000066:	8760      	strh	r0, [r4, #58]	; 0x3a
    for (i = 0; i < iterations; i++)
20000068:	3501      	adds	r5, #1
2000006a:	42ae      	cmp	r6, r5
2000006c:	d1d3      	bne.n	20000016 <iterate+0x16>
    }
    return NULL;
}
2000006e:	2000      	movs	r0, #0
20000070:	bd70      	pop	{r4, r5, r6, pc}
        crc = core_bench_list(res, 1);
20000072:	2101      	movs	r1, #1
20000074:	f000 fdee 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
20000078:	8f21      	ldrh	r1, [r4, #56]	; 0x38
2000007a:	f002 fc7f 	bl	2000297c <crcu16>
        crc = core_bench_list(res, -1);
2000007e:	2101      	movs	r1, #1
        res->crc = crcu16(crc, res->crc);
20000080:	8720      	strh	r0, [r4, #56]	; 0x38
        crc = core_bench_list(res, -1);
20000082:	4249      	negs	r1, r1
20000084:	0020      	movs	r0, r4
20000086:	f000 fde5 	bl	20000c54 <core_bench_list>
        res->crc = crcu16(crc, res->crc);
2000008a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
2000008c:	f002 fc76 	bl	2000297c <crcu16>
    for (i = 0; i < iterations; i++)
20000090:	2501      	movs	r5, #1
        res->crc = crcu16(crc, res->crc);
20000092:	8720      	strh	r0, [r4, #56]	; 0x38
        if (i == 0) res->crclist = res->crc;
20000094:	8760      	strh	r0, [r4, #58]	; 0x3a
    for (i = 0; i < iterations; i++)
20000096:	42ae      	cmp	r6, r5
20000098:	d1bd      	bne.n	20000016 <iterate+0x16>
2000009a:	e7e8      	b.n	2000006e <iterate+0x6e>
2000009c:	70206b36 	.word	0x70206b36
200000a0:	6f667265 	.word	0x6f667265
200000a4:	6e616d72 	.word	0x6e616d72
200000a8:	72206563 	.word	0x72206563
200000ac:	70206e75 	.word	0x70206e75
200000b0:	6d617261 	.word	0x6d617261
200000b4:	72657465 	.word	0x72657465
200000b8:	6f662073 	.word	0x6f662073
200000bc:	6f632072 	.word	0x6f632072
200000c0:	616d6572 	.word	0x616d6572
200000c4:	0a2e6b72 	.word	0x0a2e6b72
200000c8:	00000000 	.word	0x00000000
200000cc:	76206b36 	.word	0x76206b36
200000d0:	64696c61 	.word	0x64696c61
200000d4:	6f697461 	.word	0x6f697461
200000d8:	7572206e 	.word	0x7572206e
200000dc:	6170206e 	.word	0x6170206e
200000e0:	656d6172 	.word	0x656d6172
200000e4:	73726574 	.word	0x73726574
200000e8:	726f6620 	.word	0x726f6620
200000ec:	726f6320 	.word	0x726f6320
200000f0:	72616d65 	.word	0x72616d65
200000f4:	000a2e6b 	.word	0x000a2e6b
200000f8:	666f7250 	.word	0x666f7250
200000fc:	20656c69 	.word	0x20656c69
20000100:	656e6567 	.word	0x656e6567
20000104:	69746172 	.word	0x69746172
20000108:	72206e6f 	.word	0x72206e6f
2000010c:	70206e75 	.word	0x70206e75
20000110:	6d617261 	.word	0x6d617261
20000114:	72657465 	.word	0x72657465
20000118:	6f662073 	.word	0x6f662073
2000011c:	6f632072 	.word	0x6f632072
20000120:	616d6572 	.word	0x616d6572
20000124:	0a2e6b72 	.word	0x0a2e6b72
20000128:	00000000 	.word	0x00000000
2000012c:	70204b32 	.word	0x70204b32
20000130:	6f667265 	.word	0x6f667265
20000134:	6e616d72 	.word	0x6e616d72
20000138:	72206563 	.word	0x72206563
2000013c:	70206e75 	.word	0x70206e75
20000140:	6d617261 	.word	0x6d617261
20000144:	72657465 	.word	0x72657465
20000148:	6f662073 	.word	0x6f662073
2000014c:	6f632072 	.word	0x6f632072
20000150:	616d6572 	.word	0x616d6572
20000154:	0a2e6b72 	.word	0x0a2e6b72
20000158:	00000000 	.word	0x00000000
2000015c:	76204b32 	.word	0x76204b32
20000160:	64696c61 	.word	0x64696c61
20000164:	6f697461 	.word	0x6f697461
20000168:	7572206e 	.word	0x7572206e
2000016c:	6170206e 	.word	0x6170206e
20000170:	656d6172 	.word	0x656d6172
20000174:	73726574 	.word	0x73726574
20000178:	726f6620 	.word	0x726f6620
2000017c:	726f6320 	.word	0x726f6320
20000180:	72616d65 	.word	0x72616d65
20000184:	000a2e6b 	.word	0x000a2e6b
20000188:	5d75255b 	.word	0x5d75255b
2000018c:	4f525245 	.word	0x4f525245
20000190:	6c202152 	.word	0x6c202152
20000194:	20747369 	.word	0x20747369
20000198:	20637263 	.word	0x20637263
2000019c:	30257830 	.word	0x30257830
200001a0:	2d207834 	.word	0x2d207834
200001a4:	6f687320 	.word	0x6f687320
200001a8:	20646c75 	.word	0x20646c75
200001ac:	30206562 	.word	0x30206562
200001b0:	34302578 	.word	0x34302578
200001b4:	00000a78 	.word	0x00000a78
200001b8:	5d75255b 	.word	0x5d75255b
200001bc:	4f525245 	.word	0x4f525245
200001c0:	6d202152 	.word	0x6d202152
200001c4:	69727461 	.word	0x69727461
200001c8:	72632078 	.word	0x72632078
200001cc:	78302063 	.word	0x78302063
200001d0:	78343025 	.word	0x78343025
200001d4:	73202d20 	.word	0x73202d20
200001d8:	6c756f68 	.word	0x6c756f68
200001dc:	65622064 	.word	0x65622064
200001e0:	25783020 	.word	0x25783020
200001e4:	0a783430 	.word	0x0a783430
200001e8:	00000000 	.word	0x00000000
200001ec:	5d75255b 	.word	0x5d75255b
200001f0:	4f525245 	.word	0x4f525245
200001f4:	73202152 	.word	0x73202152
200001f8:	65746174 	.word	0x65746174
200001fc:	63726320 	.word	0x63726320
20000200:	25783020 	.word	0x25783020
20000204:	20783430 	.word	0x20783430
20000208:	6873202d 	.word	0x6873202d
2000020c:	646c756f 	.word	0x646c756f
20000210:	20656220 	.word	0x20656220
20000214:	30257830 	.word	0x30257830
20000218:	000a7834 	.word	0x000a7834
2000021c:	65726f43 	.word	0x65726f43
20000220:	6b72614d 	.word	0x6b72614d
20000224:	7a695320 	.word	0x7a695320
20000228:	20202065 	.word	0x20202065
2000022c:	25203a20 	.word	0x25203a20
20000230:	000a756c 	.word	0x000a756c
20000234:	61746f54 	.word	0x61746f54
20000238:	6974206c 	.word	0x6974206c
2000023c:	20736b63 	.word	0x20736b63
20000240:	20202020 	.word	0x20202020
20000244:	25203a20 	.word	0x25203a20
20000248:	000a756c 	.word	0x000a756c
2000024c:	61746f54 	.word	0x61746f54
20000250:	6974206c 	.word	0x6974206c
20000254:	2820656d 	.word	0x2820656d
20000258:	73636573 	.word	0x73636573
2000025c:	25203a29 	.word	0x25203a29
20000260:	00000a64 	.word	0x00000a64
20000264:	72657449 	.word	0x72657449
20000268:	6f697461 	.word	0x6f697461
2000026c:	532f736e 	.word	0x532f736e
20000270:	20206365 	.word	0x20206365
20000274:	25203a20 	.word	0x25203a20
20000278:	00000a64 	.word	0x00000a64
2000027c:	4f525245 	.word	0x4f525245
20000280:	4d202152 	.word	0x4d202152
20000284:	20747375 	.word	0x20747375
20000288:	63657865 	.word	0x63657865
2000028c:	20657475 	.word	0x20657475
20000290:	20726f66 	.word	0x20726f66
20000294:	6c207461 	.word	0x6c207461
20000298:	74736165 	.word	0x74736165
2000029c:	20303120 	.word	0x20303120
200002a0:	73636573 	.word	0x73636573
200002a4:	726f6620 	.word	0x726f6620
200002a8:	76206120 	.word	0x76206120
200002ac:	64696c61 	.word	0x64696c61
200002b0:	73657220 	.word	0x73657220
200002b4:	21746c75 	.word	0x21746c75
200002b8:	0000000a 	.word	0x0000000a
200002bc:	72657449 	.word	0x72657449
200002c0:	6f697461 	.word	0x6f697461
200002c4:	2020736e 	.word	0x2020736e
200002c8:	20202020 	.word	0x20202020
200002cc:	25203a20 	.word	0x25203a20
200002d0:	000a756c 	.word	0x000a756c
200002d4:	31434347 	.word	0x31434347
200002d8:	2e322e30 	.word	0x2e322e30
200002dc:	30322031 	.word	0x30322031
200002e0:	31313032 	.word	0x31313032
200002e4:	28203330 	.word	0x28203330
200002e8:	656c6572 	.word	0x656c6572
200002ec:	29657361 	.word	0x29657361
200002f0:	00000000 	.word	0x00000000
200002f4:	706d6f43 	.word	0x706d6f43
200002f8:	72656c69 	.word	0x72656c69
200002fc:	72657620 	.word	0x72657620
20000300:	6e6f6973 	.word	0x6e6f6973
20000304:	25203a20 	.word	0x25203a20
20000308:	00000a73 	.word	0x00000a73
2000030c:	70636d2d 	.word	0x70636d2d
20000310:	6f633d75 	.word	0x6f633d75
20000314:	78657472 	.word	0x78657472
20000318:	00346d2d 	.word	0x00346d2d
2000031c:	706d6f43 	.word	0x706d6f43
20000320:	72656c69 	.word	0x72656c69
20000324:	616c6620 	.word	0x616c6620
20000328:	20207367 	.word	0x20207367
2000032c:	25203a20 	.word	0x25203a20
20000330:	00000a73 	.word	0x00000a73
20000334:	43415453 	.word	0x43415453
20000338:	0000004b 	.word	0x0000004b
2000033c:	6f6d654d 	.word	0x6f6d654d
20000340:	6c207972 	.word	0x6c207972
20000344:	7461636f 	.word	0x7461636f
20000348:	206e6f69 	.word	0x206e6f69
2000034c:	25203a20 	.word	0x25203a20
20000350:	00000a73 	.word	0x00000a73
20000354:	64656573 	.word	0x64656573
20000358:	20637263 	.word	0x20637263
2000035c:	20202020 	.word	0x20202020
20000360:	20202020 	.word	0x20202020
20000364:	30203a20 	.word	0x30203a20
20000368:	34302578 	.word	0x34302578
2000036c:	00000a78 	.word	0x00000a78
20000370:	5d64255b 	.word	0x5d64255b
20000374:	6c637263 	.word	0x6c637263
20000378:	20747369 	.word	0x20747369
2000037c:	20202020 	.word	0x20202020
20000380:	203a2020 	.word	0x203a2020
20000384:	30257830 	.word	0x30257830
20000388:	000a7834 	.word	0x000a7834
2000038c:	5d64255b 	.word	0x5d64255b
20000390:	6d637263 	.word	0x6d637263
20000394:	69727461 	.word	0x69727461
20000398:	20202078 	.word	0x20202078
2000039c:	203a2020 	.word	0x203a2020
200003a0:	30257830 	.word	0x30257830
200003a4:	000a7834 	.word	0x000a7834
200003a8:	5d64255b 	.word	0x5d64255b
200003ac:	73637263 	.word	0x73637263
200003b0:	65746174 	.word	0x65746174
200003b4:	20202020 	.word	0x20202020
200003b8:	203a2020 	.word	0x203a2020
200003bc:	30257830 	.word	0x30257830
200003c0:	000a7834 	.word	0x000a7834
200003c4:	5d64255b 	.word	0x5d64255b
200003c8:	66637263 	.word	0x66637263
200003cc:	6c616e69 	.word	0x6c616e69
200003d0:	20202020 	.word	0x20202020
200003d4:	203a2020 	.word	0x203a2020
200003d8:	30257830 	.word	0x30257830
200003dc:	000a7834 	.word	0x000a7834
200003e0:	72726f43 	.word	0x72726f43
200003e4:	20746365 	.word	0x20746365
200003e8:	7265706f 	.word	0x7265706f
200003ec:	6f697461 	.word	0x6f697461
200003f0:	6176206e 	.word	0x6176206e
200003f4:	6164696c 	.word	0x6164696c
200003f8:	2e646574 	.word	0x2e646574
200003fc:	65655320 	.word	0x65655320
20000400:	61657220 	.word	0x61657220
20000404:	2e656d64 	.word	0x2e656d64
20000408:	20747874 	.word	0x20747874
2000040c:	20726f66 	.word	0x20726f66
20000410:	206e7572 	.word	0x206e7572
20000414:	20646e61 	.word	0x20646e61
20000418:	6f706572 	.word	0x6f706572
2000041c:	6e697472 	.word	0x6e697472
20000420:	75722067 	.word	0x75722067
20000424:	2e73656c 	.word	0x2e73656c
20000428:	0000000a 	.word	0x0000000a
2000042c:	6f727245 	.word	0x6f727245
20000430:	64207372 	.word	0x64207372
20000434:	63657465 	.word	0x63657465
20000438:	0a646574 	.word	0x0a646574
2000043c:	00000000 	.word	0x00000000
20000440:	6e6e6143 	.word	0x6e6e6143
20000444:	7620746f 	.word	0x7620746f
20000448:	64696c61 	.word	0x64696c61
2000044c:	20657461 	.word	0x20657461
20000450:	7265706f 	.word	0x7265706f
20000454:	6f697461 	.word	0x6f697461
20000458:	6f66206e 	.word	0x6f66206e
2000045c:	68742072 	.word	0x68742072
20000460:	20657365 	.word	0x20657365
20000464:	64656573 	.word	0x64656573
20000468:	6c617620 	.word	0x6c617620
2000046c:	2c736575 	.word	0x2c736575
20000470:	656c7020 	.word	0x656c7020
20000474:	20657361 	.word	0x20657361
20000478:	706d6f63 	.word	0x706d6f63
2000047c:	20657261 	.word	0x20657261
20000480:	68746977 	.word	0x68746977
20000484:	73657220 	.word	0x73657220
20000488:	73746c75 	.word	0x73746c75
2000048c:	206e6f20 	.word	0x206e6f20
20000490:	6e6b2061 	.word	0x6e6b2061
20000494:	206e776f 	.word	0x206e776f
20000498:	74616c70 	.word	0x74616c70
2000049c:	6d726f66 	.word	0x6d726f66
200004a0:	00000a2e 	.word	0x00000a2e

200004a4 <coremark_main>:

*/

#if MAIN_HAS_NOARGC
MAIN_RETURN_TYPE coremark_main(void)
{
200004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
200004a6:	46de      	mov	lr, fp
200004a8:	4657      	mov	r7, sl
200004aa:	464e      	mov	r6, r9
200004ac:	4645      	mov	r5, r8
200004ae:	b5e0      	push	{r5, r6, r7, lr}
200004b0:	b097      	sub	sp, #92	; 0x5c
    int argc = 0;
200004b2:	2300      	movs	r3, #0
    core_results results[MULTITHREAD];
#if (MEM_METHOD==MEM_STACK)
    ee_u8 stack_memblock[TOTAL_DATA_SIZE * MULTITHREAD];
#endif
    /* first call any initializations needed */
    portable_init(&(results[0].port), &argc, argv);
200004b4:	a802      	add	r0, sp, #8
200004b6:	4684      	mov	ip, r0
    int argc = 0;
200004b8:	9303      	str	r3, [sp, #12]
    portable_init(&(results[0].port), &argc, argv);
200004ba:	334e      	adds	r3, #78	; 0x4e
200004bc:	4463      	add	r3, ip
200004be:	0018      	movs	r0, r3
200004c0:	aa04      	add	r2, sp, #16
200004c2:	a903      	add	r1, sp, #12
200004c4:	f002 fc7c 	bl	20002dc0 <portable_init>
    if (sizeof(struct list_head_s) > 128)
    {
        ee_printf("list_head structure too big for comparable data!\n");
        return MAIN_RETURN_VAL;
    }
    results[0].seed1 = get_seed(1);
200004c8:	2001      	movs	r0, #1
200004ca:	f002 fa27 	bl	2000291c <get_seed_32>
    portable_init(&(results[0].port), &argc, argv);
200004ce:	ac05      	add	r4, sp, #20
    results[0].seed1 = get_seed(1);
200004d0:	8020      	strh	r0, [r4, #0]
    results[0].seed2 = get_seed(2);
200004d2:	2002      	movs	r0, #2
200004d4:	f002 fa22 	bl	2000291c <get_seed_32>
200004d8:	8060      	strh	r0, [r4, #2]
    results[0].seed3 = get_seed(3);
200004da:	2003      	movs	r0, #3
200004dc:	f002 fa1e 	bl	2000291c <get_seed_32>
200004e0:	80a0      	strh	r0, [r4, #4]
    results[0].iterations = get_seed_32(4);
200004e2:	2004      	movs	r0, #4
200004e4:	f002 fa1a 	bl	2000291c <get_seed_32>
200004e8:	61e0      	str	r0, [r4, #28]
#if CORE_DEBUG
    results[0].iterations = 1;
#endif
    results[0].execs = get_seed_32(5);
200004ea:	2005      	movs	r0, #5
200004ec:	f002 fa16 	bl	2000291c <get_seed_32>
    if (results[0].execs == 0) /* if not supplied, execute all algorithms */
200004f0:	2800      	cmp	r0, #0
200004f2:	d100      	bne.n	200004f6 <coremark_main+0x52>
200004f4:	e1e2      	b.n	200008bc <coremark_main+0x418>
    results[0].execs = get_seed_32(5);
200004f6:	6220      	str	r0, [r4, #32]
    {
        results[0].execs = ALL_ALGORITHMS_MASK;
    }
    /* put in some default values based on one seed only for easy testing */
    if ((results[0].seed1 == 0) && (results[0].seed2 == 0) && (results[0].seed3 == 0)) /* validation run */
200004f8:	9a05      	ldr	r2, [sp, #20]
200004fa:	2a00      	cmp	r2, #0
200004fc:	d000      	beq.n	20000500 <coremark_main+0x5c>
200004fe:	e1d0      	b.n	200008a2 <coremark_main+0x3fe>
20000500:	2204      	movs	r2, #4
20000502:	5ea7      	ldrsh	r7, [r4, r2]
20000504:	2f00      	cmp	r7, #0
20000506:	d100      	bne.n	2000050a <coremark_main+0x66>
20000508:	e1d5      	b.n	200008b6 <coremark_main+0x412>
#error "Cannot use a static data area with multiple contexts!"
#endif
#elif (MEM_METHOD==MEM_MALLOC)
    for (i = 0 ; i < MULTITHREAD; i++)
    {
        ee_s32 malloc_override = get_seed(7);
2000050a:	2007      	movs	r0, #7
2000050c:	f002 fa06 	bl	2000291c <get_seed_32>
20000510:	b200      	sxth	r0, r0
        if (malloc_override != 0)
20000512:	2800      	cmp	r0, #0
20000514:	d101      	bne.n	2000051a <coremark_main+0x76>
20000516:	20fa      	movs	r0, #250	; 0xfa
20000518:	00c0      	lsls	r0, r0, #3
2000051a:	61a0      	str	r0, [r4, #24]
            results[i].size = malloc_override;
        else
            results[i].size = TOTAL_DATA_SIZE;
        results[i].memblock[0] = portable_malloc(results[i].size);
2000051c:	f002 fc28 	bl	20002d70 <portable_malloc>
        results[i].seed1 = results[0].seed1;
        results[i].seed2 = results[0].seed2;
        results[i].seed3 = results[0].seed3;
        results[i].err = 0;
20000520:	2340      	movs	r3, #64	; 0x40
20000522:	2100      	movs	r1, #0
20000524:	52e1      	strh	r1, [r4, r3]
#endif
    /* Data init */
    /* Find out how space much we have based on number of algorithms */
    for (i = 0; i < NUM_ALGORITHMS; i++)
    {
        if ((1 << (ee_u32)i) & results[0].execs)
20000526:	3b3e      	subs	r3, #62	; 0x3e
20000528:	2701      	movs	r7, #1
2000052a:	001a      	movs	r2, r3
2000052c:	6a25      	ldr	r5, [r4, #32]
        results[i].memblock[0] = portable_malloc(results[i].size);
2000052e:	0006      	movs	r6, r0
        if ((1 << (ee_u32)i) & results[0].execs)
20000530:	402f      	ands	r7, r5
20000532:	402a      	ands	r2, r5
20000534:	0039      	movs	r1, r7
20000536:	4690      	mov	r8, r2
        results[i].memblock[0] = portable_malloc(results[i].size);
20000538:	60a0      	str	r0, [r4, #8]
        if ((1 << (ee_u32)i) & results[0].execs)
2000053a:	422b      	tst	r3, r5
2000053c:	d000      	beq.n	20000540 <coremark_main+0x9c>
            num_algorithms++;
2000053e:	3101      	adds	r1, #1
        if ((1 << (ee_u32)i) & results[0].execs)
20000540:	2004      	movs	r0, #4
20000542:	0003      	movs	r3, r0
20000544:	402b      	ands	r3, r5
20000546:	4699      	mov	r9, r3
20000548:	4228      	tst	r0, r5
2000054a:	d001      	beq.n	20000550 <coremark_main+0xac>
            num_algorithms++;
2000054c:	3101      	adds	r1, #1
2000054e:	b289      	uxth	r1, r1
    }
    for (i = 0 ; i < MULTITHREAD; i++)
        results[i].size = results[i].size / num_algorithms;
20000550:	69a0      	ldr	r0, [r4, #24]
20000552:	f003 fb71 	bl	20003c38 <____aeabi_uidiv_veneer>
    ee_u16 i, j = 0, num_algorithms = 0;
20000556:	2300      	movs	r3, #0
        results[i].size = results[i].size / num_algorithms;
20000558:	61a0      	str	r0, [r4, #24]
    /* Assign pointers */
    for (i = 0; i < NUM_ALGORITHMS; i++)
    {
        ee_u32 ctx;
        if ((1 << (ee_u32)i) & results[0].execs)
2000055a:	2f00      	cmp	r7, #0
2000055c:	d000      	beq.n	20000560 <coremark_main+0xbc>
2000055e:	e1bd      	b.n	200008dc <coremark_main+0x438>
20000560:	4641      	mov	r1, r8
20000562:	2900      	cmp	r1, #0
20000564:	d000      	beq.n	20000568 <coremark_main+0xc4>
20000566:	e1bf      	b.n	200008e8 <coremark_main+0x444>
20000568:	464a      	mov	r2, r9
2000056a:	2a00      	cmp	r2, #0
2000056c:	d000      	beq.n	20000570 <coremark_main+0xcc>
2000056e:	e1c5      	b.n	200008fc <coremark_main+0x458>
        }
    }
    /* call inits */
    for (i = 0 ; i < MULTITHREAD; i++)
    {
        if (results[i].execs & ID_LIST)
20000570:	2f00      	cmp	r7, #0
20000572:	d006      	beq.n	20000582 <coremark_main+0xde>
        {
            results[i].list = core_list_init(results[0].size, results[i].memblock[1], results[i].seed1);
20000574:	2300      	movs	r3, #0
20000576:	5ee2      	ldrsh	r2, [r4, r3]
20000578:	68e1      	ldr	r1, [r4, #12]
2000057a:	f000 fc59 	bl	20000e30 <core_list_init>
        }
        if (results[i].execs & ID_MATRIX)
2000057e:	6a25      	ldr	r5, [r4, #32]
            results[i].list = core_list_init(results[0].size, results[i].memblock[1], results[i].seed1);
20000580:	6260      	str	r0, [r4, #36]	; 0x24
        if (results[i].execs & ID_MATRIX)
20000582:	07ab      	lsls	r3, r5, #30
20000584:	d500      	bpl.n	20000588 <coremark_main+0xe4>
20000586:	e0b8      	b.n	200006fa <coremark_main+0x256>
        {
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat));
        }
        if (results[i].execs & ID_STATE)
20000588:	076b      	lsls	r3, r5, #29
2000058a:	d505      	bpl.n	20000598 <coremark_main+0xf4>
        {
            core_init_state(results[0].size, results[i].seed1, results[i].memblock[3]);
2000058c:	2300      	movs	r3, #0
2000058e:	5ee1      	ldrsh	r1, [r4, r3]
20000590:	6962      	ldr	r2, [r4, #20]
20000592:	69a0      	ldr	r0, [r4, #24]
20000594:	f001 ff56 	bl	20002444 <core_init_state>
        }
    }

    /* automatically determine number of iterations if not set */
    if (results[0].iterations == 0)
20000598:	69e0      	ldr	r0, [r4, #28]
2000059a:	2800      	cmp	r0, #0
2000059c:	d11c      	bne.n	200005d8 <coremark_main+0x134>
2000059e:	3001      	adds	r0, #1
200005a0:	0007      	movs	r7, r0
200005a2:	e000      	b.n	200005a6 <coremark_main+0x102>
        secs_ret secs_passed = 0;
        ee_u32 divisor;
        results[0].iterations = 1;
        while (secs_passed < (secs_ret)1)
        {
            results[0].iterations *= 10;
200005a4:	69e7      	ldr	r7, [r4, #28]
200005a6:	00b9      	lsls	r1, r7, #2
200005a8:	19cb      	adds	r3, r1, r7
200005aa:	005a      	lsls	r2, r3, #1
200005ac:	61e2      	str	r2, [r4, #28]
            start_time();
200005ae:	f002 fbe7 	bl	20002d80 <start_time>
            iterate(&results[0]);
200005b2:	0020      	movs	r0, r4
200005b4:	f7ff fd24 	bl	20000000 <iterate>
            stop_time();
200005b8:	f002 fbea 	bl	20002d90 <stop_time>
            secs_passed = time_in_secs(get_time());
200005bc:	f002 fbf0 	bl	20002da0 <get_time>
200005c0:	f002 fbf8 	bl	20002db4 <time_in_secs>
        while (secs_passed < (secs_ret)1)
200005c4:	2800      	cmp	r0, #0
200005c6:	d0ed      	beq.n	200005a4 <coremark_main+0x100>
        }
        /* now we know it executes for at least 1 sec, set actual run time at about 10 secs */
        divisor = (ee_u32)secs_passed;
        if (divisor == 0) /* some machines cast float to int as 0 since this conversion is not defined by ANSI, but we know at least one second passed */
            divisor = 1;
        results[0].iterations *= 1 + 10 / divisor;
200005c8:	0001      	movs	r1, r0
200005ca:	200a      	movs	r0, #10
200005cc:	f003 fb34 	bl	20003c38 <____aeabi_uidiv_veneer>
200005d0:	69e6      	ldr	r6, [r4, #28]
200005d2:	3001      	adds	r0, #1
200005d4:	4370      	muls	r0, r6
200005d6:	61e0      	str	r0, [r4, #28]
    }
    /* perform actual benchmark */
    start_time();
200005d8:	f002 fbd2 	bl	20002d80 <start_time>
    for (i = 0 ; i < default_num_contexts; i++)
    {
        core_stop_parallel(&results[i]);
    }
#else
    iterate(&results[0]);
200005dc:	0020      	movs	r0, r4
200005de:	f7ff fd0f 	bl	20000000 <iterate>
#endif
    stop_time();
200005e2:	f002 fbd5 	bl	20002d90 <stop_time>
    total_time = get_time();
200005e6:	f002 fbdb 	bl	20002da0 <get_time>
    /* get a function of the input to report */
    seedcrc = crc16(results[0].seed1, seedcrc);
200005ea:	2100      	movs	r1, #0
    total_time = get_time();
200005ec:	4683      	mov	fp, r0
    seedcrc = crc16(results[0].seed1, seedcrc);
200005ee:	2300      	movs	r3, #0
200005f0:	5ee0      	ldrsh	r0, [r4, r3]
200005f2:	f002 fb41 	bl	20002c78 <crc16>
200005f6:	0001      	movs	r1, r0
    seedcrc = crc16(results[0].seed2, seedcrc);
200005f8:	2302      	movs	r3, #2
200005fa:	5ee0      	ldrsh	r0, [r4, r3]
200005fc:	f002 fb3c 	bl	20002c78 <crc16>
20000600:	0001      	movs	r1, r0
    seedcrc = crc16(results[0].seed3, seedcrc);
20000602:	2304      	movs	r3, #4
20000604:	5ee0      	ldrsh	r0, [r4, r3]
20000606:	f002 fb37 	bl	20002c78 <crc16>
2000060a:	0001      	movs	r1, r0
    seedcrc = crc16(results[0].size, seedcrc);
2000060c:	2318      	movs	r3, #24
2000060e:	5ee0      	ldrsh	r0, [r4, r3]
20000610:	f002 fb32 	bl	20002c78 <crc16>

    switch (seedcrc)   /* test known output for common seeds */
20000614:	4dc9      	ldr	r5, [pc, #804]	; (2000093c <coremark_main+0x498>)
    seedcrc = crc16(results[0].size, seedcrc);
20000616:	9001      	str	r0, [sp, #4]
    switch (seedcrc)   /* test known output for common seeds */
20000618:	42a8      	cmp	r0, r5
2000061a:	d100      	bne.n	2000061e <coremark_main+0x17a>
2000061c:	e182      	b.n	20000924 <coremark_main+0x480>
2000061e:	d900      	bls.n	20000622 <coremark_main+0x17e>
20000620:	e078      	b.n	20000714 <coremark_main+0x270>
20000622:	49c7      	ldr	r1, [pc, #796]	; (20000940 <coremark_main+0x49c>)
20000624:	4288      	cmp	r0, r1
20000626:	d100      	bne.n	2000062a <coremark_main+0x186>
20000628:	e182      	b.n	20000930 <coremark_main+0x48c>
2000062a:	4ac6      	ldr	r2, [pc, #792]	; (20000944 <coremark_main+0x4a0>)
2000062c:	4290      	cmp	r0, r2
2000062e:	d000      	beq.n	20000632 <coremark_main+0x18e>
20000630:	e1d4      	b.n	200009dc <coremark_main+0x538>
    case 0x7b05: /*  seed1=0x3415, seed2=0x3415, seed3=0x66, size 2000 per algorithm */
        known_id = 1;
        ee_printf("6k validation run parameters for coremark.\n");
        break;
    case 0x4eaf: /* seed1=0x8, seed2=0x8, seed3=0x8, size 400 per algorithm */
        known_id = 2;
20000632:	2602      	movs	r6, #2
        ee_printf("Profile generation run parameters for coremark.\n");
20000634:	48c4      	ldr	r0, [pc, #784]	; (20000948 <coremark_main+0x4a4>)
20000636:	f002 fd3f 	bl	200030b8 <ee_printf>
        known_id = 2;
2000063a:	46b2      	mov	sl, r6
        total_errors = -1;
        break;
    }
    if (known_id >= 0)
    {
        for (i = 0 ; i < default_num_contexts; i++)
2000063c:	4dc3      	ldr	r5, [pc, #780]	; (2000094c <coremark_main+0x4a8>)
2000063e:	2700      	movs	r7, #0
20000640:	6828      	ldr	r0, [r5, #0]
20000642:	46a9      	mov	r9, r5
20000644:	2600      	movs	r6, #0
20000646:	2800      	cmp	r0, #0
20000648:	d119      	bne.n	2000067e <coremark_main+0x1da>
2000064a:	e072      	b.n	20000732 <coremark_main+0x28e>
            {
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n", i, results[i].crcmatrix, matrix_known_crc[known_id]);
                results[i].err++;
            }
            if ((results[i].execs & ID_STATE) &&
                    (results[i].crcstate != state_known_crc[known_id]))
2000064c:	4653      	mov	r3, sl
2000064e:	48c0      	ldr	r0, [pc, #768]	; (20000950 <coremark_main+0x4ac>)
20000650:	0059      	lsls	r1, r3, #1
20000652:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
20000654:	5a0b      	ldrh	r3, [r1, r0]
            if ((results[i].execs & ID_STATE) &&
20000656:	429a      	cmp	r2, r3
20000658:	d04c      	beq.n	200006f4 <coremark_main+0x250>
            {
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n", i, results[i].crcstate, state_known_crc[known_id]);
                results[i].err++;
2000065a:	3540      	adds	r5, #64	; 0x40
                ee_printf("[%u]ERROR! state crc 0x%04x - should be 0x%04x\n", i, results[i].crcstate, state_known_crc[known_id]);
2000065c:	0031      	movs	r1, r6
2000065e:	48bd      	ldr	r0, [pc, #756]	; (20000954 <coremark_main+0x4b0>)
20000660:	f002 fd2a 	bl	200030b8 <ee_printf>
                results[i].err++;
20000664:	882a      	ldrh	r2, [r5, #0]
20000666:	3201      	adds	r2, #1
20000668:	b293      	uxth	r3, r2
2000066a:	802b      	strh	r3, [r5, #0]
        for (i = 0 ; i < default_num_contexts; i++)
2000066c:	4649      	mov	r1, r9
2000066e:	3601      	adds	r6, #1
20000670:	6808      	ldr	r0, [r1, #0]
            }
            total_errors += results[i].err;
20000672:	19df      	adds	r7, r3, r7
        for (i = 0 ; i < default_num_contexts; i++)
20000674:	b2b6      	uxth	r6, r6
            total_errors += results[i].err;
20000676:	b2bd      	uxth	r5, r7
20000678:	b23f      	sxth	r7, r7
        for (i = 0 ; i < default_num_contexts; i++)
2000067a:	4286      	cmp	r6, r0
2000067c:	d25a      	bcs.n	20000734 <coremark_main+0x290>
            results[i].err = 0;
2000067e:	2240      	movs	r2, #64	; 0x40
20000680:	4690      	mov	r8, r2
20000682:	0135      	lsls	r5, r6, #4
20000684:	19a9      	adds	r1, r5, r6
20000686:	008b      	lsls	r3, r1, #2
20000688:	18e0      	adds	r0, r4, r3
2000068a:	4480      	add	r8, r0
2000068c:	2300      	movs	r3, #0
2000068e:	4641      	mov	r1, r8
            if ((results[i].execs & ID_LIST) &&
20000690:	6a02      	ldr	r2, [r0, #32]
            results[i].err = 0;
20000692:	800b      	strh	r3, [r1, #0]
            if ((results[i].execs & ID_LIST) &&
20000694:	07d2      	lsls	r2, r2, #31
20000696:	d50e      	bpl.n	200006b6 <coremark_main+0x212>
                    (results[i].crclist != list_known_crc[known_id]))
20000698:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
2000069a:	4650      	mov	r0, sl
2000069c:	49ae      	ldr	r1, [pc, #696]	; (20000958 <coremark_main+0x4b4>)
2000069e:	0043      	lsls	r3, r0, #1
200006a0:	5a5b      	ldrh	r3, [r3, r1]
            if ((results[i].execs & ID_LIST) &&
200006a2:	429a      	cmp	r2, r3
200006a4:	d007      	beq.n	200006b6 <coremark_main+0x212>
                ee_printf("[%u]ERROR! list crc 0x%04x - should be 0x%04x\n", i, results[i].crclist, list_known_crc[known_id]);
200006a6:	0031      	movs	r1, r6
200006a8:	48ac      	ldr	r0, [pc, #688]	; (2000095c <coremark_main+0x4b8>)
200006aa:	f002 fd05 	bl	200030b8 <ee_printf>
                results[i].err++;
200006ae:	4642      	mov	r2, r8
200006b0:	8810      	ldrh	r0, [r2, #0]
200006b2:	3001      	adds	r0, #1
200006b4:	8010      	strh	r0, [r2, #0]
            if ((results[i].execs & ID_MATRIX) &&
200006b6:	19a9      	adds	r1, r5, r6
200006b8:	008a      	lsls	r2, r1, #2
200006ba:	4690      	mov	r8, r2
200006bc:	44a0      	add	r8, r4
200006be:	4640      	mov	r0, r8
200006c0:	6a01      	ldr	r1, [r0, #32]
200006c2:	078b      	lsls	r3, r1, #30
200006c4:	d511      	bpl.n	200006ea <coremark_main+0x246>
                    (results[i].crcmatrix != matrix_known_crc[known_id]))
200006c6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
200006c8:	4650      	mov	r0, sl
200006ca:	0043      	lsls	r3, r0, #1
200006cc:	48a4      	ldr	r0, [pc, #656]	; (20000960 <coremark_main+0x4bc>)
200006ce:	5a1b      	ldrh	r3, [r3, r0]
            if ((results[i].execs & ID_MATRIX) &&
200006d0:	429a      	cmp	r2, r3
200006d2:	d00a      	beq.n	200006ea <coremark_main+0x246>
                ee_printf("[%u]ERROR! matrix crc 0x%04x - should be 0x%04x\n", i, results[i].crcmatrix, matrix_known_crc[known_id]);
200006d4:	0031      	movs	r1, r6
200006d6:	48a3      	ldr	r0, [pc, #652]	; (20000964 <coremark_main+0x4c0>)
200006d8:	f002 fcee 	bl	200030b8 <ee_printf>
                results[i].err++;
200006dc:	4641      	mov	r1, r8
            if ((results[i].execs & ID_STATE) &&
200006de:	4643      	mov	r3, r8
                results[i].err++;
200006e0:	3140      	adds	r1, #64	; 0x40
200006e2:	880a      	ldrh	r2, [r1, #0]
200006e4:	3201      	adds	r2, #1
200006e6:	800a      	strh	r2, [r1, #0]
            if ((results[i].execs & ID_STATE) &&
200006e8:	6a19      	ldr	r1, [r3, #32]
                    (results[i].crcstate != state_known_crc[known_id]))
200006ea:	19ad      	adds	r5, r5, r6
200006ec:	00a8      	lsls	r0, r5, #2
200006ee:	1825      	adds	r5, r4, r0
            if ((results[i].execs & ID_STATE) &&
200006f0:	074b      	lsls	r3, r1, #29
200006f2:	d4ab      	bmi.n	2000064c <coremark_main+0x1a8>
            total_errors += results[i].err;
200006f4:	3540      	adds	r5, #64	; 0x40
200006f6:	882b      	ldrh	r3, [r5, #0]
200006f8:	e7b8      	b.n	2000066c <coremark_main+0x1c8>
            core_init_matrix(results[0].size, results[i].memblock[2], (ee_s32)results[i].seed1 | (((ee_s32)results[i].seed2) << 16), &(results[i].mat));
200006fa:	2302      	movs	r3, #2
200006fc:	5ee5      	ldrsh	r5, [r4, r3]
200006fe:	2100      	movs	r1, #0
20000700:	5e67      	ldrsh	r7, [r4, r1]
20000702:	042a      	lsls	r2, r5, #16
20000704:	6921      	ldr	r1, [r4, #16]
20000706:	69a0      	ldr	r0, [r4, #24]
20000708:	433a      	orrs	r2, r7
2000070a:	ab0f      	add	r3, sp, #60	; 0x3c
2000070c:	f000 fd10 	bl	20001130 <core_init_matrix>
        if (results[i].execs & ID_STATE)
20000710:	6a25      	ldr	r5, [r4, #32]
20000712:	e739      	b.n	20000588 <coremark_main+0xe4>
    switch (seedcrc)   /* test known output for common seeds */
20000714:	4b94      	ldr	r3, [pc, #592]	; (20000968 <coremark_main+0x4c4>)
20000716:	9a01      	ldr	r2, [sp, #4]
20000718:	429a      	cmp	r2, r3
2000071a:	d100      	bne.n	2000071e <coremark_main+0x27a>
2000071c:	e158      	b.n	200009d0 <coremark_main+0x52c>
2000071e:	4d93      	ldr	r5, [pc, #588]	; (2000096c <coremark_main+0x4c8>)
20000720:	42aa      	cmp	r2, r5
20000722:	d000      	beq.n	20000726 <coremark_main+0x282>
20000724:	e15a      	b.n	200009dc <coremark_main+0x538>
        ee_printf("2K performance run parameters for coremark.\n");
20000726:	4892      	ldr	r0, [pc, #584]	; (20000970 <coremark_main+0x4cc>)
20000728:	f002 fcc6 	bl	200030b8 <ee_printf>
        known_id = 3;
2000072c:	2003      	movs	r0, #3
2000072e:	4682      	mov	sl, r0
20000730:	e784      	b.n	2000063c <coremark_main+0x198>
        for (i = 0 ; i < default_num_contexts; i++)
20000732:	2500      	movs	r5, #0
        }
    }
    total_errors += check_data_types();
20000734:	f002 fb1a 	bl	20002d6c <check_data_types>
    /* and report results */
    ee_printf("CoreMark Size    : %lu\n", (ee_u32)results[0].size);
20000738:	69a1      	ldr	r1, [r4, #24]
    total_errors += check_data_types();
2000073a:	182d      	adds	r5, r5, r0
    ee_printf("CoreMark Size    : %lu\n", (ee_u32)results[0].size);
2000073c:	488d      	ldr	r0, [pc, #564]	; (20000974 <coremark_main+0x4d0>)
2000073e:	f002 fcbb 	bl	200030b8 <ee_printf>
    ee_printf("Total ticks      : %lu\n", (ee_u32)total_time);
20000742:	4659      	mov	r1, fp
20000744:	488c      	ldr	r0, [pc, #560]	; (20000978 <coremark_main+0x4d4>)
20000746:	f002 fcb7 	bl	200030b8 <ee_printf>
#if HAS_FLOAT
    ee_printf("Total time (secs): %f\n", time_in_secs(total_time));
    if (time_in_secs(total_time) > 0)
        ee_printf("Iterations/Sec   : %f\n", default_num_contexts * results[0].iterations / time_in_secs(total_time));
#else
    ee_printf("Total time (secs): %d\n", time_in_secs(total_time));
2000074a:	4658      	mov	r0, fp
2000074c:	f002 fb32 	bl	20002db4 <time_in_secs>
20000750:	0001      	movs	r1, r0
20000752:	488a      	ldr	r0, [pc, #552]	; (2000097c <coremark_main+0x4d8>)
20000754:	f002 fcb0 	bl	200030b8 <ee_printf>
    if (time_in_secs(total_time) > 0)
20000758:	4658      	mov	r0, fp
    total_errors += check_data_types();
2000075a:	b2af      	uxth	r7, r5
    if (time_in_secs(total_time) > 0)
2000075c:	f002 fb2a 	bl	20002db4 <time_in_secs>
20000760:	2800      	cmp	r0, #0
20000762:	d000      	beq.n	20000766 <coremark_main+0x2c2>
20000764:	e0ce      	b.n	20000904 <coremark_main+0x460>
        ee_printf("Iterations/Sec   : %d\n", default_num_contexts * results[0].iterations / time_in_secs(total_time));
#endif
    if (time_in_secs(total_time) < 10)
20000766:	4658      	mov	r0, fp
20000768:	f002 fb24 	bl	20002db4 <time_in_secs>
2000076c:	2809      	cmp	r0, #9
2000076e:	d800      	bhi.n	20000772 <coremark_main+0x2ce>
20000770:	e0af      	b.n	200008d2 <coremark_main+0x42e>
    {
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
        total_errors++;
    }

    ee_printf("Iterations       : %lu\n", (ee_u32)default_num_contexts * results[0].iterations);
20000772:	4649      	mov	r1, r9
20000774:	69e0      	ldr	r0, [r4, #28]
20000776:	6809      	ldr	r1, [r1, #0]
        total_errors++;
20000778:	b23d      	sxth	r5, r7
    ee_printf("Iterations       : %lu\n", (ee_u32)default_num_contexts * results[0].iterations);
2000077a:	4341      	muls	r1, r0
2000077c:	4880      	ldr	r0, [pc, #512]	; (20000980 <coremark_main+0x4dc>)
2000077e:	f002 fc9b 	bl	200030b8 <ee_printf>
    ee_printf("Compiler version : %s\n", COMPILER_VERSION);
20000782:	4980      	ldr	r1, [pc, #512]	; (20000984 <coremark_main+0x4e0>)
20000784:	4880      	ldr	r0, [pc, #512]	; (20000988 <coremark_main+0x4e4>)
20000786:	f002 fc97 	bl	200030b8 <ee_printf>
    ee_printf("Compiler flags   : %s\n", COMPILER_FLAGS);
2000078a:	4980      	ldr	r1, [pc, #512]	; (2000098c <coremark_main+0x4e8>)
2000078c:	4880      	ldr	r0, [pc, #512]	; (20000990 <coremark_main+0x4ec>)
2000078e:	f002 fc93 	bl	200030b8 <ee_printf>
#if (MULTITHREAD>1)
    ee_printf("Parallel %s : %d\n", PARALLEL_METHOD, default_num_contexts);
#endif
    ee_printf("Memory location  : %s\n", MEM_LOCATION);
20000792:	4980      	ldr	r1, [pc, #512]	; (20000994 <coremark_main+0x4f0>)
20000794:	4880      	ldr	r0, [pc, #512]	; (20000998 <coremark_main+0x4f4>)
20000796:	f002 fc8f 	bl	200030b8 <ee_printf>
    /* output for verification */
    ee_printf("seedcrc          : 0x%04x\n", seedcrc);
2000079a:	9901      	ldr	r1, [sp, #4]
2000079c:	487f      	ldr	r0, [pc, #508]	; (2000099c <coremark_main+0x4f8>)
2000079e:	f002 fc8b 	bl	200030b8 <ee_printf>
    if (results[0].execs & ID_LIST)
200007a2:	6a20      	ldr	r0, [r4, #32]
200007a4:	07c3      	lsls	r3, r0, #31
200007a6:	d400      	bmi.n	200007aa <coremark_main+0x306>
200007a8:	e074      	b.n	20000894 <coremark_main+0x3f0>
        for (i = 0 ; i < default_num_contexts; i++)
200007aa:	464a      	mov	r2, r9
200007ac:	6816      	ldr	r6, [r2, #0]
200007ae:	2e00      	cmp	r6, #0
200007b0:	d05a      	beq.n	20000868 <coremark_main+0x3c4>
200007b2:	46aa      	mov	sl, r5
200007b4:	2600      	movs	r6, #0
200007b6:	464d      	mov	r5, r9
200007b8:	4f79      	ldr	r7, [pc, #484]	; (200009a0 <coremark_main+0x4fc>)
            ee_printf("[%d]crclist       : 0x%04x\n", i, results[i].crclist);
200007ba:	0133      	lsls	r3, r6, #4
200007bc:	1999      	adds	r1, r3, r6
200007be:	0088      	lsls	r0, r1, #2
200007c0:	1822      	adds	r2, r4, r0
200007c2:	0031      	movs	r1, r6
200007c4:	0038      	movs	r0, r7
200007c6:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
200007c8:	f002 fc76 	bl	200030b8 <ee_printf>
        for (i = 0 ; i < default_num_contexts; i++)
200007cc:	3601      	adds	r6, #1
200007ce:	682b      	ldr	r3, [r5, #0]
200007d0:	b2b6      	uxth	r6, r6
200007d2:	429e      	cmp	r6, r3
200007d4:	d3f1      	bcc.n	200007ba <coremark_main+0x316>
    if (results[0].execs & ID_MATRIX)
200007d6:	6a20      	ldr	r0, [r4, #32]
200007d8:	46a9      	mov	r9, r5
200007da:	4655      	mov	r5, sl
200007dc:	0781      	lsls	r1, r0, #30
200007de:	d516      	bpl.n	2000080e <coremark_main+0x36a>
        for (i = 0 ; i < default_num_contexts; i++)
200007e0:	2b00      	cmp	r3, #0
200007e2:	d041      	beq.n	20000868 <coremark_main+0x3c4>
200007e4:	46ab      	mov	fp, r5
200007e6:	2600      	movs	r6, #0
200007e8:	464d      	mov	r5, r9
200007ea:	4f6e      	ldr	r7, [pc, #440]	; (200009a4 <coremark_main+0x500>)
            ee_printf("[%d]crcmatrix     : 0x%04x\n", i, results[i].crcmatrix);
200007ec:	0133      	lsls	r3, r6, #4
200007ee:	1999      	adds	r1, r3, r6
200007f0:	0088      	lsls	r0, r1, #2
200007f2:	1822      	adds	r2, r4, r0
200007f4:	0031      	movs	r1, r6
200007f6:	0038      	movs	r0, r7
200007f8:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
200007fa:	f002 fc5d 	bl	200030b8 <ee_printf>
        for (i = 0 ; i < default_num_contexts; i++)
200007fe:	3601      	adds	r6, #1
20000800:	682b      	ldr	r3, [r5, #0]
20000802:	b2b6      	uxth	r6, r6
20000804:	429e      	cmp	r6, r3
20000806:	d3f1      	bcc.n	200007ec <coremark_main+0x348>
    if (results[0].execs & ID_STATE)
20000808:	46a9      	mov	r9, r5
2000080a:	465d      	mov	r5, fp
2000080c:	6a20      	ldr	r0, [r4, #32]
2000080e:	0742      	lsls	r2, r0, #29
20000810:	d515      	bpl.n	2000083e <coremark_main+0x39a>
        for (i = 0 ; i < default_num_contexts; i++)
20000812:	2b00      	cmp	r3, #0
20000814:	d028      	beq.n	20000868 <coremark_main+0x3c4>
20000816:	46a8      	mov	r8, r5
20000818:	2600      	movs	r6, #0
2000081a:	464d      	mov	r5, r9
2000081c:	4f62      	ldr	r7, [pc, #392]	; (200009a8 <coremark_main+0x504>)
            ee_printf("[%d]crcstate      : 0x%04x\n", i, results[i].crcstate);
2000081e:	0133      	lsls	r3, r6, #4
20000820:	1999      	adds	r1, r3, r6
20000822:	008a      	lsls	r2, r1, #2
20000824:	18a0      	adds	r0, r4, r2
20000826:	0031      	movs	r1, r6
20000828:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
2000082a:	0038      	movs	r0, r7
2000082c:	f002 fc44 	bl	200030b8 <ee_printf>
        for (i = 0 ; i < default_num_contexts; i++)
20000830:	3601      	adds	r6, #1
20000832:	682b      	ldr	r3, [r5, #0]
20000834:	b2b6      	uxth	r6, r6
20000836:	429e      	cmp	r6, r3
20000838:	d3f1      	bcc.n	2000081e <coremark_main+0x37a>
2000083a:	46a9      	mov	r9, r5
2000083c:	4645      	mov	r5, r8
    for (i = 0 ; i < default_num_contexts; i++)
2000083e:	2b00      	cmp	r3, #0
20000840:	d012      	beq.n	20000868 <coremark_main+0x3c4>
20000842:	46aa      	mov	sl, r5
20000844:	2600      	movs	r6, #0
20000846:	464d      	mov	r5, r9
20000848:	4f58      	ldr	r7, [pc, #352]	; (200009ac <coremark_main+0x508>)
        ee_printf("[%d]crcfinal      : 0x%04x\n", i, results[i].crc);
2000084a:	0131      	lsls	r1, r6, #4
2000084c:	198a      	adds	r2, r1, r6
2000084e:	0090      	lsls	r0, r2, #2
20000850:	1823      	adds	r3, r4, r0
20000852:	0031      	movs	r1, r6
20000854:	0038      	movs	r0, r7
20000856:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
20000858:	f002 fc2e 	bl	200030b8 <ee_printf>
    for (i = 0 ; i < default_num_contexts; i++)
2000085c:	3601      	adds	r6, #1
2000085e:	6829      	ldr	r1, [r5, #0]
20000860:	b2b6      	uxth	r6, r6
20000862:	428e      	cmp	r6, r1
20000864:	d3f1      	bcc.n	2000084a <coremark_main+0x3a6>
20000866:	4655      	mov	r5, sl
    if (total_errors == 0)
20000868:	2d00      	cmp	r5, #0
2000086a:	d02e      	beq.n	200008ca <coremark_main+0x426>
#endif
            ee_printf("\n");
        }
#endif
    }
    if (total_errors > 0)
2000086c:	dd29      	ble.n	200008c2 <coremark_main+0x41e>
        ee_printf("Errors detected\n");
2000086e:	4850      	ldr	r0, [pc, #320]	; (200009b0 <coremark_main+0x50c>)
20000870:	f002 fc22 	bl	200030b8 <ee_printf>
    if (total_errors < 0)
        ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");

#if (MEM_METHOD==MEM_MALLOC)
    for (i = 0 ; i < MULTITHREAD; i++)
        portable_free(results[i].memblock[0]);
20000874:	68a0      	ldr	r0, [r4, #8]
#endif
    /* And last call any target specific code for finalizing */
    portable_fini(&(results[0].port));
20000876:	ac02      	add	r4, sp, #8
        portable_free(results[i].memblock[0]);
20000878:	f002 fa7e 	bl	20002d78 <portable_free>
    portable_fini(&(results[0].port));
2000087c:	46a4      	mov	ip, r4
2000087e:	204e      	movs	r0, #78	; 0x4e
20000880:	4460      	add	r0, ip
20000882:	f002 faa1 	bl	20002dc8 <portable_fini>

    return MAIN_RETURN_VAL;
}
20000886:	b017      	add	sp, #92	; 0x5c
20000888:	bcf0      	pop	{r4, r5, r6, r7}
2000088a:	46bb      	mov	fp, r7
2000088c:	46b2      	mov	sl, r6
2000088e:	46a9      	mov	r9, r5
20000890:	46a0      	mov	r8, r4
20000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (i = 0 ; i < default_num_contexts; i++)
20000894:	464f      	mov	r7, r9
20000896:	683b      	ldr	r3, [r7, #0]
    if (results[0].execs & ID_MATRIX)
20000898:	0781      	lsls	r1, r0, #30
2000089a:	d4a1      	bmi.n	200007e0 <coremark_main+0x33c>
    if (results[0].execs & ID_STATE)
2000089c:	0742      	lsls	r2, r0, #29
2000089e:	d4b8      	bmi.n	20000812 <coremark_main+0x36e>
200008a0:	e7cd      	b.n	2000083e <coremark_main+0x39a>
    if ((results[0].seed1 == 1) && (results[0].seed2 == 0) && (results[0].seed3 == 0)) /* perfromance run */
200008a2:	2a01      	cmp	r2, #1
200008a4:	d000      	beq.n	200008a8 <coremark_main+0x404>
200008a6:	e630      	b.n	2000050a <coremark_main+0x66>
200008a8:	2204      	movs	r2, #4
200008aa:	5ea5      	ldrsh	r5, [r4, r2]
200008ac:	2d00      	cmp	r5, #0
200008ae:	d000      	beq.n	200008b2 <coremark_main+0x40e>
200008b0:	e62b      	b.n	2000050a <coremark_main+0x66>
        results[0].seed1 = 0x3415;
200008b2:	4e40      	ldr	r6, [pc, #256]	; (200009b4 <coremark_main+0x510>)
200008b4:	9605      	str	r6, [sp, #20]
        results[0].seed3 = 0x66;
200008b6:	2366      	movs	r3, #102	; 0x66
200008b8:	80a3      	strh	r3, [r4, #4]
200008ba:	e626      	b.n	2000050a <coremark_main+0x66>
        results[0].execs = ALL_ALGORITHMS_MASK;
200008bc:	2107      	movs	r1, #7
200008be:	6221      	str	r1, [r4, #32]
200008c0:	e61a      	b.n	200004f8 <coremark_main+0x54>
        ee_printf("Cannot validate operation for these seed values, please compare with results on a known platform.\n");
200008c2:	483d      	ldr	r0, [pc, #244]	; (200009b8 <coremark_main+0x514>)
200008c4:	f002 fbf8 	bl	200030b8 <ee_printf>
200008c8:	e7d4      	b.n	20000874 <coremark_main+0x3d0>
        ee_printf("Correct operation validated. See readme.txt for run and reporting rules.\n");
200008ca:	483c      	ldr	r0, [pc, #240]	; (200009bc <coremark_main+0x518>)
200008cc:	f002 fbf4 	bl	200030b8 <ee_printf>
    if (total_errors < 0)
200008d0:	e7d0      	b.n	20000874 <coremark_main+0x3d0>
        ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
200008d2:	483b      	ldr	r0, [pc, #236]	; (200009c0 <coremark_main+0x51c>)
200008d4:	f002 fbf0 	bl	200030b8 <ee_printf>
        total_errors++;
200008d8:	3701      	adds	r7, #1
200008da:	e74a      	b.n	20000772 <coremark_main+0x2ce>
        if ((1 << (ee_u32)i) & results[0].execs)
200008dc:	4641      	mov	r1, r8
                results[ctx].memblock[i + 1] = (char *)(results[ctx].memblock[0]) + results[0].size * j;
200008de:	60e6      	str	r6, [r4, #12]
            j++;
200008e0:	3301      	adds	r3, #1
        if ((1 << (ee_u32)i) & results[0].execs)
200008e2:	2900      	cmp	r1, #0
200008e4:	d100      	bne.n	200008e8 <coremark_main+0x444>
200008e6:	e63f      	b.n	20000568 <coremark_main+0xc4>
                results[ctx].memblock[i + 1] = (char *)(results[ctx].memblock[0]) + results[0].size * j;
200008e8:	0002      	movs	r2, r0
200008ea:	435a      	muls	r2, r3
200008ec:	18b1      	adds	r1, r6, r2
        if ((1 << (ee_u32)i) & results[0].execs)
200008ee:	464a      	mov	r2, r9
            j++;
200008f0:	3301      	adds	r3, #1
                results[ctx].memblock[i + 1] = (char *)(results[ctx].memblock[0]) + results[0].size * j;
200008f2:	6121      	str	r1, [r4, #16]
            j++;
200008f4:	b29b      	uxth	r3, r3
        if ((1 << (ee_u32)i) & results[0].execs)
200008f6:	2a00      	cmp	r2, #0
200008f8:	d100      	bne.n	200008fc <coremark_main+0x458>
200008fa:	e639      	b.n	20000570 <coremark_main+0xcc>
                results[ctx].memblock[i + 1] = (char *)(results[ctx].memblock[0]) + results[0].size * j;
200008fc:	4343      	muls	r3, r0
200008fe:	18f6      	adds	r6, r6, r3
20000900:	6166      	str	r6, [r4, #20]
            j++;
20000902:	e635      	b.n	20000570 <coremark_main+0xcc>
        ee_printf("Iterations/Sec   : %d\n", default_num_contexts * results[0].iterations / time_in_secs(total_time));
20000904:	464a      	mov	r2, r9
20000906:	69e3      	ldr	r3, [r4, #28]
20000908:	6816      	ldr	r6, [r2, #0]
2000090a:	4658      	mov	r0, fp
2000090c:	435e      	muls	r6, r3
2000090e:	f002 fa51 	bl	20002db4 <time_in_secs>
20000912:	0001      	movs	r1, r0
20000914:	0030      	movs	r0, r6
20000916:	f003 f98f 	bl	20003c38 <____aeabi_uidiv_veneer>
2000091a:	0001      	movs	r1, r0
2000091c:	4829      	ldr	r0, [pc, #164]	; (200009c4 <coremark_main+0x520>)
2000091e:	f002 fbcb 	bl	200030b8 <ee_printf>
20000922:	e720      	b.n	20000766 <coremark_main+0x2c2>
        ee_printf("6k validation run parameters for coremark.\n");
20000924:	4828      	ldr	r0, [pc, #160]	; (200009c8 <coremark_main+0x524>)
20000926:	f002 fbc7 	bl	200030b8 <ee_printf>
        known_id = 1;
2000092a:	2101      	movs	r1, #1
2000092c:	468a      	mov	sl, r1
2000092e:	e685      	b.n	2000063c <coremark_main+0x198>
        ee_printf("2K validation run parameters for coremark.\n");
20000930:	4826      	ldr	r0, [pc, #152]	; (200009cc <coremark_main+0x528>)
20000932:	f002 fbc1 	bl	200030b8 <ee_printf>
        known_id = 4;
20000936:	2304      	movs	r3, #4
20000938:	469a      	mov	sl, r3
2000093a:	e67f      	b.n	2000063c <coremark_main+0x198>
2000093c:	00007b05 	.word	0x00007b05
20000940:	000018f2 	.word	0x000018f2
20000944:	00004eaf 	.word	0x00004eaf
20000948:	200000f8 	.word	0x200000f8
2000094c:	20002dd0 	.word	0x20002dd0
20000950:	20000a08 	.word	0x20000a08
20000954:	200001ec 	.word	0x200001ec
20000958:	200009f0 	.word	0x200009f0
2000095c:	20000188 	.word	0x20000188
20000960:	200009fc 	.word	0x200009fc
20000964:	200001b8 	.word	0x200001b8
20000968:	00008a02 	.word	0x00008a02
2000096c:	0000e9f5 	.word	0x0000e9f5
20000970:	2000012c 	.word	0x2000012c
20000974:	2000021c 	.word	0x2000021c
20000978:	20000234 	.word	0x20000234
2000097c:	2000024c 	.word	0x2000024c
20000980:	200002bc 	.word	0x200002bc
20000984:	200002d4 	.word	0x200002d4
20000988:	200002f4 	.word	0x200002f4
2000098c:	2000030c 	.word	0x2000030c
20000990:	2000031c 	.word	0x2000031c
20000994:	20000334 	.word	0x20000334
20000998:	2000033c 	.word	0x2000033c
2000099c:	20000354 	.word	0x20000354
200009a0:	20000370 	.word	0x20000370
200009a4:	2000038c 	.word	0x2000038c
200009a8:	200003a8 	.word	0x200003a8
200009ac:	200003c4 	.word	0x200003c4
200009b0:	2000042c 	.word	0x2000042c
200009b4:	34153415 	.word	0x34153415
200009b8:	20000440 	.word	0x20000440
200009bc:	200003e0 	.word	0x200003e0
200009c0:	2000027c 	.word	0x2000027c
200009c4:	20000264 	.word	0x20000264
200009c8:	200000cc 	.word	0x200000cc
200009cc:	2000015c 	.word	0x2000015c
        known_id = 0;
200009d0:	2700      	movs	r7, #0
        ee_printf("6k performance run parameters for coremark.\n");
200009d2:	4804      	ldr	r0, [pc, #16]	; (200009e4 <coremark_main+0x540>)
200009d4:	f002 fb70 	bl	200030b8 <ee_printf>
        known_id = 0;
200009d8:	46ba      	mov	sl, r7
200009da:	e62f      	b.n	2000063c <coremark_main+0x198>
200009dc:	4e02      	ldr	r6, [pc, #8]	; (200009e8 <coremark_main+0x544>)
    switch (seedcrc)   /* test known output for common seeds */
200009de:	4d03      	ldr	r5, [pc, #12]	; (200009ec <coremark_main+0x548>)
200009e0:	46b1      	mov	r9, r6
200009e2:	e6a7      	b.n	20000734 <coremark_main+0x290>
200009e4:	2000009c 	.word	0x2000009c
200009e8:	20002dd0 	.word	0x20002dd0
200009ec:	0000ffff 	.word	0x0000ffff

200009f0 <list_known_crc>:
200009f0:	3340d4b0 e7146a79 0000e3c1              ..@3yj......

200009fc <matrix_known_crc>:
200009fc:	1199be52 1fd75608 00000747              R....V..G...

20000a08 <state_known_crc>:
20000a08:	39bf5e47 8e3ae5a4 00008d84              G^.9..:.....

20000a14 <cmp_idx>:
    Compare the idx item in a list cell, and regen the data.

    Can be used by mergesort.
*/
ee_s32 cmp_idx(list_data *a, list_data *b, core_results *res)
{
20000a14:	b510      	push	{r4, lr}
    if (res == NULL)
20000a16:	2a00      	cmp	r2, #0
20000a18:	d005      	beq.n	20000a26 <cmp_idx+0x12>
    {
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
    }
    return a->idx - b->idx;
20000a1a:	2302      	movs	r3, #2
20000a1c:	5ec0      	ldrsh	r0, [r0, r3]
20000a1e:	2202      	movs	r2, #2
20000a20:	5e89      	ldrsh	r1, [r1, r2]
20000a22:	1a40      	subs	r0, r0, r1
}
20000a24:	bd10      	pop	{r4, pc}
        a->data16 = (a->data16 & 0xff00) | (0x00ff & (a->data16 >> 8));
20000a26:	2200      	movs	r2, #0
20000a28:	5e83      	ldrsh	r3, [r0, r2]
20000a2a:	24ff      	movs	r4, #255	; 0xff
20000a2c:	001a      	movs	r2, r3
20000a2e:	b29b      	uxth	r3, r3
20000a30:	43a2      	bics	r2, r4
20000a32:	0a1b      	lsrs	r3, r3, #8
20000a34:	4313      	orrs	r3, r2
20000a36:	8003      	strh	r3, [r0, #0]
        b->data16 = (b->data16 & 0xff00) | (0x00ff & (b->data16 >> 8));
20000a38:	2200      	movs	r2, #0
20000a3a:	5e8b      	ldrsh	r3, [r1, r2]
20000a3c:	001a      	movs	r2, r3
20000a3e:	43a2      	bics	r2, r4
20000a40:	b29c      	uxth	r4, r3
20000a42:	0a23      	lsrs	r3, r4, #8
20000a44:	4313      	orrs	r3, r2
20000a46:	800b      	strh	r3, [r1, #0]
20000a48:	e7e7      	b.n	20000a1a <cmp_idx+0x6>
20000a4a:	46c0      	nop			; (mov r8, r8)

20000a4c <calc_func>:
{
20000a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee_s16 data = *pdata;
20000a4e:	2300      	movs	r3, #0
20000a50:	5ec4      	ldrsh	r4, [r0, r3]
{
20000a52:	0006      	movs	r6, r0
20000a54:	000d      	movs	r5, r1
20000a56:	b083      	sub	sp, #12
    if (optype) /* if cached, use cache */
20000a58:	0623      	lsls	r3, r4, #24
20000a5a:	d503      	bpl.n	20000a64 <calc_func+0x18>
        return (data & 0x007f);
20000a5c:	207f      	movs	r0, #127	; 0x7f
20000a5e:	4020      	ands	r0, r4
}
20000a60:	b003      	add	sp, #12
20000a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
20000a64:	2307      	movs	r3, #7
20000a66:	001a      	movs	r2, r3
        ee_s16 dtype = ((data >> 3) & 0xf); /* bits 3-6 is specific data for the operation */
20000a68:	0661      	lsls	r1, r4, #25
20000a6a:	0f09      	lsrs	r1, r1, #28
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
20000a6c:	0108      	lsls	r0, r1, #4
        ee_s16 flag = data & 0x7; /* bits 0-2 is type of function to perform */
20000a6e:	4022      	ands	r2, r4
        dtype |= dtype << 4; /* replicate the lower 4 bits to get an 8b value */
20000a70:	4301      	orrs	r1, r0
        switch (flag)
20000a72:	4223      	tst	r3, r4
20000a74:	d010      	beq.n	20000a98 <calc_func+0x4c>
20000a76:	2a01      	cmp	r2, #1
20000a78:	d026      	beq.n	20000ac8 <calc_func+0x7c>
        res->crc = crcu16(retval, res->crc);
20000a7a:	0027      	movs	r7, r4
20000a7c:	b2a0      	uxth	r0, r4
20000a7e:	8f29      	ldrh	r1, [r5, #56]	; 0x38
20000a80:	f001 ff7c 	bl	2000297c <crcu16>
20000a84:	8728      	strh	r0, [r5, #56]	; 0x38
        retval &= 0x007f;
20000a86:	207f      	movs	r0, #127	; 0x7f
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
20000a88:	25ff      	movs	r5, #255	; 0xff
20000a8a:	2180      	movs	r1, #128	; 0x80
        retval &= 0x007f;
20000a8c:	4038      	ands	r0, r7
        *pdata = (data & 0xff00) | 0x0080 | retval; /* cache the result */
20000a8e:	43ac      	bics	r4, r5
20000a90:	4304      	orrs	r4, r0
20000a92:	430c      	orrs	r4, r1
20000a94:	8034      	strh	r4, [r6, #0]
        return retval;
20000a96:	e7e3      	b.n	20000a60 <calc_func+0x14>
            retval = core_bench_state(res->size, res->memblock[3], res->seed1, res->seed2, dtype, res->crc);
20000a98:	696f      	ldr	r7, [r5, #20]
20000a9a:	2202      	movs	r2, #2
20000a9c:	5eab      	ldrsh	r3, [r5, r2]
20000a9e:	46bc      	mov	ip, r7
20000aa0:	8f2f      	ldrh	r7, [r5, #56]	; 0x38
20000aa2:	2000      	movs	r0, #0
20000aa4:	5e2a      	ldrsh	r2, [r5, r0]
20000aa6:	69a8      	ldr	r0, [r5, #24]
20000aa8:	9701      	str	r7, [sp, #4]
20000aaa:	1c0f      	adds	r7, r1, #0
20000aac:	2922      	cmp	r1, #34	; 0x22
20000aae:	da00      	bge.n	20000ab2 <calc_func+0x66>
20000ab0:	2722      	movs	r7, #34	; 0x22
20000ab2:	b239      	sxth	r1, r7
20000ab4:	9100      	str	r1, [sp, #0]
20000ab6:	4661      	mov	r1, ip
20000ab8:	f001 fe36 	bl	20002728 <core_bench_state>
            if (res->crcstate == 0)
20000abc:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
            retval = core_bench_state(res->size, res->memblock[3], res->seed1, res->seed2, dtype, res->crc);
20000abe:	b207      	sxth	r7, r0
            if (res->crcstate == 0)
20000ac0:	2b00      	cmp	r3, #0
20000ac2:	d1dc      	bne.n	20000a7e <calc_func+0x32>
                res->crcstate = retval;
20000ac4:	87e8      	strh	r0, [r5, #62]	; 0x3e
20000ac6:	e7da      	b.n	20000a7e <calc_func+0x32>
            retval = core_bench_matrix(&(res->mat), dtype, res->crc);
20000ac8:	0028      	movs	r0, r5
20000aca:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
20000acc:	3028      	adds	r0, #40	; 0x28
20000ace:	f001 fca9 	bl	20002424 <core_bench_matrix>
            if (res->crcmatrix == 0)
20000ad2:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
            retval = core_bench_matrix(&(res->mat), dtype, res->crc);
20000ad4:	b207      	sxth	r7, r0
            if (res->crcmatrix == 0)
20000ad6:	2a00      	cmp	r2, #0
20000ad8:	d1d1      	bne.n	20000a7e <calc_func+0x32>
                res->crcmatrix = retval;
20000ada:	87a8      	strh	r0, [r5, #60]	; 0x3c
20000adc:	e7cf      	b.n	20000a7e <calc_func+0x32>
20000ade:	46c0      	nop			; (mov r8, r8)

20000ae0 <cmp_complex>:
{
20000ae0:	b570      	push	{r4, r5, r6, lr}
20000ae2:	000e      	movs	r6, r1
    ee_s16 val1 = calc_func(&(a->data16), res);
20000ae4:	0011      	movs	r1, r2
{
20000ae6:	0015      	movs	r5, r2
    ee_s16 val1 = calc_func(&(a->data16), res);
20000ae8:	f7ff ffb0 	bl	20000a4c <calc_func>
    ee_s16 val2 = calc_func(&(b->data16), res);
20000aec:	0029      	movs	r1, r5
    ee_s16 val1 = calc_func(&(a->data16), res);
20000aee:	0004      	movs	r4, r0
    ee_s16 val2 = calc_func(&(b->data16), res);
20000af0:	0030      	movs	r0, r6
20000af2:	f7ff ffab 	bl	20000a4c <calc_func>
    return val1 - val2;
20000af6:	1a20      	subs	r0, r4, r0
}
20000af8:	bd70      	pop	{r4, r5, r6, pc}
20000afa:	46c0      	nop			; (mov r8, r8)

20000afc <core_list_mergesort>:
list_head *core_list_mergesort(list_head *list, list_cmp cmp, core_results *res)
{
    list_head *p, *q, *e, *tail;
    ee_s32 insize, nmerges, psize, qsize, i;

    insize = 1;
20000afc:	2301      	movs	r3, #1
{
20000afe:	b5f0      	push	{r4, r5, r6, r7, lr}
20000b00:	46de      	mov	lr, fp
20000b02:	4657      	mov	r7, sl
20000b04:	464e      	mov	r6, r9
20000b06:	4645      	mov	r5, r8
20000b08:	0004      	movs	r4, r0
20000b0a:	4692      	mov	sl, r2
    insize = 1;
20000b0c:	469b      	mov	fp, r3
{
20000b0e:	b5e0      	push	{r5, r6, r7, lr}
20000b10:	b083      	sub	sp, #12
20000b12:	9100      	str	r1, [sp, #0]
        list = NULL;
        tail = NULL;

        nmerges = 0;  /* count number of merges we do in this pass */

        while (p)
20000b14:	2c00      	cmp	r4, #0
20000b16:	d100      	bne.n	20000b1a <core_list_mergesort+0x1e>
20000b18:	e092      	b.n	20000c40 <core_list_mergesort+0x144>
        nmerges = 0;  /* count number of merges we do in this pass */
20000b1a:	2000      	movs	r0, #0
        tail = NULL;
20000b1c:	2500      	movs	r5, #0
        list = NULL;
20000b1e:	4681      	mov	r9, r0
        nmerges = 0;  /* count number of merges we do in this pass */
20000b20:	9001      	str	r0, [sp, #4]
        {
            nmerges++;  /* there exists a merge to be done */
20000b22:	2707      	movs	r7, #7
20000b24:	465a      	mov	r2, fp
20000b26:	4658      	mov	r0, fp
20000b28:	9901      	ldr	r1, [sp, #4]
20000b2a:	0023      	movs	r3, r4
20000b2c:	3101      	adds	r1, #1
            /* step `insize' places along from p */
            q = p;
            psize = 0;
20000b2e:	2600      	movs	r6, #0
            nmerges++;  /* there exists a merge to be done */
20000b30:	9101      	str	r1, [sp, #4]
            for (i = 0; i < insize; i++)
20000b32:	403a      	ands	r2, r7
20000b34:	4207      	tst	r7, r0
20000b36:	d029      	beq.n	20000b8c <core_list_mergesort+0x90>
20000b38:	2a01      	cmp	r2, #1
20000b3a:	d021      	beq.n	20000b80 <core_list_mergesort+0x84>
20000b3c:	2a02      	cmp	r2, #2
20000b3e:	d01b      	beq.n	20000b78 <core_list_mergesort+0x7c>
20000b40:	2a03      	cmp	r2, #3
20000b42:	d015      	beq.n	20000b70 <core_list_mergesort+0x74>
20000b44:	2a04      	cmp	r2, #4
20000b46:	d00f      	beq.n	20000b68 <core_list_mergesort+0x6c>
20000b48:	2a05      	cmp	r2, #5
20000b4a:	d009      	beq.n	20000b60 <core_list_mergesort+0x64>
20000b4c:	2a06      	cmp	r2, #6
20000b4e:	d003      	beq.n	20000b58 <core_list_mergesort+0x5c>
            {
                psize++;
                q = q->next;
20000b50:	6823      	ldr	r3, [r4, #0]
                psize++;
20000b52:	2601      	movs	r6, #1
                if (!q) break;
20000b54:	2b00      	cmp	r3, #0
20000b56:	d03e      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b58:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b5a:	3601      	adds	r6, #1
                if (!q) break;
20000b5c:	2b00      	cmp	r3, #0
20000b5e:	d03a      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b60:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b62:	3601      	adds	r6, #1
                if (!q) break;
20000b64:	2b00      	cmp	r3, #0
20000b66:	d036      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b68:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b6a:	3601      	adds	r6, #1
                if (!q) break;
20000b6c:	2b00      	cmp	r3, #0
20000b6e:	d032      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b70:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b72:	3601      	adds	r6, #1
                if (!q) break;
20000b74:	2b00      	cmp	r3, #0
20000b76:	d02e      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b78:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b7a:	3601      	adds	r6, #1
                if (!q) break;
20000b7c:	2b00      	cmp	r3, #0
20000b7e:	d02a      	beq.n	20000bd6 <core_list_mergesort+0xda>
                q = q->next;
20000b80:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b82:	3601      	adds	r6, #1
                if (!q) break;
20000b84:	2b00      	cmp	r3, #0
20000b86:	d026      	beq.n	20000bd6 <core_list_mergesort+0xda>
            for (i = 0; i < insize; i++)
20000b88:	45b3      	cmp	fp, r6
20000b8a:	d024      	beq.n	20000bd6 <core_list_mergesort+0xda>
20000b8c:	4659      	mov	r1, fp
                q = q->next;
20000b8e:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b90:	3601      	adds	r6, #1
20000b92:	0037      	movs	r7, r6
                if (!q) break;
20000b94:	2b00      	cmp	r3, #0
20000b96:	d01d      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000b98:	681b      	ldr	r3, [r3, #0]
                psize++;
20000b9a:	3601      	adds	r6, #1
                if (!q) break;
20000b9c:	2b00      	cmp	r3, #0
20000b9e:	d019      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000ba0:	681b      	ldr	r3, [r3, #0]
                psize++;
20000ba2:	1cbe      	adds	r6, r7, #2
                if (!q) break;
20000ba4:	2b00      	cmp	r3, #0
20000ba6:	d015      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000ba8:	681b      	ldr	r3, [r3, #0]
                psize++;
20000baa:	1cfe      	adds	r6, r7, #3
                if (!q) break;
20000bac:	2b00      	cmp	r3, #0
20000bae:	d011      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000bb0:	681b      	ldr	r3, [r3, #0]
                psize++;
20000bb2:	1d3e      	adds	r6, r7, #4
                if (!q) break;
20000bb4:	2b00      	cmp	r3, #0
20000bb6:	d00d      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000bb8:	681b      	ldr	r3, [r3, #0]
                psize++;
20000bba:	1d7e      	adds	r6, r7, #5
                if (!q) break;
20000bbc:	2b00      	cmp	r3, #0
20000bbe:	d009      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000bc0:	681b      	ldr	r3, [r3, #0]
                psize++;
20000bc2:	1dbe      	adds	r6, r7, #6
                if (!q) break;
20000bc4:	2b00      	cmp	r3, #0
20000bc6:	d005      	beq.n	20000bd4 <core_list_mergesort+0xd8>
                q = q->next;
20000bc8:	681b      	ldr	r3, [r3, #0]
                psize++;
20000bca:	1dfe      	adds	r6, r7, #7
                if (!q) break;
20000bcc:	2b00      	cmp	r3, #0
20000bce:	d001      	beq.n	20000bd4 <core_list_mergesort+0xd8>
            for (i = 0; i < insize; i++)
20000bd0:	42b1      	cmp	r1, r6
20000bd2:	d1dc      	bne.n	20000b8e <core_list_mergesort+0x92>
20000bd4:	468b      	mov	fp, r1
                {
                    tail->next = e;
                }
                else
                {
                    list = e;
20000bd6:	46a0      	mov	r8, r4
20000bd8:	465f      	mov	r7, fp
20000bda:	001c      	movs	r4, r3
            while (psize > 0 || (qsize > 0 && q))
20000bdc:	2e00      	cmp	r6, #0
20000bde:	d014      	beq.n	20000c0a <core_list_mergesort+0x10e>
                else if (qsize == 0 || !q)
20000be0:	2f00      	cmp	r7, #0
20000be2:	d020      	beq.n	20000c26 <core_list_mergesort+0x12a>
20000be4:	2c00      	cmp	r4, #0
20000be6:	d01e      	beq.n	20000c26 <core_list_mergesort+0x12a>
                else if (cmp(p->info, q->info, res) <= 0)
20000be8:	4643      	mov	r3, r8
20000bea:	4652      	mov	r2, sl
20000bec:	6858      	ldr	r0, [r3, #4]
20000bee:	6861      	ldr	r1, [r4, #4]
20000bf0:	9b00      	ldr	r3, [sp, #0]
20000bf2:	4798      	blx	r3
20000bf4:	2800      	cmp	r0, #0
20000bf6:	dd16      	ble.n	20000c26 <core_list_mergesort+0x12a>
                    qsize--;
20000bf8:	0021      	movs	r1, r4
20000bfa:	3f01      	subs	r7, #1
                    q = q->next;
20000bfc:	6824      	ldr	r4, [r4, #0]
                if (tail)
20000bfe:	2d00      	cmp	r5, #0
20000c00:	d017      	beq.n	20000c32 <core_list_mergesort+0x136>
                    tail->next = e;
20000c02:	6029      	str	r1, [r5, #0]
                    list = e;
20000c04:	000d      	movs	r5, r1
            while (psize > 0 || (qsize > 0 && q))
20000c06:	2e00      	cmp	r6, #0
20000c08:	d1ea      	bne.n	20000be0 <core_list_mergesort+0xe4>
20000c0a:	2f00      	cmp	r7, #0
20000c0c:	d014      	beq.n	20000c38 <core_list_mergesort+0x13c>
20000c0e:	2c00      	cmp	r4, #0
20000c10:	d1f2      	bne.n	20000bf8 <core_list_mergesort+0xfc>

            /* now p has stepped `insize' places along, and q has too */
            p = q;
        }

        tail->next = NULL;
20000c12:	2400      	movs	r4, #0
20000c14:	602c      	str	r4, [r5, #0]

        /* If we have done only one merge, we're finished. */
        if (nmerges <= 1)   /* allow for nmerges==0, the empty list case */
20000c16:	9d01      	ldr	r5, [sp, #4]
20000c18:	2d01      	cmp	r5, #1
20000c1a:	d013      	beq.n	20000c44 <core_list_mergesort+0x148>
            return list;

        /* Otherwise repeat, merging lists twice the size */
        insize *= 2;
20000c1c:	465a      	mov	r2, fp
20000c1e:	0050      	lsls	r0, r2, #1
20000c20:	4683      	mov	fp, r0
        p = list;
20000c22:	464c      	mov	r4, r9
20000c24:	e776      	b.n	20000b14 <core_list_mergesort+0x18>
                    psize--;
20000c26:	4641      	mov	r1, r8
                    p = p->next;
20000c28:	6808      	ldr	r0, [r1, #0]
                    psize--;
20000c2a:	3e01      	subs	r6, #1
                    p = p->next;
20000c2c:	4680      	mov	r8, r0
                if (tail)
20000c2e:	2d00      	cmp	r5, #0
20000c30:	d1e7      	bne.n	20000c02 <core_list_mergesort+0x106>
                    list = e;
20000c32:	4689      	mov	r9, r1
20000c34:	000d      	movs	r5, r1
20000c36:	e7e6      	b.n	20000c06 <core_list_mergesort+0x10a>
        while (p)
20000c38:	2c00      	cmp	r4, #0
20000c3a:	d000      	beq.n	20000c3e <core_list_mergesort+0x142>
20000c3c:	e771      	b.n	20000b22 <core_list_mergesort+0x26>
20000c3e:	e7e8      	b.n	20000c12 <core_list_mergesort+0x116>
        tail->next = NULL;
20000c40:	6024      	str	r4, [r4, #0]
20000c42:	deff      	udf	#255	; 0xff
    }
#if COMPILER_REQUIRES_SORT_RETURN
    return list;
#endif
}
20000c44:	4648      	mov	r0, r9
20000c46:	b003      	add	sp, #12
20000c48:	bcf0      	pop	{r4, r5, r6, r7}
20000c4a:	46bb      	mov	fp, r7
20000c4c:	46b2      	mov	sl, r6
20000c4e:	46a9      	mov	r9, r5
20000c50:	46a0      	mov	r8, r4
20000c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

20000c54 <core_bench_list>:
{
20000c54:	b5f0      	push	{r4, r5, r6, r7, lr}
20000c56:	4657      	mov	r7, sl
20000c58:	46de      	mov	lr, fp
20000c5a:	464e      	mov	r6, r9
20000c5c:	4645      	mov	r5, r8
20000c5e:	b5e0      	push	{r5, r6, r7, lr}
20000c60:	b083      	sub	sp, #12
20000c62:	9001      	str	r0, [sp, #4]
20000c64:	9100      	str	r1, [sp, #0]
    list_head *list = res->list;
20000c66:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ee_s16 find_num = res->seed3;
20000c68:	2204      	movs	r2, #4
20000c6a:	5e80      	ldrsh	r0, [r0, r2]
{
20000c6c:	2700      	movs	r7, #0
    ee_s16 find_num = res->seed3;
20000c6e:	4682      	mov	sl, r0
    for (i = 0; i < find_num; i++)
20000c70:	2800      	cmp	r0, #0
20000c72:	dc00      	bgt.n	20000c76 <core_bench_list+0x22>
20000c74:	e0d2      	b.n	20000e1c <core_bench_list+0x1c8>
    info.idx = finder_idx;
20000c76:	000d      	movs	r5, r1
    ee_u16 found = 0, missed = 0;
20000c78:	2100      	movs	r1, #0
20000c7a:	468b      	mov	fp, r1
20000c7c:	4688      	mov	r8, r1
    ee_u16 retval = 0;
20000c7e:	468c      	mov	ip, r1
            if (this_find->info->data16 & 0x1) /* use found value */
20000c80:	3101      	adds	r1, #1
    for (i = 0; i < find_num; i++)
20000c82:	2600      	movs	r6, #0
        info.data16 = (i & 0xff) ;
20000c84:	20ff      	movs	r0, #255	; 0xff
            if (this_find->info->data16 & 0x1) /* use found value */
20000c86:	4689      	mov	r9, r1
        info.data16 = (i & 0xff) ;
20000c88:	0007      	movs	r7, r0
20000c8a:	4037      	ands	r7, r6
    if (info->idx >= 0)
20000c8c:	2d00      	cmp	r5, #0
20000c8e:	da00      	bge.n	20000c92 <core_bench_list+0x3e>
20000c90:	e094      	b.n	20000dbc <core_bench_list+0x168>
        while (list && (list->info->idx != info->idx))
20000c92:	2c00      	cmp	r4, #0
20000c94:	d100      	bne.n	20000c98 <core_bench_list+0x44>
20000c96:	e0c4      	b.n	20000e22 <core_bench_list+0x1ce>
20000c98:	0023      	movs	r3, r4
20000c9a:	e002      	b.n	20000ca2 <core_bench_list+0x4e>
            list = list->next;
20000c9c:	681b      	ldr	r3, [r3, #0]
        while (list && (list->info->idx != info->idx))
20000c9e:	2b00      	cmp	r3, #0
20000ca0:	d004      	beq.n	20000cac <core_bench_list+0x58>
20000ca2:	685a      	ldr	r2, [r3, #4]
20000ca4:	2102      	movs	r1, #2
20000ca6:	5e52      	ldrsh	r2, [r2, r1]
20000ca8:	42aa      	cmp	r2, r5
20000caa:	d1f7      	bne.n	20000c9c <core_bench_list+0x48>
    list_head *next = NULL, *tmp;
20000cac:	2100      	movs	r1, #0
20000cae:	e001      	b.n	20000cb4 <core_bench_list+0x60>
20000cb0:	0021      	movs	r1, r4
20000cb2:	0014      	movs	r4, r2
        tmp = list->next;
20000cb4:	6822      	ldr	r2, [r4, #0]
        list->next = next;
20000cb6:	6021      	str	r1, [r4, #0]
    while (list)
20000cb8:	2a00      	cmp	r2, #0
20000cba:	d1f9      	bne.n	20000cb0 <core_bench_list+0x5c>
        if (this_find == NULL)
20000cbc:	2b00      	cmp	r3, #0
20000cbe:	d100      	bne.n	20000cc2 <core_bench_list+0x6e>
20000cc0:	e08a      	b.n	20000dd8 <core_bench_list+0x184>
            found++;
20000cc2:	4641      	mov	r1, r8
20000cc4:	3101      	adds	r1, #1
20000cc6:	b28a      	uxth	r2, r1
            if (this_find->info->data16 & 0x1) /* use found value */
20000cc8:	6859      	ldr	r1, [r3, #4]
            found++;
20000cca:	4690      	mov	r8, r2
            if (this_find->info->data16 & 0x1) /* use found value */
20000ccc:	2200      	movs	r2, #0
20000cce:	5e8a      	ldrsh	r2, [r1, r2]
20000cd0:	4649      	mov	r1, r9
20000cd2:	4211      	tst	r1, r2
20000cd4:	d004      	beq.n	20000ce0 <core_bench_list+0x8c>
                retval += (this_find->info->data16 >> 9) & 1;
20000cd6:	1252      	asrs	r2, r2, #9
20000cd8:	400a      	ands	r2, r1
20000cda:	4462      	add	r2, ip
20000cdc:	b291      	uxth	r1, r2
20000cde:	468c      	mov	ip, r1
            if (this_find->next != NULL)
20000ce0:	681a      	ldr	r2, [r3, #0]
20000ce2:	2a00      	cmp	r2, #0
20000ce4:	d004      	beq.n	20000cf0 <core_bench_list+0x9c>
                this_find->next = finder->next;
20000ce6:	6811      	ldr	r1, [r2, #0]
20000ce8:	6019      	str	r1, [r3, #0]
                finder->next = list->next;
20000cea:	6823      	ldr	r3, [r4, #0]
20000cec:	6013      	str	r3, [r2, #0]
                list->next = finder;
20000cee:	6022      	str	r2, [r4, #0]
        if (info.idx >= 0)
20000cf0:	2d00      	cmp	r5, #0
20000cf2:	db01      	blt.n	20000cf8 <core_bench_list+0xa4>
            info.idx++;
20000cf4:	3501      	adds	r5, #1
20000cf6:	b22d      	sxth	r5, r5
    for (i = 0; i < find_num; i++)
20000cf8:	3601      	adds	r6, #1
20000cfa:	b236      	sxth	r6, r6
20000cfc:	45b2      	cmp	sl, r6
20000cfe:	d1c3      	bne.n	20000c88 <core_bench_list+0x34>
    retval += found * 4 - missed;
20000d00:	4640      	mov	r0, r8
20000d02:	465b      	mov	r3, fp
20000d04:	0081      	lsls	r1, r0, #2
20000d06:	1aca      	subs	r2, r1, r3
20000d08:	4462      	add	r2, ip
20000d0a:	b296      	uxth	r6, r2
    if (finder_idx > 0)
20000d0c:	9800      	ldr	r0, [sp, #0]
20000d0e:	2800      	cmp	r0, #0
20000d10:	dd05      	ble.n	20000d1e <core_bench_list+0xca>
        list = core_list_mergesort(list, cmp_complex, res);
20000d12:	0020      	movs	r0, r4
20000d14:	9a01      	ldr	r2, [sp, #4]
20000d16:	4944      	ldr	r1, [pc, #272]	; (20000e28 <core_bench_list+0x1d4>)
20000d18:	f7ff fef0 	bl	20000afc <core_list_mergesort>
20000d1c:	0004      	movs	r4, r0
    remover = core_list_remove(list->next);
20000d1e:	6823      	ldr	r3, [r4, #0]
    list_head *ret = item->next;
20000d20:	681a      	ldr	r2, [r3, #0]
    tmp = item->info;
20000d22:	6859      	ldr	r1, [r3, #4]
    item->info = ret->info;
20000d24:	6850      	ldr	r0, [r2, #4]
    list_head *ret = item->next;
20000d26:	4691      	mov	r9, r2
    item->info = ret->info;
20000d28:	6058      	str	r0, [r3, #4]
    item->next = item->next->next;
20000d2a:	6810      	ldr	r0, [r2, #0]
    ret->info = tmp;
20000d2c:	6051      	str	r1, [r2, #4]
    item->next = item->next->next;
20000d2e:	6018      	str	r0, [r3, #0]
    ret->next = NULL;
20000d30:	2300      	movs	r3, #0
20000d32:	6013      	str	r3, [r2, #0]
    if (info->idx >= 0)
20000d34:	0023      	movs	r3, r4
20000d36:	2d00      	cmp	r5, #0
20000d38:	db5b      	blt.n	20000df2 <core_bench_list+0x19e>
        while (list && (list->info->idx != info->idx))
20000d3a:	685f      	ldr	r7, [r3, #4]
20000d3c:	2002      	movs	r0, #2
20000d3e:	5e3a      	ldrsh	r2, [r7, r0]
20000d40:	42aa      	cmp	r2, r5
20000d42:	d068      	beq.n	20000e16 <core_bench_list+0x1c2>
            list = list->next;
20000d44:	681b      	ldr	r3, [r3, #0]
        while (list && (list->info->idx != info->idx))
20000d46:	2b00      	cmp	r3, #0
20000d48:	d1f7      	bne.n	20000d3a <core_bench_list+0xe6>
        finder = list->next;
20000d4a:	6820      	ldr	r0, [r4, #0]
20000d4c:	4683      	mov	fp, r0
    while (finder)
20000d4e:	2800      	cmp	r0, #0
20000d50:	d00f      	beq.n	20000d72 <core_bench_list+0x11e>
20000d52:	465f      	mov	r7, fp
20000d54:	0031      	movs	r1, r6
        retval = crc16(list->info->data16, retval);
20000d56:	6866      	ldr	r6, [r4, #4]
20000d58:	2300      	movs	r3, #0
20000d5a:	5ef0      	ldrsh	r0, [r6, r3]
20000d5c:	f001 ff8c 	bl	20002c78 <crc16>
        finder = finder->next;
20000d60:	683f      	ldr	r7, [r7, #0]
        retval = crc16(list->info->data16, retval);
20000d62:	0001      	movs	r1, r0
    while (finder)
20000d64:	2f00      	cmp	r7, #0
20000d66:	d1f6      	bne.n	20000d56 <core_bench_list+0x102>
    tmp = item_removed->info;
20000d68:	464a      	mov	r2, r9
    remover = core_list_undo_remove(remover, list->next);
20000d6a:	0006      	movs	r6, r0
20000d6c:	6821      	ldr	r1, [r4, #0]
20000d6e:	468b      	mov	fp, r1
    tmp = item_removed->info;
20000d70:	6851      	ldr	r1, [r2, #4]
    item_removed->info = item_modified->info;
20000d72:	465b      	mov	r3, fp
20000d74:	464d      	mov	r5, r9
20000d76:	6858      	ldr	r0, [r3, #4]
    list = core_list_mergesort(list, cmp_idx, NULL);
20000d78:	2200      	movs	r2, #0
    item_removed->info = item_modified->info;
20000d7a:	6068      	str	r0, [r5, #4]
    item_modified->info = tmp;
20000d7c:	6059      	str	r1, [r3, #4]
    item_removed->next = item_modified->next;
20000d7e:	4649      	mov	r1, r9
20000d80:	681d      	ldr	r5, [r3, #0]
    list = core_list_mergesort(list, cmp_idx, NULL);
20000d82:	0020      	movs	r0, r4
    item_removed->next = item_modified->next;
20000d84:	600d      	str	r5, [r1, #0]
    item_modified->next = item_removed;
20000d86:	6019      	str	r1, [r3, #0]
    list = core_list_mergesort(list, cmp_idx, NULL);
20000d88:	4928      	ldr	r1, [pc, #160]	; (20000e2c <core_bench_list+0x1d8>)
20000d8a:	f7ff feb7 	bl	20000afc <core_list_mergesort>
    finder = list->next;
20000d8e:	6804      	ldr	r4, [r0, #0]
    list = core_list_mergesort(list, cmp_idx, NULL);
20000d90:	0007      	movs	r7, r0
    while (finder)
20000d92:	2c00      	cmp	r4, #0
20000d94:	d00a      	beq.n	20000dac <core_bench_list+0x158>
20000d96:	0031      	movs	r1, r6
        retval = crc16(list->info->data16, retval);
20000d98:	687e      	ldr	r6, [r7, #4]
20000d9a:	2300      	movs	r3, #0
20000d9c:	5ef0      	ldrsh	r0, [r6, r3]
20000d9e:	f001 ff6b 	bl	20002c78 <crc16>
        finder = finder->next;
20000da2:	6824      	ldr	r4, [r4, #0]
        retval = crc16(list->info->data16, retval);
20000da4:	0001      	movs	r1, r0
    while (finder)
20000da6:	2c00      	cmp	r4, #0
20000da8:	d1f6      	bne.n	20000d98 <core_bench_list+0x144>
20000daa:	0006      	movs	r6, r0
}
20000dac:	0030      	movs	r0, r6
20000dae:	b003      	add	sp, #12
20000db0:	bcf0      	pop	{r4, r5, r6, r7}
20000db2:	46bb      	mov	fp, r7
20000db4:	46b2      	mov	sl, r6
20000db6:	46a9      	mov	r9, r5
20000db8:	46a0      	mov	r8, r4
20000dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (list && ((list->info->data16 & 0xff) != info->data16))
20000dbc:	2c00      	cmp	r4, #0
20000dbe:	d030      	beq.n	20000e22 <core_bench_list+0x1ce>
20000dc0:	0023      	movs	r3, r4
20000dc2:	e003      	b.n	20000dcc <core_bench_list+0x178>
            list = list->next;
20000dc4:	681b      	ldr	r3, [r3, #0]
        while (list && ((list->info->data16 & 0xff) != info->data16))
20000dc6:	2b00      	cmp	r3, #0
20000dc8:	d100      	bne.n	20000dcc <core_bench_list+0x178>
20000dca:	e76f      	b.n	20000cac <core_bench_list+0x58>
20000dcc:	685a      	ldr	r2, [r3, #4]
20000dce:	8811      	ldrh	r1, [r2, #0]
20000dd0:	4001      	ands	r1, r0
20000dd2:	428f      	cmp	r7, r1
20000dd4:	d1f6      	bne.n	20000dc4 <core_bench_list+0x170>
20000dd6:	e769      	b.n	20000cac <core_bench_list+0x58>
            missed++;
20000dd8:	465a      	mov	r2, fp
            retval += (list->next->info->data16 >> 8) & 1;
20000dda:	6849      	ldr	r1, [r1, #4]
            missed++;
20000ddc:	3201      	adds	r2, #1
20000dde:	b293      	uxth	r3, r2
            retval += (list->next->info->data16 >> 8) & 1;
20000de0:	784a      	ldrb	r2, [r1, #1]
20000de2:	4649      	mov	r1, r9
            missed++;
20000de4:	469b      	mov	fp, r3
            retval += (list->next->info->data16 >> 8) & 1;
20000de6:	b253      	sxtb	r3, r2
20000de8:	400b      	ands	r3, r1
20000dea:	4463      	add	r3, ip
20000dec:	b29a      	uxth	r2, r3
20000dee:	4694      	mov	ip, r2
20000df0:	e77e      	b.n	20000cf0 <core_bench_list+0x9c>
20000df2:	0020      	movs	r0, r4
        while (list && ((list->info->data16 & 0xff) != info->data16))
20000df4:	22ff      	movs	r2, #255	; 0xff
20000df6:	6845      	ldr	r5, [r0, #4]
20000df8:	882b      	ldrh	r3, [r5, #0]
20000dfa:	4013      	ands	r3, r2
20000dfc:	42bb      	cmp	r3, r7
20000dfe:	d007      	beq.n	20000e10 <core_bench_list+0x1bc>
            list = list->next;
20000e00:	6800      	ldr	r0, [r0, #0]
        while (list && ((list->info->data16 & 0xff) != info->data16))
20000e02:	2800      	cmp	r0, #0
20000e04:	d0a1      	beq.n	20000d4a <core_bench_list+0xf6>
20000e06:	6845      	ldr	r5, [r0, #4]
20000e08:	882b      	ldrh	r3, [r5, #0]
20000e0a:	4013      	ands	r3, r2
20000e0c:	42bb      	cmp	r3, r7
20000e0e:	d1f7      	bne.n	20000e00 <core_bench_list+0x1ac>
20000e10:	0007      	movs	r7, r0
20000e12:	0031      	movs	r1, r6
20000e14:	e79f      	b.n	20000d56 <core_bench_list+0x102>
20000e16:	001f      	movs	r7, r3
20000e18:	0031      	movs	r1, r6
20000e1a:	e79c      	b.n	20000d56 <core_bench_list+0x102>
    for (i = 0; i < find_num; i++)
20000e1c:	2600      	movs	r6, #0
    info.idx = finder_idx;
20000e1e:	9d00      	ldr	r5, [sp, #0]
20000e20:	e774      	b.n	20000d0c <core_bench_list+0xb8>
            retval += (list->next->info->data16 >> 8) & 1;
20000e22:	2400      	movs	r4, #0
20000e24:	6823      	ldr	r3, [r4, #0]
20000e26:	deff      	udf	#255	; 0xff
20000e28:	20000ae1 	.word	0x20000ae1
20000e2c:	20000a15 	.word	0x20000a15

20000e30 <core_list_init>:
{
20000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
20000e32:	46de      	mov	lr, fp
20000e34:	4657      	mov	r7, sl
20000e36:	464e      	mov	r6, r9
20000e38:	4645      	mov	r5, r8
20000e3a:	b5e0      	push	{r5, r6, r7, lr}
20000e3c:	000f      	movs	r7, r1
20000e3e:	b085      	sub	sp, #20
    ee_u32 size = (blksize / per_item) - 2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
20000e40:	2114      	movs	r1, #20
{
20000e42:	9202      	str	r2, [sp, #8]
    ee_u32 size = (blksize / per_item) - 2; /* to accomodate systems with 64b pointers, and make sure same code is executed, set max list elements */
20000e44:	f002 fef8 	bl	20003c38 <____aeabi_uidiv_veneer>
20000e48:	3802      	subs	r0, #2
    list_data *datablock_end = datablock + size;
20000e4a:	0083      	lsls	r3, r0, #2
20000e4c:	469c      	mov	ip, r3
    if ((*memblock + 1) >= memblock_end)
20000e4e:	003b      	movs	r3, r7
    list->next = NULL;
20000e50:	2100      	movs	r1, #0
    memblock++;
20000e52:	003c      	movs	r4, r7
    list->info->data16 = (ee_s16)0x8080;
20000e54:	4ab3      	ldr	r2, [pc, #716]	; (20001124 <core_list_init+0x2f4>)
    list_head *memblock_end = memblock + size;
20000e56:	00c6      	lsls	r6, r0, #3
20000e58:	19be      	adds	r6, r7, r6
    if ((*memblock + 1) >= memblock_end)
20000e5a:	3310      	adds	r3, #16
    list->next = NULL;
20000e5c:	6039      	str	r1, [r7, #0]
    list->info = datablock;
20000e5e:	607e      	str	r6, [r7, #4]
    list_data *datablock_end = datablock + size;
20000e60:	44b4      	add	ip, r6
    list->info->idx = 0x0000;
20000e62:	8071      	strh	r1, [r6, #2]
    list->info->data16 = (ee_s16)0x8080;
20000e64:	8032      	strh	r2, [r6, #0]
    memblock++;
20000e66:	3408      	adds	r4, #8
    datablock++;
20000e68:	1d35      	adds	r5, r6, #4
    if ((*memblock + 1) >= memblock_end)
20000e6a:	429e      	cmp	r6, r3
20000e6c:	d800      	bhi.n	20000e70 <core_list_init+0x40>
20000e6e:	e14d      	b.n	2000110c <core_list_init+0x2dc>
    if ((*datablock + 1) >= datablock_end)
20000e70:	0032      	movs	r2, r6
20000e72:	3208      	adds	r2, #8
20000e74:	4594      	cmp	ip, r2
20000e76:	d800      	bhi.n	20000e7a <core_list_init+0x4a>
20000e78:	e148      	b.n	2000110c <core_list_init+0x2dc>
    newitem->next = insert_point->next;
20000e7a:	60b9      	str	r1, [r7, #8]
    to->data16 = from->data16;
20000e7c:	3901      	subs	r1, #1
    insert_point->next = newitem;
20000e7e:	603c      	str	r4, [r7, #0]
    newitem->info = *datablock;
20000e80:	60fd      	str	r5, [r7, #12]
    to->data16 = from->data16;
20000e82:	80b1      	strh	r1, [r6, #4]
    to->idx = from->idx;
20000e84:	49a8      	ldr	r1, [pc, #672]	; (20001128 <core_list_init+0x2f8>)
20000e86:	80f1      	strh	r1, [r6, #6]
    for (i = 0; i < size; i++)
20000e88:	2800      	cmp	r0, #0
20000e8a:	d100      	bne.n	20000e8e <core_list_init+0x5e>
20000e8c:	e104      	b.n	20001098 <core_list_init+0x268>
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
20000e8e:	466d      	mov	r5, sp
20000e90:	8929      	ldrh	r1, [r5, #8]
20000e92:	2500      	movs	r5, #0
20000e94:	9101      	str	r1, [sp, #4]
    to->idx = from->idx;
20000e96:	49a4      	ldr	r1, [pc, #656]	; (20001128 <core_list_init+0x2f8>)
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
20000e98:	9500      	str	r5, [sp, #0]
    to->idx = from->idx;
20000e9a:	4689      	mov	r9, r1
20000e9c:	2103      	movs	r1, #3
20000e9e:	000d      	movs	r5, r1
20000ea0:	4005      	ands	r5, r0
20000ea2:	4201      	tst	r1, r0
20000ea4:	d100      	bne.n	20000ea8 <core_list_init+0x78>
20000ea6:	e135      	b.n	20001114 <core_list_init+0x2e4>
20000ea8:	2d01      	cmp	r5, #1
20000eaa:	d041      	beq.n	20000f30 <core_list_init+0x100>
20000eac:	2d02      	cmp	r5, #2
20000eae:	d019      	beq.n	20000ee4 <core_list_init+0xb4>
    if ((*memblock + 1) >= memblock_end)
20000eb0:	001d      	movs	r5, r3
20000eb2:	3508      	adds	r5, #8
20000eb4:	46aa      	mov	sl, r5
20000eb6:	42ae      	cmp	r6, r5
20000eb8:	d912      	bls.n	20000ee0 <core_list_init+0xb0>
    if ((*datablock + 1) >= datablock_end)
20000eba:	1d11      	adds	r1, r2, #4
20000ebc:	4688      	mov	r8, r1
20000ebe:	458c      	cmp	ip, r1
20000ec0:	d90e      	bls.n	20000ee0 <core_list_init+0xb0>
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000ec2:	9d01      	ldr	r5, [sp, #4]
    newitem->next = insert_point->next;
20000ec4:	601c      	str	r4, [r3, #0]
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000ec6:	00e9      	lsls	r1, r5, #3
20000ec8:	2578      	movs	r5, #120	; 0x78
20000eca:	4029      	ands	r1, r5
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20000ecc:	020c      	lsls	r4, r1, #8
20000ece:	4321      	orrs	r1, r4
    insert_point->next = newitem;
20000ed0:	603b      	str	r3, [r7, #0]
    newitem->info = *datablock;
20000ed2:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20000ed4:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20000ed6:	4649      	mov	r1, r9
    return newitem;
20000ed8:	001c      	movs	r4, r3
    to->idx = from->idx;
20000eda:	8051      	strh	r1, [r2, #2]
    return newitem;
20000edc:	4653      	mov	r3, sl
20000ede:	4642      	mov	r2, r8
    for (i = 0; i < size; i++)
20000ee0:	2501      	movs	r5, #1
20000ee2:	9500      	str	r5, [sp, #0]
    if ((*memblock + 1) >= memblock_end)
20000ee4:	2108      	movs	r1, #8
20000ee6:	468a      	mov	sl, r1
20000ee8:	449a      	add	sl, r3
20000eea:	4556      	cmp	r6, sl
20000eec:	d91d      	bls.n	20000f2a <core_list_init+0xfa>
    if ((*datablock + 1) >= datablock_end)
20000eee:	1d15      	adds	r5, r2, #4
20000ef0:	46ab      	mov	fp, r5
20000ef2:	45ac      	cmp	ip, r5
20000ef4:	d919      	bls.n	20000f2a <core_list_init+0xfa>
20000ef6:	4669      	mov	r1, sp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000ef8:	9d01      	ldr	r5, [sp, #4]
20000efa:	8809      	ldrh	r1, [r1, #0]
    newitem->next = insert_point->next;
20000efc:	601c      	str	r4, [r3, #0]
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000efe:	9103      	str	r1, [sp, #12]
20000f00:	404d      	eors	r5, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000f02:	2178      	movs	r1, #120	; 0x78
20000f04:	00ed      	lsls	r5, r5, #3
20000f06:	400d      	ands	r5, r1
20000f08:	46a8      	mov	r8, r5
20000f0a:	9d03      	ldr	r5, [sp, #12]
20000f0c:	3971      	subs	r1, #113	; 0x71
20000f0e:	400d      	ands	r5, r1
20000f10:	0029      	movs	r1, r5
20000f12:	4645      	mov	r5, r8
20000f14:	4329      	orrs	r1, r5
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20000f16:	020c      	lsls	r4, r1, #8
20000f18:	4321      	orrs	r1, r4
    insert_point->next = newitem;
20000f1a:	603b      	str	r3, [r7, #0]
    newitem->info = *datablock;
20000f1c:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20000f1e:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20000f20:	4649      	mov	r1, r9
    return newitem;
20000f22:	001c      	movs	r4, r3
    to->idx = from->idx;
20000f24:	8051      	strh	r1, [r2, #2]
    return newitem;
20000f26:	4653      	mov	r3, sl
20000f28:	465a      	mov	r2, fp
    for (i = 0; i < size; i++)
20000f2a:	9d00      	ldr	r5, [sp, #0]
20000f2c:	3501      	adds	r5, #1
20000f2e:	9500      	str	r5, [sp, #0]
    if ((*memblock + 1) >= memblock_end)
20000f30:	2108      	movs	r1, #8
20000f32:	468a      	mov	sl, r1
20000f34:	449a      	add	sl, r3
20000f36:	4556      	cmp	r6, sl
20000f38:	d91d      	bls.n	20000f76 <core_list_init+0x146>
    if ((*datablock + 1) >= datablock_end)
20000f3a:	1d15      	adds	r5, r2, #4
20000f3c:	46ab      	mov	fp, r5
20000f3e:	45ac      	cmp	ip, r5
20000f40:	d919      	bls.n	20000f76 <core_list_init+0x146>
20000f42:	4669      	mov	r1, sp
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000f44:	9d01      	ldr	r5, [sp, #4]
20000f46:	8809      	ldrh	r1, [r1, #0]
    newitem->next = insert_point->next;
20000f48:	601c      	str	r4, [r3, #0]
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000f4a:	9103      	str	r1, [sp, #12]
20000f4c:	404d      	eors	r5, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000f4e:	2178      	movs	r1, #120	; 0x78
20000f50:	00ed      	lsls	r5, r5, #3
20000f52:	400d      	ands	r5, r1
20000f54:	46a8      	mov	r8, r5
20000f56:	9d03      	ldr	r5, [sp, #12]
20000f58:	3971      	subs	r1, #113	; 0x71
20000f5a:	400d      	ands	r5, r1
20000f5c:	0029      	movs	r1, r5
20000f5e:	4645      	mov	r5, r8
20000f60:	4329      	orrs	r1, r5
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20000f62:	020c      	lsls	r4, r1, #8
20000f64:	4321      	orrs	r1, r4
    insert_point->next = newitem;
20000f66:	603b      	str	r3, [r7, #0]
    newitem->info = *datablock;
20000f68:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20000f6a:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20000f6c:	4649      	mov	r1, r9
    return newitem;
20000f6e:	001c      	movs	r4, r3
    to->idx = from->idx;
20000f70:	8051      	strh	r1, [r2, #2]
    return newitem;
20000f72:	4653      	mov	r3, sl
20000f74:	465a      	mov	r2, fp
    for (i = 0; i < size; i++)
20000f76:	9d00      	ldr	r5, [sp, #0]
20000f78:	3501      	adds	r5, #1
20000f7a:	9500      	str	r5, [sp, #0]
20000f7c:	42a8      	cmp	r0, r5
20000f7e:	d100      	bne.n	20000f82 <core_list_init+0x152>
20000f80:	e08a      	b.n	20001098 <core_list_init+0x268>
20000f82:	4682      	mov	sl, r0
20000f84:	0030      	movs	r0, r6
20000f86:	4666      	mov	r6, ip
20000f88:	46bc      	mov	ip, r7
20000f8a:	9d00      	ldr	r5, [sp, #0]
20000f8c:	9600      	str	r6, [sp, #0]
    if ((*memblock + 1) >= memblock_end)
20000f8e:	2108      	movs	r1, #8
20000f90:	4688      	mov	r8, r1
20000f92:	4498      	add	r8, r3
20000f94:	4540      	cmp	r0, r8
20000f96:	d919      	bls.n	20000fcc <core_list_init+0x19c>
    if ((*datablock + 1) >= datablock_end)
20000f98:	9e00      	ldr	r6, [sp, #0]
20000f9a:	1d17      	adds	r7, r2, #4
20000f9c:	46bb      	mov	fp, r7
20000f9e:	42be      	cmp	r6, r7
20000fa0:	d914      	bls.n	20000fcc <core_list_init+0x19c>
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000fa2:	9f01      	ldr	r7, [sp, #4]
20000fa4:	b2a9      	uxth	r1, r5
20000fa6:	404f      	eors	r7, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000fa8:	00fe      	lsls	r6, r7, #3
20000faa:	2778      	movs	r7, #120	; 0x78
    newitem->next = insert_point->next;
20000fac:	601c      	str	r4, [r3, #0]
    insert_point->next = newitem;
20000fae:	4664      	mov	r4, ip
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000fb0:	403e      	ands	r6, r7
20000fb2:	3f71      	subs	r7, #113	; 0x71
20000fb4:	4039      	ands	r1, r7
20000fb6:	4331      	orrs	r1, r6
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20000fb8:	020e      	lsls	r6, r1, #8
20000fba:	4331      	orrs	r1, r6
    insert_point->next = newitem;
20000fbc:	6023      	str	r3, [r4, #0]
    newitem->info = *datablock;
20000fbe:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20000fc0:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20000fc2:	4649      	mov	r1, r9
    return newitem;
20000fc4:	001c      	movs	r4, r3
    to->idx = from->idx;
20000fc6:	8051      	strh	r1, [r2, #2]
    return newitem;
20000fc8:	4643      	mov	r3, r8
20000fca:	465a      	mov	r2, fp
    if ((*memblock + 1) >= memblock_end)
20000fcc:	2708      	movs	r7, #8
20000fce:	46b8      	mov	r8, r7
20000fd0:	4498      	add	r8, r3
    for (i = 0; i < size; i++)
20000fd2:	3501      	adds	r5, #1
    if ((*memblock + 1) >= memblock_end)
20000fd4:	4540      	cmp	r0, r8
20000fd6:	d919      	bls.n	2000100c <core_list_init+0x1dc>
    if ((*datablock + 1) >= datablock_end)
20000fd8:	9900      	ldr	r1, [sp, #0]
20000fda:	1d16      	adds	r6, r2, #4
20000fdc:	46b3      	mov	fp, r6
20000fde:	42b1      	cmp	r1, r6
20000fe0:	d914      	bls.n	2000100c <core_list_init+0x1dc>
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20000fe2:	9f01      	ldr	r7, [sp, #4]
20000fe4:	b2a9      	uxth	r1, r5
20000fe6:	404f      	eors	r7, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000fe8:	00fe      	lsls	r6, r7, #3
20000fea:	2778      	movs	r7, #120	; 0x78
    newitem->next = insert_point->next;
20000fec:	601c      	str	r4, [r3, #0]
    insert_point->next = newitem;
20000fee:	4664      	mov	r4, ip
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20000ff0:	403e      	ands	r6, r7
20000ff2:	3f71      	subs	r7, #113	; 0x71
20000ff4:	4039      	ands	r1, r7
20000ff6:	4331      	orrs	r1, r6
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20000ff8:	020e      	lsls	r6, r1, #8
20000ffa:	4331      	orrs	r1, r6
    insert_point->next = newitem;
20000ffc:	6023      	str	r3, [r4, #0]
    newitem->info = *datablock;
20000ffe:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20001000:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20001002:	4649      	mov	r1, r9
    return newitem;
20001004:	001c      	movs	r4, r3
    to->idx = from->idx;
20001006:	8051      	strh	r1, [r2, #2]
    return newitem;
20001008:	4643      	mov	r3, r8
2000100a:	465a      	mov	r2, fp
    if ((*memblock + 1) >= memblock_end)
2000100c:	2608      	movs	r6, #8
2000100e:	46b0      	mov	r8, r6
20001010:	4498      	add	r8, r3
    for (i = 0; i < size; i++)
20001012:	1c6f      	adds	r7, r5, #1
    if ((*memblock + 1) >= memblock_end)
20001014:	4540      	cmp	r0, r8
20001016:	d919      	bls.n	2000104c <core_list_init+0x21c>
    if ((*datablock + 1) >= datablock_end)
20001018:	9e00      	ldr	r6, [sp, #0]
2000101a:	1d11      	adds	r1, r2, #4
2000101c:	468b      	mov	fp, r1
2000101e:	428e      	cmp	r6, r1
20001020:	d914      	bls.n	2000104c <core_list_init+0x21c>
20001022:	b2b9      	uxth	r1, r7
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20001024:	9f01      	ldr	r7, [sp, #4]
    newitem->next = insert_point->next;
20001026:	601c      	str	r4, [r3, #0]
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20001028:	404f      	eors	r7, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
2000102a:	00fe      	lsls	r6, r7, #3
2000102c:	2778      	movs	r7, #120	; 0x78
    insert_point->next = newitem;
2000102e:	4664      	mov	r4, ip
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20001030:	403e      	ands	r6, r7
20001032:	3f71      	subs	r7, #113	; 0x71
20001034:	4039      	ands	r1, r7
20001036:	4331      	orrs	r1, r6
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20001038:	020e      	lsls	r6, r1, #8
2000103a:	4331      	orrs	r1, r6
    insert_point->next = newitem;
2000103c:	6023      	str	r3, [r4, #0]
    newitem->info = *datablock;
2000103e:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20001040:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20001042:	4649      	mov	r1, r9
    return newitem;
20001044:	001c      	movs	r4, r3
    to->idx = from->idx;
20001046:	8051      	strh	r1, [r2, #2]
    return newitem;
20001048:	4643      	mov	r3, r8
2000104a:	465a      	mov	r2, fp
    if ((*memblock + 1) >= memblock_end)
2000104c:	2608      	movs	r6, #8
2000104e:	46b0      	mov	r8, r6
20001050:	4498      	add	r8, r3
    for (i = 0; i < size; i++)
20001052:	1caf      	adds	r7, r5, #2
    if ((*memblock + 1) >= memblock_end)
20001054:	4540      	cmp	r0, r8
20001056:	d919      	bls.n	2000108c <core_list_init+0x25c>
    if ((*datablock + 1) >= datablock_end)
20001058:	9e00      	ldr	r6, [sp, #0]
2000105a:	1d11      	adds	r1, r2, #4
2000105c:	468b      	mov	fp, r1
2000105e:	428e      	cmp	r6, r1
20001060:	d914      	bls.n	2000108c <core_list_init+0x25c>
20001062:	b2b9      	uxth	r1, r7
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20001064:	9f01      	ldr	r7, [sp, #4]
    newitem->next = insert_point->next;
20001066:	601c      	str	r4, [r3, #0]
        ee_u16 datpat = ((ee_u16)(seed ^ i) & 0xf);
20001068:	404f      	eors	r7, r1
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
2000106a:	00fe      	lsls	r6, r7, #3
2000106c:	2778      	movs	r7, #120	; 0x78
    insert_point->next = newitem;
2000106e:	4664      	mov	r4, ip
        ee_u16 dat = (datpat << 3) | (i & 0x7); /* alternate between algorithms */
20001070:	403e      	ands	r6, r7
20001072:	3f71      	subs	r7, #113	; 0x71
20001074:	4039      	ands	r1, r7
20001076:	4331      	orrs	r1, r6
        info.data16 = (dat << 8) | dat; /* fill the data with actual data and upper bits with rebuild value */
20001078:	020e      	lsls	r6, r1, #8
2000107a:	4331      	orrs	r1, r6
    insert_point->next = newitem;
2000107c:	6023      	str	r3, [r4, #0]
    newitem->info = *datablock;
2000107e:	605a      	str	r2, [r3, #4]
    to->data16 = from->data16;
20001080:	8011      	strh	r1, [r2, #0]
    to->idx = from->idx;
20001082:	4649      	mov	r1, r9
    return newitem;
20001084:	001c      	movs	r4, r3
    to->idx = from->idx;
20001086:	8051      	strh	r1, [r2, #2]
    return newitem;
20001088:	4643      	mov	r3, r8
2000108a:	465a      	mov	r2, fp
    for (i = 0; i < size; i++)
2000108c:	3503      	adds	r5, #3
2000108e:	45aa      	cmp	sl, r5
20001090:	d000      	beq.n	20001094 <core_list_init+0x264>
20001092:	e77c      	b.n	20000f8e <core_list_init+0x15e>
20001094:	4650      	mov	r0, sl
20001096:	4667      	mov	r7, ip
    while (finder->next != NULL)
20001098:	6825      	ldr	r5, [r4, #0]
2000109a:	2d00      	cmp	r5, #0
2000109c:	d02a      	beq.n	200010f4 <core_list_init+0x2c4>
        if (i < size / 5) /* first 20% of the list in order */
2000109e:	2105      	movs	r1, #5
200010a0:	f002 fdca 	bl	20003c38 <____aeabi_uidiv_veneer>
200010a4:	2680      	movs	r6, #128	; 0x80
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010a6:	23e0      	movs	r3, #224	; 0xe0
200010a8:	46ba      	mov	sl, r7
200010aa:	9f02      	ldr	r7, [sp, #8]
        if (i < size / 5) /* first 20% of the list in order */
200010ac:	00b2      	lsls	r2, r6, #2
200010ae:	2101      	movs	r1, #1
200010b0:	46b9      	mov	r9, r7
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010b2:	00de      	lsls	r6, r3, #3
200010b4:	e00a      	b.n	200010cc <core_list_init+0x29c>
            finder->info->idx = i++;
200010b6:	6864      	ldr	r4, [r4, #4]
    while (finder->next != NULL)
200010b8:	3201      	adds	r2, #1
200010ba:	682f      	ldr	r7, [r5, #0]
200010bc:	32ff      	adds	r2, #255	; 0xff
            finder->info->idx = i++;
200010be:	8061      	strh	r1, [r4, #2]
    while (finder->next != NULL)
200010c0:	b292      	uxth	r2, r2
200010c2:	002c      	movs	r4, r5
200010c4:	3101      	adds	r1, #1
200010c6:	2f00      	cmp	r7, #0
200010c8:	d013      	beq.n	200010f2 <core_list_init+0x2c2>
200010ca:	003d      	movs	r5, r7
        if (i < size / 5) /* first 20% of the list in order */
200010cc:	4288      	cmp	r0, r1
200010ce:	d8f2      	bhi.n	200010b6 <core_list_init+0x286>
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010d0:	0013      	movs	r3, r2
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
200010d2:	464f      	mov	r7, r9
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010d4:	4033      	ands	r3, r6
            ee_u16 pat = (ee_u16)(i++ ^ seed); /* get a pseudo random number */
200010d6:	404f      	eors	r7, r1
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010d8:	433b      	orrs	r3, r7
200010da:	049f      	lsls	r7, r3, #18
200010dc:	6864      	ldr	r4, [r4, #4]
200010de:	0cbb      	lsrs	r3, r7, #18
    while (finder->next != NULL)
200010e0:	3201      	adds	r2, #1
200010e2:	682f      	ldr	r7, [r5, #0]
200010e4:	32ff      	adds	r2, #255	; 0xff
            finder->info->idx = 0x3fff & (((i & 0x07) << 8) | pat); /* make sure the mixed items end up after the ones in sequence */
200010e6:	8063      	strh	r3, [r4, #2]
    while (finder->next != NULL)
200010e8:	3101      	adds	r1, #1
200010ea:	002c      	movs	r4, r5
200010ec:	b292      	uxth	r2, r2
200010ee:	2f00      	cmp	r7, #0
200010f0:	d1eb      	bne.n	200010ca <core_list_init+0x29a>
200010f2:	4657      	mov	r7, sl
    list = core_list_mergesort(list, cmp_idx, NULL);
200010f4:	2200      	movs	r2, #0
200010f6:	0038      	movs	r0, r7
200010f8:	490c      	ldr	r1, [pc, #48]	; (2000112c <core_list_init+0x2fc>)
200010fa:	f7ff fcff 	bl	20000afc <core_list_mergesort>
}
200010fe:	b005      	add	sp, #20
20001100:	bcf0      	pop	{r4, r5, r6, r7}
20001102:	46bb      	mov	fp, r7
20001104:	46b2      	mov	sl, r6
20001106:	46a9      	mov	r9, r5
20001108:	46a0      	mov	r8, r4
2000110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memblock++;
2000110c:	0023      	movs	r3, r4
    datablock++;
2000110e:	002a      	movs	r2, r5
20001110:	2400      	movs	r4, #0
20001112:	e6b9      	b.n	20000e88 <core_list_init+0x58>
20001114:	4682      	mov	sl, r0
20001116:	0030      	movs	r0, r6
20001118:	4666      	mov	r6, ip
2000111a:	2500      	movs	r5, #0
2000111c:	46bc      	mov	ip, r7
2000111e:	9600      	str	r6, [sp, #0]
20001120:	e735      	b.n	20000f8e <core_list_init+0x15e>
20001122:	46c0      	nop			; (mov r8, r8)
20001124:	ffff8080 	.word	0xffff8080
20001128:	00007fff 	.word	0x00007fff
2000112c:	20000a15 	.word	0x20000a15

20001130 <core_init_matrix>:

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
ee_u32 core_init_matrix(ee_u32 blksize, void *memblk, ee_s32 seed, mat_params *p)
{
20001130:	b5f0      	push	{r4, r5, r6, r7, lr}
20001132:	46de      	mov	lr, fp
20001134:	4657      	mov	r7, sl
20001136:	464e      	mov	r6, r9
20001138:	4645      	mov	r5, r8
2000113a:	b5e0      	push	{r5, r6, r7, lr}
2000113c:	b089      	sub	sp, #36	; 0x24
2000113e:	9307      	str	r3, [sp, #28]
    MATDAT *A;
    MATDAT *B;
    ee_s32 order = 1;
    MATDAT val;
    ee_u32 i = 0, j = 0;
    if (seed == 0)
20001140:	2a00      	cmp	r2, #0
20001142:	d100      	bne.n	20001146 <core_init_matrix+0x16>
        seed = 1;
20001144:	3201      	adds	r2, #1
    while (j < blksize)
20001146:	2300      	movs	r3, #0
20001148:	2800      	cmp	r0, #0
2000114a:	d100      	bne.n	2000114e <core_init_matrix+0x1e>
2000114c:	e105      	b.n	2000135a <core_init_matrix+0x22a>
    {
        i++;
2000114e:	001e      	movs	r6, r3
20001150:	3301      	adds	r3, #1
        j = i * i * 2 * 4;
20001152:	001f      	movs	r7, r3
20001154:	435f      	muls	r7, r3
20001156:	00fc      	lsls	r4, r7, #3
    while (j < blksize)
20001158:	42a0      	cmp	r0, r4
2000115a:	d8f8      	bhi.n	2000114e <core_init_matrix+0x1e>
    }
    N = i - 1;
    A = (MATDAT *)align_mem(memblk);
2000115c:	2303      	movs	r3, #3
    B = A + N * N;
2000115e:	0035      	movs	r5, r6
    A = (MATDAT *)align_mem(memblk);
20001160:	3901      	subs	r1, #1
20001162:	4399      	bics	r1, r3
20001164:	1d08      	adds	r0, r1, #4
20001166:	4680      	mov	r8, r0
    B = A + N * N;
20001168:	4375      	muls	r5, r6
2000116a:	006f      	lsls	r7, r5, #1
2000116c:	9705      	str	r7, [sp, #20]
2000116e:	46b4      	mov	ip, r6
20001170:	4447      	add	r7, r8
    }

    p->A = A;
    p->B = B;
    p->C = (MATRES *)align_mem(B + N * N);
    p->N = N;
20001172:	9606      	str	r6, [sp, #24]
    for (i = 0; i < N; i++)
20001174:	2e00      	cmp	r6, #0
20001176:	d100      	bne.n	2000117a <core_init_matrix+0x4a>
20001178:	e0da      	b.n	20001330 <core_init_matrix+0x200>
    B = A + N * N;
2000117a:	2400      	movs	r4, #0
            order++;
2000117c:	0038      	movs	r0, r7
2000117e:	4663      	mov	r3, ip
    B = A + N * N;
20001180:	9402      	str	r4, [sp, #8]
20001182:	9403      	str	r4, [sp, #12]
20001184:	3401      	adds	r4, #1
20001186:	46a2      	mov	sl, r4
            val = matrix_clip(val, 1);
20001188:	34fe      	adds	r4, #254	; 0xfe
2000118a:	46a1      	mov	r9, r4
            order++;
2000118c:	4647      	mov	r7, r8
2000118e:	4683      	mov	fp, r0
20001190:	3b01      	subs	r3, #1
20001192:	9304      	str	r3, [sp, #16]
            seed = ((order * seed) % 65536);
20001194:	4654      	mov	r4, sl
20001196:	4362      	muls	r2, r4
20001198:	4663      	mov	r3, ip
2000119a:	2603      	movs	r6, #3
2000119c:	9d02      	ldr	r5, [sp, #8]
2000119e:	17d0      	asrs	r0, r2, #31
200011a0:	0069      	lsls	r1, r5, #1
200011a2:	0c05      	lsrs	r5, r0, #16
200011a4:	4650      	mov	r0, sl
200011a6:	1952      	adds	r2, r2, r5
200011a8:	3b01      	subs	r3, #1
200011aa:	4033      	ands	r3, r6
200011ac:	0416      	lsls	r6, r2, #16
200011ae:	0c34      	lsrs	r4, r6, #16
200011b0:	1b62      	subs	r2, r4, r5
            val = (seed + order);
200011b2:	b286      	uxth	r6, r0
200011b4:	18b5      	adds	r5, r6, r2
200011b6:	b2ac      	uxth	r4, r5
            val = matrix_clip(val, 1);
200011b8:	464d      	mov	r5, r9
            B[i * N + j] = val;
200011ba:	4658      	mov	r0, fp
            val = (val + order);
200011bc:	19a6      	adds	r6, r4, r6
            val = matrix_clip(val, 1);
200011be:	402e      	ands	r6, r5
            B[i * N + j] = val;
200011c0:	5244      	strh	r4, [r0, r1]
            A[i * N + j] = val;
200011c2:	527e      	strh	r6, [r7, r1]
            order++;
200011c4:	4650      	mov	r0, sl
        for (j = 0; j < N; j++)
200011c6:	2601      	movs	r6, #1
            order++;
200011c8:	3001      	adds	r0, #1
        for (j = 0; j < N; j++)
200011ca:	3102      	adds	r1, #2
200011cc:	4566      	cmp	r6, ip
200011ce:	d300      	bcc.n	200011d2 <core_init_matrix+0xa2>
200011d0:	e09a      	b.n	20001308 <core_init_matrix+0x1d8>
200011d2:	2b00      	cmp	r3, #0
200011d4:	d03e      	beq.n	20001254 <core_init_matrix+0x124>
200011d6:	2b01      	cmp	r3, #1
200011d8:	d027      	beq.n	2000122a <core_init_matrix+0xfa>
200011da:	2b02      	cmp	r3, #2
200011dc:	d012      	beq.n	20001204 <core_init_matrix+0xd4>
            seed = ((order * seed) % 65536);
200011de:	4342      	muls	r2, r0
200011e0:	17d3      	asrs	r3, r2, #31
200011e2:	0c1c      	lsrs	r4, r3, #16
200011e4:	1912      	adds	r2, r2, r4
200011e6:	0416      	lsls	r6, r2, #16
200011e8:	0c35      	lsrs	r5, r6, #16
200011ea:	1b2a      	subs	r2, r5, r4
            B[i * N + j] = val;
200011ec:	465d      	mov	r5, fp
200011ee:	b284      	uxth	r4, r0
            val = (seed + order);
200011f0:	18a3      	adds	r3, r4, r2
200011f2:	b29e      	uxth	r6, r3
            val = (val + order);
200011f4:	1933      	adds	r3, r6, r4
            val = matrix_clip(val, 1);
200011f6:	464c      	mov	r4, r9
            B[i * N + j] = val;
200011f8:	526e      	strh	r6, [r5, r1]
        for (j = 0; j < N; j++)
200011fa:	2602      	movs	r6, #2
            val = matrix_clip(val, 1);
200011fc:	4023      	ands	r3, r4
            A[i * N + j] = val;
200011fe:	527b      	strh	r3, [r7, r1]
            order++;
20001200:	3001      	adds	r0, #1
        for (j = 0; j < N; j++)
20001202:	3102      	adds	r1, #2
            seed = ((order * seed) % 65536);
20001204:	4342      	muls	r2, r0
20001206:	17d5      	asrs	r5, r2, #31
20001208:	0c2b      	lsrs	r3, r5, #16
2000120a:	18d2      	adds	r2, r2, r3
2000120c:	0414      	lsls	r4, r2, #16
2000120e:	0c25      	lsrs	r5, r4, #16
20001210:	1aea      	subs	r2, r5, r3
            B[i * N + j] = val;
20001212:	465d      	mov	r5, fp
20001214:	b284      	uxth	r4, r0
            val = (seed + order);
20001216:	18a3      	adds	r3, r4, r2
20001218:	b29b      	uxth	r3, r3
            B[i * N + j] = val;
2000121a:	526b      	strh	r3, [r5, r1]
            val = (val + order);
2000121c:	191b      	adds	r3, r3, r4
            val = matrix_clip(val, 1);
2000121e:	464c      	mov	r4, r9
20001220:	4023      	ands	r3, r4
            A[i * N + j] = val;
20001222:	527b      	strh	r3, [r7, r1]
            order++;
20001224:	3001      	adds	r0, #1
        for (j = 0; j < N; j++)
20001226:	3601      	adds	r6, #1
20001228:	3102      	adds	r1, #2
            seed = ((order * seed) % 65536);
2000122a:	4342      	muls	r2, r0
2000122c:	17d5      	asrs	r5, r2, #31
2000122e:	0c2b      	lsrs	r3, r5, #16
20001230:	18d2      	adds	r2, r2, r3
20001232:	0414      	lsls	r4, r2, #16
20001234:	0c25      	lsrs	r5, r4, #16
20001236:	1aea      	subs	r2, r5, r3
            B[i * N + j] = val;
20001238:	465d      	mov	r5, fp
2000123a:	b284      	uxth	r4, r0
            val = (seed + order);
2000123c:	18a3      	adds	r3, r4, r2
2000123e:	b29b      	uxth	r3, r3
            B[i * N + j] = val;
20001240:	526b      	strh	r3, [r5, r1]
            val = (val + order);
20001242:	191b      	adds	r3, r3, r4
            val = matrix_clip(val, 1);
20001244:	464c      	mov	r4, r9
        for (j = 0; j < N; j++)
20001246:	3601      	adds	r6, #1
            val = matrix_clip(val, 1);
20001248:	4023      	ands	r3, r4
            A[i * N + j] = val;
2000124a:	527b      	strh	r3, [r7, r1]
            order++;
2000124c:	3001      	adds	r0, #1
        for (j = 0; j < N; j++)
2000124e:	3102      	adds	r1, #2
20001250:	4566      	cmp	r6, ip
20001252:	d259      	bcs.n	20001308 <core_init_matrix+0x1d8>
20001254:	465d      	mov	r5, fp
20001256:	9601      	str	r6, [sp, #4]
            seed = ((order * seed) % 65536);
20001258:	4342      	muls	r2, r0
2000125a:	17d6      	asrs	r6, r2, #31
2000125c:	0c34      	lsrs	r4, r6, #16
2000125e:	1912      	adds	r2, r2, r4
20001260:	0413      	lsls	r3, r2, #16
20001262:	0c1e      	lsrs	r6, r3, #16
20001264:	1b33      	subs	r3, r6, r4
            val = (seed + order);
20001266:	b284      	uxth	r4, r0
20001268:	46a0      	mov	r8, r4
2000126a:	18e2      	adds	r2, r4, r3
            val = matrix_clip(val, 1);
2000126c:	464c      	mov	r4, r9
            val = (seed + order);
2000126e:	b296      	uxth	r6, r2
            B[i * N + j] = val;
20001270:	526e      	strh	r6, [r5, r1]
            val = (val + order);
20001272:	4446      	add	r6, r8
            val = matrix_clip(val, 1);
20001274:	4026      	ands	r6, r4
            A[i * N + j] = val;
20001276:	527e      	strh	r6, [r7, r1]
            order++;
20001278:	1c46      	adds	r6, r0, #1
            seed = ((order * seed) % 65536);
2000127a:	4373      	muls	r3, r6
        for (j = 0; j < N; j++)
2000127c:	1c8a      	adds	r2, r1, #2
            seed = ((order * seed) % 65536);
2000127e:	17dc      	asrs	r4, r3, #31
        for (j = 0; j < N; j++)
20001280:	4690      	mov	r8, r2
            seed = ((order * seed) % 65536);
20001282:	0c22      	lsrs	r2, r4, #16
20001284:	4693      	mov	fp, r2
20001286:	445b      	add	r3, fp
20001288:	041b      	lsls	r3, r3, #16
2000128a:	0c1c      	lsrs	r4, r3, #16
2000128c:	1aa2      	subs	r2, r4, r2
            val = (seed + order);
2000128e:	b2b6      	uxth	r6, r6
20001290:	18b3      	adds	r3, r6, r2
20001292:	46b3      	mov	fp, r6
            B[i * N + j] = val;
20001294:	4646      	mov	r6, r8
            val = (seed + order);
20001296:	b29c      	uxth	r4, r3
            val = matrix_clip(val, 1);
20001298:	464b      	mov	r3, r9
            B[i * N + j] = val;
2000129a:	53ac      	strh	r4, [r5, r6]
            val = (val + order);
2000129c:	445c      	add	r4, fp
            val = matrix_clip(val, 1);
2000129e:	401c      	ands	r4, r3
        for (j = 0; j < N; j++)
200012a0:	2302      	movs	r3, #2
200012a2:	469b      	mov	fp, r3
            A[i * N + j] = val;
200012a4:	53bc      	strh	r4, [r7, r6]
            order++;
200012a6:	1c84      	adds	r4, r0, #2
            seed = ((order * seed) % 65536);
200012a8:	4362      	muls	r2, r4
200012aa:	17d6      	asrs	r6, r2, #31
200012ac:	0c33      	lsrs	r3, r6, #16
        for (j = 0; j < N; j++)
200012ae:	44d8      	add	r8, fp
            seed = ((order * seed) % 65536);
200012b0:	469b      	mov	fp, r3
200012b2:	445a      	add	r2, fp
200012b4:	0412      	lsls	r2, r2, #16
200012b6:	0c16      	lsrs	r6, r2, #16
200012b8:	1af6      	subs	r6, r6, r3
            val = (seed + order);
200012ba:	b2a4      	uxth	r4, r4
200012bc:	19a2      	adds	r2, r4, r6
200012be:	46a3      	mov	fp, r4
            B[i * N + j] = val;
200012c0:	4644      	mov	r4, r8
            val = (seed + order);
200012c2:	b293      	uxth	r3, r2
            val = matrix_clip(val, 1);
200012c4:	464a      	mov	r2, r9
            B[i * N + j] = val;
200012c6:	532b      	strh	r3, [r5, r4]
            val = (val + order);
200012c8:	445b      	add	r3, fp
            val = matrix_clip(val, 1);
200012ca:	4013      	ands	r3, r2
            A[i * N + j] = val;
200012cc:	533b      	strh	r3, [r7, r4]
            order++;
200012ce:	1cc4      	adds	r4, r0, #3
            seed = ((order * seed) % 65536);
200012d0:	4366      	muls	r6, r4
        for (j = 0; j < N; j++)
200012d2:	1d8b      	adds	r3, r1, #6
            seed = ((order * seed) % 65536);
200012d4:	17f2      	asrs	r2, r6, #31
        for (j = 0; j < N; j++)
200012d6:	4698      	mov	r8, r3
            seed = ((order * seed) % 65536);
200012d8:	0c13      	lsrs	r3, r2, #16
200012da:	469b      	mov	fp, r3
200012dc:	445e      	add	r6, fp
200012de:	0436      	lsls	r6, r6, #16
200012e0:	0c32      	lsrs	r2, r6, #16
200012e2:	b2a4      	uxth	r4, r4
200012e4:	1ad2      	subs	r2, r2, r3
            val = (seed + order);
200012e6:	18a6      	adds	r6, r4, r2
200012e8:	46a3      	mov	fp, r4
            B[i * N + j] = val;
200012ea:	4644      	mov	r4, r8
            val = (seed + order);
200012ec:	b2b3      	uxth	r3, r6
            val = matrix_clip(val, 1);
200012ee:	464e      	mov	r6, r9
            B[i * N + j] = val;
200012f0:	532b      	strh	r3, [r5, r4]
            val = (val + order);
200012f2:	445b      	add	r3, fp
            val = matrix_clip(val, 1);
200012f4:	4033      	ands	r3, r6
            A[i * N + j] = val;
200012f6:	533b      	strh	r3, [r7, r4]
        for (j = 0; j < N; j++)
200012f8:	9b01      	ldr	r3, [sp, #4]
            order++;
200012fa:	3004      	adds	r0, #4
        for (j = 0; j < N; j++)
200012fc:	3304      	adds	r3, #4
200012fe:	9301      	str	r3, [sp, #4]
20001300:	3108      	adds	r1, #8
20001302:	4563      	cmp	r3, ip
20001304:	d3a8      	bcc.n	20001258 <core_init_matrix+0x128>
20001306:	46ab      	mov	fp, r5
20001308:	4651      	mov	r1, sl
            order++;
2000130a:	4660      	mov	r0, ip
2000130c:	2500      	movs	r5, #0
2000130e:	3101      	adds	r1, #1
20001310:	2800      	cmp	r0, #0
20001312:	d000      	beq.n	20001316 <core_init_matrix+0x1e6>
20001314:	9d04      	ldr	r5, [sp, #16]
20001316:	46aa      	mov	sl, r5
    for (i = 0; i < N; i++)
20001318:	9e03      	ldr	r6, [sp, #12]
2000131a:	9c02      	ldr	r4, [sp, #8]
2000131c:	3601      	adds	r6, #1
2000131e:	4464      	add	r4, ip
            order++;
20001320:	448a      	add	sl, r1
    for (i = 0; i < N; i++)
20001322:	9603      	str	r6, [sp, #12]
20001324:	9402      	str	r4, [sp, #8]
20001326:	4566      	cmp	r6, ip
20001328:	d200      	bcs.n	2000132c <core_init_matrix+0x1fc>
2000132a:	e733      	b.n	20001194 <core_init_matrix+0x64>
2000132c:	46b8      	mov	r8, r7
2000132e:	465f      	mov	r7, fp
    p->A = A;
20001330:	9907      	ldr	r1, [sp, #28]
    p->C = (MATRES *)align_mem(B + N * N);
20001332:	9805      	ldr	r0, [sp, #20]
20001334:	2503      	movs	r5, #3
    p->A = A;
20001336:	4643      	mov	r3, r8
    p->B = B;
20001338:	608f      	str	r7, [r1, #8]
    p->C = (MATRES *)align_mem(B + N * N);
2000133a:	183f      	adds	r7, r7, r0
#if CORE_DEBUG
    printmat(A, N, "A");
    printmat(B, N, "B");
#endif
    return N;
}
2000133c:	4660      	mov	r0, ip
    p->C = (MATRES *)align_mem(B + N * N);
2000133e:	3f01      	subs	r7, #1
    p->N = N;
20001340:	9e06      	ldr	r6, [sp, #24]
    p->C = (MATRES *)align_mem(B + N * N);
20001342:	43af      	bics	r7, r5
20001344:	3704      	adds	r7, #4
    p->A = A;
20001346:	604b      	str	r3, [r1, #4]
    p->C = (MATRES *)align_mem(B + N * N);
20001348:	60cf      	str	r7, [r1, #12]
    p->N = N;
2000134a:	600e      	str	r6, [r1, #0]
}
2000134c:	b009      	add	sp, #36	; 0x24
2000134e:	bcf0      	pop	{r4, r5, r6, r7}
20001350:	46bb      	mov	fp, r7
20001352:	46b2      	mov	sl, r6
20001354:	46a9      	mov	r9, r5
20001356:	46a0      	mov	r8, r4
20001358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    A = (MATDAT *)align_mem(memblk);
2000135a:	2003      	movs	r0, #3
    B = A + N * N;
2000135c:	2401      	movs	r4, #1
    A = (MATDAT *)align_mem(memblk);
2000135e:	1e4f      	subs	r7, r1, #1
    B = A + N * N;
20001360:	4265      	negs	r5, r4
    A = (MATDAT *)align_mem(memblk);
20001362:	4387      	bics	r7, r0
20001364:	1d39      	adds	r1, r7, #4
    N = i - 1;
20001366:	46ac      	mov	ip, r5
    B = A + N * N;
20001368:	9506      	str	r5, [sp, #24]
2000136a:	3503      	adds	r5, #3
    A = (MATDAT *)align_mem(memblk);
2000136c:	4688      	mov	r8, r1
    B = A + N * N;
2000136e:	3706      	adds	r7, #6
20001370:	9505      	str	r5, [sp, #20]
20001372:	e702      	b.n	2000117a <core_init_matrix+0x4a>

20001374 <matrix_mul_vect>:
/* Function: matrix_mul_vect
    Multiply a matrix by a vector.
    This is common in many simple filters (e.g. fir where a vector of coefficients is applied to the matrix.)
*/
void matrix_mul_vect(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
20001374:	b5f0      	push	{r4, r5, r6, r7, lr}
20001376:	464f      	mov	r7, r9
20001378:	4646      	mov	r6, r8
2000137a:	46d6      	mov	lr, sl
2000137c:	0005      	movs	r5, r0
2000137e:	b5c0      	push	{r6, r7, lr}
20001380:	001c      	movs	r4, r3
20001382:	000e      	movs	r6, r1
20001384:	0017      	movs	r7, r2
    ee_u32 i, j;
    for (i = 0; i < N; i++)
20001386:	2800      	cmp	r0, #0
20001388:	d100      	bne.n	2000138c <matrix_mul_vect+0x18>
2000138a:	e089      	b.n	200014a0 <matrix_mul_vect+0x12c>
    {
        C[i] = 0;
2000138c:	0083      	lsls	r3, r0, #2
2000138e:	4699      	mov	r9, r3
20001390:	001a      	movs	r2, r3
20001392:	2100      	movs	r1, #0
20001394:	0030      	movs	r0, r6
20001396:	46b2      	mov	sl, r6
20001398:	f002 fc76 	bl	20003c88 <__memset_veneer>
2000139c:	003b      	movs	r3, r7
2000139e:	006d      	lsls	r5, r5, #1
200013a0:	44d1      	add	r9, sl
        for (j = 0; j < N; j++)
200013a2:	2207      	movs	r2, #7
200013a4:	0016      	movs	r6, r2
200013a6:	1ea8      	subs	r0, r5, #2
200013a8:	0840      	lsrs	r0, r0, #1
200013aa:	3001      	adds	r0, #1
{
200013ac:	2100      	movs	r1, #0
200013ae:	2700      	movs	r7, #0
200013b0:	4002      	ands	r2, r0
200013b2:	4206      	tst	r6, r0
200013b4:	d03d      	beq.n	20001432 <matrix_mul_vect+0xbe>
200013b6:	2a01      	cmp	r2, #1
200013b8:	d032      	beq.n	20001420 <matrix_mul_vect+0xac>
200013ba:	2a02      	cmp	r2, #2
200013bc:	d029      	beq.n	20001412 <matrix_mul_vect+0x9e>
200013be:	2a03      	cmp	r2, #3
200013c0:	d020      	beq.n	20001404 <matrix_mul_vect+0x90>
200013c2:	2a04      	cmp	r2, #4
200013c4:	d017      	beq.n	200013f6 <matrix_mul_vect+0x82>
200013c6:	2a05      	cmp	r2, #5
200013c8:	d00e      	beq.n	200013e8 <matrix_mul_vect+0x74>
200013ca:	2a06      	cmp	r2, #6
200013cc:	d005      	beq.n	200013da <matrix_mul_vect+0x66>
        {
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
200013ce:	2200      	movs	r2, #0
200013d0:	5ea1      	ldrsh	r1, [r4, r2]
200013d2:	2200      	movs	r2, #0
200013d4:	5e9f      	ldrsh	r7, [r3, r2]
200013d6:	434f      	muls	r7, r1
        for (j = 0; j < N; j++)
200013d8:	2102      	movs	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
200013da:	5e5a      	ldrsh	r2, [r3, r1]
200013dc:	4694      	mov	ip, r2
200013de:	4666      	mov	r6, ip
200013e0:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
200013e2:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
200013e4:	4370      	muls	r0, r6
200013e6:	183f      	adds	r7, r7, r0
200013e8:	5e5a      	ldrsh	r2, [r3, r1]
200013ea:	4690      	mov	r8, r2
200013ec:	4646      	mov	r6, r8
200013ee:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
200013f0:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
200013f2:	4370      	muls	r0, r6
200013f4:	183f      	adds	r7, r7, r0
200013f6:	5e5a      	ldrsh	r2, [r3, r1]
200013f8:	4694      	mov	ip, r2
200013fa:	4666      	mov	r6, ip
200013fc:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
200013fe:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001400:	4370      	muls	r0, r6
20001402:	183f      	adds	r7, r7, r0
20001404:	5e5a      	ldrsh	r2, [r3, r1]
20001406:	4690      	mov	r8, r2
20001408:	4646      	mov	r6, r8
2000140a:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
2000140c:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000140e:	4370      	muls	r0, r6
20001410:	183f      	adds	r7, r7, r0
20001412:	5e5a      	ldrsh	r2, [r3, r1]
20001414:	4694      	mov	ip, r2
20001416:	4666      	mov	r6, ip
20001418:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
2000141a:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000141c:	4370      	muls	r0, r6
2000141e:	183f      	adds	r7, r7, r0
20001420:	5e5a      	ldrsh	r2, [r3, r1]
20001422:	4690      	mov	r8, r2
20001424:	4646      	mov	r6, r8
20001426:	5e60      	ldrsh	r0, [r4, r1]
        for (j = 0; j < N; j++)
20001428:	3102      	adds	r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000142a:	4370      	muls	r0, r6
2000142c:	183f      	adds	r7, r7, r0
        for (j = 0; j < N; j++)
2000142e:	428d      	cmp	r5, r1
20001430:	d02f      	beq.n	20001492 <matrix_mul_vect+0x11e>
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001432:	5e5a      	ldrsh	r2, [r3, r1]
20001434:	5e60      	ldrsh	r0, [r4, r1]
20001436:	4350      	muls	r0, r2
20001438:	1838      	adds	r0, r7, r0
        for (j = 0; j < N; j++)
2000143a:	1c8f      	adds	r7, r1, #2
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000143c:	5fda      	ldrsh	r2, [r3, r7]
2000143e:	4690      	mov	r8, r2
20001440:	5fe6      	ldrsh	r6, [r4, r7]
20001442:	4647      	mov	r7, r8
20001444:	4377      	muls	r7, r6
20001446:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
20001448:	1d0f      	adds	r7, r1, #4
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000144a:	5fda      	ldrsh	r2, [r3, r7]
2000144c:	5fe7      	ldrsh	r7, [r4, r7]
2000144e:	4357      	muls	r7, r2
20001450:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
20001452:	1d8f      	adds	r7, r1, #6
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001454:	5fda      	ldrsh	r2, [r3, r7]
20001456:	5fe7      	ldrsh	r7, [r4, r7]
20001458:	4357      	muls	r7, r2
2000145a:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
2000145c:	000f      	movs	r7, r1
2000145e:	3708      	adds	r7, #8
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001460:	5fda      	ldrsh	r2, [r3, r7]
20001462:	5fe7      	ldrsh	r7, [r4, r7]
20001464:	4357      	muls	r7, r2
20001466:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
20001468:	000f      	movs	r7, r1
2000146a:	370a      	adds	r7, #10
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000146c:	5fda      	ldrsh	r2, [r3, r7]
2000146e:	5fe7      	ldrsh	r7, [r4, r7]
20001470:	4357      	muls	r7, r2
20001472:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
20001474:	000f      	movs	r7, r1
20001476:	370c      	adds	r7, #12
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001478:	5fda      	ldrsh	r2, [r3, r7]
2000147a:	5fe7      	ldrsh	r7, [r4, r7]
2000147c:	4357      	muls	r7, r2
2000147e:	19c0      	adds	r0, r0, r7
        for (j = 0; j < N; j++)
20001480:	000f      	movs	r7, r1
20001482:	370e      	adds	r7, #14
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
20001484:	5fda      	ldrsh	r2, [r3, r7]
20001486:	5fe7      	ldrsh	r7, [r4, r7]
        for (j = 0; j < N; j++)
20001488:	3110      	adds	r1, #16
            C[i] += (MATRES)A[i * N + j] * (MATRES)B[j];
2000148a:	4357      	muls	r7, r2
2000148c:	19c7      	adds	r7, r0, r7
        for (j = 0; j < N; j++)
2000148e:	428d      	cmp	r5, r1
20001490:	d1cf      	bne.n	20001432 <matrix_mul_vect+0xbe>
20001492:	4651      	mov	r1, sl
20001494:	c180      	stmia	r1!, {r7}
20001496:	468a      	mov	sl, r1
    for (i = 0; i < N; i++)
20001498:	195b      	adds	r3, r3, r5
2000149a:	4589      	cmp	r9, r1
2000149c:	d000      	beq.n	200014a0 <matrix_mul_vect+0x12c>
2000149e:	e780      	b.n	200013a2 <matrix_mul_vect+0x2e>
        }
    }
}
200014a0:	bce0      	pop	{r5, r6, r7}
200014a2:	46ba      	mov	sl, r7
200014a4:	46b1      	mov	r9, r6
200014a6:	46a8      	mov	r8, r5
200014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
200014aa:	46c0      	nop			; (mov r8, r8)

200014ac <matrix_mul_matrix>:
/* Function: matrix_mul_matrix
    Multiply a matrix by a matrix.
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
200014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
200014ae:	4657      	mov	r7, sl
200014b0:	46de      	mov	lr, fp
200014b2:	464e      	mov	r6, r9
200014b4:	4645      	mov	r5, r8
200014b6:	b5e0      	push	{r5, r6, r7, lr}
200014b8:	b08b      	sub	sp, #44	; 0x2c
200014ba:	4682      	mov	sl, r0
200014bc:	9107      	str	r1, [sp, #28]
200014be:	9208      	str	r2, [sp, #32]
200014c0:	9309      	str	r3, [sp, #36]	; 0x24
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
200014c2:	2800      	cmp	r0, #0
200014c4:	d100      	bne.n	200014c8 <matrix_mul_matrix+0x1c>
200014c6:	e0fd      	b.n	200016c4 <matrix_mul_matrix+0x218>
    {
        for (j = 0; j < N; j++)
        {
            C[i * N + j] = 0;
200014c8:	2600      	movs	r6, #0
200014ca:	0044      	lsls	r4, r0, #1
200014cc:	1915      	adds	r5, r2, r4
200014ce:	0082      	lsls	r2, r0, #2
200014d0:	9206      	str	r2, [sp, #24]
200014d2:	9604      	str	r6, [sp, #16]
    for (i = 0; i < N; i++)
200014d4:	9605      	str	r6, [sp, #20]
        for (j = 0; j < N; j++)
200014d6:	9b07      	ldr	r3, [sp, #28]
200014d8:	9f04      	ldr	r7, [sp, #16]
200014da:	469c      	mov	ip, r3
200014dc:	00be      	lsls	r6, r7, #2
200014de:	4466      	add	r6, ip
            C[i * N + j] = 0;
200014e0:	2100      	movs	r1, #0
200014e2:	9a06      	ldr	r2, [sp, #24]
200014e4:	0030      	movs	r0, r6
200014e6:	f002 fbcf 	bl	20003c88 <__memset_veneer>
200014ea:	9a08      	ldr	r2, [sp, #32]
200014ec:	9809      	ldr	r0, [sp, #36]	; 0x24
200014ee:	4690      	mov	r8, r2
        for (j = 0; j < N; j++)
200014f0:	2300      	movs	r3, #0
200014f2:	0001      	movs	r1, r0
200014f4:	007f      	lsls	r7, r7, #1
200014f6:	4447      	add	r7, r8
200014f8:	9501      	str	r5, [sp, #4]
200014fa:	9302      	str	r3, [sp, #8]
200014fc:	9603      	str	r6, [sp, #12]
            for (k = 0; k < N; k++)
200014fe:	9d01      	ldr	r5, [sp, #4]
20001500:	0008      	movs	r0, r1
20001502:	1bee      	subs	r6, r5, r7
20001504:	2502      	movs	r5, #2
20001506:	46b1      	mov	r9, r6
20001508:	426e      	negs	r6, r5
2000150a:	46b3      	mov	fp, r6
2000150c:	44d9      	add	r9, fp
2000150e:	464d      	mov	r5, r9
20001510:	086e      	lsrs	r6, r5, #1
20001512:	2501      	movs	r5, #1
20001514:	46b0      	mov	r8, r6
20001516:	46ac      	mov	ip, r5
20001518:	44e0      	add	r8, ip
2000151a:	4646      	mov	r6, r8
2000151c:	3506      	adds	r5, #6
2000151e:	402e      	ands	r6, r5
20001520:	46b1      	mov	r9, r6
20001522:	4646      	mov	r6, r8
20001524:	003a      	movs	r2, r7
20001526:	2300      	movs	r3, #0
20001528:	4235      	tst	r5, r6
2000152a:	d05c      	beq.n	200015e6 <matrix_mul_matrix+0x13a>
2000152c:	464d      	mov	r5, r9
2000152e:	2d01      	cmp	r5, #1
20001530:	d04b      	beq.n	200015ca <matrix_mul_matrix+0x11e>
20001532:	2d02      	cmp	r5, #2
20001534:	d03e      	beq.n	200015b4 <matrix_mul_matrix+0x108>
20001536:	2d03      	cmp	r5, #3
20001538:	d030      	beq.n	2000159c <matrix_mul_matrix+0xf0>
2000153a:	2d04      	cmp	r5, #4
2000153c:	d022      	beq.n	20001584 <matrix_mul_matrix+0xd8>
2000153e:	2d05      	cmp	r5, #5
20001540:	d014      	beq.n	2000156c <matrix_mul_matrix+0xc0>
20001542:	2d06      	cmp	r5, #6
20001544:	d006      	beq.n	20001554 <matrix_mul_matrix+0xa8>
            {
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001546:	2200      	movs	r2, #0
20001548:	5ebb      	ldrsh	r3, [r7, r2]
2000154a:	2000      	movs	r0, #0
2000154c:	5e0a      	ldrsh	r2, [r1, r0]
            for (k = 0; k < N; k++)
2000154e:	1908      	adds	r0, r1, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001550:	4353      	muls	r3, r2
            for (k = 0; k < N; k++)
20001552:	1cba      	adds	r2, r7, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001554:	2600      	movs	r6, #0
20001556:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
20001558:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000155a:	46ab      	mov	fp, r5
2000155c:	2600      	movs	r6, #0
2000155e:	5f85      	ldrsh	r5, [r0, r6]
            for (k = 0; k < N; k++)
20001560:	1900      	adds	r0, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001562:	002e      	movs	r6, r5
20001564:	465d      	mov	r5, fp
20001566:	4375      	muls	r5, r6
20001568:	46a8      	mov	r8, r5
2000156a:	4443      	add	r3, r8
2000156c:	2600      	movs	r6, #0
2000156e:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
20001570:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001572:	46ac      	mov	ip, r5
20001574:	2600      	movs	r6, #0
20001576:	5f85      	ldrsh	r5, [r0, r6]
            for (k = 0; k < N; k++)
20001578:	1900      	adds	r0, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000157a:	002e      	movs	r6, r5
2000157c:	4665      	mov	r5, ip
2000157e:	4375      	muls	r5, r6
20001580:	46a9      	mov	r9, r5
20001582:	444b      	add	r3, r9
20001584:	2600      	movs	r6, #0
20001586:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
20001588:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000158a:	46ab      	mov	fp, r5
2000158c:	2600      	movs	r6, #0
2000158e:	5f85      	ldrsh	r5, [r0, r6]
            for (k = 0; k < N; k++)
20001590:	1900      	adds	r0, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001592:	002e      	movs	r6, r5
20001594:	465d      	mov	r5, fp
20001596:	4375      	muls	r5, r6
20001598:	46a8      	mov	r8, r5
2000159a:	4443      	add	r3, r8
2000159c:	2600      	movs	r6, #0
2000159e:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
200015a0:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015a2:	46ac      	mov	ip, r5
200015a4:	2600      	movs	r6, #0
200015a6:	5f85      	ldrsh	r5, [r0, r6]
            for (k = 0; k < N; k++)
200015a8:	1900      	adds	r0, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015aa:	002e      	movs	r6, r5
200015ac:	4665      	mov	r5, ip
200015ae:	4375      	muls	r5, r6
200015b0:	46a9      	mov	r9, r5
200015b2:	444b      	add	r3, r9
200015b4:	2600      	movs	r6, #0
200015b6:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
200015b8:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015ba:	46ab      	mov	fp, r5
200015bc:	2600      	movs	r6, #0
200015be:	5f85      	ldrsh	r5, [r0, r6]
200015c0:	465e      	mov	r6, fp
200015c2:	436e      	muls	r6, r5
200015c4:	46b0      	mov	r8, r6
            for (k = 0; k < N; k++)
200015c6:	1900      	adds	r0, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015c8:	4443      	add	r3, r8
200015ca:	2600      	movs	r6, #0
200015cc:	5f95      	ldrsh	r5, [r2, r6]
            for (k = 0; k < N; k++)
200015ce:	3202      	adds	r2, #2
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015d0:	46ac      	mov	ip, r5
200015d2:	2600      	movs	r6, #0
200015d4:	5f85      	ldrsh	r5, [r0, r6]
200015d6:	4666      	mov	r6, ip
200015d8:	436e      	muls	r6, r5
200015da:	46b1      	mov	r9, r6
            for (k = 0; k < N; k++)
200015dc:	9d01      	ldr	r5, [sp, #4]
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015de:	444b      	add	r3, r9
            for (k = 0; k < N; k++)
200015e0:	1900      	adds	r0, r0, r4
200015e2:	4295      	cmp	r5, r2
200015e4:	d058      	beq.n	20001698 <matrix_mul_matrix+0x1ec>
200015e6:	468b      	mov	fp, r1
200015e8:	9d01      	ldr	r5, [sp, #4]
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015ea:	2600      	movs	r6, #0
200015ec:	5f91      	ldrsh	r1, [r2, r6]
200015ee:	4688      	mov	r8, r1
200015f0:	2600      	movs	r6, #0
200015f2:	5f81      	ldrsh	r1, [r0, r6]
200015f4:	000e      	movs	r6, r1
200015f6:	4641      	mov	r1, r8
200015f8:	4371      	muls	r1, r6
200015fa:	468c      	mov	ip, r1
            for (k = 0; k < N; k++)
200015fc:	1901      	adds	r1, r0, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200015fe:	4463      	add	r3, ip
            for (k = 0; k < N; k++)
20001600:	468c      	mov	ip, r1
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001602:	2602      	movs	r6, #2
20001604:	5f91      	ldrsh	r1, [r2, r6]
            for (k = 0; k < N; k++)
20001606:	46a0      	mov	r8, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001608:	4689      	mov	r9, r1
2000160a:	464e      	mov	r6, r9
2000160c:	5f00      	ldrsh	r0, [r0, r4]
            for (k = 0; k < N; k++)
2000160e:	44e0      	add	r8, ip
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001610:	4370      	muls	r0, r6
20001612:	181b      	adds	r3, r3, r0
20001614:	2004      	movs	r0, #4
20001616:	5e11      	ldrsh	r1, [r2, r0]
20001618:	4660      	mov	r0, ip
2000161a:	4689      	mov	r9, r1
2000161c:	5f06      	ldrsh	r6, [r0, r4]
2000161e:	4649      	mov	r1, r9
20001620:	434e      	muls	r6, r1
20001622:	199b      	adds	r3, r3, r6
20001624:	2006      	movs	r0, #6
20001626:	5e16      	ldrsh	r6, [r2, r0]
20001628:	4640      	mov	r0, r8
2000162a:	46b1      	mov	r9, r6
2000162c:	5f06      	ldrsh	r6, [r0, r4]
2000162e:	4649      	mov	r1, r9
            for (k = 0; k < N; k++)
20001630:	46a4      	mov	ip, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001632:	434e      	muls	r6, r1
20001634:	199b      	adds	r3, r3, r6
20001636:	2008      	movs	r0, #8
20001638:	5e16      	ldrsh	r6, [r2, r0]
            for (k = 0; k < N; k++)
2000163a:	44c4      	add	ip, r8
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000163c:	4660      	mov	r0, ip
2000163e:	46b1      	mov	r9, r6
20001640:	5f06      	ldrsh	r6, [r0, r4]
20001642:	4649      	mov	r1, r9
            for (k = 0; k < N; k++)
20001644:	46a0      	mov	r8, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001646:	434e      	muls	r6, r1
20001648:	199b      	adds	r3, r3, r6
2000164a:	200a      	movs	r0, #10
2000164c:	5e16      	ldrsh	r6, [r2, r0]
            for (k = 0; k < N; k++)
2000164e:	44e0      	add	r8, ip
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001650:	4640      	mov	r0, r8
20001652:	46b1      	mov	r9, r6
20001654:	5f06      	ldrsh	r6, [r0, r4]
20001656:	4649      	mov	r1, r9
            for (k = 0; k < N; k++)
20001658:	46a4      	mov	ip, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000165a:	434e      	muls	r6, r1
2000165c:	199b      	adds	r3, r3, r6
2000165e:	200c      	movs	r0, #12
20001660:	5e16      	ldrsh	r6, [r2, r0]
            for (k = 0; k < N; k++)
20001662:	44c4      	add	ip, r8
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001664:	46b1      	mov	r9, r6
20001666:	4660      	mov	r0, ip
20001668:	5f06      	ldrsh	r6, [r0, r4]
2000166a:	4649      	mov	r1, r9
            for (k = 0; k < N; k++)
2000166c:	46a0      	mov	r8, r4
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000166e:	434e      	muls	r6, r1
            for (k = 0; k < N; k++)
20001670:	44e0      	add	r8, ip
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001672:	199b      	adds	r3, r3, r6
20001674:	260e      	movs	r6, #14
20001676:	5f91      	ldrsh	r1, [r2, r6]
20001678:	4646      	mov	r6, r8
2000167a:	4689      	mov	r9, r1
2000167c:	5f31      	ldrsh	r1, [r6, r4]
            for (k = 0; k < N; k++)
2000167e:	4640      	mov	r0, r8
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001680:	000e      	movs	r6, r1
20001682:	4649      	mov	r1, r9
20001684:	4371      	muls	r1, r6
20001686:	468c      	mov	ip, r1
            for (k = 0; k < N; k++)
20001688:	1900      	adds	r0, r0, r4
2000168a:	3210      	adds	r2, #16
                C[i * N + j] += (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000168c:	4463      	add	r3, ip
            for (k = 0; k < N; k++)
2000168e:	1900      	adds	r0, r0, r4
20001690:	4295      	cmp	r5, r2
20001692:	d1aa      	bne.n	200015ea <matrix_mul_matrix+0x13e>
20001694:	4659      	mov	r1, fp
20001696:	9501      	str	r5, [sp, #4]
20001698:	9a03      	ldr	r2, [sp, #12]
        for (j = 0; j < N; j++)
2000169a:	9d02      	ldr	r5, [sp, #8]
2000169c:	c208      	stmia	r2!, {r3}
2000169e:	3501      	adds	r5, #1
200016a0:	9203      	str	r2, [sp, #12]
200016a2:	3102      	adds	r1, #2
200016a4:	45aa      	cmp	sl, r5
200016a6:	d001      	beq.n	200016ac <matrix_mul_matrix+0x200>
200016a8:	9502      	str	r5, [sp, #8]
200016aa:	e728      	b.n	200014fe <matrix_mul_matrix+0x52>
    for (i = 0; i < N; i++)
200016ac:	9904      	ldr	r1, [sp, #16]
200016ae:	9f01      	ldr	r7, [sp, #4]
200016b0:	9805      	ldr	r0, [sp, #20]
200016b2:	9b02      	ldr	r3, [sp, #8]
200016b4:	4451      	add	r1, sl
200016b6:	1c46      	adds	r6, r0, #1
200016b8:	9104      	str	r1, [sp, #16]
200016ba:	193d      	adds	r5, r7, r4
200016bc:	4298      	cmp	r0, r3
200016be:	d001      	beq.n	200016c4 <matrix_mul_matrix+0x218>
200016c0:	9605      	str	r6, [sp, #20]
200016c2:	e708      	b.n	200014d6 <matrix_mul_matrix+0x2a>
            }
        }
    }
}
200016c4:	b00b      	add	sp, #44	; 0x2c
200016c6:	bcf0      	pop	{r4, r5, r6, r7}
200016c8:	46bb      	mov	fp, r7
200016ca:	46b2      	mov	sl, r6
200016cc:	46a9      	mov	r9, r5
200016ce:	46a0      	mov	r8, r4
200016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200016d2:	46c0      	nop			; (mov r8, r8)

200016d4 <matrix_mul_matrix_bitextract>:
/* Function: matrix_mul_matrix_bitextract
    Multiply a matrix by a matrix, and extract some bits from the result.
    Basic code is used in many algorithms, mostly with minor changes such as scaling.
*/
void matrix_mul_matrix_bitextract(ee_u32 N, MATRES *C, MATDAT *A, MATDAT *B)
{
200016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
200016d6:	46de      	mov	lr, fp
200016d8:	4657      	mov	r7, sl
200016da:	464e      	mov	r6, r9
200016dc:	4645      	mov	r5, r8
200016de:	b5e0      	push	{r5, r6, r7, lr}
200016e0:	b089      	sub	sp, #36	; 0x24
200016e2:	9001      	str	r0, [sp, #4]
200016e4:	9105      	str	r1, [sp, #20]
200016e6:	9206      	str	r2, [sp, #24]
200016e8:	9307      	str	r3, [sp, #28]
    ee_u32 i, j, k;
    for (i = 0; i < N; i++)
200016ea:	2800      	cmp	r0, #0
200016ec:	d100      	bne.n	200016f0 <matrix_mul_matrix_bitextract+0x1c>
200016ee:	e0bd      	b.n	2000186c <matrix_mul_matrix_bitextract+0x198>
200016f0:	4693      	mov	fp, r2
200016f2:	0044      	lsls	r4, r0, #1
    {
        for (j = 0; j < N; j++)
        {
            C[i * N + j] = 0;
200016f4:	2100      	movs	r1, #0
200016f6:	44a3      	add	fp, r4
            for (k = 0; k < N; k++)
            {
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200016f8:	260f      	movs	r6, #15
200016fa:	465f      	mov	r7, fp
            C[i * N + j] = 0;
200016fc:	0080      	lsls	r0, r0, #2
200016fe:	9004      	str	r0, [sp, #16]
20001700:	9102      	str	r1, [sp, #8]
    for (i = 0; i < N; i++)
20001702:	9103      	str	r1, [sp, #12]
        for (j = 0; j < N; j++)
20001704:	9a05      	ldr	r2, [sp, #20]
20001706:	9d02      	ldr	r5, [sp, #8]
20001708:	4690      	mov	r8, r2
2000170a:	00ab      	lsls	r3, r5, #2
2000170c:	4498      	add	r8, r3
            C[i * N + j] = 0;
2000170e:	2100      	movs	r1, #0
20001710:	4640      	mov	r0, r8
20001712:	9a04      	ldr	r2, [sp, #16]
20001714:	f002 fab8 	bl	20003c88 <__memset_veneer>
20001718:	0069      	lsls	r1, r5, #1
2000171a:	9d06      	ldr	r5, [sp, #24]
2000171c:	9807      	ldr	r0, [sp, #28]
2000171e:	46aa      	mov	sl, r5
        for (j = 0; j < N; j++)
20001720:	2300      	movs	r3, #0
20001722:	4684      	mov	ip, r0
20001724:	448a      	add	sl, r1
20001726:	9300      	str	r3, [sp, #0]
            for (k = 0; k < N; k++)
20001728:	4652      	mov	r2, sl
2000172a:	1abd      	subs	r5, r7, r2
2000172c:	3d02      	subs	r5, #2
2000172e:	0868      	lsrs	r0, r5, #1
20001730:	2503      	movs	r5, #3
20001732:	46a9      	mov	r9, r5
20001734:	3001      	adds	r0, #1
20001736:	4005      	ands	r5, r0
20001738:	46ab      	mov	fp, r5
2000173a:	464d      	mov	r5, r9
2000173c:	4661      	mov	r1, ip
2000173e:	2300      	movs	r3, #0
20001740:	4205      	tst	r5, r0
20001742:	d039      	beq.n	200017b8 <matrix_mul_matrix_bitextract+0xe4>
20001744:	4658      	mov	r0, fp
20001746:	2801      	cmp	r0, #1
20001748:	d022      	beq.n	20001790 <matrix_mul_matrix_bitextract+0xbc>
2000174a:	2802      	cmp	r0, #2
2000174c:	d00e      	beq.n	2000176c <matrix_mul_matrix_bitextract+0x98>
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000174e:	2300      	movs	r3, #0
20001750:	5ed3      	ldrsh	r3, [r2, r3]
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
20001752:	227f      	movs	r2, #127	; 0x7f
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001754:	2500      	movs	r5, #0
20001756:	5f4d      	ldrsh	r5, [r1, r5]
            for (k = 0; k < N; k++)
20001758:	4661      	mov	r1, ip
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000175a:	435d      	muls	r5, r3
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
2000175c:	116b      	asrs	r3, r5, #5
2000175e:	4013      	ands	r3, r2
            for (k = 0; k < N; k++)
20001760:	4652      	mov	r2, sl
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
20001762:	10a8      	asrs	r0, r5, #2
20001764:	4030      	ands	r0, r6
20001766:	4343      	muls	r3, r0
            for (k = 0; k < N; k++)
20001768:	3202      	adds	r2, #2
2000176a:	1909      	adds	r1, r1, r4
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000176c:	2500      	movs	r5, #0
2000176e:	5f50      	ldrsh	r0, [r2, r5]
            for (k = 0; k < N; k++)
20001770:	3202      	adds	r2, #2
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001772:	4683      	mov	fp, r0
20001774:	2000      	movs	r0, #0
20001776:	5e0d      	ldrsh	r5, [r1, r0]
20001778:	4658      	mov	r0, fp
2000177a:	4368      	muls	r0, r5
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
2000177c:	1085      	asrs	r5, r0, #2
2000177e:	4035      	ands	r5, r6
20001780:	46a9      	mov	r9, r5
20001782:	257f      	movs	r5, #127	; 0x7f
20001784:	1140      	asrs	r0, r0, #5
20001786:	4028      	ands	r0, r5
20001788:	464d      	mov	r5, r9
2000178a:	4368      	muls	r0, r5
            for (k = 0; k < N; k++)
2000178c:	1909      	adds	r1, r1, r4
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
2000178e:	181b      	adds	r3, r3, r0
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001790:	2500      	movs	r5, #0
20001792:	5f50      	ldrsh	r0, [r2, r5]
            for (k = 0; k < N; k++)
20001794:	3202      	adds	r2, #2
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001796:	4683      	mov	fp, r0
20001798:	2000      	movs	r0, #0
2000179a:	5e0d      	ldrsh	r5, [r1, r0]
2000179c:	4658      	mov	r0, fp
2000179e:	4368      	muls	r0, r5
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200017a0:	1085      	asrs	r5, r0, #2
200017a2:	4035      	ands	r5, r6
200017a4:	46a9      	mov	r9, r5
200017a6:	257f      	movs	r5, #127	; 0x7f
200017a8:	1140      	asrs	r0, r0, #5
200017aa:	4028      	ands	r0, r5
200017ac:	464d      	mov	r5, r9
200017ae:	4368      	muls	r0, r5
            for (k = 0; k < N; k++)
200017b0:	1909      	adds	r1, r1, r4
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200017b2:	181b      	adds	r3, r3, r0
            for (k = 0; k < N; k++)
200017b4:	4297      	cmp	r7, r2
200017b6:	d03f      	beq.n	20001838 <matrix_mul_matrix_bitextract+0x164>
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200017b8:	2500      	movs	r5, #0
200017ba:	5f50      	ldrsh	r0, [r2, r5]
200017bc:	4683      	mov	fp, r0
200017be:	2500      	movs	r5, #0
200017c0:	5f48      	ldrsh	r0, [r1, r5]
200017c2:	465d      	mov	r5, fp
200017c4:	4368      	muls	r0, r5
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200017c6:	1085      	asrs	r5, r0, #2
200017c8:	4035      	ands	r5, r6
200017ca:	46a9      	mov	r9, r5
200017cc:	257f      	movs	r5, #127	; 0x7f
200017ce:	1140      	asrs	r0, r0, #5
200017d0:	4028      	ands	r0, r5
200017d2:	464d      	mov	r5, r9
200017d4:	4368      	muls	r0, r5
200017d6:	181b      	adds	r3, r3, r0
            for (k = 0; k < N; k++)
200017d8:	1908      	adds	r0, r1, r4
200017da:	4683      	mov	fp, r0
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200017dc:	5f09      	ldrsh	r1, [r1, r4]
200017de:	2502      	movs	r5, #2
200017e0:	5f50      	ldrsh	r0, [r2, r5]
200017e2:	4341      	muls	r1, r0
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200017e4:	108d      	asrs	r5, r1, #2
200017e6:	1148      	asrs	r0, r1, #5
200017e8:	217f      	movs	r1, #127	; 0x7f
200017ea:	4035      	ands	r5, r6
200017ec:	4008      	ands	r0, r1
200017ee:	4368      	muls	r0, r5
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
200017f0:	2504      	movs	r5, #4
200017f2:	5f51      	ldrsh	r1, [r2, r5]
200017f4:	465d      	mov	r5, fp
200017f6:	4689      	mov	r9, r1
200017f8:	5f29      	ldrsh	r1, [r5, r4]
200017fa:	464d      	mov	r5, r9
200017fc:	4369      	muls	r1, r5
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
200017fe:	108d      	asrs	r5, r1, #2
20001800:	4035      	ands	r5, r6
20001802:	1818      	adds	r0, r3, r0
            for (k = 0; k < N; k++)
20001804:	465b      	mov	r3, fp
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
20001806:	46ab      	mov	fp, r5
20001808:	257f      	movs	r5, #127	; 0x7f
2000180a:	1149      	asrs	r1, r1, #5
2000180c:	4029      	ands	r1, r5
2000180e:	465d      	mov	r5, fp
20001810:	4681      	mov	r9, r0
20001812:	4369      	muls	r1, r5
            for (k = 0; k < N; k++)
20001814:	191b      	adds	r3, r3, r4
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001816:	2506      	movs	r5, #6
20001818:	5f50      	ldrsh	r0, [r2, r5]
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
2000181a:	4489      	add	r9, r1
            for (k = 0; k < N; k++)
2000181c:	1919      	adds	r1, r3, r4
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
2000181e:	5f1d      	ldrsh	r5, [r3, r4]
            for (k = 0; k < N; k++)
20001820:	3208      	adds	r2, #8
                MATRES tmp = (MATRES)A[i * N + k] * (MATRES)B[k * N + j];
20001822:	4345      	muls	r5, r0
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
20001824:	10a8      	asrs	r0, r5, #2
20001826:	116b      	asrs	r3, r5, #5
20001828:	257f      	movs	r5, #127	; 0x7f
2000182a:	4030      	ands	r0, r6
2000182c:	402b      	ands	r3, r5
2000182e:	4343      	muls	r3, r0
            for (k = 0; k < N; k++)
20001830:	1909      	adds	r1, r1, r4
                C[i * N + j] += bit_extract(tmp, 2, 4) * bit_extract(tmp, 5, 7);
20001832:	444b      	add	r3, r9
            for (k = 0; k < N; k++)
20001834:	4297      	cmp	r7, r2
20001836:	d1bf      	bne.n	200017b8 <matrix_mul_matrix_bitextract+0xe4>
20001838:	4642      	mov	r2, r8
2000183a:	c208      	stmia	r2!, {r3}
        for (j = 0; j < N; j++)
2000183c:	2302      	movs	r3, #2
2000183e:	4699      	mov	r9, r3
20001840:	9900      	ldr	r1, [sp, #0]
20001842:	9d01      	ldr	r5, [sp, #4]
20001844:	3101      	adds	r1, #1
20001846:	4690      	mov	r8, r2
20001848:	44cc      	add	ip, r9
2000184a:	428d      	cmp	r5, r1
2000184c:	d001      	beq.n	20001852 <matrix_mul_matrix_bitextract+0x17e>
2000184e:	9100      	str	r1, [sp, #0]
20001850:	e76a      	b.n	20001728 <matrix_mul_matrix_bitextract+0x54>
    for (i = 0; i < N; i++)
20001852:	9801      	ldr	r0, [sp, #4]
20001854:	9902      	ldr	r1, [sp, #8]
20001856:	4680      	mov	r8, r0
20001858:	9a03      	ldr	r2, [sp, #12]
2000185a:	9d00      	ldr	r5, [sp, #0]
2000185c:	4441      	add	r1, r8
2000185e:	1c53      	adds	r3, r2, #1
20001860:	9102      	str	r1, [sp, #8]
20001862:	193f      	adds	r7, r7, r4
20001864:	42aa      	cmp	r2, r5
20001866:	d001      	beq.n	2000186c <matrix_mul_matrix_bitextract+0x198>
20001868:	9303      	str	r3, [sp, #12]
2000186a:	e74b      	b.n	20001704 <matrix_mul_matrix_bitextract+0x30>
            }
        }
    }
}
2000186c:	b009      	add	sp, #36	; 0x24
2000186e:	bcf0      	pop	{r4, r5, r6, r7}
20001870:	46bb      	mov	fp, r7
20001872:	46b2      	mov	sl, r6
20001874:	46a9      	mov	r9, r5
20001876:	46a0      	mov	r8, r4
20001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000187a:	46c0      	nop			; (mov r8, r8)

2000187c <matrix_test>:
{
2000187c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000187e:	46de      	mov	lr, fp
20001880:	4657      	mov	r7, sl
20001882:	464e      	mov	r6, r9
20001884:	4645      	mov	r5, r8
20001886:	4684      	mov	ip, r0
20001888:	b5e0      	push	{r5, r6, r7, lr}
2000188a:	b089      	sub	sp, #36	; 0x24
2000188c:	9307      	str	r3, [sp, #28]
2000188e:	ab12      	add	r3, sp, #72	; 0x48
20001890:	9101      	str	r1, [sp, #4]
20001892:	2000      	movs	r0, #0
20001894:	5e19      	ldrsh	r1, [r3, r0]
    for (i = 0; i < N; i++)
20001896:	4660      	mov	r0, ip
    MATDAT clipval = matrix_big(val);
20001898:	4cc0      	ldr	r4, [pc, #768]	; (20001b9c <matrix_test+0x320>)
{
2000189a:	9206      	str	r2, [sp, #24]
    MATDAT clipval = matrix_big(val);
2000189c:	430c      	orrs	r4, r1
    for (i = 0; i < N; i++)
2000189e:	2800      	cmp	r0, #0
200018a0:	d101      	bne.n	200018a6 <matrix_test+0x2a>
200018a2:	f000 fd94 	bl	200023ce <matrix_test+0xb52>
200018a6:	4690      	mov	r8, r2
200018a8:	2500      	movs	r5, #0
200018aa:	4663      	mov	r3, ip
200018ac:	0047      	lsls	r7, r0, #1
200018ae:	0040      	lsls	r0, r0, #1
200018b0:	4447      	add	r7, r8
200018b2:	4242      	negs	r2, r0
200018b4:	46ba      	mov	sl, r7
            A[i * N + j] += val;
200018b6:	0038      	movs	r0, r7
200018b8:	46a1      	mov	r9, r4
200018ba:	002f      	movs	r7, r5
200018bc:	468b      	mov	fp, r1
200018be:	4690      	mov	r8, r2
    for (i = 0; i < N; i++)
200018c0:	009b      	lsls	r3, r3, #2
200018c2:	425b      	negs	r3, r3
            A[i * N + j] += val;
200018c4:	b28e      	uxth	r6, r1
200018c6:	9205      	str	r2, [sp, #20]
    for (i = 0; i < N; i++)
200018c8:	9302      	str	r3, [sp, #8]
        for (j = 0; j < N; j++)
200018ca:	4641      	mov	r1, r8
200018cc:	1809      	adds	r1, r1, r0
200018ce:	1a44      	subs	r4, r0, r1
200018d0:	3c02      	subs	r4, #2
200018d2:	0862      	lsrs	r2, r4, #1
200018d4:	2407      	movs	r4, #7
200018d6:	0025      	movs	r5, r4
200018d8:	3201      	adds	r2, #1
{
200018da:	000b      	movs	r3, r1
200018dc:	4015      	ands	r5, r2
200018de:	4214      	tst	r4, r2
200018e0:	d029      	beq.n	20001936 <matrix_test+0xba>
200018e2:	2d01      	cmp	r5, #1
200018e4:	d021      	beq.n	2000192a <matrix_test+0xae>
200018e6:	2d02      	cmp	r5, #2
200018e8:	d01b      	beq.n	20001922 <matrix_test+0xa6>
200018ea:	2d03      	cmp	r5, #3
200018ec:	d015      	beq.n	2000191a <matrix_test+0x9e>
200018ee:	2d04      	cmp	r5, #4
200018f0:	d00f      	beq.n	20001912 <matrix_test+0x96>
200018f2:	2d05      	cmp	r5, #5
200018f4:	d009      	beq.n	2000190a <matrix_test+0x8e>
200018f6:	2d06      	cmp	r5, #6
200018f8:	d003      	beq.n	20001902 <matrix_test+0x86>
            A[i * N + j] += val;
200018fa:	880b      	ldrh	r3, [r1, #0]
200018fc:	18f2      	adds	r2, r6, r3
200018fe:	800a      	strh	r2, [r1, #0]
        for (j = 0; j < N; j++)
20001900:	1c8b      	adds	r3, r1, #2
            A[i * N + j] += val;
20001902:	881c      	ldrh	r4, [r3, #0]
20001904:	1935      	adds	r5, r6, r4
20001906:	801d      	strh	r5, [r3, #0]
        for (j = 0; j < N; j++)
20001908:	3302      	adds	r3, #2
            A[i * N + j] += val;
2000190a:	881a      	ldrh	r2, [r3, #0]
2000190c:	18b4      	adds	r4, r6, r2
2000190e:	801c      	strh	r4, [r3, #0]
        for (j = 0; j < N; j++)
20001910:	3302      	adds	r3, #2
            A[i * N + j] += val;
20001912:	881d      	ldrh	r5, [r3, #0]
20001914:	1972      	adds	r2, r6, r5
20001916:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < N; j++)
20001918:	3302      	adds	r3, #2
            A[i * N + j] += val;
2000191a:	881c      	ldrh	r4, [r3, #0]
2000191c:	1935      	adds	r5, r6, r4
2000191e:	801d      	strh	r5, [r3, #0]
        for (j = 0; j < N; j++)
20001920:	3302      	adds	r3, #2
            A[i * N + j] += val;
20001922:	881a      	ldrh	r2, [r3, #0]
20001924:	18b4      	adds	r4, r6, r2
20001926:	801c      	strh	r4, [r3, #0]
        for (j = 0; j < N; j++)
20001928:	3302      	adds	r3, #2
            A[i * N + j] += val;
2000192a:	881d      	ldrh	r5, [r3, #0]
2000192c:	1972      	adds	r2, r6, r5
2000192e:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < N; j++)
20001930:	3302      	adds	r3, #2
20001932:	4298      	cmp	r0, r3
20001934:	d01a      	beq.n	2000196c <matrix_test+0xf0>
            A[i * N + j] += val;
20001936:	881c      	ldrh	r4, [r3, #0]
20001938:	885a      	ldrh	r2, [r3, #2]
2000193a:	1935      	adds	r5, r6, r4
2000193c:	18b4      	adds	r4, r6, r2
2000193e:	801d      	strh	r5, [r3, #0]
20001940:	805c      	strh	r4, [r3, #2]
20001942:	889d      	ldrh	r5, [r3, #4]
20001944:	88dc      	ldrh	r4, [r3, #6]
20001946:	1972      	adds	r2, r6, r5
20001948:	1935      	adds	r5, r6, r4
2000194a:	809a      	strh	r2, [r3, #4]
2000194c:	80dd      	strh	r5, [r3, #6]
2000194e:	891a      	ldrh	r2, [r3, #8]
20001950:	895d      	ldrh	r5, [r3, #10]
20001952:	18b4      	adds	r4, r6, r2
20001954:	1972      	adds	r2, r6, r5
20001956:	811c      	strh	r4, [r3, #8]
20001958:	815a      	strh	r2, [r3, #10]
2000195a:	899c      	ldrh	r4, [r3, #12]
2000195c:	89da      	ldrh	r2, [r3, #14]
2000195e:	1935      	adds	r5, r6, r4
20001960:	18b4      	adds	r4, r6, r2
20001962:	819d      	strh	r5, [r3, #12]
20001964:	81dc      	strh	r4, [r3, #14]
        for (j = 0; j < N; j++)
20001966:	3310      	adds	r3, #16
20001968:	4298      	cmp	r0, r3
2000196a:	d1e4      	bne.n	20001936 <matrix_test+0xba>
    for (i = 0; i < N; i++)
2000196c:	9802      	ldr	r0, [sp, #8]
2000196e:	1c7d      	adds	r5, r7, #1
20001970:	1a08      	subs	r0, r1, r0
20001972:	45ac      	cmp	ip, r5
20001974:	d001      	beq.n	2000197a <matrix_test+0xfe>
20001976:	002f      	movs	r7, r5
20001978:	e7a7      	b.n	200018ca <matrix_test+0x4e>
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
2000197a:	2300      	movs	r3, #0
2000197c:	464a      	mov	r2, r9
2000197e:	4659      	mov	r1, fp
20001980:	9703      	str	r7, [sp, #12]
20001982:	469b      	mov	fp, r3
20001984:	4657      	mov	r7, sl
20001986:	46ac      	mov	ip, r5
20001988:	469a      	mov	sl, r3
2000198a:	46b1      	mov	r9, r6
2000198c:	9204      	str	r2, [sp, #16]
        for (j = 0; j < N; j++)
2000198e:	9e05      	ldr	r6, [sp, #20]
20001990:	9801      	ldr	r0, [sp, #4]
20001992:	19f5      	adds	r5, r6, r7
20001994:	1b7e      	subs	r6, r7, r5
20001996:	3e02      	subs	r6, #2
20001998:	4654      	mov	r4, sl
2000199a:	4680      	mov	r8, r0
2000199c:	0870      	lsrs	r0, r6, #1
2000199e:	2607      	movs	r6, #7
200019a0:	00a2      	lsls	r2, r4, #2
200019a2:	0034      	movs	r4, r6
200019a4:	3001      	adds	r0, #1
200019a6:	002b      	movs	r3, r5
200019a8:	4442      	add	r2, r8
200019aa:	4004      	ands	r4, r0
200019ac:	4206      	tst	r6, r0
200019ae:	d030      	beq.n	20001a12 <matrix_test+0x196>
200019b0:	2c01      	cmp	r4, #1
200019b2:	d027      	beq.n	20001a04 <matrix_test+0x188>
200019b4:	2c02      	cmp	r4, #2
200019b6:	d020      	beq.n	200019fa <matrix_test+0x17e>
200019b8:	2c03      	cmp	r4, #3
200019ba:	d019      	beq.n	200019f0 <matrix_test+0x174>
200019bc:	2c04      	cmp	r4, #4
200019be:	d012      	beq.n	200019e6 <matrix_test+0x16a>
200019c0:	2c05      	cmp	r4, #5
200019c2:	d00b      	beq.n	200019dc <matrix_test+0x160>
200019c4:	2c06      	cmp	r4, #6
200019c6:	d004      	beq.n	200019d2 <matrix_test+0x156>
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019c8:	2000      	movs	r0, #0
200019ca:	5e2b      	ldrsh	r3, [r5, r0]
200019cc:	434b      	muls	r3, r1
200019ce:	c208      	stmia	r2!, {r3}
        for (j = 0; j < N; j++)
200019d0:	1cab      	adds	r3, r5, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019d2:	2400      	movs	r4, #0
200019d4:	5f18      	ldrsh	r0, [r3, r4]
        for (j = 0; j < N; j++)
200019d6:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019d8:	4348      	muls	r0, r1
200019da:	c201      	stmia	r2!, {r0}
200019dc:	2400      	movs	r4, #0
200019de:	5f1e      	ldrsh	r6, [r3, r4]
        for (j = 0; j < N; j++)
200019e0:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019e2:	434e      	muls	r6, r1
200019e4:	c240      	stmia	r2!, {r6}
200019e6:	2400      	movs	r4, #0
200019e8:	5f18      	ldrsh	r0, [r3, r4]
        for (j = 0; j < N; j++)
200019ea:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019ec:	4348      	muls	r0, r1
200019ee:	c201      	stmia	r2!, {r0}
200019f0:	2400      	movs	r4, #0
200019f2:	5f1e      	ldrsh	r6, [r3, r4]
        for (j = 0; j < N; j++)
200019f4:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
200019f6:	434e      	muls	r6, r1
200019f8:	c240      	stmia	r2!, {r6}
200019fa:	2400      	movs	r4, #0
200019fc:	5f18      	ldrsh	r0, [r3, r4]
        for (j = 0; j < N; j++)
200019fe:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
20001a00:	4348      	muls	r0, r1
20001a02:	c201      	stmia	r2!, {r0}
20001a04:	2400      	movs	r4, #0
20001a06:	5f1e      	ldrsh	r6, [r3, r4]
        for (j = 0; j < N; j++)
20001a08:	3302      	adds	r3, #2
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
20001a0a:	434e      	muls	r6, r1
20001a0c:	c240      	stmia	r2!, {r6}
        for (j = 0; j < N; j++)
20001a0e:	42bb      	cmp	r3, r7
20001a10:	d028      	beq.n	20001a64 <matrix_test+0x1e8>
20001a12:	9c04      	ldr	r4, [sp, #16]
20001a14:	46a0      	mov	r8, r4
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
20001a16:	2000      	movs	r0, #0
20001a18:	5e1e      	ldrsh	r6, [r3, r0]
20001a1a:	0010      	movs	r0, r2
20001a1c:	434e      	muls	r6, r1
20001a1e:	c040      	stmia	r0!, {r6}
20001a20:	2602      	movs	r6, #2
20001a22:	5f9c      	ldrsh	r4, [r3, r6]
20001a24:	434c      	muls	r4, r1
20001a26:	6054      	str	r4, [r2, #4]
20001a28:	2604      	movs	r6, #4
20001a2a:	5f9c      	ldrsh	r4, [r3, r6]
20001a2c:	434c      	muls	r4, r1
20001a2e:	6044      	str	r4, [r0, #4]
20001a30:	2406      	movs	r4, #6
20001a32:	5f1e      	ldrsh	r6, [r3, r4]
20001a34:	2408      	movs	r4, #8
20001a36:	5f18      	ldrsh	r0, [r3, r4]
20001a38:	434e      	muls	r6, r1
20001a3a:	60d6      	str	r6, [r2, #12]
20001a3c:	240a      	movs	r4, #10
20001a3e:	5f1e      	ldrsh	r6, [r3, r4]
20001a40:	4348      	muls	r0, r1
20001a42:	434e      	muls	r6, r1
20001a44:	6110      	str	r0, [r2, #16]
20001a46:	6156      	str	r6, [r2, #20]
20001a48:	240c      	movs	r4, #12
20001a4a:	5f18      	ldrsh	r0, [r3, r4]
20001a4c:	240e      	movs	r4, #14
20001a4e:	5f1e      	ldrsh	r6, [r3, r4]
20001a50:	4348      	muls	r0, r1
20001a52:	434e      	muls	r6, r1
        for (j = 0; j < N; j++)
20001a54:	3310      	adds	r3, #16
            C[i * N + j] = (MATRES)A[i * N + j] * (MATRES)val;
20001a56:	6190      	str	r0, [r2, #24]
20001a58:	61d6      	str	r6, [r2, #28]
        for (j = 0; j < N; j++)
20001a5a:	3220      	adds	r2, #32
20001a5c:	42bb      	cmp	r3, r7
20001a5e:	d1da      	bne.n	20001a16 <matrix_test+0x19a>
20001a60:	4647      	mov	r7, r8
20001a62:	9704      	str	r7, [sp, #16]
    for (i = 0; i < N; i++)
20001a64:	465b      	mov	r3, fp
20001a66:	9a02      	ldr	r2, [sp, #8]
20001a68:	3301      	adds	r3, #1
20001a6a:	1aaf      	subs	r7, r5, r2
20001a6c:	9d03      	ldr	r5, [sp, #12]
20001a6e:	44e2      	add	sl, ip
20001a70:	45ab      	cmp	fp, r5
20001a72:	d001      	beq.n	20001a78 <matrix_test+0x1fc>
20001a74:	469b      	mov	fp, r3
20001a76:	e78a      	b.n	2000198e <matrix_test+0x112>
20001a78:	4665      	mov	r5, ip
20001a7a:	00a9      	lsls	r1, r5, #2
20001a7c:	468b      	mov	fp, r1
20001a7e:	464e      	mov	r6, r9
            if (tmp > clipval)
20001a80:	2300      	movs	r3, #0
20001a82:	2200      	movs	r2, #0
20001a84:	9801      	ldr	r0, [sp, #4]
20001a86:	9c04      	ldr	r4, [sp, #16]
20001a88:	4458      	add	r0, fp
20001a8a:	0007      	movs	r7, r0
20001a8c:	9104      	str	r1, [sp, #16]
20001a8e:	469a      	mov	sl, r3
20001a90:	2000      	movs	r0, #0
20001a92:	2100      	movs	r1, #0
20001a94:	46e1      	mov	r9, ip
20001a96:	4690      	mov	r8, r2
20001a98:	46b3      	mov	fp, r6
20001a9a:	9705      	str	r7, [sp, #20]
20001a9c:	9702      	str	r7, [sp, #8]
        for (j = 0; j < N; j++)
20001a9e:	9f01      	ldr	r7, [sp, #4]
20001aa0:	4656      	mov	r6, sl
20001aa2:	46bc      	mov	ip, r7
20001aa4:	9d02      	ldr	r5, [sp, #8]
20001aa6:	00b2      	lsls	r2, r6, #2
20001aa8:	4462      	add	r2, ip
20001aaa:	1aae      	subs	r6, r5, r2
20001aac:	3e04      	subs	r6, #4
20001aae:	08b7      	lsrs	r7, r6, #2
20001ab0:	2607      	movs	r6, #7
20001ab2:	0035      	movs	r5, r6
20001ab4:	3701      	adds	r7, #1
20001ab6:	403e      	ands	r6, r7
20001ab8:	423d      	tst	r5, r7
20001aba:	d06c      	beq.n	20001b96 <matrix_test+0x31a>
20001abc:	2e01      	cmp	r6, #1
20001abe:	d059      	beq.n	20001b74 <matrix_test+0x2f8>
20001ac0:	2e02      	cmp	r6, #2
20001ac2:	d04a      	beq.n	20001b5a <matrix_test+0x2de>
20001ac4:	2e03      	cmp	r6, #3
20001ac6:	d03b      	beq.n	20001b40 <matrix_test+0x2c4>
20001ac8:	2e04      	cmp	r6, #4
20001aca:	d02c      	beq.n	20001b26 <matrix_test+0x2aa>
20001acc:	2e05      	cmp	r6, #5
20001ace:	d01d      	beq.n	20001b0c <matrix_test+0x290>
20001ad0:	2e06      	cmp	r6, #6
20001ad2:	d00e      	beq.n	20001af2 <matrix_test+0x276>
            cur = C[i * N + j];
20001ad4:	000f      	movs	r7, r1
20001ad6:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001ad8:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001ada:	42a3      	cmp	r3, r4
20001adc:	dd01      	ble.n	20001ae2 <matrix_test+0x266>
20001ade:	f000 fc64 	bl	200023aa <matrix_test+0xb2e>
                ret += (cur > prev) ? 1 : 0;
20001ae2:	2601      	movs	r6, #1
20001ae4:	42b9      	cmp	r1, r7
20001ae6:	dc01      	bgt.n	20001aec <matrix_test+0x270>
20001ae8:	f000 fc6c 	bl	200023c4 <matrix_test+0xb48>
20001aec:	1980      	adds	r0, r0, r6
20001aee:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001af0:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001af2:	000d      	movs	r5, r1
20001af4:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001af6:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001af8:	42a3      	cmp	r3, r4
20001afa:	dd00      	ble.n	20001afe <matrix_test+0x282>
20001afc:	e100      	b.n	20001d00 <matrix_test+0x484>
                ret += (cur > prev) ? 1 : 0;
20001afe:	2701      	movs	r7, #1
20001b00:	42a9      	cmp	r1, r5
20001b02:	dc00      	bgt.n	20001b06 <matrix_test+0x28a>
20001b04:	2700      	movs	r7, #0
20001b06:	19c6      	adds	r6, r0, r7
20001b08:	b230      	sxth	r0, r6
        for (j = 0; j < N; j++)
20001b0a:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001b0c:	000d      	movs	r5, r1
20001b0e:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001b10:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001b12:	42a3      	cmp	r3, r4
20001b14:	dd00      	ble.n	20001b18 <matrix_test+0x29c>
20001b16:	e0ef      	b.n	20001cf8 <matrix_test+0x47c>
                ret += (cur > prev) ? 1 : 0;
20001b18:	2701      	movs	r7, #1
20001b1a:	42a9      	cmp	r1, r5
20001b1c:	dc00      	bgt.n	20001b20 <matrix_test+0x2a4>
20001b1e:	2700      	movs	r7, #0
20001b20:	19c0      	adds	r0, r0, r7
20001b22:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001b24:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001b26:	000d      	movs	r5, r1
20001b28:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001b2a:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001b2c:	42a3      	cmp	r3, r4
20001b2e:	dd00      	ble.n	20001b32 <matrix_test+0x2b6>
20001b30:	e0de      	b.n	20001cf0 <matrix_test+0x474>
                ret += (cur > prev) ? 1 : 0;
20001b32:	2601      	movs	r6, #1
20001b34:	42a9      	cmp	r1, r5
20001b36:	dc00      	bgt.n	20001b3a <matrix_test+0x2be>
20001b38:	2600      	movs	r6, #0
20001b3a:	1987      	adds	r7, r0, r6
20001b3c:	b238      	sxth	r0, r7
        for (j = 0; j < N; j++)
20001b3e:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001b40:	000d      	movs	r5, r1
20001b42:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001b44:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001b46:	42a3      	cmp	r3, r4
20001b48:	dd00      	ble.n	20001b4c <matrix_test+0x2d0>
20001b4a:	e0cd      	b.n	20001ce8 <matrix_test+0x46c>
                ret += (cur > prev) ? 1 : 0;
20001b4c:	2601      	movs	r6, #1
20001b4e:	42a9      	cmp	r1, r5
20001b50:	dc00      	bgt.n	20001b54 <matrix_test+0x2d8>
20001b52:	2600      	movs	r6, #0
20001b54:	1980      	adds	r0, r0, r6
20001b56:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001b58:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001b5a:	000f      	movs	r7, r1
20001b5c:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001b5e:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001b60:	42a3      	cmp	r3, r4
20001b62:	dd00      	ble.n	20001b66 <matrix_test+0x2ea>
20001b64:	e0bc      	b.n	20001ce0 <matrix_test+0x464>
                ret += (cur > prev) ? 1 : 0;
20001b66:	2501      	movs	r5, #1
20001b68:	42b9      	cmp	r1, r7
20001b6a:	dc00      	bgt.n	20001b6e <matrix_test+0x2f2>
20001b6c:	2500      	movs	r5, #0
20001b6e:	1946      	adds	r6, r0, r5
20001b70:	b230      	sxth	r0, r6
        for (j = 0; j < N; j++)
20001b72:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001b74:	000f      	movs	r7, r1
20001b76:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001b78:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001b7a:	42a3      	cmp	r3, r4
20001b7c:	dd00      	ble.n	20001b80 <matrix_test+0x304>
20001b7e:	e0ab      	b.n	20001cd8 <matrix_test+0x45c>
                ret += (cur > prev) ? 1 : 0;
20001b80:	2501      	movs	r5, #1
20001b82:	42b9      	cmp	r1, r7
20001b84:	dc00      	bgt.n	20001b88 <matrix_test+0x30c>
20001b86:	2500      	movs	r5, #0
20001b88:	1940      	adds	r0, r0, r5
20001b8a:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001b8c:	9e02      	ldr	r6, [sp, #8]
20001b8e:	3204      	adds	r2, #4
20001b90:	4296      	cmp	r6, r2
20001b92:	d100      	bne.n	20001b96 <matrix_test+0x31a>
20001b94:	e093      	b.n	20001cbe <matrix_test+0x442>
20001b96:	9d02      	ldr	r5, [sp, #8]
20001b98:	e04d      	b.n	20001c36 <matrix_test+0x3ba>
20001b9a:	46c0      	nop			; (mov r8, r8)
20001b9c:	fffff000 	.word	0xfffff000
                tmp = 0;
20001ba0:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001ba2:	6851      	ldr	r1, [r2, #4]
                ret += 10;
20001ba4:	300a      	adds	r0, #10
            tmp += cur;
20001ba6:	185b      	adds	r3, r3, r1
                ret += 10;
20001ba8:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001baa:	1d16      	adds	r6, r2, #4
            if (tmp > clipval)
20001bac:	42a3      	cmp	r3, r4
20001bae:	dd51      	ble.n	20001c54 <matrix_test+0x3d8>
                tmp = 0;
20001bb0:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001bb2:	6872      	ldr	r2, [r6, #4]
                ret += 10;
20001bb4:	300a      	adds	r0, #10
            tmp += cur;
20001bb6:	189b      	adds	r3, r3, r2
                ret += 10;
20001bb8:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001bba:	42a3      	cmp	r3, r4
20001bbc:	dc54      	bgt.n	20001c68 <matrix_test+0x3ec>
                ret += (cur > prev) ? 1 : 0;
20001bbe:	2701      	movs	r7, #1
20001bc0:	428a      	cmp	r2, r1
20001bc2:	dc00      	bgt.n	20001bc6 <matrix_test+0x34a>
20001bc4:	2700      	movs	r7, #0
20001bc6:	19c1      	adds	r1, r0, r7
20001bc8:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001bca:	68b1      	ldr	r1, [r6, #8]
            tmp += cur;
20001bcc:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001bce:	42a3      	cmp	r3, r4
20001bd0:	dc51      	bgt.n	20001c76 <matrix_test+0x3fa>
                ret += (cur > prev) ? 1 : 0;
20001bd2:	2701      	movs	r7, #1
20001bd4:	4291      	cmp	r1, r2
20001bd6:	dc00      	bgt.n	20001bda <matrix_test+0x35e>
20001bd8:	2700      	movs	r7, #0
20001bda:	19c2      	adds	r2, r0, r7
20001bdc:	b210      	sxth	r0, r2
            cur = C[i * N + j];
20001bde:	68f2      	ldr	r2, [r6, #12]
            tmp += cur;
20001be0:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001be2:	42a3      	cmp	r3, r4
20001be4:	dc4e      	bgt.n	20001c84 <matrix_test+0x408>
                ret += (cur > prev) ? 1 : 0;
20001be6:	2701      	movs	r7, #1
20001be8:	428a      	cmp	r2, r1
20001bea:	dc00      	bgt.n	20001bee <matrix_test+0x372>
20001bec:	2700      	movs	r7, #0
20001bee:	19c1      	adds	r1, r0, r7
20001bf0:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001bf2:	6931      	ldr	r1, [r6, #16]
            tmp += cur;
20001bf4:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001bf6:	42a3      	cmp	r3, r4
20001bf8:	dc4b      	bgt.n	20001c92 <matrix_test+0x416>
                ret += (cur > prev) ? 1 : 0;
20001bfa:	2701      	movs	r7, #1
20001bfc:	4291      	cmp	r1, r2
20001bfe:	dc00      	bgt.n	20001c02 <matrix_test+0x386>
20001c00:	2700      	movs	r7, #0
20001c02:	19c2      	adds	r2, r0, r7
20001c04:	b210      	sxth	r0, r2
            cur = C[i * N + j];
20001c06:	6972      	ldr	r2, [r6, #20]
            tmp += cur;
20001c08:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001c0a:	42a3      	cmp	r3, r4
20001c0c:	dc48      	bgt.n	20001ca0 <matrix_test+0x424>
                ret += (cur > prev) ? 1 : 0;
20001c0e:	2701      	movs	r7, #1
20001c10:	428a      	cmp	r2, r1
20001c12:	dc00      	bgt.n	20001c16 <matrix_test+0x39a>
20001c14:	2700      	movs	r7, #0
20001c16:	19c1      	adds	r1, r0, r7
20001c18:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001c1a:	69b1      	ldr	r1, [r6, #24]
            tmp += cur;
20001c1c:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001c1e:	42a3      	cmp	r3, r4
20001c20:	dc45      	bgt.n	20001cae <matrix_test+0x432>
                ret += (cur > prev) ? 1 : 0;
20001c22:	2701      	movs	r7, #1
20001c24:	4291      	cmp	r1, r2
20001c26:	dc00      	bgt.n	20001c2a <matrix_test+0x3ae>
20001c28:	2700      	movs	r7, #0
20001c2a:	19c2      	adds	r2, r0, r7
20001c2c:	b210      	sxth	r0, r2
        for (j = 0; j < N; j++)
20001c2e:	0032      	movs	r2, r6
20001c30:	321c      	adds	r2, #28
20001c32:	4295      	cmp	r5, r2
20001c34:	d042      	beq.n	20001cbc <matrix_test+0x440>
            cur = C[i * N + j];
20001c36:	6817      	ldr	r7, [r2, #0]
            tmp += cur;
20001c38:	19db      	adds	r3, r3, r7
            if (tmp > clipval)
20001c3a:	42a3      	cmp	r3, r4
20001c3c:	dcb0      	bgt.n	20001ba0 <matrix_test+0x324>
                ret += (cur > prev) ? 1 : 0;
20001c3e:	2601      	movs	r6, #1
20001c40:	428f      	cmp	r7, r1
20001c42:	dc00      	bgt.n	20001c46 <matrix_test+0x3ca>
20001c44:	2600      	movs	r6, #0
20001c46:	1981      	adds	r1, r0, r6
20001c48:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001c4a:	6851      	ldr	r1, [r2, #4]
        for (j = 0; j < N; j++)
20001c4c:	1d16      	adds	r6, r2, #4
            tmp += cur;
20001c4e:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001c50:	42a3      	cmp	r3, r4
20001c52:	dcad      	bgt.n	20001bb0 <matrix_test+0x334>
                ret += (cur > prev) ? 1 : 0;
20001c54:	2201      	movs	r2, #1
20001c56:	42b9      	cmp	r1, r7
20001c58:	dc00      	bgt.n	20001c5c <matrix_test+0x3e0>
20001c5a:	2200      	movs	r2, #0
20001c5c:	1887      	adds	r7, r0, r2
            cur = C[i * N + j];
20001c5e:	6872      	ldr	r2, [r6, #4]
                ret += (cur > prev) ? 1 : 0;
20001c60:	b238      	sxth	r0, r7
            tmp += cur;
20001c62:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001c64:	42a3      	cmp	r3, r4
20001c66:	ddaa      	ble.n	20001bbe <matrix_test+0x342>
                tmp = 0;
20001c68:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001c6a:	68b1      	ldr	r1, [r6, #8]
                ret += 10;
20001c6c:	300a      	adds	r0, #10
            tmp += cur;
20001c6e:	185b      	adds	r3, r3, r1
                ret += 10;
20001c70:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001c72:	42a3      	cmp	r3, r4
20001c74:	ddad      	ble.n	20001bd2 <matrix_test+0x356>
                tmp = 0;
20001c76:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001c78:	68f2      	ldr	r2, [r6, #12]
                ret += 10;
20001c7a:	300a      	adds	r0, #10
            tmp += cur;
20001c7c:	189b      	adds	r3, r3, r2
                ret += 10;
20001c7e:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001c80:	42a3      	cmp	r3, r4
20001c82:	ddb0      	ble.n	20001be6 <matrix_test+0x36a>
                tmp = 0;
20001c84:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001c86:	6931      	ldr	r1, [r6, #16]
                ret += 10;
20001c88:	300a      	adds	r0, #10
            tmp += cur;
20001c8a:	185b      	adds	r3, r3, r1
                ret += 10;
20001c8c:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001c8e:	42a3      	cmp	r3, r4
20001c90:	ddb3      	ble.n	20001bfa <matrix_test+0x37e>
                tmp = 0;
20001c92:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001c94:	6972      	ldr	r2, [r6, #20]
                ret += 10;
20001c96:	300a      	adds	r0, #10
            tmp += cur;
20001c98:	189b      	adds	r3, r3, r2
                ret += 10;
20001c9a:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001c9c:	42a3      	cmp	r3, r4
20001c9e:	ddb6      	ble.n	20001c0e <matrix_test+0x392>
                tmp = 0;
20001ca0:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001ca2:	69b1      	ldr	r1, [r6, #24]
                ret += 10;
20001ca4:	300a      	adds	r0, #10
            tmp += cur;
20001ca6:	185b      	adds	r3, r3, r1
                ret += 10;
20001ca8:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001caa:	42a3      	cmp	r3, r4
20001cac:	ddb9      	ble.n	20001c22 <matrix_test+0x3a6>
        for (j = 0; j < N; j++)
20001cae:	0032      	movs	r2, r6
                ret += 10;
20001cb0:	300a      	adds	r0, #10
        for (j = 0; j < N; j++)
20001cb2:	321c      	adds	r2, #28
                tmp = 0;
20001cb4:	2300      	movs	r3, #0
                ret += 10;
20001cb6:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001cb8:	4295      	cmp	r5, r2
20001cba:	d1bc      	bne.n	20001c36 <matrix_test+0x3ba>
20001cbc:	9502      	str	r5, [sp, #8]
    for (i = 0; i < N; i++)
20001cbe:	9d04      	ldr	r5, [sp, #16]
20001cc0:	4646      	mov	r6, r8
20001cc2:	46ac      	mov	ip, r5
20001cc4:	9f02      	ldr	r7, [sp, #8]
20001cc6:	9a03      	ldr	r2, [sp, #12]
20001cc8:	4467      	add	r7, ip
20001cca:	3601      	adds	r6, #1
20001ccc:	9702      	str	r7, [sp, #8]
20001cce:	44ca      	add	sl, r9
20001cd0:	4590      	cmp	r8, r2
20001cd2:	d019      	beq.n	20001d08 <matrix_test+0x48c>
20001cd4:	46b0      	mov	r8, r6
20001cd6:	e6e2      	b.n	20001a9e <matrix_test+0x222>
                ret += 10;
20001cd8:	300a      	adds	r0, #10
                tmp = 0;
20001cda:	2300      	movs	r3, #0
                ret += 10;
20001cdc:	b200      	sxth	r0, r0
                tmp = 0;
20001cde:	e755      	b.n	20001b8c <matrix_test+0x310>
                ret += 10;
20001ce0:	300a      	adds	r0, #10
                tmp = 0;
20001ce2:	2300      	movs	r3, #0
                ret += 10;
20001ce4:	b200      	sxth	r0, r0
                tmp = 0;
20001ce6:	e744      	b.n	20001b72 <matrix_test+0x2f6>
                ret += 10;
20001ce8:	300a      	adds	r0, #10
                tmp = 0;
20001cea:	2300      	movs	r3, #0
                ret += 10;
20001cec:	b200      	sxth	r0, r0
                tmp = 0;
20001cee:	e733      	b.n	20001b58 <matrix_test+0x2dc>
                ret += 10;
20001cf0:	300a      	adds	r0, #10
                tmp = 0;
20001cf2:	2300      	movs	r3, #0
                ret += 10;
20001cf4:	b200      	sxth	r0, r0
                tmp = 0;
20001cf6:	e722      	b.n	20001b3e <matrix_test+0x2c2>
                ret += 10;
20001cf8:	300a      	adds	r0, #10
                tmp = 0;
20001cfa:	2300      	movs	r3, #0
                ret += 10;
20001cfc:	b200      	sxth	r0, r0
                tmp = 0;
20001cfe:	e711      	b.n	20001b24 <matrix_test+0x2a8>
                ret += 10;
20001d00:	300a      	adds	r0, #10
                tmp = 0;
20001d02:	2300      	movs	r3, #0
                ret += 10;
20001d04:	b200      	sxth	r0, r0
                tmp = 0;
20001d06:	e700      	b.n	20001b0a <matrix_test+0x28e>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001d08:	9905      	ldr	r1, [sp, #20]
20001d0a:	465e      	mov	r6, fp
20001d0c:	468b      	mov	fp, r1
20001d0e:	2100      	movs	r1, #0
20001d10:	f000 ffb2 	bl	20002c78 <crc16>
    matrix_mul_vect(N, C, A, B);
20001d14:	9b07      	ldr	r3, [sp, #28]
20001d16:	9a06      	ldr	r2, [sp, #24]
20001d18:	9901      	ldr	r1, [sp, #4]
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001d1a:	9005      	str	r0, [sp, #20]
    matrix_mul_vect(N, C, A, B);
20001d1c:	4648      	mov	r0, r9
20001d1e:	f7ff fb29 	bl	20001374 <matrix_mul_vect>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001d22:	464d      	mov	r5, r9
    matrix_mul_vect(N, C, A, B);
20001d24:	2300      	movs	r3, #0
20001d26:	2700      	movs	r7, #0
20001d28:	465a      	mov	r2, fp
20001d2a:	4699      	mov	r9, r3
20001d2c:	2000      	movs	r0, #0
20001d2e:	2100      	movs	r1, #0
20001d30:	46ba      	mov	sl, r7
20001d32:	46a8      	mov	r8, r5
20001d34:	46b3      	mov	fp, r6
20001d36:	9202      	str	r2, [sp, #8]
        for (j = 0; j < N; j++)
20001d38:	9e01      	ldr	r6, [sp, #4]
20001d3a:	464d      	mov	r5, r9
20001d3c:	46b4      	mov	ip, r6
20001d3e:	2607      	movs	r6, #7
20001d40:	9f02      	ldr	r7, [sp, #8]
20001d42:	00aa      	lsls	r2, r5, #2
20001d44:	4462      	add	r2, ip
20001d46:	1abd      	subs	r5, r7, r2
20001d48:	3d04      	subs	r5, #4
20001d4a:	08af      	lsrs	r7, r5, #2
20001d4c:	0035      	movs	r5, r6
20001d4e:	3701      	adds	r7, #1
20001d50:	403e      	ands	r6, r7
20001d52:	423d      	tst	r5, r7
20001d54:	d06a      	beq.n	20001e2c <matrix_test+0x5b0>
20001d56:	2e01      	cmp	r6, #1
20001d58:	d057      	beq.n	20001e0a <matrix_test+0x58e>
20001d5a:	2e02      	cmp	r6, #2
20001d5c:	d048      	beq.n	20001df0 <matrix_test+0x574>
20001d5e:	2e03      	cmp	r6, #3
20001d60:	d039      	beq.n	20001dd6 <matrix_test+0x55a>
20001d62:	2e04      	cmp	r6, #4
20001d64:	d02a      	beq.n	20001dbc <matrix_test+0x540>
20001d66:	2e05      	cmp	r6, #5
20001d68:	d01b      	beq.n	20001da2 <matrix_test+0x526>
20001d6a:	2e06      	cmp	r6, #6
20001d6c:	d00c      	beq.n	20001d88 <matrix_test+0x50c>
            cur = C[i * N + j];
20001d6e:	000f      	movs	r7, r1
20001d70:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001d72:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001d74:	42a3      	cmp	r3, r4
20001d76:	dd00      	ble.n	20001d7a <matrix_test+0x4fe>
20001d78:	e313      	b.n	200023a2 <matrix_test+0xb26>
                ret += (cur > prev) ? 1 : 0;
20001d7a:	2601      	movs	r6, #1
20001d7c:	42b9      	cmp	r1, r7
20001d7e:	dc00      	bgt.n	20001d82 <matrix_test+0x506>
20001d80:	e31c      	b.n	200023bc <matrix_test+0xb40>
20001d82:	1980      	adds	r0, r0, r6
20001d84:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001d86:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001d88:	000d      	movs	r5, r1
20001d8a:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001d8c:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001d8e:	42a3      	cmp	r3, r4
20001d90:	dd00      	ble.n	20001d94 <matrix_test+0x518>
20001d92:	e0fd      	b.n	20001f90 <matrix_test+0x714>
                ret += (cur > prev) ? 1 : 0;
20001d94:	2701      	movs	r7, #1
20001d96:	42a9      	cmp	r1, r5
20001d98:	dc00      	bgt.n	20001d9c <matrix_test+0x520>
20001d9a:	2700      	movs	r7, #0
20001d9c:	19c6      	adds	r6, r0, r7
20001d9e:	b230      	sxth	r0, r6
        for (j = 0; j < N; j++)
20001da0:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001da2:	000d      	movs	r5, r1
20001da4:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001da6:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001da8:	42a3      	cmp	r3, r4
20001daa:	dd00      	ble.n	20001dae <matrix_test+0x532>
20001dac:	e0ec      	b.n	20001f88 <matrix_test+0x70c>
                ret += (cur > prev) ? 1 : 0;
20001dae:	2701      	movs	r7, #1
20001db0:	42a9      	cmp	r1, r5
20001db2:	dc00      	bgt.n	20001db6 <matrix_test+0x53a>
20001db4:	2700      	movs	r7, #0
20001db6:	19c0      	adds	r0, r0, r7
20001db8:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001dba:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001dbc:	000d      	movs	r5, r1
20001dbe:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001dc0:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001dc2:	42a3      	cmp	r3, r4
20001dc4:	dd00      	ble.n	20001dc8 <matrix_test+0x54c>
20001dc6:	e0db      	b.n	20001f80 <matrix_test+0x704>
                ret += (cur > prev) ? 1 : 0;
20001dc8:	2601      	movs	r6, #1
20001dca:	42a9      	cmp	r1, r5
20001dcc:	dc00      	bgt.n	20001dd0 <matrix_test+0x554>
20001dce:	2600      	movs	r6, #0
20001dd0:	1987      	adds	r7, r0, r6
20001dd2:	b238      	sxth	r0, r7
        for (j = 0; j < N; j++)
20001dd4:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001dd6:	000d      	movs	r5, r1
20001dd8:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001dda:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001ddc:	42a3      	cmp	r3, r4
20001dde:	dd00      	ble.n	20001de2 <matrix_test+0x566>
20001de0:	e0ca      	b.n	20001f78 <matrix_test+0x6fc>
                ret += (cur > prev) ? 1 : 0;
20001de2:	2601      	movs	r6, #1
20001de4:	42a9      	cmp	r1, r5
20001de6:	dc00      	bgt.n	20001dea <matrix_test+0x56e>
20001de8:	2600      	movs	r6, #0
20001dea:	1980      	adds	r0, r0, r6
20001dec:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001dee:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001df0:	000f      	movs	r7, r1
20001df2:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001df4:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001df6:	42a3      	cmp	r3, r4
20001df8:	dd00      	ble.n	20001dfc <matrix_test+0x580>
20001dfa:	e0b9      	b.n	20001f70 <matrix_test+0x6f4>
                ret += (cur > prev) ? 1 : 0;
20001dfc:	2501      	movs	r5, #1
20001dfe:	42b9      	cmp	r1, r7
20001e00:	dc00      	bgt.n	20001e04 <matrix_test+0x588>
20001e02:	2500      	movs	r5, #0
20001e04:	1946      	adds	r6, r0, r5
20001e06:	b230      	sxth	r0, r6
        for (j = 0; j < N; j++)
20001e08:	3204      	adds	r2, #4
            cur = C[i * N + j];
20001e0a:	000f      	movs	r7, r1
20001e0c:	6811      	ldr	r1, [r2, #0]
            tmp += cur;
20001e0e:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001e10:	42a3      	cmp	r3, r4
20001e12:	dd00      	ble.n	20001e16 <matrix_test+0x59a>
20001e14:	e0a8      	b.n	20001f68 <matrix_test+0x6ec>
                ret += (cur > prev) ? 1 : 0;
20001e16:	2501      	movs	r5, #1
20001e18:	42b9      	cmp	r1, r7
20001e1a:	dc00      	bgt.n	20001e1e <matrix_test+0x5a2>
20001e1c:	2500      	movs	r5, #0
20001e1e:	1940      	adds	r0, r0, r5
20001e20:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001e22:	9e02      	ldr	r6, [sp, #8]
20001e24:	3204      	adds	r2, #4
20001e26:	4296      	cmp	r6, r2
20001e28:	d100      	bne.n	20001e2c <matrix_test+0x5b0>
20001e2a:	e090      	b.n	20001f4e <matrix_test+0x6d2>
20001e2c:	9d02      	ldr	r5, [sp, #8]
20001e2e:	e04a      	b.n	20001ec6 <matrix_test+0x64a>
                tmp = 0;
20001e30:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001e32:	6851      	ldr	r1, [r2, #4]
                ret += 10;
20001e34:	300a      	adds	r0, #10
            tmp += cur;
20001e36:	185b      	adds	r3, r3, r1
                ret += 10;
20001e38:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001e3a:	1d16      	adds	r6, r2, #4
            if (tmp > clipval)
20001e3c:	42a3      	cmp	r3, r4
20001e3e:	dd51      	ble.n	20001ee4 <matrix_test+0x668>
                tmp = 0;
20001e40:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001e42:	6872      	ldr	r2, [r6, #4]
                ret += 10;
20001e44:	300a      	adds	r0, #10
            tmp += cur;
20001e46:	189b      	adds	r3, r3, r2
                ret += 10;
20001e48:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001e4a:	42a3      	cmp	r3, r4
20001e4c:	dc54      	bgt.n	20001ef8 <matrix_test+0x67c>
                ret += (cur > prev) ? 1 : 0;
20001e4e:	2701      	movs	r7, #1
20001e50:	428a      	cmp	r2, r1
20001e52:	dc00      	bgt.n	20001e56 <matrix_test+0x5da>
20001e54:	2700      	movs	r7, #0
20001e56:	19c1      	adds	r1, r0, r7
20001e58:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001e5a:	68b1      	ldr	r1, [r6, #8]
            tmp += cur;
20001e5c:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001e5e:	42a3      	cmp	r3, r4
20001e60:	dc51      	bgt.n	20001f06 <matrix_test+0x68a>
                ret += (cur > prev) ? 1 : 0;
20001e62:	2701      	movs	r7, #1
20001e64:	4291      	cmp	r1, r2
20001e66:	dc00      	bgt.n	20001e6a <matrix_test+0x5ee>
20001e68:	2700      	movs	r7, #0
20001e6a:	19c2      	adds	r2, r0, r7
20001e6c:	b210      	sxth	r0, r2
            cur = C[i * N + j];
20001e6e:	68f2      	ldr	r2, [r6, #12]
            tmp += cur;
20001e70:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001e72:	42a3      	cmp	r3, r4
20001e74:	dc4e      	bgt.n	20001f14 <matrix_test+0x698>
                ret += (cur > prev) ? 1 : 0;
20001e76:	2701      	movs	r7, #1
20001e78:	428a      	cmp	r2, r1
20001e7a:	dc00      	bgt.n	20001e7e <matrix_test+0x602>
20001e7c:	2700      	movs	r7, #0
20001e7e:	19c1      	adds	r1, r0, r7
20001e80:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001e82:	6931      	ldr	r1, [r6, #16]
            tmp += cur;
20001e84:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001e86:	42a3      	cmp	r3, r4
20001e88:	dc4b      	bgt.n	20001f22 <matrix_test+0x6a6>
                ret += (cur > prev) ? 1 : 0;
20001e8a:	2701      	movs	r7, #1
20001e8c:	4291      	cmp	r1, r2
20001e8e:	dc00      	bgt.n	20001e92 <matrix_test+0x616>
20001e90:	2700      	movs	r7, #0
20001e92:	19c2      	adds	r2, r0, r7
20001e94:	b210      	sxth	r0, r2
            cur = C[i * N + j];
20001e96:	6972      	ldr	r2, [r6, #20]
            tmp += cur;
20001e98:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001e9a:	42a3      	cmp	r3, r4
20001e9c:	dc48      	bgt.n	20001f30 <matrix_test+0x6b4>
                ret += (cur > prev) ? 1 : 0;
20001e9e:	2701      	movs	r7, #1
20001ea0:	428a      	cmp	r2, r1
20001ea2:	dc00      	bgt.n	20001ea6 <matrix_test+0x62a>
20001ea4:	2700      	movs	r7, #0
20001ea6:	19c1      	adds	r1, r0, r7
20001ea8:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001eaa:	69b1      	ldr	r1, [r6, #24]
            tmp += cur;
20001eac:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001eae:	42a3      	cmp	r3, r4
20001eb0:	dc45      	bgt.n	20001f3e <matrix_test+0x6c2>
                ret += (cur > prev) ? 1 : 0;
20001eb2:	2701      	movs	r7, #1
20001eb4:	4291      	cmp	r1, r2
20001eb6:	dc00      	bgt.n	20001eba <matrix_test+0x63e>
20001eb8:	2700      	movs	r7, #0
20001eba:	19c2      	adds	r2, r0, r7
20001ebc:	b210      	sxth	r0, r2
        for (j = 0; j < N; j++)
20001ebe:	0032      	movs	r2, r6
20001ec0:	321c      	adds	r2, #28
20001ec2:	4295      	cmp	r5, r2
20001ec4:	d042      	beq.n	20001f4c <matrix_test+0x6d0>
            cur = C[i * N + j];
20001ec6:	6817      	ldr	r7, [r2, #0]
            tmp += cur;
20001ec8:	19db      	adds	r3, r3, r7
            if (tmp > clipval)
20001eca:	42a3      	cmp	r3, r4
20001ecc:	dcb0      	bgt.n	20001e30 <matrix_test+0x5b4>
                ret += (cur > prev) ? 1 : 0;
20001ece:	2601      	movs	r6, #1
20001ed0:	428f      	cmp	r7, r1
20001ed2:	dc00      	bgt.n	20001ed6 <matrix_test+0x65a>
20001ed4:	2600      	movs	r6, #0
20001ed6:	1981      	adds	r1, r0, r6
20001ed8:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20001eda:	6851      	ldr	r1, [r2, #4]
        for (j = 0; j < N; j++)
20001edc:	1d16      	adds	r6, r2, #4
            tmp += cur;
20001ede:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001ee0:	42a3      	cmp	r3, r4
20001ee2:	dcad      	bgt.n	20001e40 <matrix_test+0x5c4>
                ret += (cur > prev) ? 1 : 0;
20001ee4:	2201      	movs	r2, #1
20001ee6:	42b9      	cmp	r1, r7
20001ee8:	dc00      	bgt.n	20001eec <matrix_test+0x670>
20001eea:	2200      	movs	r2, #0
20001eec:	1887      	adds	r7, r0, r2
            cur = C[i * N + j];
20001eee:	6872      	ldr	r2, [r6, #4]
                ret += (cur > prev) ? 1 : 0;
20001ef0:	b238      	sxth	r0, r7
            tmp += cur;
20001ef2:	189b      	adds	r3, r3, r2
            if (tmp > clipval)
20001ef4:	42a3      	cmp	r3, r4
20001ef6:	ddaa      	ble.n	20001e4e <matrix_test+0x5d2>
                tmp = 0;
20001ef8:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001efa:	68b1      	ldr	r1, [r6, #8]
                ret += 10;
20001efc:	300a      	adds	r0, #10
            tmp += cur;
20001efe:	185b      	adds	r3, r3, r1
                ret += 10;
20001f00:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001f02:	42a3      	cmp	r3, r4
20001f04:	ddad      	ble.n	20001e62 <matrix_test+0x5e6>
                tmp = 0;
20001f06:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001f08:	68f2      	ldr	r2, [r6, #12]
                ret += 10;
20001f0a:	300a      	adds	r0, #10
            tmp += cur;
20001f0c:	189b      	adds	r3, r3, r2
                ret += 10;
20001f0e:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001f10:	42a3      	cmp	r3, r4
20001f12:	ddb0      	ble.n	20001e76 <matrix_test+0x5fa>
                tmp = 0;
20001f14:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001f16:	6931      	ldr	r1, [r6, #16]
                ret += 10;
20001f18:	300a      	adds	r0, #10
            tmp += cur;
20001f1a:	185b      	adds	r3, r3, r1
                ret += 10;
20001f1c:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001f1e:	42a3      	cmp	r3, r4
20001f20:	ddb3      	ble.n	20001e8a <matrix_test+0x60e>
                tmp = 0;
20001f22:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001f24:	6972      	ldr	r2, [r6, #20]
                ret += 10;
20001f26:	300a      	adds	r0, #10
            tmp += cur;
20001f28:	189b      	adds	r3, r3, r2
                ret += 10;
20001f2a:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001f2c:	42a3      	cmp	r3, r4
20001f2e:	ddb6      	ble.n	20001e9e <matrix_test+0x622>
                tmp = 0;
20001f30:	2300      	movs	r3, #0
            cur = C[i * N + j];
20001f32:	69b1      	ldr	r1, [r6, #24]
                ret += 10;
20001f34:	300a      	adds	r0, #10
            tmp += cur;
20001f36:	185b      	adds	r3, r3, r1
                ret += 10;
20001f38:	b200      	sxth	r0, r0
            if (tmp > clipval)
20001f3a:	42a3      	cmp	r3, r4
20001f3c:	ddb9      	ble.n	20001eb2 <matrix_test+0x636>
        for (j = 0; j < N; j++)
20001f3e:	0032      	movs	r2, r6
                ret += 10;
20001f40:	300a      	adds	r0, #10
        for (j = 0; j < N; j++)
20001f42:	321c      	adds	r2, #28
                tmp = 0;
20001f44:	2300      	movs	r3, #0
                ret += 10;
20001f46:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001f48:	4295      	cmp	r5, r2
20001f4a:	d1bc      	bne.n	20001ec6 <matrix_test+0x64a>
20001f4c:	9502      	str	r5, [sp, #8]
    for (i = 0; i < N; i++)
20001f4e:	9d04      	ldr	r5, [sp, #16]
20001f50:	4656      	mov	r6, sl
20001f52:	46ac      	mov	ip, r5
20001f54:	9f02      	ldr	r7, [sp, #8]
20001f56:	9a03      	ldr	r2, [sp, #12]
20001f58:	4467      	add	r7, ip
20001f5a:	3601      	adds	r6, #1
20001f5c:	9702      	str	r7, [sp, #8]
20001f5e:	44c1      	add	r9, r8
20001f60:	4592      	cmp	sl, r2
20001f62:	d019      	beq.n	20001f98 <matrix_test+0x71c>
20001f64:	46b2      	mov	sl, r6
20001f66:	e6e7      	b.n	20001d38 <matrix_test+0x4bc>
                ret += 10;
20001f68:	300a      	adds	r0, #10
                tmp = 0;
20001f6a:	2300      	movs	r3, #0
                ret += 10;
20001f6c:	b200      	sxth	r0, r0
                tmp = 0;
20001f6e:	e758      	b.n	20001e22 <matrix_test+0x5a6>
                ret += 10;
20001f70:	300a      	adds	r0, #10
                tmp = 0;
20001f72:	2300      	movs	r3, #0
                ret += 10;
20001f74:	b200      	sxth	r0, r0
                tmp = 0;
20001f76:	e747      	b.n	20001e08 <matrix_test+0x58c>
                ret += 10;
20001f78:	300a      	adds	r0, #10
                tmp = 0;
20001f7a:	2300      	movs	r3, #0
                ret += 10;
20001f7c:	b200      	sxth	r0, r0
                tmp = 0;
20001f7e:	e736      	b.n	20001dee <matrix_test+0x572>
                ret += 10;
20001f80:	300a      	adds	r0, #10
                tmp = 0;
20001f82:	2300      	movs	r3, #0
                ret += 10;
20001f84:	b200      	sxth	r0, r0
                tmp = 0;
20001f86:	e725      	b.n	20001dd4 <matrix_test+0x558>
                ret += 10;
20001f88:	300a      	adds	r0, #10
                tmp = 0;
20001f8a:	2300      	movs	r3, #0
                ret += 10;
20001f8c:	b200      	sxth	r0, r0
                tmp = 0;
20001f8e:	e714      	b.n	20001dba <matrix_test+0x53e>
                ret += 10;
20001f90:	300a      	adds	r0, #10
                tmp = 0;
20001f92:	2300      	movs	r3, #0
                ret += 10;
20001f94:	b200      	sxth	r0, r0
                tmp = 0;
20001f96:	e703      	b.n	20001da0 <matrix_test+0x524>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001f98:	9905      	ldr	r1, [sp, #20]
20001f9a:	f000 fe6d 	bl	20002c78 <crc16>
20001f9e:	4645      	mov	r5, r8
    matrix_mul_matrix(N, C, A, B);
20001fa0:	9b07      	ldr	r3, [sp, #28]
20001fa2:	9901      	ldr	r1, [sp, #4]
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001fa4:	46d8      	mov	r8, fp
    matrix_mul_matrix(N, C, A, B);
20001fa6:	9a06      	ldr	r2, [sp, #24]
    crc = crc16(matrix_sum(N, C, clipval), crc);
20001fa8:	4683      	mov	fp, r0
    matrix_mul_matrix(N, C, A, B);
20001faa:	0028      	movs	r0, r5
20001fac:	f7ff fa7e 	bl	200014ac <matrix_mul_matrix>
20001fb0:	2600      	movs	r6, #0
20001fb2:	2300      	movs	r3, #0
20001fb4:	2000      	movs	r0, #0
20001fb6:	4699      	mov	r9, r3
20001fb8:	2100      	movs	r1, #0
20001fba:	46b2      	mov	sl, r6
        for (j = 0; j < N; j++)
20001fbc:	9a01      	ldr	r2, [sp, #4]
20001fbe:	464f      	mov	r7, r9
20001fc0:	4694      	mov	ip, r2
20001fc2:	2603      	movs	r6, #3
20001fc4:	00bf      	lsls	r7, r7, #2
20001fc6:	1e6a      	subs	r2, r5, #1
20001fc8:	4467      	add	r7, ip
20001fca:	4016      	ands	r6, r2
20001fcc:	46b4      	mov	ip, r6
20001fce:	000e      	movs	r6, r1
            cur = C[i * N + j];
20001fd0:	6839      	ldr	r1, [r7, #0]
20001fd2:	9702      	str	r7, [sp, #8]
            tmp += cur;
20001fd4:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20001fd6:	42a3      	cmp	r3, r4
20001fd8:	dc00      	bgt.n	20001fdc <matrix_test+0x760>
20001fda:	e1bc      	b.n	20002356 <matrix_test+0xada>
                tmp = 0;
20001fdc:	2300      	movs	r3, #0
                ret += 10;
20001fde:	300a      	adds	r0, #10
20001fe0:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20001fe2:	2201      	movs	r2, #1
20001fe4:	9e02      	ldr	r6, [sp, #8]
20001fe6:	3604      	adds	r6, #4
20001fe8:	42aa      	cmp	r2, r5
20001fea:	d300      	bcc.n	20001fee <matrix_test+0x772>
20001fec:	e084      	b.n	200020f8 <matrix_test+0x87c>
20001fee:	4667      	mov	r7, ip
20001ff0:	2f00      	cmp	r7, #0
20001ff2:	d030      	beq.n	20002056 <matrix_test+0x7da>
20001ff4:	2f01      	cmp	r7, #1
20001ff6:	d01e      	beq.n	20002036 <matrix_test+0x7ba>
20001ff8:	2f02      	cmp	r7, #2
20001ffa:	d00e      	beq.n	2000201a <matrix_test+0x79e>
            cur = C[i * N + j];
20001ffc:	468c      	mov	ip, r1
20001ffe:	9902      	ldr	r1, [sp, #8]
20002000:	6849      	ldr	r1, [r1, #4]
            tmp += cur;
20002002:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20002004:	42a3      	cmp	r3, r4
20002006:	dd00      	ble.n	2000200a <matrix_test+0x78e>
20002008:	e1c7      	b.n	2000239a <matrix_test+0xb1e>
                ret += (cur > prev) ? 1 : 0;
2000200a:	2701      	movs	r7, #1
2000200c:	4561      	cmp	r1, ip
2000200e:	dc00      	bgt.n	20002012 <matrix_test+0x796>
20002010:	e1d2      	b.n	200023b8 <matrix_test+0xb3c>
20002012:	19c0      	adds	r0, r0, r7
20002014:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20002016:	3201      	adds	r2, #1
20002018:	3604      	adds	r6, #4
            cur = C[i * N + j];
2000201a:	468c      	mov	ip, r1
2000201c:	6831      	ldr	r1, [r6, #0]
            tmp += cur;
2000201e:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20002020:	42a3      	cmp	r3, r4
20002022:	dd00      	ble.n	20002026 <matrix_test+0x7aa>
20002024:	e1b1      	b.n	2000238a <matrix_test+0xb0e>
                ret += (cur > prev) ? 1 : 0;
20002026:	2701      	movs	r7, #1
20002028:	4561      	cmp	r1, ip
2000202a:	dc00      	bgt.n	2000202e <matrix_test+0x7b2>
2000202c:	2700      	movs	r7, #0
2000202e:	19c0      	adds	r0, r0, r7
20002030:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20002032:	3201      	adds	r2, #1
20002034:	3604      	adds	r6, #4
            cur = C[i * N + j];
20002036:	468c      	mov	ip, r1
20002038:	6831      	ldr	r1, [r6, #0]
            tmp += cur;
2000203a:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
2000203c:	42a3      	cmp	r3, r4
2000203e:	dd00      	ble.n	20002042 <matrix_test+0x7c6>
20002040:	e19b      	b.n	2000237a <matrix_test+0xafe>
                ret += (cur > prev) ? 1 : 0;
20002042:	2701      	movs	r7, #1
20002044:	4561      	cmp	r1, ip
20002046:	dc00      	bgt.n	2000204a <matrix_test+0x7ce>
20002048:	2700      	movs	r7, #0
2000204a:	19c0      	adds	r0, r0, r7
2000204c:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
2000204e:	3201      	adds	r2, #1
20002050:	3604      	adds	r6, #4
20002052:	42aa      	cmp	r2, r5
20002054:	d250      	bcs.n	200020f8 <matrix_test+0x87c>
20002056:	46ac      	mov	ip, r5
20002058:	e024      	b.n	200020a4 <matrix_test+0x828>
                tmp = 0;
2000205a:	2300      	movs	r3, #0
            cur = C[i * N + j];
2000205c:	6871      	ldr	r1, [r6, #4]
                ret += 10;
2000205e:	300a      	adds	r0, #10
            tmp += cur;
20002060:	185b      	adds	r3, r3, r1
                ret += 10;
20002062:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20002064:	3201      	adds	r2, #1
20002066:	1d37      	adds	r7, r6, #4
            if (tmp > clipval)
20002068:	42a3      	cmp	r3, r4
2000206a:	dd2b      	ble.n	200020c4 <matrix_test+0x848>
                tmp = 0;
2000206c:	2300      	movs	r3, #0
            cur = C[i * N + j];
2000206e:	687d      	ldr	r5, [r7, #4]
                ret += 10;
20002070:	300a      	adds	r0, #10
            tmp += cur;
20002072:	195b      	adds	r3, r3, r5
                ret += 10;
20002074:	b200      	sxth	r0, r0
            if (tmp > clipval)
20002076:	42a3      	cmp	r3, r4
20002078:	dc2e      	bgt.n	200020d8 <matrix_test+0x85c>
                ret += (cur > prev) ? 1 : 0;
2000207a:	2601      	movs	r6, #1
2000207c:	428d      	cmp	r5, r1
2000207e:	dc00      	bgt.n	20002082 <matrix_test+0x806>
20002080:	2600      	movs	r6, #0
20002082:	1981      	adds	r1, r0, r6
20002084:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20002086:	68b9      	ldr	r1, [r7, #8]
            tmp += cur;
20002088:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
2000208a:	42a3      	cmp	r3, r4
2000208c:	dc2b      	bgt.n	200020e6 <matrix_test+0x86a>
                ret += (cur > prev) ? 1 : 0;
2000208e:	2601      	movs	r6, #1
20002090:	42a9      	cmp	r1, r5
20002092:	dc00      	bgt.n	20002096 <matrix_test+0x81a>
20002094:	2600      	movs	r6, #0
20002096:	1985      	adds	r5, r0, r6
        for (j = 0; j < N; j++)
20002098:	003e      	movs	r6, r7
2000209a:	3203      	adds	r2, #3
                ret += (cur > prev) ? 1 : 0;
2000209c:	b228      	sxth	r0, r5
        for (j = 0; j < N; j++)
2000209e:	360c      	adds	r6, #12
200020a0:	4562      	cmp	r2, ip
200020a2:	d228      	bcs.n	200020f6 <matrix_test+0x87a>
            cur = C[i * N + j];
200020a4:	6835      	ldr	r5, [r6, #0]
            tmp += cur;
200020a6:	195b      	adds	r3, r3, r5
            if (tmp > clipval)
200020a8:	42a3      	cmp	r3, r4
200020aa:	dcd6      	bgt.n	2000205a <matrix_test+0x7de>
                ret += (cur > prev) ? 1 : 0;
200020ac:	2701      	movs	r7, #1
200020ae:	428d      	cmp	r5, r1
200020b0:	dc00      	bgt.n	200020b4 <matrix_test+0x838>
200020b2:	2700      	movs	r7, #0
200020b4:	19c1      	adds	r1, r0, r7
200020b6:	b208      	sxth	r0, r1
            cur = C[i * N + j];
200020b8:	6871      	ldr	r1, [r6, #4]
        for (j = 0; j < N; j++)
200020ba:	3201      	adds	r2, #1
            tmp += cur;
200020bc:	185b      	adds	r3, r3, r1
        for (j = 0; j < N; j++)
200020be:	1d37      	adds	r7, r6, #4
            if (tmp > clipval)
200020c0:	42a3      	cmp	r3, r4
200020c2:	dcd3      	bgt.n	2000206c <matrix_test+0x7f0>
                ret += (cur > prev) ? 1 : 0;
200020c4:	2601      	movs	r6, #1
200020c6:	42a9      	cmp	r1, r5
200020c8:	dc00      	bgt.n	200020cc <matrix_test+0x850>
200020ca:	2600      	movs	r6, #0
200020cc:	1985      	adds	r5, r0, r6
200020ce:	b228      	sxth	r0, r5
            cur = C[i * N + j];
200020d0:	687d      	ldr	r5, [r7, #4]
            tmp += cur;
200020d2:	195b      	adds	r3, r3, r5
            if (tmp > clipval)
200020d4:	42a3      	cmp	r3, r4
200020d6:	ddd0      	ble.n	2000207a <matrix_test+0x7fe>
                tmp = 0;
200020d8:	2300      	movs	r3, #0
            cur = C[i * N + j];
200020da:	68b9      	ldr	r1, [r7, #8]
                ret += 10;
200020dc:	300a      	adds	r0, #10
            tmp += cur;
200020de:	185b      	adds	r3, r3, r1
                ret += 10;
200020e0:	b200      	sxth	r0, r0
            if (tmp > clipval)
200020e2:	42a3      	cmp	r3, r4
200020e4:	ddd3      	ble.n	2000208e <matrix_test+0x812>
        for (j = 0; j < N; j++)
200020e6:	003e      	movs	r6, r7
                ret += 10;
200020e8:	300a      	adds	r0, #10
        for (j = 0; j < N; j++)
200020ea:	3203      	adds	r2, #3
                tmp = 0;
200020ec:	2300      	movs	r3, #0
                ret += 10;
200020ee:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
200020f0:	360c      	adds	r6, #12
200020f2:	4562      	cmp	r2, ip
200020f4:	d3d6      	bcc.n	200020a4 <matrix_test+0x828>
200020f6:	4665      	mov	r5, ip
    for (i = 0; i < N; i++)
200020f8:	2201      	movs	r2, #1
200020fa:	4694      	mov	ip, r2
200020fc:	44e2      	add	sl, ip
200020fe:	44a9      	add	r9, r5
20002100:	45aa      	cmp	sl, r5
20002102:	d200      	bcs.n	20002106 <matrix_test+0x88a>
20002104:	e75a      	b.n	20001fbc <matrix_test+0x740>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20002106:	4659      	mov	r1, fp
20002108:	f000 fdb6 	bl	20002c78 <crc16>
    matrix_mul_matrix_bitextract(N, C, A, B);
2000210c:	9b07      	ldr	r3, [sp, #28]
2000210e:	9901      	ldr	r1, [sp, #4]
    crc = crc16(matrix_sum(N, C, clipval), crc);
20002110:	4683      	mov	fp, r0
    matrix_mul_matrix_bitextract(N, C, A, B);
20002112:	9a06      	ldr	r2, [sp, #24]
20002114:	0028      	movs	r0, r5
20002116:	f7ff fadd 	bl	200016d4 <matrix_mul_matrix_bitextract>
2000211a:	2700      	movs	r7, #0
2000211c:	2300      	movs	r3, #0
2000211e:	2000      	movs	r0, #0
20002120:	4699      	mov	r9, r3
20002122:	2100      	movs	r1, #0
20002124:	46ba      	mov	sl, r7
        for (j = 0; j < N; j++)
20002126:	464e      	mov	r6, r9
20002128:	9a01      	ldr	r2, [sp, #4]
2000212a:	00b7      	lsls	r7, r6, #2
2000212c:	4694      	mov	ip, r2
2000212e:	2603      	movs	r6, #3
20002130:	1e6a      	subs	r2, r5, #1
20002132:	4467      	add	r7, ip
20002134:	4016      	ands	r6, r2
20002136:	46b4      	mov	ip, r6
20002138:	000e      	movs	r6, r1
            cur = C[i * N + j];
2000213a:	6839      	ldr	r1, [r7, #0]
2000213c:	9702      	str	r7, [sp, #8]
            tmp += cur;
2000213e:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
20002140:	42a3      	cmp	r3, r4
20002142:	dc00      	bgt.n	20002146 <matrix_test+0x8ca>
20002144:	e10e      	b.n	20002364 <matrix_test+0xae8>
                tmp = 0;
20002146:	2300      	movs	r3, #0
                ret += 10;
20002148:	300a      	adds	r0, #10
2000214a:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
2000214c:	2201      	movs	r2, #1
2000214e:	9e02      	ldr	r6, [sp, #8]
20002150:	3604      	adds	r6, #4
20002152:	42aa      	cmp	r2, r5
20002154:	d300      	bcc.n	20002158 <matrix_test+0x8dc>
20002156:	e084      	b.n	20002262 <matrix_test+0x9e6>
20002158:	4667      	mov	r7, ip
2000215a:	2f00      	cmp	r7, #0
2000215c:	d030      	beq.n	200021c0 <matrix_test+0x944>
2000215e:	2f01      	cmp	r7, #1
20002160:	d01e      	beq.n	200021a0 <matrix_test+0x924>
20002162:	2f02      	cmp	r7, #2
20002164:	d00e      	beq.n	20002184 <matrix_test+0x908>
            cur = C[i * N + j];
20002166:	468c      	mov	ip, r1
20002168:	9902      	ldr	r1, [sp, #8]
2000216a:	6849      	ldr	r1, [r1, #4]
            tmp += cur;
2000216c:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
2000216e:	42a3      	cmp	r3, r4
20002170:	dd00      	ble.n	20002174 <matrix_test+0x8f8>
20002172:	e10e      	b.n	20002392 <matrix_test+0xb16>
                ret += (cur > prev) ? 1 : 0;
20002174:	2701      	movs	r7, #1
20002176:	4561      	cmp	r1, ip
20002178:	dc00      	bgt.n	2000217c <matrix_test+0x900>
2000217a:	e11b      	b.n	200023b4 <matrix_test+0xb38>
2000217c:	19c0      	adds	r0, r0, r7
2000217e:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
20002180:	3201      	adds	r2, #1
20002182:	3604      	adds	r6, #4
            cur = C[i * N + j];
20002184:	468c      	mov	ip, r1
20002186:	6831      	ldr	r1, [r6, #0]
            tmp += cur;
20002188:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
2000218a:	42a3      	cmp	r3, r4
2000218c:	dd00      	ble.n	20002190 <matrix_test+0x914>
2000218e:	e0f8      	b.n	20002382 <matrix_test+0xb06>
                ret += (cur > prev) ? 1 : 0;
20002190:	2701      	movs	r7, #1
20002192:	4561      	cmp	r1, ip
20002194:	dc00      	bgt.n	20002198 <matrix_test+0x91c>
20002196:	2700      	movs	r7, #0
20002198:	19c0      	adds	r0, r0, r7
2000219a:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
2000219c:	3201      	adds	r2, #1
2000219e:	3604      	adds	r6, #4
            cur = C[i * N + j];
200021a0:	468c      	mov	ip, r1
200021a2:	6831      	ldr	r1, [r6, #0]
            tmp += cur;
200021a4:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
200021a6:	42a3      	cmp	r3, r4
200021a8:	dd00      	ble.n	200021ac <matrix_test+0x930>
200021aa:	e0e2      	b.n	20002372 <matrix_test+0xaf6>
                ret += (cur > prev) ? 1 : 0;
200021ac:	2701      	movs	r7, #1
200021ae:	4561      	cmp	r1, ip
200021b0:	dc00      	bgt.n	200021b4 <matrix_test+0x938>
200021b2:	2700      	movs	r7, #0
200021b4:	19c0      	adds	r0, r0, r7
200021b6:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
200021b8:	3201      	adds	r2, #1
200021ba:	3604      	adds	r6, #4
200021bc:	42aa      	cmp	r2, r5
200021be:	d250      	bcs.n	20002262 <matrix_test+0x9e6>
200021c0:	46ac      	mov	ip, r5
200021c2:	e024      	b.n	2000220e <matrix_test+0x992>
                tmp = 0;
200021c4:	2300      	movs	r3, #0
            cur = C[i * N + j];
200021c6:	6871      	ldr	r1, [r6, #4]
                ret += 10;
200021c8:	300a      	adds	r0, #10
            tmp += cur;
200021ca:	185b      	adds	r3, r3, r1
                ret += 10;
200021cc:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
200021ce:	3201      	adds	r2, #1
200021d0:	1d37      	adds	r7, r6, #4
            if (tmp > clipval)
200021d2:	42a3      	cmp	r3, r4
200021d4:	dd2b      	ble.n	2000222e <matrix_test+0x9b2>
                tmp = 0;
200021d6:	2300      	movs	r3, #0
            cur = C[i * N + j];
200021d8:	687d      	ldr	r5, [r7, #4]
                ret += 10;
200021da:	300a      	adds	r0, #10
            tmp += cur;
200021dc:	195b      	adds	r3, r3, r5
                ret += 10;
200021de:	b200      	sxth	r0, r0
            if (tmp > clipval)
200021e0:	42a3      	cmp	r3, r4
200021e2:	dc2e      	bgt.n	20002242 <matrix_test+0x9c6>
                ret += (cur > prev) ? 1 : 0;
200021e4:	2601      	movs	r6, #1
200021e6:	428d      	cmp	r5, r1
200021e8:	dc00      	bgt.n	200021ec <matrix_test+0x970>
200021ea:	2600      	movs	r6, #0
200021ec:	1981      	adds	r1, r0, r6
200021ee:	b208      	sxth	r0, r1
            cur = C[i * N + j];
200021f0:	68b9      	ldr	r1, [r7, #8]
            tmp += cur;
200021f2:	185b      	adds	r3, r3, r1
            if (tmp > clipval)
200021f4:	42a3      	cmp	r3, r4
200021f6:	dc2b      	bgt.n	20002250 <matrix_test+0x9d4>
                ret += (cur > prev) ? 1 : 0;
200021f8:	2601      	movs	r6, #1
200021fa:	42a9      	cmp	r1, r5
200021fc:	dc00      	bgt.n	20002200 <matrix_test+0x984>
200021fe:	2600      	movs	r6, #0
20002200:	1985      	adds	r5, r0, r6
        for (j = 0; j < N; j++)
20002202:	003e      	movs	r6, r7
20002204:	3203      	adds	r2, #3
                ret += (cur > prev) ? 1 : 0;
20002206:	b228      	sxth	r0, r5
        for (j = 0; j < N; j++)
20002208:	360c      	adds	r6, #12
2000220a:	4562      	cmp	r2, ip
2000220c:	d228      	bcs.n	20002260 <matrix_test+0x9e4>
            cur = C[i * N + j];
2000220e:	6835      	ldr	r5, [r6, #0]
            tmp += cur;
20002210:	195b      	adds	r3, r3, r5
            if (tmp > clipval)
20002212:	42a3      	cmp	r3, r4
20002214:	dcd6      	bgt.n	200021c4 <matrix_test+0x948>
                ret += (cur > prev) ? 1 : 0;
20002216:	2701      	movs	r7, #1
20002218:	428d      	cmp	r5, r1
2000221a:	dc00      	bgt.n	2000221e <matrix_test+0x9a2>
2000221c:	2700      	movs	r7, #0
2000221e:	19c1      	adds	r1, r0, r7
20002220:	b208      	sxth	r0, r1
            cur = C[i * N + j];
20002222:	6871      	ldr	r1, [r6, #4]
        for (j = 0; j < N; j++)
20002224:	3201      	adds	r2, #1
            tmp += cur;
20002226:	185b      	adds	r3, r3, r1
        for (j = 0; j < N; j++)
20002228:	1d37      	adds	r7, r6, #4
            if (tmp > clipval)
2000222a:	42a3      	cmp	r3, r4
2000222c:	dcd3      	bgt.n	200021d6 <matrix_test+0x95a>
                ret += (cur > prev) ? 1 : 0;
2000222e:	2601      	movs	r6, #1
20002230:	42a9      	cmp	r1, r5
20002232:	dc00      	bgt.n	20002236 <matrix_test+0x9ba>
20002234:	2600      	movs	r6, #0
20002236:	1985      	adds	r5, r0, r6
20002238:	b228      	sxth	r0, r5
            cur = C[i * N + j];
2000223a:	687d      	ldr	r5, [r7, #4]
            tmp += cur;
2000223c:	195b      	adds	r3, r3, r5
            if (tmp > clipval)
2000223e:	42a3      	cmp	r3, r4
20002240:	ddd0      	ble.n	200021e4 <matrix_test+0x968>
                tmp = 0;
20002242:	2300      	movs	r3, #0
            cur = C[i * N + j];
20002244:	68b9      	ldr	r1, [r7, #8]
                ret += 10;
20002246:	300a      	adds	r0, #10
            tmp += cur;
20002248:	185b      	adds	r3, r3, r1
                ret += 10;
2000224a:	b200      	sxth	r0, r0
            if (tmp > clipval)
2000224c:	42a3      	cmp	r3, r4
2000224e:	ddd3      	ble.n	200021f8 <matrix_test+0x97c>
        for (j = 0; j < N; j++)
20002250:	003e      	movs	r6, r7
                ret += 10;
20002252:	300a      	adds	r0, #10
        for (j = 0; j < N; j++)
20002254:	3203      	adds	r2, #3
                tmp = 0;
20002256:	2300      	movs	r3, #0
                ret += 10;
20002258:	b200      	sxth	r0, r0
        for (j = 0; j < N; j++)
2000225a:	360c      	adds	r6, #12
2000225c:	4562      	cmp	r2, ip
2000225e:	d3d6      	bcc.n	2000220e <matrix_test+0x992>
20002260:	4665      	mov	r5, ip
    for (i = 0; i < N; i++)
20002262:	2201      	movs	r2, #1
20002264:	4694      	mov	ip, r2
20002266:	44e2      	add	sl, ip
20002268:	44a9      	add	r9, r5
2000226a:	45aa      	cmp	sl, r5
2000226c:	d200      	bcs.n	20002270 <matrix_test+0x9f4>
2000226e:	e75a      	b.n	20002126 <matrix_test+0x8aa>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20002270:	4659      	mov	r1, fp
20002272:	f000 fd01 	bl	20002c78 <crc16>
20002276:	9c06      	ldr	r4, [sp, #24]
20002278:	4684      	mov	ip, r0
2000227a:	4646      	mov	r6, r8
2000227c:	2700      	movs	r7, #0
2000227e:	2000      	movs	r0, #0
20002280:	46a3      	mov	fp, r4
        for (j = 0; j < N; j++)
20002282:	4659      	mov	r1, fp
20002284:	007b      	lsls	r3, r7, #1
20002286:	18cc      	adds	r4, r1, r3
20002288:	2107      	movs	r1, #7
2000228a:	1e6a      	subs	r2, r5, #1
2000228c:	4011      	ands	r1, r2
            A[i * N + j] += val;
2000228e:	465a      	mov	r2, fp
20002290:	5ad3      	ldrh	r3, [r2, r3]
20002292:	1b9a      	subs	r2, r3, r6
20002294:	8022      	strh	r2, [r4, #0]
        for (j = 0; j < N; j++)
20002296:	2201      	movs	r2, #1
20002298:	1ca3      	adds	r3, r4, #2
2000229a:	42aa      	cmp	r2, r5
2000229c:	d24e      	bcs.n	2000233c <matrix_test+0xac0>
2000229e:	2900      	cmp	r1, #0
200022a0:	d030      	beq.n	20002304 <matrix_test+0xa88>
200022a2:	2901      	cmp	r1, #1
200022a4:	d027      	beq.n	200022f6 <matrix_test+0xa7a>
200022a6:	2902      	cmp	r1, #2
200022a8:	d020      	beq.n	200022ec <matrix_test+0xa70>
200022aa:	2903      	cmp	r1, #3
200022ac:	d019      	beq.n	200022e2 <matrix_test+0xa66>
200022ae:	2904      	cmp	r1, #4
200022b0:	d012      	beq.n	200022d8 <matrix_test+0xa5c>
200022b2:	2905      	cmp	r1, #5
200022b4:	d00b      	beq.n	200022ce <matrix_test+0xa52>
200022b6:	2906      	cmp	r1, #6
200022b8:	d004      	beq.n	200022c4 <matrix_test+0xa48>
            A[i * N + j] += val;
200022ba:	8861      	ldrh	r1, [r4, #2]
        for (j = 0; j < N; j++)
200022bc:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022be:	1b8a      	subs	r2, r1, r6
200022c0:	8062      	strh	r2, [r4, #2]
        for (j = 0; j < N; j++)
200022c2:	2202      	movs	r2, #2
            A[i * N + j] += val;
200022c4:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022c6:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022c8:	1ba1      	subs	r1, r4, r6
200022ca:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022cc:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022ce:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022d0:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022d2:	1ba1      	subs	r1, r4, r6
200022d4:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022d6:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022d8:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022da:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022dc:	1ba1      	subs	r1, r4, r6
200022de:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022e0:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022e2:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022e4:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022e6:	1ba1      	subs	r1, r4, r6
200022e8:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022ea:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022ec:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022ee:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022f0:	1ba1      	subs	r1, r4, r6
200022f2:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022f4:	3302      	adds	r3, #2
            A[i * N + j] += val;
200022f6:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
200022f8:	3201      	adds	r2, #1
            A[i * N + j] += val;
200022fa:	1ba1      	subs	r1, r4, r6
200022fc:	8019      	strh	r1, [r3, #0]
        for (j = 0; j < N; j++)
200022fe:	3302      	adds	r3, #2
20002300:	42aa      	cmp	r2, r5
20002302:	d21b      	bcs.n	2000233c <matrix_test+0xac0>
            A[i * N + j] += val;
20002304:	881c      	ldrh	r4, [r3, #0]
        for (j = 0; j < N; j++)
20002306:	3208      	adds	r2, #8
            A[i * N + j] += val;
20002308:	1ba1      	subs	r1, r4, r6
2000230a:	885c      	ldrh	r4, [r3, #2]
2000230c:	8019      	strh	r1, [r3, #0]
2000230e:	1ba1      	subs	r1, r4, r6
20002310:	889c      	ldrh	r4, [r3, #4]
20002312:	8059      	strh	r1, [r3, #2]
20002314:	1ba1      	subs	r1, r4, r6
20002316:	88dc      	ldrh	r4, [r3, #6]
20002318:	8099      	strh	r1, [r3, #4]
2000231a:	1ba1      	subs	r1, r4, r6
2000231c:	891c      	ldrh	r4, [r3, #8]
2000231e:	80d9      	strh	r1, [r3, #6]
20002320:	1ba1      	subs	r1, r4, r6
20002322:	895c      	ldrh	r4, [r3, #10]
20002324:	8119      	strh	r1, [r3, #8]
20002326:	1ba1      	subs	r1, r4, r6
20002328:	899c      	ldrh	r4, [r3, #12]
2000232a:	8159      	strh	r1, [r3, #10]
2000232c:	1ba1      	subs	r1, r4, r6
2000232e:	89dc      	ldrh	r4, [r3, #14]
20002330:	8199      	strh	r1, [r3, #12]
20002332:	1ba1      	subs	r1, r4, r6
20002334:	81d9      	strh	r1, [r3, #14]
        for (j = 0; j < N; j++)
20002336:	3310      	adds	r3, #16
20002338:	42aa      	cmp	r2, r5
2000233a:	d3e3      	bcc.n	20002304 <matrix_test+0xa88>
    for (i = 0; i < N; i++)
2000233c:	3001      	adds	r0, #1
2000233e:	197f      	adds	r7, r7, r5
20002340:	42a8      	cmp	r0, r5
20002342:	d39e      	bcc.n	20002282 <matrix_test+0xa06>
    return crc;
20002344:	4665      	mov	r5, ip
20002346:	b228      	sxth	r0, r5
}
20002348:	b009      	add	sp, #36	; 0x24
2000234a:	bcf0      	pop	{r4, r5, r6, r7}
2000234c:	46bb      	mov	fp, r7
2000234e:	46b2      	mov	sl, r6
20002350:	46a9      	mov	r9, r5
20002352:	46a0      	mov	r8, r4
20002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ret += (cur > prev) ? 1 : 0;
20002356:	2701      	movs	r7, #1
20002358:	42b1      	cmp	r1, r6
2000235a:	dc00      	bgt.n	2000235e <matrix_test+0xae2>
2000235c:	2700      	movs	r7, #0
2000235e:	19c0      	adds	r0, r0, r7
20002360:	b200      	sxth	r0, r0
20002362:	e63e      	b.n	20001fe2 <matrix_test+0x766>
20002364:	2701      	movs	r7, #1
20002366:	42b1      	cmp	r1, r6
20002368:	dc00      	bgt.n	2000236c <matrix_test+0xaf0>
2000236a:	2700      	movs	r7, #0
2000236c:	19c0      	adds	r0, r0, r7
2000236e:	b200      	sxth	r0, r0
20002370:	e6ec      	b.n	2000214c <matrix_test+0x8d0>
                ret += 10;
20002372:	300a      	adds	r0, #10
                tmp = 0;
20002374:	2300      	movs	r3, #0
                ret += 10;
20002376:	b200      	sxth	r0, r0
                tmp = 0;
20002378:	e71e      	b.n	200021b8 <matrix_test+0x93c>
                ret += 10;
2000237a:	300a      	adds	r0, #10
                tmp = 0;
2000237c:	2300      	movs	r3, #0
                ret += 10;
2000237e:	b200      	sxth	r0, r0
                tmp = 0;
20002380:	e665      	b.n	2000204e <matrix_test+0x7d2>
                ret += 10;
20002382:	300a      	adds	r0, #10
                tmp = 0;
20002384:	2300      	movs	r3, #0
                ret += 10;
20002386:	b200      	sxth	r0, r0
                tmp = 0;
20002388:	e708      	b.n	2000219c <matrix_test+0x920>
                ret += 10;
2000238a:	300a      	adds	r0, #10
                tmp = 0;
2000238c:	2300      	movs	r3, #0
                ret += 10;
2000238e:	b200      	sxth	r0, r0
                tmp = 0;
20002390:	e64f      	b.n	20002032 <matrix_test+0x7b6>
                ret += 10;
20002392:	300a      	adds	r0, #10
                tmp = 0;
20002394:	2300      	movs	r3, #0
                ret += 10;
20002396:	b200      	sxth	r0, r0
                tmp = 0;
20002398:	e6f2      	b.n	20002180 <matrix_test+0x904>
                ret += 10;
2000239a:	300a      	adds	r0, #10
                tmp = 0;
2000239c:	2300      	movs	r3, #0
                ret += 10;
2000239e:	b200      	sxth	r0, r0
                tmp = 0;
200023a0:	e639      	b.n	20002016 <matrix_test+0x79a>
                ret += 10;
200023a2:	300a      	adds	r0, #10
                tmp = 0;
200023a4:	2300      	movs	r3, #0
                ret += 10;
200023a6:	b200      	sxth	r0, r0
                tmp = 0;
200023a8:	e4ed      	b.n	20001d86 <matrix_test+0x50a>
                ret += 10;
200023aa:	300a      	adds	r0, #10
                tmp = 0;
200023ac:	2300      	movs	r3, #0
                ret += 10;
200023ae:	b200      	sxth	r0, r0
                tmp = 0;
200023b0:	f7ff fb9e 	bl	20001af0 <matrix_test+0x274>
                ret += (cur > prev) ? 1 : 0;
200023b4:	2700      	movs	r7, #0
200023b6:	e6e1      	b.n	2000217c <matrix_test+0x900>
200023b8:	2700      	movs	r7, #0
200023ba:	e62a      	b.n	20002012 <matrix_test+0x796>
200023bc:	2600      	movs	r6, #0
200023be:	1980      	adds	r0, r0, r6
200023c0:	b200      	sxth	r0, r0
200023c2:	e4e0      	b.n	20001d86 <matrix_test+0x50a>
200023c4:	2600      	movs	r6, #0
200023c6:	1980      	adds	r0, r0, r6
200023c8:	b200      	sxth	r0, r0
200023ca:	f7ff fb91 	bl	20001af0 <matrix_test+0x274>
    crc = crc16(matrix_sum(N, C, clipval), crc);
200023ce:	2100      	movs	r1, #0
200023d0:	2000      	movs	r0, #0
200023d2:	f000 fc51 	bl	20002c78 <crc16>
200023d6:	0004      	movs	r4, r0
    matrix_mul_vect(N, C, A, B);
200023d8:	9f07      	ldr	r7, [sp, #28]
200023da:	9e06      	ldr	r6, [sp, #24]
200023dc:	9d01      	ldr	r5, [sp, #4]
200023de:	003b      	movs	r3, r7
200023e0:	0032      	movs	r2, r6
200023e2:	0029      	movs	r1, r5
200023e4:	2000      	movs	r0, #0
200023e6:	f7fe ffc5 	bl	20001374 <matrix_mul_vect>
    crc = crc16(matrix_sum(N, C, clipval), crc);
200023ea:	0021      	movs	r1, r4
200023ec:	2000      	movs	r0, #0
200023ee:	f000 fc43 	bl	20002c78 <crc16>
200023f2:	0004      	movs	r4, r0
    matrix_mul_matrix(N, C, A, B);
200023f4:	003b      	movs	r3, r7
200023f6:	0032      	movs	r2, r6
200023f8:	0029      	movs	r1, r5
200023fa:	2000      	movs	r0, #0
200023fc:	f7ff f856 	bl	200014ac <matrix_mul_matrix>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20002400:	0021      	movs	r1, r4
20002402:	2000      	movs	r0, #0
20002404:	f000 fc38 	bl	20002c78 <crc16>
20002408:	0004      	movs	r4, r0
    matrix_mul_matrix_bitextract(N, C, A, B);
2000240a:	003b      	movs	r3, r7
2000240c:	0032      	movs	r2, r6
2000240e:	0029      	movs	r1, r5
20002410:	2000      	movs	r0, #0
20002412:	f7ff f95f 	bl	200016d4 <matrix_mul_matrix_bitextract>
    crc = crc16(matrix_sum(N, C, clipval), crc);
20002416:	0021      	movs	r1, r4
20002418:	2000      	movs	r0, #0
2000241a:	f000 fc2d 	bl	20002c78 <crc16>
2000241e:	4684      	mov	ip, r0
    for (i = 0; i < N; i++)
20002420:	e790      	b.n	20002344 <matrix_test+0xac8>
20002422:	46c0      	nop			; (mov r8, r8)

20002424 <core_bench_matrix>:
{
20002424:	b530      	push	{r4, r5, lr}
20002426:	000d      	movs	r5, r1
20002428:	0014      	movs	r4, r2
2000242a:	b083      	sub	sp, #12
    crc = crc16(matrix_test(N, C, A, B, val), crc);
2000242c:	6883      	ldr	r3, [r0, #8]
2000242e:	6842      	ldr	r2, [r0, #4]
20002430:	68c1      	ldr	r1, [r0, #12]
20002432:	6800      	ldr	r0, [r0, #0]
20002434:	9500      	str	r5, [sp, #0]
20002436:	f7ff fa21 	bl	2000187c <matrix_test>
2000243a:	0021      	movs	r1, r4
2000243c:	f000 fc1c 	bl	20002c78 <crc16>
}
20002440:	b003      	add	sp, #12
20002442:	bd30      	pop	{r4, r5, pc}

20002444 <core_init_state>:

    Note:
    The seed parameter MUST be supplied from a source that cannot be determined at compile time
*/
void core_init_state(ee_u32 size, ee_s16 seed, ee_u8 *p)
{
20002444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002446:	4657      	mov	r7, sl
20002448:	464e      	mov	r6, r9
2000244a:	46de      	mov	lr, fp
2000244c:	4645      	mov	r5, r8
2000244e:	4681      	mov	r9, r0
    ee_u8 *buf = 0;
#if CORE_DEBUG
    ee_u8 *start = p;
    ee_printf("State: %d,%d\n", size, seed);
#endif
    size--;
20002450:	3801      	subs	r0, #1
{
20002452:	b5e0      	push	{r5, r6, r7, lr}
20002454:	0017      	movs	r7, r2
    next = 0;
    while ((total + next + 1) < size)
20002456:	2801      	cmp	r0, #1
20002458:	d964      	bls.n	20002524 <core_init_state+0xe0>
2000245a:	2207      	movs	r2, #7
        case 6: /* scientific */
            buf = scipat[(seed >> 3) & 0x3];
            next = 8;
            break;
        case 7: /* invalid */
            buf = errpat[(seed >> 3) & 0x3];
2000245c:	2503      	movs	r5, #3
2000245e:	3101      	adds	r1, #1
            buf = scipat[(seed >> 3) & 0x3];
20002460:	4e31      	ldr	r6, [pc, #196]	; (20002528 <core_init_state+0xe4>)
20002462:	b28c      	uxth	r4, r1
            buf = errpat[(seed >> 3) & 0x3];
20002464:	4931      	ldr	r1, [pc, #196]	; (2000252c <core_init_state+0xe8>)
    ee_u32 total = 0, next = 0, i;
20002466:	2300      	movs	r3, #0
20002468:	4694      	mov	ip, r2
            buf = errpat[(seed >> 3) & 0x3];
2000246a:	468b      	mov	fp, r1
2000246c:	46a8      	mov	r8, r5
            buf = scipat[(seed >> 3) & 0x3];
2000246e:	46b2      	mov	sl, r6
20002470:	e029      	b.n	200024c6 <core_init_state+0x82>
        switch (seed & 0x7)
20002472:	2904      	cmp	r1, #4
20002474:	d84d      	bhi.n	20002512 <core_init_state+0xce>
20002476:	3903      	subs	r1, #3
            buf = floatpat[(seed >> 3) & 0x3];
20002478:	10d2      	asrs	r2, r2, #3
        switch (seed & 0x7)
2000247a:	2901      	cmp	r1, #1
2000247c:	d841      	bhi.n	20002502 <core_init_state+0xbe>
            buf = floatpat[(seed >> 3) & 0x3];
2000247e:	4641      	mov	r1, r8
20002480:	4e2b      	ldr	r6, [pc, #172]	; (20002530 <core_init_state+0xec>)
20002482:	400a      	ands	r2, r1
20002484:	0092      	lsls	r2, r2, #2
20002486:	5992      	ldr	r2, [r2, r6]
            next = 8;
20002488:	2508      	movs	r5, #8
            break;
2000248a:	2609      	movs	r6, #9
    while ((total + next + 1) < size)
2000248c:	1999      	adds	r1, r3, r6
2000248e:	4281      	cmp	r1, r0
20002490:	d229      	bcs.n	200024e6 <core_init_state+0xa2>
                *(p + total + i) = buf[i];
20002492:	7816      	ldrb	r6, [r2, #0]
20002494:	54fe      	strb	r6, [r7, r3]
20002496:	7856      	ldrb	r6, [r2, #1]
20002498:	18fb      	adds	r3, r7, r3
2000249a:	705e      	strb	r6, [r3, #1]
2000249c:	7896      	ldrb	r6, [r2, #2]
2000249e:	709e      	strb	r6, [r3, #2]
200024a0:	78d6      	ldrb	r6, [r2, #3]
200024a2:	70de      	strb	r6, [r3, #3]
            for (i = 0; i < next; i++)
200024a4:	2d04      	cmp	r5, #4
200024a6:	d009      	beq.n	200024bc <core_init_state+0x78>
                *(p + total + i) = buf[i];
200024a8:	7916      	ldrb	r6, [r2, #4]
200024aa:	711e      	strb	r6, [r3, #4]
200024ac:	7956      	ldrb	r6, [r2, #5]
200024ae:	715e      	strb	r6, [r3, #5]
200024b0:	7996      	ldrb	r6, [r2, #6]
200024b2:	719e      	strb	r6, [r3, #6]
            for (i = 0; i < next; i++)
200024b4:	2d08      	cmp	r5, #8
200024b6:	d101      	bne.n	200024bc <core_init_state+0x78>
                *(p + total + i) = buf[i];
200024b8:	79d2      	ldrb	r2, [r2, #7]
200024ba:	71da      	strb	r2, [r3, #7]
            *(p + total + i) = ',';
200024bc:	262c      	movs	r6, #44	; 0x2c
200024be:	555e      	strb	r6, [r3, r5]
200024c0:	000b      	movs	r3, r1
200024c2:	3401      	adds	r4, #1
200024c4:	b2a4      	uxth	r4, r4
        seed++;
200024c6:	4661      	mov	r1, ip
200024c8:	b222      	sxth	r2, r4
        switch (seed & 0x7)
200024ca:	4021      	ands	r1, r4
200024cc:	2907      	cmp	r1, #7
200024ce:	d1d0      	bne.n	20002472 <core_init_state+0x2e>
            buf = errpat[(seed >> 3) & 0x3];
200024d0:	4646      	mov	r6, r8
200024d2:	10d5      	asrs	r5, r2, #3
200024d4:	4035      	ands	r5, r6
200024d6:	4659      	mov	r1, fp
            next = 8;
            break;
200024d8:	2609      	movs	r6, #9
            buf = errpat[(seed >> 3) & 0x3];
200024da:	00aa      	lsls	r2, r5, #2
200024dc:	5852      	ldr	r2, [r2, r1]
    while ((total + next + 1) < size)
200024de:	1999      	adds	r1, r3, r6
            next = 8;
200024e0:	2508      	movs	r5, #8
    while ((total + next + 1) < size)
200024e2:	4281      	cmp	r1, r0
200024e4:	d3d5      	bcc.n	20002492 <core_init_state+0x4e>
        default: /* Never happen, just to make some compilers happy */
            break;
        }
    }
    size++;
    while (total < size) /* fill the rest with 0 */
200024e6:	454b      	cmp	r3, r9
200024e8:	d205      	bcs.n	200024f6 <core_init_state+0xb2>
    {
        *(p + total) = 0;
200024ea:	4648      	mov	r0, r9
200024ec:	2100      	movs	r1, #0
200024ee:	1ac2      	subs	r2, r0, r3
200024f0:	18f8      	adds	r0, r7, r3
200024f2:	f001 fbc9 	bl	20003c88 <__memset_veneer>
        total++;
    }
#if CORE_DEBUG
    ee_printf("State Input: %s\n", start);
#endif
}
200024f6:	bcf0      	pop	{r4, r5, r6, r7}
200024f8:	46bb      	mov	fp, r7
200024fa:	46b2      	mov	sl, r6
200024fc:	46a9      	mov	r9, r5
200024fe:	46a0      	mov	r8, r4
20002500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            buf = intpat[(seed >> 3) & 0x3];
20002502:	4641      	mov	r1, r8
20002504:	4d0b      	ldr	r5, [pc, #44]	; (20002534 <core_init_state+0xf0>)
20002506:	400a      	ands	r2, r1
20002508:	0096      	lsls	r6, r2, #2
2000250a:	5972      	ldr	r2, [r6, r5]
            break;
2000250c:	2605      	movs	r6, #5
            next = 4;
2000250e:	2504      	movs	r5, #4
            break;
20002510:	e7bc      	b.n	2000248c <core_init_state+0x48>
            buf = scipat[(seed >> 3) & 0x3];
20002512:	4641      	mov	r1, r8
20002514:	4655      	mov	r5, sl
20002516:	10d2      	asrs	r2, r2, #3
20002518:	400a      	ands	r2, r1
2000251a:	0096      	lsls	r6, r2, #2
2000251c:	5972      	ldr	r2, [r6, r5]
            break;
2000251e:	2609      	movs	r6, #9
            next = 8;
20002520:	2508      	movs	r5, #8
            break;
20002522:	e7b3      	b.n	2000248c <core_init_state+0x48>
    ee_u32 total = 0, next = 0, i;
20002524:	2300      	movs	r3, #0
20002526:	e7e0      	b.n	200024ea <core_init_state+0xa6>
20002528:	2000290c 	.word	0x2000290c
2000252c:	200028dc 	.word	0x200028dc
20002530:	200028ec 	.word	0x200028ec
20002534:	200028fc 	.word	0x200028fc

20002538 <core_state_transition>:

    The input pointer is updated to point to the end of the token, and the end state is returned (either specific format determined or invalid).
*/

enum CORE_STATE core_state_transition(ee_u8 **instr, ee_u32 *transition_count)
{
20002538:	b530      	push	{r4, r5, lr}
    ee_u8 *str = *instr;
2000253a:	6803      	ldr	r3, [r0, #0]
{
2000253c:	0004      	movs	r4, r0
    ee_u8 NEXT_SYMBOL;
    enum CORE_STATE state = CORE_START;
    for (; *str && state != CORE_INVALID; str++)
2000253e:	7818      	ldrb	r0, [r3, #0]
20002540:	2800      	cmp	r0, #0
20002542:	d039      	beq.n	200025b8 <core_state_transition+0x80>
    {
        NEXT_SYMBOL = *str;
        if (NEXT_SYMBOL == ',') /* end of this input */
20002544:	282c      	cmp	r0, #44	; 0x2c
20002546:	d100      	bne.n	2000254a <core_state_transition+0x12>
20002548:	e0c4      	b.n	200026d4 <core_state_transition+0x19c>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
2000254a:	0002      	movs	r2, r0
2000254c:	3a30      	subs	r2, #48	; 0x30
2000254e:	2a09      	cmp	r2, #9
20002550:	d834      	bhi.n	200025bc <core_state_transition+0x84>
            else
            {
                state = CORE_INVALID;
                transition_count[CORE_INVALID]++;
            }
            transition_count[CORE_START]++;
20002552:	680d      	ldr	r5, [r1, #0]
    for (; *str && state != CORE_INVALID; str++)
20002554:	1c58      	adds	r0, r3, #1
            transition_count[CORE_START]++;
20002556:	3501      	adds	r5, #1
20002558:	600d      	str	r5, [r1, #0]
    for (; *str && state != CORE_INVALID; str++)
2000255a:	785a      	ldrb	r2, [r3, #1]
2000255c:	2a00      	cmp	r2, #0
2000255e:	d060      	beq.n	20002622 <core_state_transition+0xea>
        if (NEXT_SYMBOL == ',') /* end of this input */
20002560:	2a2c      	cmp	r2, #44	; 0x2c
20002562:	d100      	bne.n	20002566 <core_state_transition+0x2e>
20002564:	e0bc      	b.n	200026e0 <core_state_transition+0x1a8>
                state = CORE_INVALID;
                transition_count[CORE_S1]++;
            }
            break;
        case CORE_INT:
            if (NEXT_SYMBOL == '.')
20002566:	2a2e      	cmp	r2, #46	; 0x2e
20002568:	d00d      	beq.n	20002586 <core_state_transition+0x4e>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
2000256a:	3a30      	subs	r2, #48	; 0x30
2000256c:	2a09      	cmp	r2, #9
2000256e:	d834      	bhi.n	200025da <core_state_transition+0xa2>
    for (; *str && state != CORE_INVALID; str++)
20002570:	7842      	ldrb	r2, [r0, #1]
20002572:	1c43      	adds	r3, r0, #1
20002574:	2a00      	cmp	r2, #0
20002576:	d100      	bne.n	2000257a <core_state_transition+0x42>
20002578:	e0c7      	b.n	2000270a <core_state_transition+0x1d2>
        if (NEXT_SYMBOL == ',') /* end of this input */
2000257a:	2a2c      	cmp	r2, #44	; 0x2c
2000257c:	d100      	bne.n	20002580 <core_state_transition+0x48>
2000257e:	e0c1      	b.n	20002704 <core_state_transition+0x1cc>
    for (; *str && state != CORE_INVALID; str++)
20002580:	0018      	movs	r0, r3
            if (NEXT_SYMBOL == '.')
20002582:	2a2e      	cmp	r2, #46	; 0x2e
20002584:	d1f1      	bne.n	2000256a <core_state_transition+0x32>
            {
                state = CORE_FLOAT;
                transition_count[CORE_INT]++;
20002586:	690d      	ldr	r5, [r1, #16]
    for (; *str && state != CORE_INVALID; str++)
20002588:	1c42      	adds	r2, r0, #1
                transition_count[CORE_INT]++;
2000258a:	3501      	adds	r5, #1
2000258c:	610d      	str	r5, [r1, #16]
    for (; *str && state != CORE_INVALID; str++)
2000258e:	7840      	ldrb	r0, [r0, #1]
20002590:	2800      	cmp	r0, #0
20002592:	d100      	bne.n	20002596 <core_state_transition+0x5e>
20002594:	e09b      	b.n	200026ce <core_state_transition+0x196>
                state = CORE_INVALID;
                transition_count[CORE_INT]++;
            }
            break;
        case CORE_FLOAT:
            if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
20002596:	2520      	movs	r5, #32
        if (NEXT_SYMBOL == ',') /* end of this input */
20002598:	282c      	cmp	r0, #44	; 0x2c
2000259a:	d100      	bne.n	2000259e <core_state_transition+0x66>
2000259c:	e0a8      	b.n	200026f0 <core_state_transition+0x1b8>
            if (NEXT_SYMBOL == 'E' || NEXT_SYMBOL == 'e')
2000259e:	0003      	movs	r3, r0
200025a0:	43ab      	bics	r3, r5
200025a2:	2b45      	cmp	r3, #69	; 0x45
200025a4:	d040      	beq.n	20002628 <core_state_transition+0xf0>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
200025a6:	3830      	subs	r0, #48	; 0x30
200025a8:	2809      	cmp	r0, #9
200025aa:	d800      	bhi.n	200025ae <core_state_transition+0x76>
200025ac:	e074      	b.n	20002698 <core_state_transition+0x160>
                transition_count[CORE_FLOAT]++;
            }
            else if (!ee_isdigit(NEXT_SYMBOL))
            {
                state = CORE_INVALID;
                transition_count[CORE_FLOAT]++;
200025ae:	6948      	ldr	r0, [r1, #20]
    for (; *str && state != CORE_INVALID; str++)
200025b0:	1c53      	adds	r3, r2, #1
                transition_count[CORE_FLOAT]++;
200025b2:	3001      	adds	r0, #1
200025b4:	6148      	str	r0, [r1, #20]
                state = CORE_INVALID;
200025b6:	2001      	movs	r0, #1
            break;
        default:
            break;
        }
    }
    *instr = str;
200025b8:	6023      	str	r3, [r4, #0]
    return state;
}
200025ba:	bd30      	pop	{r4, r5, pc}
            else if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
200025bc:	282b      	cmp	r0, #43	; 0x2b
200025be:	d012      	beq.n	200025e6 <core_state_transition+0xae>
200025c0:	282d      	cmp	r0, #45	; 0x2d
200025c2:	d010      	beq.n	200025e6 <core_state_transition+0xae>
            else if (NEXT_SYMBOL == '.')
200025c4:	282e      	cmp	r0, #46	; 0x2e
200025c6:	d06f      	beq.n	200026a8 <core_state_transition+0x170>
                transition_count[CORE_INVALID]++;
200025c8:	6848      	ldr	r0, [r1, #4]
            transition_count[CORE_START]++;
200025ca:	680d      	ldr	r5, [r1, #0]
                transition_count[CORE_INVALID]++;
200025cc:	3001      	adds	r0, #1
            transition_count[CORE_START]++;
200025ce:	3501      	adds	r5, #1
                transition_count[CORE_INVALID]++;
200025d0:	6048      	str	r0, [r1, #4]
            transition_count[CORE_START]++;
200025d2:	600d      	str	r5, [r1, #0]
                state = CORE_INVALID;
200025d4:	2001      	movs	r0, #1
    for (; *str && state != CORE_INVALID; str++)
200025d6:	3301      	adds	r3, #1
200025d8:	e7ee      	b.n	200025b8 <core_state_transition+0x80>
                transition_count[CORE_INT]++;
200025da:	690b      	ldr	r3, [r1, #16]
200025dc:	3301      	adds	r3, #1
200025de:	610b      	str	r3, [r1, #16]
    for (; *str && state != CORE_INVALID; str++)
200025e0:	1c43      	adds	r3, r0, #1
                state = CORE_INVALID;
200025e2:	2001      	movs	r0, #1
200025e4:	e7e8      	b.n	200025b8 <core_state_transition+0x80>
            transition_count[CORE_START]++;
200025e6:	6808      	ldr	r0, [r1, #0]
    for (; *str && state != CORE_INVALID; str++)
200025e8:	1c5d      	adds	r5, r3, #1
            transition_count[CORE_START]++;
200025ea:	3001      	adds	r0, #1
200025ec:	6008      	str	r0, [r1, #0]
    for (; *str && state != CORE_INVALID; str++)
200025ee:	785b      	ldrb	r3, [r3, #1]
200025f0:	2b00      	cmp	r3, #0
200025f2:	d100      	bne.n	200025f6 <core_state_transition+0xbe>
200025f4:	e08b      	b.n	2000270e <core_state_transition+0x1d6>
        if (NEXT_SYMBOL == ',') /* end of this input */
200025f6:	2b2c      	cmp	r3, #44	; 0x2c
200025f8:	d100      	bne.n	200025fc <core_state_transition+0xc4>
200025fa:	e08b      	b.n	20002714 <core_state_transition+0x1dc>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
200025fc:	001a      	movs	r2, r3
200025fe:	3a30      	subs	r2, #48	; 0x30
20002600:	2a09      	cmp	r2, #9
20002602:	d907      	bls.n	20002614 <core_state_transition+0xdc>
            else if (NEXT_SYMBOL == '.')
20002604:	2b2e      	cmp	r3, #46	; 0x2e
20002606:	d05a      	beq.n	200026be <core_state_transition+0x186>
                transition_count[CORE_S1]++;
20002608:	6888      	ldr	r0, [r1, #8]
    for (; *str && state != CORE_INVALID; str++)
2000260a:	1c6b      	adds	r3, r5, #1
                transition_count[CORE_S1]++;
2000260c:	3001      	adds	r0, #1
2000260e:	6088      	str	r0, [r1, #8]
                state = CORE_INVALID;
20002610:	2001      	movs	r0, #1
20002612:	e7d1      	b.n	200025b8 <core_state_transition+0x80>
                transition_count[CORE_S1]++;
20002614:	688a      	ldr	r2, [r1, #8]
    for (; *str && state != CORE_INVALID; str++)
20002616:	1c68      	adds	r0, r5, #1
                transition_count[CORE_S1]++;
20002618:	3201      	adds	r2, #1
2000261a:	608a      	str	r2, [r1, #8]
    for (; *str && state != CORE_INVALID; str++)
2000261c:	786a      	ldrb	r2, [r5, #1]
2000261e:	2a00      	cmp	r2, #0
20002620:	d19e      	bne.n	20002560 <core_state_transition+0x28>
20002622:	0003      	movs	r3, r0
                state = CORE_INT;
20002624:	2004      	movs	r0, #4
20002626:	e7c7      	b.n	200025b8 <core_state_transition+0x80>
                transition_count[CORE_FLOAT]++;
20002628:	694d      	ldr	r5, [r1, #20]
    for (; *str && state != CORE_INVALID; str++)
2000262a:	1c53      	adds	r3, r2, #1
                transition_count[CORE_FLOAT]++;
2000262c:	3501      	adds	r5, #1
2000262e:	614d      	str	r5, [r1, #20]
    for (; *str && state != CORE_INVALID; str++)
20002630:	7850      	ldrb	r0, [r2, #1]
20002632:	2800      	cmp	r0, #0
20002634:	d058      	beq.n	200026e8 <core_state_transition+0x1b0>
        if (NEXT_SYMBOL == ',') /* end of this input */
20002636:	282c      	cmp	r0, #44	; 0x2c
20002638:	d061      	beq.n	200026fe <core_state_transition+0x1c6>
            if (NEXT_SYMBOL == '+' || NEXT_SYMBOL == '-')
2000263a:	23fd      	movs	r3, #253	; 0xfd
2000263c:	382b      	subs	r0, #43	; 0x2b
2000263e:	4218      	tst	r0, r3
20002640:	d005      	beq.n	2000264e <core_state_transition+0x116>
                transition_count[CORE_S2]++;
20002642:	68c8      	ldr	r0, [r1, #12]
    for (; *str && state != CORE_INVALID; str++)
20002644:	1c93      	adds	r3, r2, #2
                transition_count[CORE_S2]++;
20002646:	3001      	adds	r0, #1
20002648:	60c8      	str	r0, [r1, #12]
                state = CORE_INVALID;
2000264a:	2001      	movs	r0, #1
2000264c:	e7b4      	b.n	200025b8 <core_state_transition+0x80>
                transition_count[CORE_S2]++;
2000264e:	68cd      	ldr	r5, [r1, #12]
    for (; *str && state != CORE_INVALID; str++)
20002650:	1c93      	adds	r3, r2, #2
                transition_count[CORE_S2]++;
20002652:	3501      	adds	r5, #1
20002654:	60cd      	str	r5, [r1, #12]
    for (; *str && state != CORE_INVALID; str++)
20002656:	7890      	ldrb	r0, [r2, #2]
20002658:	2800      	cmp	r0, #0
2000265a:	d047      	beq.n	200026ec <core_state_transition+0x1b4>
        if (NEXT_SYMBOL == ',') /* end of this input */
2000265c:	282c      	cmp	r0, #44	; 0x2c
2000265e:	d04b      	beq.n	200026f8 <core_state_transition+0x1c0>
                transition_count[CORE_EXPONENT]++;
20002660:	698b      	ldr	r3, [r1, #24]
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
20002662:	3830      	subs	r0, #48	; 0x30
                transition_count[CORE_EXPONENT]++;
20002664:	3301      	adds	r3, #1
20002666:	618b      	str	r3, [r1, #24]
    for (; *str && state != CORE_INVALID; str++)
20002668:	1cd3      	adds	r3, r2, #3
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
2000266a:	2809      	cmp	r0, #9
2000266c:	d80b      	bhi.n	20002686 <core_state_transition+0x14e>
    for (; *str && state != CORE_INVALID; str++)
2000266e:	78d5      	ldrb	r5, [r2, #3]
20002670:	2d00      	cmp	r5, #0
20002672:	d00f      	beq.n	20002694 <core_state_transition+0x15c>
        if (NEXT_SYMBOL == ',') /* end of this input */
20002674:	2d2c      	cmp	r5, #44	; 0x2c
20002676:	d030      	beq.n	200026da <core_state_transition+0x1a2>
    retval = ((c >= '0') & (c <= '9')) ? 1 : 0;
20002678:	3d30      	subs	r5, #48	; 0x30
2000267a:	2d09      	cmp	r5, #9
2000267c:	d905      	bls.n	2000268a <core_state_transition+0x152>
                transition_count[CORE_INVALID]++;
2000267e:	684a      	ldr	r2, [r1, #4]
    for (; *str && state != CORE_INVALID; str++)
20002680:	3301      	adds	r3, #1
                transition_count[CORE_INVALID]++;
20002682:	3201      	adds	r2, #1
20002684:	604a      	str	r2, [r1, #4]
                state = CORE_INVALID;
20002686:	2001      	movs	r0, #1
20002688:	e796      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
2000268a:	785d      	ldrb	r5, [r3, #1]
2000268c:	1c58      	adds	r0, r3, #1
2000268e:	0003      	movs	r3, r0
20002690:	2d00      	cmp	r5, #0
20002692:	d1ef      	bne.n	20002674 <core_state_transition+0x13c>
20002694:	2007      	movs	r0, #7
20002696:	e78f      	b.n	200025b8 <core_state_transition+0x80>
20002698:	7850      	ldrb	r0, [r2, #1]
2000269a:	1c53      	adds	r3, r2, #1
2000269c:	2800      	cmp	r0, #0
2000269e:	d03d      	beq.n	2000271c <core_state_transition+0x1e4>
        if (NEXT_SYMBOL == ',') /* end of this input */
200026a0:	282c      	cmp	r0, #44	; 0x2c
200026a2:	d03d      	beq.n	20002720 <core_state_transition+0x1e8>
    for (; *str && state != CORE_INVALID; str++)
200026a4:	001a      	movs	r2, r3
200026a6:	e77a      	b.n	2000259e <core_state_transition+0x66>
            transition_count[CORE_START]++;
200026a8:	680a      	ldr	r2, [r1, #0]
200026aa:	3201      	adds	r2, #1
200026ac:	600a      	str	r2, [r1, #0]
    for (; *str && state != CORE_INVALID; str++)
200026ae:	7858      	ldrb	r0, [r3, #1]
200026b0:	1c5a      	adds	r2, r3, #1
200026b2:	2800      	cmp	r0, #0
200026b4:	d000      	beq.n	200026b8 <core_state_transition+0x180>
200026b6:	e76e      	b.n	20002596 <core_state_transition+0x5e>
200026b8:	0013      	movs	r3, r2
                state = CORE_FLOAT;
200026ba:	2005      	movs	r0, #5
200026bc:	e77c      	b.n	200025b8 <core_state_transition+0x80>
                transition_count[CORE_S1]++;
200026be:	688b      	ldr	r3, [r1, #8]
    for (; *str && state != CORE_INVALID; str++)
200026c0:	1c6a      	adds	r2, r5, #1
                transition_count[CORE_S1]++;
200026c2:	3301      	adds	r3, #1
200026c4:	608b      	str	r3, [r1, #8]
    for (; *str && state != CORE_INVALID; str++)
200026c6:	7868      	ldrb	r0, [r5, #1]
200026c8:	2800      	cmp	r0, #0
200026ca:	d000      	beq.n	200026ce <core_state_transition+0x196>
200026cc:	e763      	b.n	20002596 <core_state_transition+0x5e>
200026ce:	0013      	movs	r3, r2
                state = CORE_FLOAT;
200026d0:	3005      	adds	r0, #5
200026d2:	e771      	b.n	200025b8 <core_state_transition+0x80>
        if (NEXT_SYMBOL == ',') /* end of this input */
200026d4:	2000      	movs	r0, #0
            str++;
200026d6:	3301      	adds	r3, #1
            break;
200026d8:	e76e      	b.n	200025b8 <core_state_transition+0x80>
        if (NEXT_SYMBOL == ',') /* end of this input */
200026da:	2007      	movs	r0, #7
            str++;
200026dc:	3301      	adds	r3, #1
            break;
200026de:	e76b      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
200026e0:	0003      	movs	r3, r0
        if (NEXT_SYMBOL == ',') /* end of this input */
200026e2:	2004      	movs	r0, #4
            str++;
200026e4:	3301      	adds	r3, #1
            break;
200026e6:	e767      	b.n	200025b8 <core_state_transition+0x80>
                state = CORE_S2;
200026e8:	3003      	adds	r0, #3
200026ea:	e765      	b.n	200025b8 <core_state_transition+0x80>
                state = CORE_EXPONENT;
200026ec:	3006      	adds	r0, #6
200026ee:	e763      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
200026f0:	0013      	movs	r3, r2
        if (NEXT_SYMBOL == ',') /* end of this input */
200026f2:	2005      	movs	r0, #5
            str++;
200026f4:	3301      	adds	r3, #1
            break;
200026f6:	e75f      	b.n	200025b8 <core_state_transition+0x80>
                state = CORE_EXPONENT;
200026f8:	2006      	movs	r0, #6
            str++;
200026fa:	3301      	adds	r3, #1
            break;
200026fc:	e75c      	b.n	200025b8 <core_state_transition+0x80>
                state = CORE_S2;
200026fe:	3829      	subs	r0, #41	; 0x29
            str++;
20002700:	3301      	adds	r3, #1
            break;
20002702:	e759      	b.n	200025b8 <core_state_transition+0x80>
        if (NEXT_SYMBOL == ',') /* end of this input */
20002704:	2004      	movs	r0, #4
            str++;
20002706:	3301      	adds	r3, #1
            break;
20002708:	e756      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
2000270a:	2004      	movs	r0, #4
2000270c:	e754      	b.n	200025b8 <core_state_transition+0x80>
2000270e:	002b      	movs	r3, r5
                state = CORE_S1;
20002710:	2002      	movs	r0, #2
20002712:	e751      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
20002714:	002b      	movs	r3, r5
        if (NEXT_SYMBOL == ',') /* end of this input */
20002716:	2002      	movs	r0, #2
            str++;
20002718:	3301      	adds	r3, #1
            break;
2000271a:	e74d      	b.n	200025b8 <core_state_transition+0x80>
    for (; *str && state != CORE_INVALID; str++)
2000271c:	2005      	movs	r0, #5
2000271e:	e74b      	b.n	200025b8 <core_state_transition+0x80>
        if (NEXT_SYMBOL == ',') /* end of this input */
20002720:	2005      	movs	r0, #5
            str++;
20002722:	3301      	adds	r3, #1
            break;
20002724:	e748      	b.n	200025b8 <core_state_transition+0x80>
20002726:	46c0      	nop			; (mov r8, r8)

20002728 <core_bench_state>:
{
20002728:	b5f0      	push	{r4, r5, r6, r7, lr}
2000272a:	46de      	mov	lr, fp
2000272c:	4657      	mov	r7, sl
2000272e:	4645      	mov	r5, r8
20002730:	464e      	mov	r6, r9
20002732:	b5e0      	push	{r5, r6, r7, lr}
20002734:	000d      	movs	r5, r1
20002736:	b095      	sub	sp, #84	; 0x54
20002738:	469b      	mov	fp, r3
2000273a:	ab1e      	add	r3, sp, #120	; 0x78
2000273c:	9201      	str	r2, [sp, #4]
2000273e:	4680      	mov	r8, r0
20002740:	2200      	movs	r2, #0
20002742:	5e98      	ldrsh	r0, [r3, r2]
20002744:	a91f      	add	r1, sp, #124	; 0x7c
        final_counts[i] = track_counts[i] = 0;
20002746:	af0c      	add	r7, sp, #48	; 0x30
20002748:	2220      	movs	r2, #32
{
2000274a:	880e      	ldrh	r6, [r1, #0]
2000274c:	4682      	mov	sl, r0
        final_counts[i] = track_counts[i] = 0;
2000274e:	2100      	movs	r1, #0
20002750:	0038      	movs	r0, r7
20002752:	ac04      	add	r4, sp, #16
    ee_u8 *p = memblock;
20002754:	9503      	str	r5, [sp, #12]
        final_counts[i] = track_counts[i] = 0;
20002756:	f001 fa97 	bl	20003c88 <__memset_veneer>
2000275a:	2220      	movs	r2, #32
2000275c:	2100      	movs	r1, #0
2000275e:	0020      	movs	r0, r4
20002760:	f001 fa92 	bl	20003c88 <__memset_veneer>
    while (*p != 0)
20002764:	782a      	ldrb	r2, [r5, #0]
20002766:	2a00      	cmp	r2, #0
20002768:	d05a      	beq.n	20002820 <core_bench_state+0xf8>
2000276a:	a803      	add	r0, sp, #12
2000276c:	4681      	mov	r9, r0
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
2000276e:	0039      	movs	r1, r7
20002770:	4648      	mov	r0, r9
20002772:	f7ff fee1 	bl	20002538 <core_state_transition>
    while (*p != 0)
20002776:	9b03      	ldr	r3, [sp, #12]
        final_counts[fstate]++;
20002778:	0081      	lsls	r1, r0, #2
2000277a:	590a      	ldr	r2, [r1, r4]
    while (*p != 0)
2000277c:	7818      	ldrb	r0, [r3, #0]
        final_counts[fstate]++;
2000277e:	3201      	adds	r2, #1
20002780:	510a      	str	r2, [r1, r4]
    while (*p != 0)
20002782:	2800      	cmp	r0, #0
20002784:	d1f3      	bne.n	2000276e <core_bench_state+0x46>
    while (p < (memblock + blksize)) /* insert some corruption */
20002786:	44a8      	add	r8, r5
    p = memblock;
20002788:	002b      	movs	r3, r5
    while (*p != 0)
2000278a:	782a      	ldrb	r2, [r5, #0]
    p = memblock;
2000278c:	9503      	str	r5, [sp, #12]
    while (p < (memblock + blksize)) /* insert some corruption */
2000278e:	45a8      	cmp	r8, r5
20002790:	d943      	bls.n	2000281a <core_bench_state+0xf2>
        p += step;
20002792:	0029      	movs	r1, r5
20002794:	e001      	b.n	2000279a <core_bench_state+0x72>
20002796:	9303      	str	r3, [sp, #12]
        if (*p != ',')
20002798:	781a      	ldrb	r2, [r3, #0]
2000279a:	2a2c      	cmp	r2, #44	; 0x2c
2000279c:	d003      	beq.n	200027a6 <core_bench_state+0x7e>
            *p ^= (ee_u8)seed1;
2000279e:	9b01      	ldr	r3, [sp, #4]
200027a0:	405a      	eors	r2, r3
200027a2:	700a      	strb	r2, [r1, #0]
200027a4:	9b03      	ldr	r3, [sp, #12]
        p += step;
200027a6:	4453      	add	r3, sl
200027a8:	0019      	movs	r1, r3
    while (p < (memblock + blksize)) /* insert some corruption */
200027aa:	4543      	cmp	r3, r8
200027ac:	d3f3      	bcc.n	20002796 <core_bench_state+0x6e>
    while (*p != 0)
200027ae:	782a      	ldrb	r2, [r5, #0]
200027b0:	a803      	add	r0, sp, #12
    p = memblock;
200027b2:	002b      	movs	r3, r5
200027b4:	4681      	mov	r9, r0
200027b6:	9503      	str	r5, [sp, #12]
    while (*p != 0)
200027b8:	2a00      	cmp	r2, #0
200027ba:	d00f      	beq.n	200027dc <core_bench_state+0xb4>
        enum CORE_STATE fstate = core_state_transition(&p, track_counts);
200027bc:	0039      	movs	r1, r7
200027be:	4648      	mov	r0, r9
200027c0:	f7ff feba 	bl	20002538 <core_state_transition>
    while (*p != 0)
200027c4:	9a03      	ldr	r2, [sp, #12]
        final_counts[fstate]++;
200027c6:	0081      	lsls	r1, r0, #2
200027c8:	590b      	ldr	r3, [r1, r4]
    while (*p != 0)
200027ca:	7810      	ldrb	r0, [r2, #0]
        final_counts[fstate]++;
200027cc:	3301      	adds	r3, #1
200027ce:	510b      	str	r3, [r1, r4]
    while (*p != 0)
200027d0:	2800      	cmp	r0, #0
200027d2:	d1f3      	bne.n	200027bc <core_bench_state+0x94>
    p = memblock;
200027d4:	002b      	movs	r3, r5
200027d6:	9503      	str	r5, [sp, #12]
    while (p < (memblock + blksize)) /* undo corruption is seed1 and seed2 are equal */
200027d8:	45a8      	cmp	r8, r5
200027da:	d90b      	bls.n	200027f4 <core_bench_state+0xcc>
        if (*p != ',')
200027dc:	7829      	ldrb	r1, [r5, #0]
200027de:	292c      	cmp	r1, #44	; 0x2c
200027e0:	d003      	beq.n	200027ea <core_bench_state+0xc2>
            *p ^= (ee_u8)seed2;
200027e2:	465b      	mov	r3, fp
200027e4:	4059      	eors	r1, r3
200027e6:	7029      	strb	r1, [r5, #0]
200027e8:	9b03      	ldr	r3, [sp, #12]
        p += step;
200027ea:	4453      	add	r3, sl
200027ec:	001d      	movs	r5, r3
200027ee:	9303      	str	r3, [sp, #12]
    while (p < (memblock + blksize)) /* undo corruption is seed1 and seed2 are equal */
200027f0:	4598      	cmp	r8, r3
200027f2:	d8f3      	bhi.n	200027dc <core_bench_state+0xb4>
200027f4:	003d      	movs	r5, r7
        crc = crcu32(final_counts[i], crc);
200027f6:	0031      	movs	r1, r6
200027f8:	cc01      	ldmia	r4!, {r0}
200027fa:	f000 f939 	bl	20002a70 <crcu32>
200027fe:	0001      	movs	r1, r0
        crc = crcu32(track_counts[i], crc);
20002800:	cd01      	ldmia	r5!, {r0}
20002802:	f000 f935 	bl	20002a70 <crcu32>
20002806:	0006      	movs	r6, r0
    for (i = 0; i < NUM_CORE_STATES; i++)
20002808:	42a7      	cmp	r7, r4
2000280a:	d1f4      	bne.n	200027f6 <core_bench_state+0xce>
}
2000280c:	b015      	add	sp, #84	; 0x54
2000280e:	bcf0      	pop	{r4, r5, r6, r7}
20002810:	46bb      	mov	fp, r7
20002812:	46b2      	mov	sl, r6
20002814:	46a9      	mov	r9, r5
20002816:	46a0      	mov	r8, r4
20002818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while (*p != 0)
2000281a:	2a00      	cmp	r2, #0
2000281c:	d1ce      	bne.n	200027bc <core_bench_state+0x94>
2000281e:	e7e9      	b.n	200027f4 <core_bench_state+0xcc>
    while (p < (memblock + blksize)) /* insert some corruption */
20002820:	44a8      	add	r8, r5
    p = memblock;
20002822:	002b      	movs	r3, r5
20002824:	9503      	str	r5, [sp, #12]
    while (p < (memblock + blksize)) /* insert some corruption */
20002826:	4545      	cmp	r5, r8
20002828:	d3b3      	bcc.n	20002792 <core_bench_state+0x6a>
2000282a:	e7e3      	b.n	200027f4 <core_bench_state+0xcc>
2000282c:	332e3054 	.word	0x332e3054
20002830:	46312d65 	.word	0x46312d65
20002834:	00000000 	.word	0x00000000
20002838:	542e542d 	.word	0x542e542d
2000283c:	71542b2b 	.word	0x71542b2b
20002840:	00000000 	.word	0x00000000
20002844:	2e335431 	.word	0x2e335431
20002848:	7a346534 	.word	0x7a346534
2000284c:	00000000 	.word	0x00000000
20002850:	302e3433 	.word	0x302e3433
20002854:	5e542d65 	.word	0x5e542d65
20002858:	00000000 	.word	0x00000000
2000285c:	30352e35 	.word	0x30352e35
20002860:	332b6530 	.word	0x332b6530
20002864:	00000000 	.word	0x00000000
20002868:	32312e2d 	.word	0x32312e2d
2000286c:	322d6533 	.word	0x322d6533
20002870:	00000000 	.word	0x00000000
20002874:	6537382d 	.word	0x6537382d
20002878:	3233382b 	.word	0x3233382b
2000287c:	00000000 	.word	0x00000000
20002880:	362e302b 	.word	0x362e302b
20002884:	32312d65 	.word	0x32312d65
20002888:	00000000 	.word	0x00000000
2000288c:	352e3533 	.word	0x352e3533
20002890:	30303434 	.word	0x30303434
20002894:	00000000 	.word	0x00000000
20002898:	3332312e 	.word	0x3332312e
2000289c:	30303534 	.word	0x30303534
200028a0:	00000000 	.word	0x00000000
200028a4:	3031312d 	.word	0x3031312d
200028a8:	3030372e 	.word	0x3030372e
200028ac:	00000000 	.word	0x00000000
200028b0:	362e302b 	.word	0x362e302b
200028b4:	30303434 	.word	0x30303434
200028b8:	00000000 	.word	0x00000000
200028bc:	32313035 	.word	0x32313035
200028c0:	00000000 	.word	0x00000000
200028c4:	34333231 	.word	0x34333231
200028c8:	00000000 	.word	0x00000000
200028cc:	3437382d 	.word	0x3437382d
200028d0:	00000000 	.word	0x00000000
200028d4:	3232312b 	.word	0x3232312b
200028d8:	00000000 	.word	0x00000000

200028dc <errpat>:
200028dc:	2000282c 20002838 20002844 20002850     ,(. 8(. D(. P(. 

200028ec <floatpat>:
200028ec:	2000288c 20002898 200028a4 200028b0     .(. .(. .(. .(. 

200028fc <intpat>:
200028fc:	200028bc 200028c4 200028cc 200028d4     .(. .(. .(. .(. 

2000290c <scipat>:
2000290c:	2000285c 20002868 20002874 20002880     \(. h(. t(. .(. 

2000291c <get_seed_32>:
extern volatile ee_s32 seed4_volatile;
extern volatile ee_s32 seed5_volatile;
ee_s32 get_seed_32(int i)
{
    ee_s32 retval;
    switch (i)
2000291c:	2805      	cmp	r0, #5
2000291e:	d812      	bhi.n	20002946 <get_seed_32+0x2a>
20002920:	4b0a      	ldr	r3, [pc, #40]	; (2000294c <get_seed_32+0x30>)
20002922:	0080      	lsls	r0, r0, #2
20002924:	5819      	ldr	r1, [r3, r0]
20002926:	468f      	mov	pc, r1
        break;
    case 4:
        retval = seed4_volatile;
        break;
    case 5:
        retval = seed5_volatile;
20002928:	4a09      	ldr	r2, [pc, #36]	; (20002950 <get_seed_32+0x34>)
2000292a:	6810      	ldr	r0, [r2, #0]
    default:
        retval = 0;
        break;
    }
    return retval;
}
2000292c:	4770      	bx	lr
        retval = seed1_volatile;
2000292e:	4a09      	ldr	r2, [pc, #36]	; (20002954 <get_seed_32+0x38>)
20002930:	6810      	ldr	r0, [r2, #0]
        break;
20002932:	e7fb      	b.n	2000292c <get_seed_32+0x10>
        retval = seed2_volatile;
20002934:	4908      	ldr	r1, [pc, #32]	; (20002958 <get_seed_32+0x3c>)
20002936:	6808      	ldr	r0, [r1, #0]
        break;
20002938:	e7f8      	b.n	2000292c <get_seed_32+0x10>
        retval = seed3_volatile;
2000293a:	4b08      	ldr	r3, [pc, #32]	; (2000295c <get_seed_32+0x40>)
2000293c:	6818      	ldr	r0, [r3, #0]
        break;
2000293e:	e7f5      	b.n	2000292c <get_seed_32+0x10>
        retval = seed4_volatile;
20002940:	4807      	ldr	r0, [pc, #28]	; (20002960 <get_seed_32+0x44>)
20002942:	6800      	ldr	r0, [r0, #0]
        break;
20002944:	e7f2      	b.n	2000292c <get_seed_32+0x10>
{
20002946:	2000      	movs	r0, #0
    return retval;
20002948:	e7f0      	b.n	2000292c <get_seed_32+0x10>
2000294a:	46c0      	nop			; (mov r8, r8)
2000294c:	20002964 	.word	0x20002964
20002950:	20003f08 	.word	0x20003f08
20002954:	20003efc 	.word	0x20003efc
20002958:	20003f00 	.word	0x20003f00
2000295c:	20002dd4 	.word	0x20002dd4
20002960:	20003f04 	.word	0x20003f04
20002964:	20002946 	.word	0x20002946
20002968:	2000292e 	.word	0x2000292e
2000296c:	20002934 	.word	0x20002934
20002970:	2000293a 	.word	0x2000293a
20002974:	20002940 	.word	0x20002940
20002978:	20002928 	.word	0x20002928

2000297c <crcu16>:
            crc &= 0x7fff;
    }
    return crc;
}
ee_u16 crcu16(ee_u16 newval, ee_u16 crc)
{
2000297c:	b530      	push	{r4, r5, lr}
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
2000297e:	000c      	movs	r4, r1
    crc = crcu8((ee_u8)(newval), crc);
20002980:	b2c2      	uxtb	r2, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002982:	4044      	eors	r4, r0
        data >>= 1;
20002984:	0855      	lsrs	r5, r2, #1
        crc >>= 1;
20002986:	084b      	lsrs	r3, r1, #1
        if (x16 == 1)
20002988:	07e4      	lsls	r4, r4, #31
2000298a:	d501      	bpl.n	20002990 <crcu16+0x14>
            crc |= 0x8000;
2000298c:	4937      	ldr	r1, [pc, #220]	; (20002a6c <crcu16+0xf0>)
2000298e:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002990:	405d      	eors	r5, r3
        data >>= 1;
20002992:	0894      	lsrs	r4, r2, #2
        crc >>= 1;
20002994:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002996:	07ed      	lsls	r5, r5, #31
20002998:	d502      	bpl.n	200029a0 <crcu16+0x24>
        crc >>= 1;
2000299a:	001d      	movs	r5, r3
            crc |= 0x8000;
2000299c:	4b33      	ldr	r3, [pc, #204]	; (20002a6c <crcu16+0xf0>)
2000299e:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029a0:	405c      	eors	r4, r3
        data >>= 1;
200029a2:	08d5      	lsrs	r5, r2, #3
        crc >>= 1;
200029a4:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
200029a6:	07e4      	lsls	r4, r4, #31
200029a8:	d501      	bpl.n	200029ae <crcu16+0x32>
            crc |= 0x8000;
200029aa:	4930      	ldr	r1, [pc, #192]	; (20002a6c <crcu16+0xf0>)
200029ac:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029ae:	405d      	eors	r5, r3
        data >>= 1;
200029b0:	0914      	lsrs	r4, r2, #4
        crc >>= 1;
200029b2:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
200029b4:	07ed      	lsls	r5, r5, #31
200029b6:	d502      	bpl.n	200029be <crcu16+0x42>
        crc >>= 1;
200029b8:	001d      	movs	r5, r3
            crc |= 0x8000;
200029ba:	4b2c      	ldr	r3, [pc, #176]	; (20002a6c <crcu16+0xf0>)
200029bc:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029be:	405c      	eors	r4, r3
        data >>= 1;
200029c0:	0955      	lsrs	r5, r2, #5
        crc >>= 1;
200029c2:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
200029c4:	07e4      	lsls	r4, r4, #31
200029c6:	d501      	bpl.n	200029cc <crcu16+0x50>
            crc |= 0x8000;
200029c8:	4928      	ldr	r1, [pc, #160]	; (20002a6c <crcu16+0xf0>)
200029ca:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029cc:	405d      	eors	r5, r3
        data >>= 1;
200029ce:	0994      	lsrs	r4, r2, #6
        crc >>= 1;
200029d0:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
200029d2:	07ed      	lsls	r5, r5, #31
200029d4:	d502      	bpl.n	200029dc <crcu16+0x60>
        crc >>= 1;
200029d6:	001d      	movs	r5, r3
            crc |= 0x8000;
200029d8:	4b24      	ldr	r3, [pc, #144]	; (20002a6c <crcu16+0xf0>)
200029da:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029dc:	405c      	eors	r4, r3
        data >>= 1;
200029de:	09d2      	lsrs	r2, r2, #7
        crc >>= 1;
200029e0:	085d      	lsrs	r5, r3, #1
        if (x16 == 1)
200029e2:	07e4      	lsls	r4, r4, #31
200029e4:	d501      	bpl.n	200029ea <crcu16+0x6e>
            crc |= 0x8000;
200029e6:	4921      	ldr	r1, [pc, #132]	; (20002a6c <crcu16+0xf0>)
200029e8:	404d      	eors	r5, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029ea:	406a      	eors	r2, r5
200029ec:	086c      	lsrs	r4, r5, #1
        if (x16 == 1)
200029ee:	07d2      	lsls	r2, r2, #31
200029f0:	d439      	bmi.n	20002a66 <crcu16+0xea>
    crc = crcu8((ee_u8)((newval) >> 8), crc);
200029f2:	0a05      	lsrs	r5, r0, #8
200029f4:	002a      	movs	r2, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
200029f6:	4065      	eors	r5, r4
        data >>= 1;
200029f8:	0a40      	lsrs	r0, r0, #9
            crc |= 0x8000;
200029fa:	0864      	lsrs	r4, r4, #1
        if (x16 == 1)
200029fc:	07e9      	lsls	r1, r5, #31
200029fe:	d501      	bpl.n	20002a04 <crcu16+0x88>
            crc |= 0x8000;
20002a00:	491a      	ldr	r1, [pc, #104]	; (20002a6c <crcu16+0xf0>)
20002a02:	404c      	eors	r4, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a04:	4060      	eors	r0, r4
        data >>= 1;
20002a06:	0895      	lsrs	r5, r2, #2
        if (x16 == 1)
20002a08:	0863      	lsrs	r3, r4, #1
20002a0a:	07c0      	lsls	r0, r0, #31
20002a0c:	d501      	bpl.n	20002a12 <crcu16+0x96>
            crc |= 0x8000;
20002a0e:	4817      	ldr	r0, [pc, #92]	; (20002a6c <crcu16+0xf0>)
20002a10:	4043      	eors	r3, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a12:	405d      	eors	r5, r3
        data >>= 1;
20002a14:	08d4      	lsrs	r4, r2, #3
        if (x16 == 1)
20002a16:	085b      	lsrs	r3, r3, #1
20002a18:	07e9      	lsls	r1, r5, #31
20002a1a:	d501      	bpl.n	20002a20 <crcu16+0xa4>
            crc |= 0x8000;
20002a1c:	4913      	ldr	r1, [pc, #76]	; (20002a6c <crcu16+0xf0>)
20002a1e:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a20:	405c      	eors	r4, r3
        data >>= 1;
20002a22:	0915      	lsrs	r5, r2, #4
        if (x16 == 1)
20002a24:	085b      	lsrs	r3, r3, #1
20002a26:	07e0      	lsls	r0, r4, #31
20002a28:	d501      	bpl.n	20002a2e <crcu16+0xb2>
            crc |= 0x8000;
20002a2a:	4810      	ldr	r0, [pc, #64]	; (20002a6c <crcu16+0xf0>)
20002a2c:	4043      	eors	r3, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a2e:	405d      	eors	r5, r3
        data >>= 1;
20002a30:	0954      	lsrs	r4, r2, #5
        if (x16 == 1)
20002a32:	085b      	lsrs	r3, r3, #1
20002a34:	07e9      	lsls	r1, r5, #31
20002a36:	d501      	bpl.n	20002a3c <crcu16+0xc0>
            crc |= 0x8000;
20002a38:	490c      	ldr	r1, [pc, #48]	; (20002a6c <crcu16+0xf0>)
20002a3a:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a3c:	405c      	eors	r4, r3
        data >>= 1;
20002a3e:	0995      	lsrs	r5, r2, #6
        if (x16 == 1)
20002a40:	085b      	lsrs	r3, r3, #1
20002a42:	07e0      	lsls	r0, r4, #31
20002a44:	d501      	bpl.n	20002a4a <crcu16+0xce>
            crc |= 0x8000;
20002a46:	4809      	ldr	r0, [pc, #36]	; (20002a6c <crcu16+0xf0>)
20002a48:	4043      	eors	r3, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a4a:	405d      	eors	r5, r3
        data >>= 1;
20002a4c:	09d2      	lsrs	r2, r2, #7
        if (x16 == 1)
20002a4e:	085c      	lsrs	r4, r3, #1
20002a50:	07e9      	lsls	r1, r5, #31
20002a52:	d501      	bpl.n	20002a58 <crcu16+0xdc>
            crc |= 0x8000;
20002a54:	4905      	ldr	r1, [pc, #20]	; (20002a6c <crcu16+0xf0>)
20002a56:	404c      	eors	r4, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a58:	4062      	eors	r2, r4
        crc >>= 1;
20002a5a:	0860      	lsrs	r0, r4, #1
        if (x16 == 1)
20002a5c:	07d2      	lsls	r2, r2, #31
20002a5e:	d501      	bpl.n	20002a64 <crcu16+0xe8>
            crc |= 0x8000;
20002a60:	4d02      	ldr	r5, [pc, #8]	; (20002a6c <crcu16+0xf0>)
20002a62:	4068      	eors	r0, r5
    return crc;
}
20002a64:	bd30      	pop	{r4, r5, pc}
            crc |= 0x8000;
20002a66:	4b01      	ldr	r3, [pc, #4]	; (20002a6c <crcu16+0xf0>)
20002a68:	405c      	eors	r4, r3
20002a6a:	e7c2      	b.n	200029f2 <crcu16+0x76>
20002a6c:	0000a001 	.word	0x0000a001

20002a70 <crcu32>:
ee_u16 crcu32(ee_u32 newval, ee_u16 crc)
{
20002a70:	b570      	push	{r4, r5, r6, lr}
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a72:	000d      	movs	r5, r1
    crc = crcu8((ee_u8)(newval), crc);
20002a74:	b2c2      	uxtb	r2, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a76:	4045      	eors	r5, r0
    crc = crc16((ee_s16)(newval >> 16), crc);
    return crc;
}
ee_u16 crc16(ee_s16 newval, ee_u16 crc)
{
    return crcu16((ee_u16)newval, crc);
20002a78:	b284      	uxth	r4, r0
        data >>= 1;
20002a7a:	0856      	lsrs	r6, r2, #1
        crc >>= 1;
20002a7c:	084b      	lsrs	r3, r1, #1
        if (x16 == 1)
20002a7e:	07ed      	lsls	r5, r5, #31
20002a80:	d501      	bpl.n	20002a86 <crcu32+0x16>
            crc |= 0x8000;
20002a82:	497c      	ldr	r1, [pc, #496]	; (20002c74 <crcu32+0x204>)
20002a84:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a86:	405e      	eors	r6, r3
        data >>= 1;
20002a88:	0895      	lsrs	r5, r2, #2
        crc >>= 1;
20002a8a:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002a8c:	07f6      	lsls	r6, r6, #31
20002a8e:	d502      	bpl.n	20002a96 <crcu32+0x26>
        crc >>= 1;
20002a90:	001e      	movs	r6, r3
            crc |= 0x8000;
20002a92:	4b78      	ldr	r3, [pc, #480]	; (20002c74 <crcu32+0x204>)
20002a94:	4073      	eors	r3, r6
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002a96:	405d      	eors	r5, r3
        data >>= 1;
20002a98:	08d6      	lsrs	r6, r2, #3
        crc >>= 1;
20002a9a:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002a9c:	07ed      	lsls	r5, r5, #31
20002a9e:	d501      	bpl.n	20002aa4 <crcu32+0x34>
            crc |= 0x8000;
20002aa0:	4974      	ldr	r1, [pc, #464]	; (20002c74 <crcu32+0x204>)
20002aa2:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002aa4:	405e      	eors	r6, r3
        data >>= 1;
20002aa6:	0915      	lsrs	r5, r2, #4
        crc >>= 1;
20002aa8:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002aaa:	07f6      	lsls	r6, r6, #31
20002aac:	d502      	bpl.n	20002ab4 <crcu32+0x44>
        crc >>= 1;
20002aae:	001e      	movs	r6, r3
            crc |= 0x8000;
20002ab0:	4b70      	ldr	r3, [pc, #448]	; (20002c74 <crcu32+0x204>)
20002ab2:	4073      	eors	r3, r6
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ab4:	405d      	eors	r5, r3
        data >>= 1;
20002ab6:	0956      	lsrs	r6, r2, #5
        crc >>= 1;
20002ab8:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002aba:	07ed      	lsls	r5, r5, #31
20002abc:	d501      	bpl.n	20002ac2 <crcu32+0x52>
            crc |= 0x8000;
20002abe:	496d      	ldr	r1, [pc, #436]	; (20002c74 <crcu32+0x204>)
20002ac0:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ac2:	405e      	eors	r6, r3
        data >>= 1;
20002ac4:	0995      	lsrs	r5, r2, #6
        crc >>= 1;
20002ac6:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002ac8:	07f6      	lsls	r6, r6, #31
20002aca:	d502      	bpl.n	20002ad2 <crcu32+0x62>
        crc >>= 1;
20002acc:	001e      	movs	r6, r3
            crc |= 0x8000;
20002ace:	4b69      	ldr	r3, [pc, #420]	; (20002c74 <crcu32+0x204>)
20002ad0:	4073      	eors	r3, r6
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ad2:	405d      	eors	r5, r3
        data >>= 1;
20002ad4:	09d2      	lsrs	r2, r2, #7
        crc >>= 1;
20002ad6:	085e      	lsrs	r6, r3, #1
        if (x16 == 1)
20002ad8:	07ed      	lsls	r5, r5, #31
20002ada:	d501      	bpl.n	20002ae0 <crcu32+0x70>
            crc |= 0x8000;
20002adc:	4965      	ldr	r1, [pc, #404]	; (20002c74 <crcu32+0x204>)
20002ade:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ae0:	4072      	eors	r2, r6
20002ae2:	0875      	lsrs	r5, r6, #1
        if (x16 == 1)
20002ae4:	07d2      	lsls	r2, r2, #31
20002ae6:	d500      	bpl.n	20002aea <crcu32+0x7a>
20002ae8:	e0c0      	b.n	20002c6c <crcu32+0x1fc>
    crc = crcu8((ee_u8)((newval) >> 8), crc);
20002aea:	0a26      	lsrs	r6, r4, #8
20002aec:	0032      	movs	r2, r6
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002aee:	406e      	eors	r6, r5
        data >>= 1;
20002af0:	0a64      	lsrs	r4, r4, #9
            crc |= 0x8000;
20002af2:	086d      	lsrs	r5, r5, #1
        if (x16 == 1)
20002af4:	07f1      	lsls	r1, r6, #31
20002af6:	d501      	bpl.n	20002afc <crcu32+0x8c>
            crc |= 0x8000;
20002af8:	495e      	ldr	r1, [pc, #376]	; (20002c74 <crcu32+0x204>)
20002afa:	404d      	eors	r5, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002afc:	406c      	eors	r4, r5
        data >>= 1;
20002afe:	0896      	lsrs	r6, r2, #2
        if (x16 == 1)
20002b00:	086b      	lsrs	r3, r5, #1
20002b02:	07e4      	lsls	r4, r4, #31
20002b04:	d501      	bpl.n	20002b0a <crcu32+0x9a>
            crc |= 0x8000;
20002b06:	4c5b      	ldr	r4, [pc, #364]	; (20002c74 <crcu32+0x204>)
20002b08:	4063      	eors	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b0a:	405e      	eors	r6, r3
        data >>= 1;
20002b0c:	08d5      	lsrs	r5, r2, #3
        if (x16 == 1)
20002b0e:	085b      	lsrs	r3, r3, #1
20002b10:	07f1      	lsls	r1, r6, #31
20002b12:	d501      	bpl.n	20002b18 <crcu32+0xa8>
            crc |= 0x8000;
20002b14:	4957      	ldr	r1, [pc, #348]	; (20002c74 <crcu32+0x204>)
20002b16:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b18:	405d      	eors	r5, r3
        data >>= 1;
20002b1a:	0916      	lsrs	r6, r2, #4
        if (x16 == 1)
20002b1c:	085b      	lsrs	r3, r3, #1
20002b1e:	07ec      	lsls	r4, r5, #31
20002b20:	d501      	bpl.n	20002b26 <crcu32+0xb6>
            crc |= 0x8000;
20002b22:	4c54      	ldr	r4, [pc, #336]	; (20002c74 <crcu32+0x204>)
20002b24:	4063      	eors	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b26:	405e      	eors	r6, r3
        data >>= 1;
20002b28:	0955      	lsrs	r5, r2, #5
        if (x16 == 1)
20002b2a:	085b      	lsrs	r3, r3, #1
20002b2c:	07f1      	lsls	r1, r6, #31
20002b2e:	d501      	bpl.n	20002b34 <crcu32+0xc4>
            crc |= 0x8000;
20002b30:	4950      	ldr	r1, [pc, #320]	; (20002c74 <crcu32+0x204>)
20002b32:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b34:	405d      	eors	r5, r3
        data >>= 1;
20002b36:	0996      	lsrs	r6, r2, #6
        if (x16 == 1)
20002b38:	085b      	lsrs	r3, r3, #1
20002b3a:	07ec      	lsls	r4, r5, #31
20002b3c:	d501      	bpl.n	20002b42 <crcu32+0xd2>
            crc |= 0x8000;
20002b3e:	4c4d      	ldr	r4, [pc, #308]	; (20002c74 <crcu32+0x204>)
20002b40:	4063      	eors	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b42:	405e      	eors	r6, r3
        data >>= 1;
20002b44:	09d2      	lsrs	r2, r2, #7
        if (x16 == 1)
20002b46:	085d      	lsrs	r5, r3, #1
20002b48:	07f1      	lsls	r1, r6, #31
20002b4a:	d501      	bpl.n	20002b50 <crcu32+0xe0>
            crc |= 0x8000;
20002b4c:	4949      	ldr	r1, [pc, #292]	; (20002c74 <crcu32+0x204>)
20002b4e:	404d      	eors	r5, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b50:	406a      	eors	r2, r5
        crc >>= 1;
20002b52:	086e      	lsrs	r6, r5, #1
        if (x16 == 1)
20002b54:	07d2      	lsls	r2, r2, #31
20002b56:	d500      	bpl.n	20002b5a <crcu32+0xea>
20002b58:	e074      	b.n	20002c44 <crcu32+0x1d4>
    crc = crc16((ee_s16)(newval >> 16), crc);
20002b5a:	0c02      	lsrs	r2, r0, #16
    crc = crcu8((ee_u8)(newval), crc);
20002b5c:	b2d4      	uxtb	r4, r2
    return crcu16((ee_u16)newval, crc);
20002b5e:	0010      	movs	r0, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b60:	4072      	eors	r2, r6
        data >>= 1;
20002b62:	0865      	lsrs	r5, r4, #1
        if (x16 == 1)
20002b64:	07d3      	lsls	r3, r2, #31
20002b66:	d500      	bpl.n	20002b6a <crcu32+0xfa>
20002b68:	e076      	b.n	20002c58 <crcu32+0x1e8>
        crc >>= 1;
20002b6a:	0876      	lsrs	r6, r6, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b6c:	4075      	eors	r5, r6
        data >>= 1;
20002b6e:	08a2      	lsrs	r2, r4, #2
        if (x16 == 1)
20002b70:	0873      	lsrs	r3, r6, #1
20002b72:	07e9      	lsls	r1, r5, #31
20002b74:	d501      	bpl.n	20002b7a <crcu32+0x10a>
            crc |= 0x8000;
20002b76:	4d3f      	ldr	r5, [pc, #252]	; (20002c74 <crcu32+0x204>)
20002b78:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b7a:	405a      	eors	r2, r3
        data >>= 1;
20002b7c:	08e6      	lsrs	r6, r4, #3
        if (x16 == 1)
20002b7e:	0859      	lsrs	r1, r3, #1
20002b80:	07d2      	lsls	r2, r2, #31
20002b82:	d501      	bpl.n	20002b88 <crcu32+0x118>
            crc |= 0x8000;
20002b84:	4a3b      	ldr	r2, [pc, #236]	; (20002c74 <crcu32+0x204>)
20002b86:	4051      	eors	r1, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b88:	404e      	eors	r6, r1
        data >>= 1;
20002b8a:	0925      	lsrs	r5, r4, #4
        if (x16 == 1)
20002b8c:	084b      	lsrs	r3, r1, #1
20002b8e:	07f1      	lsls	r1, r6, #31
20002b90:	d501      	bpl.n	20002b96 <crcu32+0x126>
            crc |= 0x8000;
20002b92:	4e38      	ldr	r6, [pc, #224]	; (20002c74 <crcu32+0x204>)
20002b94:	4073      	eors	r3, r6
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002b96:	405d      	eors	r5, r3
        data >>= 1;
20002b98:	0961      	lsrs	r1, r4, #5
        if (x16 == 1)
20002b9a:	085b      	lsrs	r3, r3, #1
20002b9c:	07ea      	lsls	r2, r5, #31
20002b9e:	d501      	bpl.n	20002ba4 <crcu32+0x134>
            crc |= 0x8000;
20002ba0:	4a34      	ldr	r2, [pc, #208]	; (20002c74 <crcu32+0x204>)
20002ba2:	4053      	eors	r3, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ba4:	4059      	eors	r1, r3
        data >>= 1;
20002ba6:	09a5      	lsrs	r5, r4, #6
        if (x16 == 1)
20002ba8:	085e      	lsrs	r6, r3, #1
20002baa:	07c9      	lsls	r1, r1, #31
20002bac:	d501      	bpl.n	20002bb2 <crcu32+0x142>
            crc |= 0x8000;
20002bae:	4931      	ldr	r1, [pc, #196]	; (20002c74 <crcu32+0x204>)
20002bb0:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002bb2:	4075      	eors	r5, r6
        data >>= 1;
20002bb4:	09e4      	lsrs	r4, r4, #7
        if (x16 == 1)
20002bb6:	07ea      	lsls	r2, r5, #31
20002bb8:	d440      	bmi.n	20002c3c <crcu32+0x1cc>
        crc >>= 1;
20002bba:	0872      	lsrs	r2, r6, #1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002bbc:	4054      	eors	r4, r2
        crc >>= 1;
20002bbe:	0855      	lsrs	r5, r2, #1
        if (x16 == 1)
20002bc0:	07e1      	lsls	r1, r4, #31
20002bc2:	d501      	bpl.n	20002bc8 <crcu32+0x158>
            crc |= 0x8000;
20002bc4:	4e2b      	ldr	r6, [pc, #172]	; (20002c74 <crcu32+0x204>)
20002bc6:	4075      	eors	r5, r6
    crc = crcu8((ee_u8)((newval) >> 8), crc);
20002bc8:	0a01      	lsrs	r1, r0, #8
20002bca:	000c      	movs	r4, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002bcc:	4069      	eors	r1, r5
        data >>= 1;
20002bce:	0a40      	lsrs	r0, r0, #9
            crc |= 0x8000;
20002bd0:	086b      	lsrs	r3, r5, #1
        if (x16 == 1)
20002bd2:	07c9      	lsls	r1, r1, #31
20002bd4:	d501      	bpl.n	20002bda <crcu32+0x16a>
            crc |= 0x8000;
20002bd6:	4a27      	ldr	r2, [pc, #156]	; (20002c74 <crcu32+0x204>)
20002bd8:	4053      	eors	r3, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002bda:	4058      	eors	r0, r3
        data >>= 1;
20002bdc:	08a5      	lsrs	r5, r4, #2
        if (x16 == 1)
20002bde:	085e      	lsrs	r6, r3, #1
20002be0:	07c0      	lsls	r0, r0, #31
20002be2:	d501      	bpl.n	20002be8 <crcu32+0x178>
            crc |= 0x8000;
20002be4:	4923      	ldr	r1, [pc, #140]	; (20002c74 <crcu32+0x204>)
20002be6:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002be8:	4075      	eors	r5, r6
        data >>= 1;
20002bea:	08e0      	lsrs	r0, r4, #3
        if (x16 == 1)
20002bec:	0873      	lsrs	r3, r6, #1
20002bee:	07e9      	lsls	r1, r5, #31
20002bf0:	d501      	bpl.n	20002bf6 <crcu32+0x186>
            crc |= 0x8000;
20002bf2:	4a20      	ldr	r2, [pc, #128]	; (20002c74 <crcu32+0x204>)
20002bf4:	4053      	eors	r3, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002bf6:	4058      	eors	r0, r3
        data >>= 1;
20002bf8:	0925      	lsrs	r5, r4, #4
        if (x16 == 1)
20002bfa:	085e      	lsrs	r6, r3, #1
20002bfc:	07c0      	lsls	r0, r0, #31
20002bfe:	d501      	bpl.n	20002c04 <crcu32+0x194>
            crc |= 0x8000;
20002c00:	491c      	ldr	r1, [pc, #112]	; (20002c74 <crcu32+0x204>)
20002c02:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c04:	4075      	eors	r5, r6
        data >>= 1;
20002c06:	0960      	lsrs	r0, r4, #5
        if (x16 == 1)
20002c08:	0873      	lsrs	r3, r6, #1
20002c0a:	07e9      	lsls	r1, r5, #31
20002c0c:	d501      	bpl.n	20002c12 <crcu32+0x1a2>
            crc |= 0x8000;
20002c0e:	4a19      	ldr	r2, [pc, #100]	; (20002c74 <crcu32+0x204>)
20002c10:	4053      	eors	r3, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c12:	4058      	eors	r0, r3
        data >>= 1;
20002c14:	09a5      	lsrs	r5, r4, #6
        if (x16 == 1)
20002c16:	085e      	lsrs	r6, r3, #1
20002c18:	07c0      	lsls	r0, r0, #31
20002c1a:	d501      	bpl.n	20002c20 <crcu32+0x1b0>
            crc |= 0x8000;
20002c1c:	4915      	ldr	r1, [pc, #84]	; (20002c74 <crcu32+0x204>)
20002c1e:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c20:	4075      	eors	r5, r6
        data >>= 1;
20002c22:	09e4      	lsrs	r4, r4, #7
        if (x16 == 1)
20002c24:	0870      	lsrs	r0, r6, #1
20002c26:	07e9      	lsls	r1, r5, #31
20002c28:	d501      	bpl.n	20002c2e <crcu32+0x1be>
            crc |= 0x8000;
20002c2a:	4b12      	ldr	r3, [pc, #72]	; (20002c74 <crcu32+0x204>)
20002c2c:	4058      	eors	r0, r3
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c2e:	4044      	eors	r4, r0
        crc >>= 1;
20002c30:	0840      	lsrs	r0, r0, #1
        if (x16 == 1)
20002c32:	07e2      	lsls	r2, r4, #31
20002c34:	d501      	bpl.n	20002c3a <crcu32+0x1ca>
            crc |= 0x8000;
20002c36:	4a0f      	ldr	r2, [pc, #60]	; (20002c74 <crcu32+0x204>)
20002c38:	4050      	eors	r0, r2
}
20002c3a:	bd70      	pop	{r4, r5, r6, pc}
            crc |= 0x8000;
20002c3c:	4a0d      	ldr	r2, [pc, #52]	; (20002c74 <crcu32+0x204>)
20002c3e:	0873      	lsrs	r3, r6, #1
20002c40:	405a      	eors	r2, r3
20002c42:	e7bb      	b.n	20002bbc <crcu32+0x14c>
20002c44:	4b0b      	ldr	r3, [pc, #44]	; (20002c74 <crcu32+0x204>)
    crc = crc16((ee_s16)(newval >> 16), crc);
20002c46:	0c02      	lsrs	r2, r0, #16
            crc |= 0x8000;
20002c48:	405e      	eors	r6, r3
    crc = crcu8((ee_u8)(newval), crc);
20002c4a:	b2d4      	uxtb	r4, r2
    return crcu16((ee_u16)newval, crc);
20002c4c:	0010      	movs	r0, r2
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c4e:	4072      	eors	r2, r6
        data >>= 1;
20002c50:	0865      	lsrs	r5, r4, #1
        if (x16 == 1)
20002c52:	07d3      	lsls	r3, r2, #31
20002c54:	d400      	bmi.n	20002c58 <crcu32+0x1e8>
20002c56:	e788      	b.n	20002b6a <crcu32+0xfa>
            crc |= 0x8000;
20002c58:	4906      	ldr	r1, [pc, #24]	; (20002c74 <crcu32+0x204>)
20002c5a:	0876      	lsrs	r6, r6, #1
20002c5c:	404e      	eors	r6, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c5e:	4075      	eors	r5, r6
        data >>= 1;
20002c60:	08a2      	lsrs	r2, r4, #2
        if (x16 == 1)
20002c62:	0873      	lsrs	r3, r6, #1
20002c64:	07e9      	lsls	r1, r5, #31
20002c66:	d500      	bpl.n	20002c6a <crcu32+0x1fa>
20002c68:	e785      	b.n	20002b76 <crcu32+0x106>
20002c6a:	e786      	b.n	20002b7a <crcu32+0x10a>
            crc |= 0x8000;
20002c6c:	4b01      	ldr	r3, [pc, #4]	; (20002c74 <crcu32+0x204>)
20002c6e:	405d      	eors	r5, r3
20002c70:	e73b      	b.n	20002aea <crcu32+0x7a>
20002c72:	46c0      	nop			; (mov r8, r8)
20002c74:	0000a001 	.word	0x0000a001

20002c78 <crc16>:
{
20002c78:	b530      	push	{r4, r5, lr}
    crc = crcu8((ee_u8)(newval), crc);
20002c7a:	b2c2      	uxtb	r2, r0
    return crcu16((ee_u16)newval, crc);
20002c7c:	b284      	uxth	r4, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c7e:	4048      	eors	r0, r1
        data >>= 1;
20002c80:	0855      	lsrs	r5, r2, #1
        crc >>= 1;
20002c82:	084b      	lsrs	r3, r1, #1
        if (x16 == 1)
20002c84:	07c0      	lsls	r0, r0, #31
20002c86:	d501      	bpl.n	20002c8c <crc16+0x14>
            crc |= 0x8000;
20002c88:	4937      	ldr	r1, [pc, #220]	; (20002d68 <crc16+0xf0>)
20002c8a:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c8c:	405d      	eors	r5, r3
        data >>= 1;
20002c8e:	0890      	lsrs	r0, r2, #2
        crc >>= 1;
20002c90:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002c92:	07ed      	lsls	r5, r5, #31
20002c94:	d502      	bpl.n	20002c9c <crc16+0x24>
        crc >>= 1;
20002c96:	001d      	movs	r5, r3
            crc |= 0x8000;
20002c98:	4b33      	ldr	r3, [pc, #204]	; (20002d68 <crc16+0xf0>)
20002c9a:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002c9c:	4058      	eors	r0, r3
        data >>= 1;
20002c9e:	08d5      	lsrs	r5, r2, #3
        crc >>= 1;
20002ca0:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002ca2:	07c0      	lsls	r0, r0, #31
20002ca4:	d501      	bpl.n	20002caa <crc16+0x32>
            crc |= 0x8000;
20002ca6:	4930      	ldr	r1, [pc, #192]	; (20002d68 <crc16+0xf0>)
20002ca8:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002caa:	405d      	eors	r5, r3
        data >>= 1;
20002cac:	0910      	lsrs	r0, r2, #4
        crc >>= 1;
20002cae:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002cb0:	07ed      	lsls	r5, r5, #31
20002cb2:	d502      	bpl.n	20002cba <crc16+0x42>
        crc >>= 1;
20002cb4:	001d      	movs	r5, r3
            crc |= 0x8000;
20002cb6:	4b2c      	ldr	r3, [pc, #176]	; (20002d68 <crc16+0xf0>)
20002cb8:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002cba:	4058      	eors	r0, r3
        data >>= 1;
20002cbc:	0955      	lsrs	r5, r2, #5
        crc >>= 1;
20002cbe:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002cc0:	07c0      	lsls	r0, r0, #31
20002cc2:	d501      	bpl.n	20002cc8 <crc16+0x50>
            crc |= 0x8000;
20002cc4:	4928      	ldr	r1, [pc, #160]	; (20002d68 <crc16+0xf0>)
20002cc6:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002cc8:	405d      	eors	r5, r3
        data >>= 1;
20002cca:	0990      	lsrs	r0, r2, #6
        crc >>= 1;
20002ccc:	085b      	lsrs	r3, r3, #1
        if (x16 == 1)
20002cce:	07ed      	lsls	r5, r5, #31
20002cd0:	d502      	bpl.n	20002cd8 <crc16+0x60>
        crc >>= 1;
20002cd2:	001d      	movs	r5, r3
            crc |= 0x8000;
20002cd4:	4b24      	ldr	r3, [pc, #144]	; (20002d68 <crc16+0xf0>)
20002cd6:	406b      	eors	r3, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002cd8:	4058      	eors	r0, r3
        data >>= 1;
20002cda:	09d2      	lsrs	r2, r2, #7
        crc >>= 1;
20002cdc:	085d      	lsrs	r5, r3, #1
        if (x16 == 1)
20002cde:	07c0      	lsls	r0, r0, #31
20002ce0:	d501      	bpl.n	20002ce6 <crc16+0x6e>
            crc |= 0x8000;
20002ce2:	4921      	ldr	r1, [pc, #132]	; (20002d68 <crc16+0xf0>)
20002ce4:	404d      	eors	r5, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002ce6:	406a      	eors	r2, r5
20002ce8:	0868      	lsrs	r0, r5, #1
        if (x16 == 1)
20002cea:	07d2      	lsls	r2, r2, #31
20002cec:	d439      	bmi.n	20002d62 <crc16+0xea>
    crc = crcu8((ee_u8)((newval) >> 8), crc);
20002cee:	0a25      	lsrs	r5, r4, #8
20002cf0:	002a      	movs	r2, r5
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002cf2:	4045      	eors	r5, r0
        data >>= 1;
20002cf4:	0a64      	lsrs	r4, r4, #9
            crc |= 0x8000;
20002cf6:	0840      	lsrs	r0, r0, #1
        if (x16 == 1)
20002cf8:	07e9      	lsls	r1, r5, #31
20002cfa:	d501      	bpl.n	20002d00 <crc16+0x88>
            crc |= 0x8000;
20002cfc:	491a      	ldr	r1, [pc, #104]	; (20002d68 <crc16+0xf0>)
20002cfe:	4048      	eors	r0, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d00:	4044      	eors	r4, r0
        data >>= 1;
20002d02:	0895      	lsrs	r5, r2, #2
        if (x16 == 1)
20002d04:	0843      	lsrs	r3, r0, #1
20002d06:	07e0      	lsls	r0, r4, #31
20002d08:	d501      	bpl.n	20002d0e <crc16+0x96>
            crc |= 0x8000;
20002d0a:	4c17      	ldr	r4, [pc, #92]	; (20002d68 <crc16+0xf0>)
20002d0c:	4063      	eors	r3, r4
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d0e:	405d      	eors	r5, r3
        data >>= 1;
20002d10:	08d0      	lsrs	r0, r2, #3
        if (x16 == 1)
20002d12:	085b      	lsrs	r3, r3, #1
20002d14:	07e9      	lsls	r1, r5, #31
20002d16:	d501      	bpl.n	20002d1c <crc16+0xa4>
            crc |= 0x8000;
20002d18:	4913      	ldr	r1, [pc, #76]	; (20002d68 <crc16+0xf0>)
20002d1a:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d1c:	4058      	eors	r0, r3
        data >>= 1;
20002d1e:	0915      	lsrs	r5, r2, #4
        if (x16 == 1)
20002d20:	085c      	lsrs	r4, r3, #1
20002d22:	07c0      	lsls	r0, r0, #31
20002d24:	d501      	bpl.n	20002d2a <crc16+0xb2>
            crc |= 0x8000;
20002d26:	4810      	ldr	r0, [pc, #64]	; (20002d68 <crc16+0xf0>)
20002d28:	4044      	eors	r4, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d2a:	4065      	eors	r5, r4
        data >>= 1;
20002d2c:	0950      	lsrs	r0, r2, #5
        if (x16 == 1)
20002d2e:	0863      	lsrs	r3, r4, #1
20002d30:	07e9      	lsls	r1, r5, #31
20002d32:	d501      	bpl.n	20002d38 <crc16+0xc0>
            crc |= 0x8000;
20002d34:	490c      	ldr	r1, [pc, #48]	; (20002d68 <crc16+0xf0>)
20002d36:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d38:	4058      	eors	r0, r3
        data >>= 1;
20002d3a:	0995      	lsrs	r5, r2, #6
        if (x16 == 1)
20002d3c:	085c      	lsrs	r4, r3, #1
20002d3e:	07c0      	lsls	r0, r0, #31
20002d40:	d501      	bpl.n	20002d46 <crc16+0xce>
            crc |= 0x8000;
20002d42:	4809      	ldr	r0, [pc, #36]	; (20002d68 <crc16+0xf0>)
20002d44:	4044      	eors	r4, r0
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d46:	4065      	eors	r5, r4
        data >>= 1;
20002d48:	09d2      	lsrs	r2, r2, #7
        if (x16 == 1)
20002d4a:	0863      	lsrs	r3, r4, #1
20002d4c:	07e9      	lsls	r1, r5, #31
20002d4e:	d501      	bpl.n	20002d54 <crc16+0xdc>
            crc |= 0x8000;
20002d50:	4905      	ldr	r1, [pc, #20]	; (20002d68 <crc16+0xf0>)
20002d52:	404b      	eors	r3, r1
        x16 = (ee_u8)((data & 1) ^ ((ee_u8)crc & 1));
20002d54:	405a      	eors	r2, r3
        crc >>= 1;
20002d56:	0858      	lsrs	r0, r3, #1
        if (x16 == 1)
20002d58:	07d2      	lsls	r2, r2, #31
20002d5a:	d501      	bpl.n	20002d60 <crc16+0xe8>
            crc |= 0x8000;
20002d5c:	4d02      	ldr	r5, [pc, #8]	; (20002d68 <crc16+0xf0>)
20002d5e:	4068      	eors	r0, r5
}
20002d60:	bd30      	pop	{r4, r5, pc}
            crc |= 0x8000;
20002d62:	4b01      	ldr	r3, [pc, #4]	; (20002d68 <crc16+0xf0>)
20002d64:	4058      	eors	r0, r3
20002d66:	e7c2      	b.n	20002cee <crc16+0x76>
20002d68:	0000a001 	.word	0x0000a001

20002d6c <check_data_types>:
    if (retval > 0)
    {
        ee_printf("ERROR: Please modify the datatypes in core_portme.h!\n");
    }
    return retval;
}
20002d6c:	2000      	movs	r0, #0
20002d6e:	4770      	bx	lr

20002d70 <portable_malloc>:
volatile ee_s32 seed5_volatile = 0;

#include <rtthread.h>

void *portable_malloc(ee_size_t size)
{
20002d70:	b510      	push	{r4, lr}
    return rt_malloc(size);
20002d72:	f000 ff99 	bl	20003ca8 <__rt_malloc_veneer>
}
20002d76:	bd10      	pop	{r4, pc}

20002d78 <portable_free>:

void portable_free(void *p)
{
20002d78:	b510      	push	{r4, lr}
    return rt_free(p);
20002d7a:	f000 ff75 	bl	20003c68 <__rt_free_veneer>
}
20002d7e:	bd10      	pop	{r4, pc}

20002d80 <start_time>:

    Implementation may be capturing a system timer (as implemented in the example code)
    or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
*/
void start_time(void)
{
20002d80:	b510      	push	{r4, lr}
    return rt_tick_get();
20002d82:	f000 ff61 	bl	20003c48 <__rt_tick_get_veneer>
    GETMYTIME(&start_time_val);
20002d86:	4b01      	ldr	r3, [pc, #4]	; (20002d8c <start_time+0xc>)
20002d88:	6018      	str	r0, [r3, #0]
}
20002d8a:	bd10      	pop	{r4, pc}
20002d8c:	20003f0c 	.word	0x20003f0c

20002d90 <stop_time>:

    Implementation may be capturing a system timer (as implemented in the example code)
    or other system parameters - e.g. reading the current value of cpu cycles counter.
*/
void stop_time(void)
{
20002d90:	b510      	push	{r4, lr}
    return rt_tick_get();
20002d92:	f000 ff59 	bl	20003c48 <__rt_tick_get_veneer>
    GETMYTIME(&stop_time_val);
20002d96:	4b01      	ldr	r3, [pc, #4]	; (20002d9c <stop_time+0xc>)
20002d98:	6018      	str	r0, [r3, #0]
}
20002d9a:	bd10      	pop	{r4, pc}
20002d9c:	20003f10 	.word	0x20003f10

20002da0 <get_time>:
    The sample implementation returns millisecs by default,
    and the resolution is controlled by <TIMER_RES_DIVIDER>
*/
CORE_TICKS get_time(void)
{
    CORE_TICKS elapsed = (CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
20002da0:	4b02      	ldr	r3, [pc, #8]	; (20002dac <get_time+0xc>)
20002da2:	4903      	ldr	r1, [pc, #12]	; (20002db0 <get_time+0x10>)
20002da4:	6818      	ldr	r0, [r3, #0]
20002da6:	680a      	ldr	r2, [r1, #0]
20002da8:	1a80      	subs	r0, r0, r2
    return elapsed;
}
20002daa:	4770      	bx	lr
20002dac:	20003f10 	.word	0x20003f10
20002db0:	20003f0c 	.word	0x20003f0c

20002db4 <time_in_secs>:

    The <secs_ret> type is used to accomodate systems with no support for floating point.
    Default implementation implemented by the EE_TICKS_PER_SEC macro above.
*/
secs_ret time_in_secs(CORE_TICKS ticks)
{
20002db4:	b510      	push	{r4, lr}
    secs_ret retval = ((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
20002db6:	2164      	movs	r1, #100	; 0x64
20002db8:	f000 ff3e 	bl	20003c38 <____aeabi_uidiv_veneer>
    return retval;
}
20002dbc:	bd10      	pop	{r4, pc}
20002dbe:	46c0      	nop			; (mov r8, r8)

20002dc0 <portable_init>:
    }
    if (sizeof(ee_u32) != 4)
    {
        ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
    }
    p->portable_id = 1;
20002dc0:	2301      	movs	r3, #1
20002dc2:	7003      	strb	r3, [r0, #0]
}
20002dc4:	4770      	bx	lr
20002dc6:	46c0      	nop			; (mov r8, r8)

20002dc8 <portable_fini>:
/* Function : portable_fini
    Target specific final code
*/
void portable_fini(core_portable *p)
{
    p->portable_id = 0;
20002dc8:	2300      	movs	r3, #0
20002dca:	7003      	strb	r3, [r0, #0]
}
20002dcc:	4770      	bx	lr
20002dce:	46c0      	nop			; (mov r8, r8)

20002dd0 <default_num_contexts>:
20002dd0:	0001 0000                                   ....

20002dd4 <seed3_volatile>:
20002dd4:	0066 0000 3130 3332 3534 3736 3938 6261     f...0123456789ab
20002de4:	6463 6665 6867 6a69 6c6b 6e6d 706f 7271     cdefghijklmnopqr
20002df4:	7473 7675 7877 7a79 0000 0000 3130 3332     stuvwxyz....0123
20002e04:	3534 3736 3938 4241 4443 4645 4847 4a49     456789ABCDEFGHIJ
20002e14:	4c4b 4e4d 504f 5251 5453 5655 5857 5a59     KLMNOPQRSTUVWXYZ
20002e24:	0000 0000                                   ....

20002e28 <number>:
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
  return i;
}

static char *number(char *str, long num, int base, int size, int precision, int type)
{
20002e28:	b5f0      	push	{r4, r5, r6, r7, lr}
20002e2a:	464e      	mov	r6, r9
20002e2c:	4645      	mov	r5, r8
20002e2e:	46de      	mov	lr, fp
20002e30:	4657      	mov	r7, sl
20002e32:	b5e0      	push	{r5, r6, r7, lr}
20002e34:	b099      	sub	sp, #100	; 0x64
20002e36:	9300      	str	r3, [sp, #0]
20002e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
20002e3a:	4680      	mov	r8, r0
20002e3c:	4691      	mov	r9, r2
20002e3e:	0008      	movs	r0, r1
  char c, sign, tmp[66];
  char *dig = digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
20002e40:	065a      	lsls	r2, r3, #25
20002e42:	d400      	bmi.n	20002e46 <number+0x1e>
20002e44:	e0d9      	b.n	20002ffa <number+0x1d2>
20002e46:	4998      	ldr	r1, [pc, #608]	; (200030a8 <number+0x280>)
20002e48:	468b      	mov	fp, r1
  if (type & LEFT) type &= ~ZEROPAD;
20002e4a:	2410      	movs	r4, #16
20002e4c:	0025      	movs	r5, r4
20002e4e:	401d      	ands	r5, r3
20002e50:	9501      	str	r5, [sp, #4]
20002e52:	421c      	tst	r4, r3
20002e54:	d100      	bne.n	20002e58 <number+0x30>
20002e56:	e0c4      	b.n	20002fe2 <number+0x1ba>
20002e58:	3c0f      	subs	r4, #15
20002e5a:	43a3      	bics	r3, r4
20002e5c:	9502      	str	r5, [sp, #8]
  if (base < 2 || base > 36) return 0;
  
  c = (type & ZEROPAD) ? '0' : ' ';
20002e5e:	2220      	movs	r2, #32
20002e60:	9205      	str	r2, [sp, #20]
  sign = 0;
  if (type & SIGN)
20002e62:	079a      	lsls	r2, r3, #30
20002e64:	d500      	bpl.n	20002e68 <number+0x40>
20002e66:	e0cb      	b.n	20003000 <number+0x1d8>
  sign = 0;
20002e68:	2100      	movs	r1, #0
20002e6a:	9103      	str	r1, [sp, #12]
      sign = ' ';
      size--;
    }
  }

  if (type & HEX_PREP)
20002e6c:	2420      	movs	r4, #32
20002e6e:	0021      	movs	r1, r4
20002e70:	4019      	ands	r1, r3
20002e72:	9104      	str	r1, [sp, #16]
20002e74:	421c      	tst	r4, r3
20002e76:	d00a      	beq.n	20002e8e <number+0x66>
  {
    if (base == 16)
20002e78:	464c      	mov	r4, r9
20002e7a:	2c10      	cmp	r4, #16
20002e7c:	d100      	bne.n	20002e80 <number+0x58>
20002e7e:	e108      	b.n	20003092 <number+0x26a>
      size -= 2;
    else if (base == 8)
      size--;
20002e80:	4649      	mov	r1, r9
20002e82:	3908      	subs	r1, #8
20002e84:	424a      	negs	r2, r1
20002e86:	4151      	adcs	r1, r2
20002e88:	9d00      	ldr	r5, [sp, #0]
20002e8a:	1a6e      	subs	r6, r5, r1
20002e8c:	9600      	str	r6, [sp, #0]
  }

  i = 0;

  if (num == 0)
20002e8e:	2800      	cmp	r0, #0
20002e90:	d000      	beq.n	20002e94 <number+0x6c>
20002e92:	e0d0      	b.n	20003036 <number+0x20e>
    tmp[i++] = '0';
20002e94:	2430      	movs	r4, #48	; 0x30
20002e96:	a807      	add	r0, sp, #28
20002e98:	7004      	strb	r4, [r0, #0]
20002e9a:	2600      	movs	r6, #0
20002e9c:	2530      	movs	r5, #48	; 0x30
20002e9e:	2401      	movs	r4, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
20002ea0:	9f22      	ldr	r7, [sp, #136]	; 0x88
20002ea2:	46a2      	mov	sl, r4
20002ea4:	42bc      	cmp	r4, r7
20002ea6:	da00      	bge.n	20002eaa <number+0x82>
20002ea8:	46ba      	mov	sl, r7
  size -= precision;
20002eaa:	4652      	mov	r2, sl
20002eac:	9b00      	ldr	r3, [sp, #0]
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
20002eae:	9902      	ldr	r1, [sp, #8]
  size -= precision;
20002eb0:	1a9f      	subs	r7, r3, r2
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
20002eb2:	2900      	cmp	r1, #0
20002eb4:	d10b      	bne.n	20002ece <number+0xa6>
20002eb6:	1e78      	subs	r0, r7, #1
20002eb8:	2f00      	cmp	r7, #0
20002eba:	dc00      	bgt.n	20002ebe <number+0x96>
20002ebc:	e0f0      	b.n	200030a0 <number+0x278>
20002ebe:	003a      	movs	r2, r7
20002ec0:	4640      	mov	r0, r8
20002ec2:	2120      	movs	r1, #32
20002ec4:	44b8      	add	r8, r7
20002ec6:	2701      	movs	r7, #1
20002ec8:	f000 fede 	bl	20003c88 <__memset_veneer>
20002ecc:	427f      	negs	r7, r7
  if (sign) *str++ = sign;
20002ece:	9b03      	ldr	r3, [sp, #12]
20002ed0:	2b00      	cmp	r3, #0
20002ed2:	d004      	beq.n	20002ede <number+0xb6>
20002ed4:	2101      	movs	r1, #1
20002ed6:	4642      	mov	r2, r8
20002ed8:	468c      	mov	ip, r1
20002eda:	7013      	strb	r3, [r2, #0]
20002edc:	44e0      	add	r8, ip
  
  if (type & HEX_PREP)
20002ede:	9804      	ldr	r0, [sp, #16]
20002ee0:	2800      	cmp	r0, #0
20002ee2:	d007      	beq.n	20002ef4 <number+0xcc>
  {
    if (base == 8)
20002ee4:	464b      	mov	r3, r9
20002ee6:	2b08      	cmp	r3, #8
20002ee8:	d100      	bne.n	20002eec <number+0xc4>
20002eea:	e0cb      	b.n	20003084 <number+0x25c>
      *str++ = '0';
    else if (base == 16)
20002eec:	4649      	mov	r1, r9
20002eee:	2b10      	cmp	r3, #16
20002ef0:	d100      	bne.n	20002ef4 <number+0xcc>
20002ef2:	e0be      	b.n	20003072 <number+0x24a>
      *str++ = '0';
      *str++ = digits[33];
    }
  }

  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
20002ef4:	9b01      	ldr	r3, [sp, #4]
20002ef6:	2b00      	cmp	r3, #0
20002ef8:	d10b      	bne.n	20002f12 <number+0xea>
20002efa:	1e79      	subs	r1, r7, #1
20002efc:	2f00      	cmp	r7, #0
20002efe:	dc00      	bgt.n	20002f02 <number+0xda>
20002f00:	e0d0      	b.n	200030a4 <number+0x27c>
20002f02:	003a      	movs	r2, r7
20002f04:	4640      	mov	r0, r8
20002f06:	9905      	ldr	r1, [sp, #20]
20002f08:	f000 febe 	bl	20003c88 <__memset_veneer>
20002f0c:	2201      	movs	r2, #1
20002f0e:	44b8      	add	r8, r7
20002f10:	4257      	negs	r7, r2
  while (i < precision--) *str++ = '0';
20002f12:	4554      	cmp	r4, sl
20002f14:	da07      	bge.n	20002f26 <number+0xfe>
20002f16:	4650      	mov	r0, sl
20002f18:	1b04      	subs	r4, r0, r4
20002f1a:	0022      	movs	r2, r4
20002f1c:	4640      	mov	r0, r8
20002f1e:	2130      	movs	r1, #48	; 0x30
20002f20:	f000 feb2 	bl	20003c88 <__memset_veneer>
20002f24:	44a0      	add	r8, r4
  while (i-- > 0) *str++ = tmp[i];
20002f26:	2407      	movs	r4, #7
20002f28:	0020      	movs	r0, r4
20002f2a:	a906      	add	r1, sp, #24
20002f2c:	0033      	movs	r3, r6
20002f2e:	4642      	mov	r2, r8
20002f30:	3103      	adds	r1, #3
20002f32:	4030      	ands	r0, r6
20002f34:	4234      	tst	r4, r6
20002f36:	d03f      	beq.n	20002fb8 <number+0x190>
20002f38:	7015      	strb	r5, [r2, #0]
20002f3a:	1e73      	subs	r3, r6, #1
20002f3c:	5d8d      	ldrb	r5, [r1, r6]
20002f3e:	3201      	adds	r2, #1
20002f40:	2801      	cmp	r0, #1
20002f42:	d039      	beq.n	20002fb8 <number+0x190>
20002f44:	2802      	cmp	r0, #2
20002f46:	d018      	beq.n	20002f7a <number+0x152>
20002f48:	2803      	cmp	r0, #3
20002f4a:	d012      	beq.n	20002f72 <number+0x14a>
20002f4c:	2804      	cmp	r0, #4
20002f4e:	d00c      	beq.n	20002f6a <number+0x142>
20002f50:	2805      	cmp	r0, #5
20002f52:	d006      	beq.n	20002f62 <number+0x13a>
20002f54:	2806      	cmp	r0, #6
20002f56:	d000      	beq.n	20002f5a <number+0x132>
20002f58:	e086      	b.n	20003068 <number+0x240>
20002f5a:	7015      	strb	r5, [r2, #0]
20002f5c:	5ccd      	ldrb	r5, [r1, r3]
20002f5e:	3201      	adds	r2, #1
20002f60:	3b01      	subs	r3, #1
20002f62:	7015      	strb	r5, [r2, #0]
20002f64:	5ccd      	ldrb	r5, [r1, r3]
20002f66:	3201      	adds	r2, #1
20002f68:	3b01      	subs	r3, #1
20002f6a:	7015      	strb	r5, [r2, #0]
20002f6c:	5ccd      	ldrb	r5, [r1, r3]
20002f6e:	3201      	adds	r2, #1
20002f70:	3b01      	subs	r3, #1
20002f72:	7015      	strb	r5, [r2, #0]
20002f74:	5ccd      	ldrb	r5, [r1, r3]
20002f76:	3201      	adds	r2, #1
20002f78:	3b01      	subs	r3, #1
20002f7a:	7015      	strb	r5, [r2, #0]
20002f7c:	5ccd      	ldrb	r5, [r1, r3]
20002f7e:	3b01      	subs	r3, #1
20002f80:	3201      	adds	r2, #1
20002f82:	7015      	strb	r5, [r2, #0]
20002f84:	2b00      	cmp	r3, #0
20002f86:	d01a      	beq.n	20002fbe <number+0x196>
20002f88:	5cc8      	ldrb	r0, [r1, r3]
20002f8a:	1e5c      	subs	r4, r3, #1
20002f8c:	5d0d      	ldrb	r5, [r1, r4]
20002f8e:	7050      	strb	r0, [r2, #1]
20002f90:	1e98      	subs	r0, r3, #2
20002f92:	5c0c      	ldrb	r4, [r1, r0]
20002f94:	7095      	strb	r5, [r2, #2]
20002f96:	1edd      	subs	r5, r3, #3
20002f98:	1f18      	subs	r0, r3, #4
20002f9a:	70d4      	strb	r4, [r2, #3]
20002f9c:	5d4c      	ldrb	r4, [r1, r5]
20002f9e:	5c0d      	ldrb	r5, [r1, r0]
20002fa0:	7114      	strb	r4, [r2, #4]
20002fa2:	1f5c      	subs	r4, r3, #5
20002fa4:	7155      	strb	r5, [r2, #5]
20002fa6:	5d0d      	ldrb	r5, [r1, r4]
20002fa8:	1f98      	subs	r0, r3, #6
20002faa:	7195      	strb	r5, [r2, #6]
20002fac:	5c0c      	ldrb	r4, [r1, r0]
20002fae:	1fdd      	subs	r5, r3, #7
20002fb0:	5d4d      	ldrb	r5, [r1, r5]
20002fb2:	71d4      	strb	r4, [r2, #7]
20002fb4:	3b08      	subs	r3, #8
20002fb6:	3208      	adds	r2, #8
20002fb8:	7015      	strb	r5, [r2, #0]
20002fba:	2b00      	cmp	r3, #0
20002fbc:	d1e4      	bne.n	20002f88 <number+0x160>
20002fbe:	3601      	adds	r6, #1
20002fc0:	4446      	add	r6, r8
  while (size-- > 0) *str++ = ' ';
20002fc2:	2f00      	cmp	r7, #0
20002fc4:	dd05      	ble.n	20002fd2 <number+0x1aa>
20002fc6:	0030      	movs	r0, r6
20002fc8:	003a      	movs	r2, r7
20002fca:	2120      	movs	r1, #32
20002fcc:	f000 fe5c 	bl	20003c88 <__memset_veneer>
20002fd0:	19f6      	adds	r6, r6, r7

  return str;
}
20002fd2:	0030      	movs	r0, r6
20002fd4:	b019      	add	sp, #100	; 0x64
20002fd6:	bcf0      	pop	{r4, r5, r6, r7}
20002fd8:	46bb      	mov	fp, r7
20002fda:	46b2      	mov	sl, r6
20002fdc:	46a9      	mov	r9, r5
20002fde:	46a0      	mov	r8, r4
20002fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
20002fe2:	2611      	movs	r6, #17
  c = (type & ZEROPAD) ? '0' : ' ';
20002fe4:	2730      	movs	r7, #48	; 0x30
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
20002fe6:	401e      	ands	r6, r3
20002fe8:	9602      	str	r6, [sp, #8]
  c = (type & ZEROPAD) ? '0' : ' ';
20002fea:	9705      	str	r7, [sp, #20]
20002fec:	07da      	lsls	r2, r3, #31
20002fee:	d400      	bmi.n	20002ff2 <number+0x1ca>
20002ff0:	e735      	b.n	20002e5e <number+0x36>
  if (type & SIGN)
20002ff2:	079a      	lsls	r2, r3, #30
20002ff4:	d400      	bmi.n	20002ff8 <number+0x1d0>
20002ff6:	e737      	b.n	20002e68 <number+0x40>
20002ff8:	e002      	b.n	20003000 <number+0x1d8>
  char *dig = digits;
20002ffa:	4a2c      	ldr	r2, [pc, #176]	; (200030ac <number+0x284>)
20002ffc:	4693      	mov	fp, r2
20002ffe:	e724      	b.n	20002e4a <number+0x22>
    if (num < 0)
20003000:	2800      	cmp	r0, #0
20003002:	db0c      	blt.n	2000301e <number+0x1f6>
    else if (type & PLUS)
20003004:	075a      	lsls	r2, r3, #29
20003006:	d429      	bmi.n	2000305c <number+0x234>
  sign = 0;
20003008:	2400      	movs	r4, #0
2000300a:	9403      	str	r4, [sp, #12]
    else if (type & SPACE)
2000300c:	071a      	lsls	r2, r3, #28
2000300e:	d400      	bmi.n	20003012 <number+0x1ea>
20003010:	e72c      	b.n	20002e6c <number+0x44>
      sign = ' ';
20003012:	2620      	movs	r6, #32
      size--;
20003014:	9d00      	ldr	r5, [sp, #0]
      sign = ' ';
20003016:	9603      	str	r6, [sp, #12]
      size--;
20003018:	3d01      	subs	r5, #1
2000301a:	9500      	str	r5, [sp, #0]
2000301c:	e726      	b.n	20002e6c <number+0x44>
  if (type & HEX_PREP)
2000301e:	2620      	movs	r6, #32
20003020:	0037      	movs	r7, r6
      size--;
20003022:	9d00      	ldr	r5, [sp, #0]
  if (type & HEX_PREP)
20003024:	401f      	ands	r7, r3
      size--;
20003026:	3d01      	subs	r5, #1
      num = -num;
20003028:	4240      	negs	r0, r0
      size--;
2000302a:	9500      	str	r5, [sp, #0]
  if (type & HEX_PREP)
2000302c:	9704      	str	r7, [sp, #16]
2000302e:	421e      	tst	r6, r3
20003030:	d133      	bne.n	2000309a <number+0x272>
      sign = '-';
20003032:	232d      	movs	r3, #45	; 0x2d
20003034:	9303      	str	r3, [sp, #12]
  if (base < 2 || base > 36) return 0;
20003036:	2400      	movs	r4, #0
20003038:	465e      	mov	r6, fp
2000303a:	464d      	mov	r5, r9
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
2000303c:	0029      	movs	r1, r5
2000303e:	0007      	movs	r7, r0
20003040:	f000 fe2a 	bl	20003c98 <____aeabi_uidivmod_veneer>
20003044:	5c73      	ldrb	r3, [r6, r1]
20003046:	a906      	add	r1, sp, #24
20003048:	0022      	movs	r2, r4
2000304a:	3103      	adds	r1, #3
2000304c:	3401      	adds	r4, #1
2000304e:	550b      	strb	r3, [r1, r4]
    while (num != 0)
20003050:	42af      	cmp	r7, r5
20003052:	d2f3      	bcs.n	2000303c <number+0x214>
20003054:	46a9      	mov	r9, r5
20003056:	0016      	movs	r6, r2
20003058:	001d      	movs	r5, r3
2000305a:	e721      	b.n	20002ea0 <number+0x78>
      sign = '+';
2000305c:	222b      	movs	r2, #43	; 0x2b
      size--;
2000305e:	9f00      	ldr	r7, [sp, #0]
      sign = '+';
20003060:	9203      	str	r2, [sp, #12]
      size--;
20003062:	3f01      	subs	r7, #1
20003064:	9700      	str	r7, [sp, #0]
20003066:	e701      	b.n	20002e6c <number+0x44>
  while (i-- > 0) *str++ = tmp[i];
20003068:	7015      	strb	r5, [r2, #0]
2000306a:	5ccd      	ldrb	r5, [r1, r3]
2000306c:	3201      	adds	r2, #1
2000306e:	1eb3      	subs	r3, r6, #2
20003070:	e773      	b.n	20002f5a <number+0x132>
      *str++ = '0';
20003072:	4642      	mov	r2, r8
20003074:	3120      	adds	r1, #32
20003076:	7011      	strb	r1, [r2, #0]
      *str++ = digits[33];
20003078:	3148      	adds	r1, #72	; 0x48
2000307a:	7051      	strb	r1, [r2, #1]
2000307c:	3976      	subs	r1, #118	; 0x76
2000307e:	4689      	mov	r9, r1
20003080:	44c8      	add	r8, r9
20003082:	e737      	b.n	20002ef4 <number+0xcc>
      *str++ = '0';
20003084:	4640      	mov	r0, r8
20003086:	3328      	adds	r3, #40	; 0x28
20003088:	7003      	strb	r3, [r0, #0]
2000308a:	3b2f      	subs	r3, #47	; 0x2f
2000308c:	469b      	mov	fp, r3
2000308e:	44d8      	add	r8, fp
20003090:	e730      	b.n	20002ef4 <number+0xcc>
      size -= 2;
20003092:	9f00      	ldr	r7, [sp, #0]
20003094:	3f02      	subs	r7, #2
20003096:	9700      	str	r7, [sp, #0]
20003098:	e6f9      	b.n	20002e8e <number+0x66>
      sign = '-';
2000309a:	222d      	movs	r2, #45	; 0x2d
2000309c:	9203      	str	r2, [sp, #12]
2000309e:	e6eb      	b.n	20002e78 <number+0x50>
  if (!(type & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
200030a0:	0007      	movs	r7, r0
200030a2:	e714      	b.n	20002ece <number+0xa6>
  if (!(type & LEFT)) while (size-- > 0) *str++ = c;
200030a4:	000f      	movs	r7, r1
200030a6:	e734      	b.n	20002f12 <number+0xea>
200030a8:	20002e00 	.word	0x20002e00
200030ac:	20002dd8 	.word	0x20002dd8
200030b0:	4c554e3c 	.word	0x4c554e3c
200030b4:	00003e4c 	.word	0x00003e4c

200030b8 <ee_printf>:
  str[1] = 0;
  rt_kputs(str);
}

int ee_printf(const char *fmt, ...)
{
200030b8:	b40f      	push	{r0, r1, r2, r3}
200030ba:	b5f0      	push	{r4, r5, r6, r7, lr}
200030bc:	46de      	mov	lr, fp
200030be:	4657      	mov	r7, sl
200030c0:	464e      	mov	r6, r9
200030c2:	4645      	mov	r5, r8
200030c4:	b5e0      	push	{r5, r6, r7, lr}
200030c6:	b0f9      	sub	sp, #484	; 0x1e4
200030c8:	ab82      	add	r3, sp, #520	; 0x208
200030ca:	cb10      	ldmia	r3!, {r4}
200030cc:	469b      	mov	fp, r3
  char buf[256],*p;
  va_list args;
  int n=0;

  va_start(args, fmt);
200030ce:	930d      	str	r3, [sp, #52]	; 0x34
  for (str = buf; *fmt; fmt++)
200030d0:	7823      	ldrb	r3, [r4, #0]
200030d2:	2b00      	cmp	r3, #0
200030d4:	d101      	bne.n	200030da <ee_printf+0x22>
200030d6:	f000 fc46 	bl	20003966 <ee_printf+0x8ae>
200030da:	49c4      	ldr	r1, [pc, #784]	; (200033ec <ee_printf+0x334>)
200030dc:	aa38      	add	r2, sp, #224	; 0xe0
200030de:	0016      	movs	r6, r2
200030e0:	468a      	mov	sl, r1
200030e2:	9203      	str	r2, [sp, #12]
200030e4:	e005      	b.n	200030f2 <ee_printf+0x3a>
      *str++ = *fmt;
200030e6:	7033      	strb	r3, [r6, #0]
  for (str = buf; *fmt; fmt++)
200030e8:	7863      	ldrb	r3, [r4, #1]
      *str++ = *fmt;
200030ea:	3601      	adds	r6, #1
  for (str = buf; *fmt; fmt++)
200030ec:	3401      	adds	r4, #1
200030ee:	2b00      	cmp	r3, #0
200030f0:	d065      	beq.n	200031be <ee_printf+0x106>
    if (*fmt != '%')
200030f2:	2b25      	cmp	r3, #37	; 0x25
200030f4:	d1f7      	bne.n	200030e6 <ee_printf+0x2e>
      case '0': flags |= ZEROPAD; goto repeat;
200030f6:	2701      	movs	r7, #1
    flags = 0;
200030f8:	2500      	movs	r5, #0
      case '0': flags |= ZEROPAD; goto repeat;
200030fa:	46b9      	mov	r9, r7
      case '#': flags |= HEX_PREP; goto repeat;
200030fc:	371f      	adds	r7, #31
200030fe:	46bc      	mov	ip, r7
      case '-': flags |= LEFT; goto repeat;
20003100:	46b0      	mov	r8, r6
      case ' ': flags |= SPACE; goto repeat;
20003102:	2708      	movs	r7, #8
      case '+': flags |= PLUS; goto repeat;
20003104:	2004      	movs	r0, #4
      case '-': flags |= LEFT; goto repeat;
20003106:	002e      	movs	r6, r5
    switch (*fmt)
20003108:	7863      	ldrb	r3, [r4, #1]
    fmt++; // This also skips first '%'
2000310a:	1c65      	adds	r5, r4, #1
    switch (*fmt)
2000310c:	001a      	movs	r2, r3
2000310e:	3a20      	subs	r2, #32
20003110:	b2d1      	uxtb	r1, r2
20003112:	2910      	cmp	r1, #16
20003114:	d803      	bhi.n	2000311e <ee_printf+0x66>
20003116:	008a      	lsls	r2, r1, #2
20003118:	4651      	mov	r1, sl
2000311a:	588a      	ldr	r2, [r1, r2]
2000311c:	4697      	mov	pc, r2
    if (is_digit(*fmt))
2000311e:	0018      	movs	r0, r3
20003120:	002f      	movs	r7, r5
20003122:	3830      	subs	r0, #48	; 0x30
20003124:	0035      	movs	r5, r6
20003126:	4646      	mov	r6, r8
20003128:	46b8      	mov	r8, r7
2000312a:	2809      	cmp	r0, #9
2000312c:	d800      	bhi.n	20003130 <ee_printf+0x78>
2000312e:	e075      	b.n	2000321c <ee_printf+0x164>
    else if (*fmt == '*')
20003130:	2b2a      	cmp	r3, #42	; 0x2a
20003132:	d100      	bne.n	20003136 <ee_printf+0x7e>
20003134:	e083      	b.n	2000323e <ee_printf+0x186>
    field_width = -1;
20003136:	2201      	movs	r2, #1
20003138:	4257      	negs	r7, r2
    if (*fmt == '.')
2000313a:	2b2e      	cmp	r3, #46	; 0x2e
2000313c:	d060      	beq.n	20003200 <ee_printf+0x148>
    precision = -1;
2000313e:	2401      	movs	r4, #1
20003140:	4264      	negs	r4, r4
    if (*fmt == 'l' || *fmt == 'L')
20003142:	2020      	movs	r0, #32
20003144:	001a      	movs	r2, r3
20003146:	4382      	bics	r2, r0
20003148:	0011      	movs	r1, r2
2000314a:	2a4c      	cmp	r2, #76	; 0x4c
2000314c:	d029      	beq.n	200031a2 <ee_printf+0xea>
    switch (*fmt)
2000314e:	0018      	movs	r0, r3
20003150:	3841      	subs	r0, #65	; 0x41
20003152:	b2c2      	uxtb	r2, r0
20003154:	2a37      	cmp	r2, #55	; 0x37
20003156:	d815      	bhi.n	20003184 <ee_printf+0xcc>
20003158:	49a5      	ldr	r1, [pc, #660]	; (200033f0 <ee_printf+0x338>)
2000315a:	0090      	lsls	r0, r2, #2
2000315c:	580a      	ldr	r2, [r1, r0]
2000315e:	4697      	mov	pc, r2
      case '0': flags |= ZEROPAD; goto repeat;
20003160:	464c      	mov	r4, r9
20003162:	4326      	orrs	r6, r4
  for (str = buf; *fmt; fmt++)
20003164:	002c      	movs	r4, r5
20003166:	e7cf      	b.n	20003108 <ee_printf+0x50>
      case '-': flags |= LEFT; goto repeat;
20003168:	2310      	movs	r3, #16
  for (str = buf; *fmt; fmt++)
2000316a:	002c      	movs	r4, r5
      case '-': flags |= LEFT; goto repeat;
2000316c:	431e      	orrs	r6, r3
2000316e:	e7cb      	b.n	20003108 <ee_printf+0x50>
  for (str = buf; *fmt; fmt++)
20003170:	002c      	movs	r4, r5
      case '+': flags |= PLUS; goto repeat;
20003172:	4306      	orrs	r6, r0
20003174:	e7c8      	b.n	20003108 <ee_printf+0x50>
      case '#': flags |= HEX_PREP; goto repeat;
20003176:	4661      	mov	r1, ip
  for (str = buf; *fmt; fmt++)
20003178:	002c      	movs	r4, r5
      case '#': flags |= HEX_PREP; goto repeat;
2000317a:	430e      	orrs	r6, r1
2000317c:	e7c4      	b.n	20003108 <ee_printf+0x50>
  for (str = buf; *fmt; fmt++)
2000317e:	002c      	movs	r4, r5
      case ' ': flags |= SPACE; goto repeat;
20003180:	433e      	orrs	r6, r7
20003182:	e7c1      	b.n	20003108 <ee_printf+0x50>
    if (*fmt == 'l' || *fmt == 'L')
20003184:	46c1      	mov	r9, r8
20003186:	0019      	movs	r1, r3
        if (*fmt != '%') *str++ = '%';
20003188:	2925      	cmp	r1, #37	; 0x25
2000318a:	d100      	bne.n	2000318e <ee_printf+0xd6>
2000318c:	e1c6      	b.n	2000351c <ee_printf+0x464>
2000318e:	2325      	movs	r3, #37	; 0x25
20003190:	1c70      	adds	r0, r6, #1
20003192:	7033      	strb	r3, [r6, #0]
        if (*fmt)
20003194:	464e      	mov	r6, r9
20003196:	7831      	ldrb	r1, [r6, #0]
20003198:	2900      	cmp	r1, #0
2000319a:	d000      	beq.n	2000319e <ee_printf+0xe6>
2000319c:	e1c1      	b.n	20003522 <ee_printf+0x46a>
        if (*fmt != '%') *str++ = '%';
2000319e:	4682      	mov	sl, r0
200031a0:	e00e      	b.n	200031c0 <ee_printf+0x108>
    switch (*fmt)
200031a2:	4642      	mov	r2, r8
      fmt++;
200031a4:	394b      	subs	r1, #75	; 0x4b
200031a6:	4441      	add	r1, r8
200031a8:	4689      	mov	r9, r1
    switch (*fmt)
200031aa:	7851      	ldrb	r1, [r2, #1]
200031ac:	0008      	movs	r0, r1
200031ae:	3841      	subs	r0, #65	; 0x41
200031b0:	b2c2      	uxtb	r2, r0
200031b2:	2a37      	cmp	r2, #55	; 0x37
200031b4:	d8e8      	bhi.n	20003188 <ee_printf+0xd0>
200031b6:	488f      	ldr	r0, [pc, #572]	; (200033f4 <ee_printf+0x33c>)
200031b8:	0092      	lsls	r2, r2, #2
200031ba:	5882      	ldr	r2, [r0, r2]
200031bc:	4697      	mov	pc, r2
200031be:	46b2      	mov	sl, r6
  *str = '\0';
200031c0:	2400      	movs	r4, #0
200031c2:	4652      	mov	r2, sl
200031c4:	7014      	strb	r4, [r2, #0]
  ee_vsprintf(buf, fmt, args);
  va_end(args);
  p=buf;
  while (*p) {
200031c6:	9c03      	ldr	r4, [sp, #12]
200031c8:	7823      	ldrb	r3, [r4, #0]
200031ca:	2b00      	cmp	r3, #0
200031cc:	d100      	bne.n	200031d0 <ee_printf+0x118>
200031ce:	e3c8      	b.n	20003962 <ee_printf+0x8aa>
200031d0:	2101      	movs	r1, #1
  str[1] = 0;
200031d2:	2700      	movs	r7, #0
200031d4:	ad24      	add	r5, sp, #144	; 0x90
200031d6:	1b0e      	subs	r6, r1, r4
  rt_kputs(str);
200031d8:	0028      	movs	r0, r5
  str[0] = c;
200031da:	702b      	strb	r3, [r5, #0]
  str[1] = 0;
200031dc:	706f      	strb	r7, [r5, #1]
  rt_kputs(str);
200031de:	f000 fd4b 	bl	20003c78 <__rt_kputs_veneer>
	uart_send_char(*p);
	n++;
200031e2:	19a0      	adds	r0, r4, r6
  while (*p) {
200031e4:	7863      	ldrb	r3, [r4, #1]
	p++;
200031e6:	3401      	adds	r4, #1
  while (*p) {
200031e8:	2b00      	cmp	r3, #0
200031ea:	d1f5      	bne.n	200031d8 <ee_printf+0x120>
  }

  return n;
}
200031ec:	b079      	add	sp, #484	; 0x1e4
200031ee:	bcf0      	pop	{r4, r5, r6, r7}
200031f0:	46bb      	mov	fp, r7
200031f2:	46b2      	mov	sl, r6
200031f4:	46a9      	mov	r9, r5
200031f6:	46a0      	mov	r8, r4
200031f8:	bcf0      	pop	{r4, r5, r6, r7}
200031fa:	bc08      	pop	{r3}
200031fc:	b004      	add	sp, #16
200031fe:	4718      	bx	r3
      ++fmt;    
20003200:	4643      	mov	r3, r8
20003202:	1c58      	adds	r0, r3, #1
      if (is_digit(*fmt))
20003204:	785b      	ldrb	r3, [r3, #1]
20003206:	001a      	movs	r2, r3
20003208:	3a30      	subs	r2, #48	; 0x30
2000320a:	2a09      	cmp	r2, #9
2000320c:	d800      	bhi.n	20003210 <ee_printf+0x158>
2000320e:	e0d1      	b.n	200033b4 <ee_printf+0x2fc>
      else if (*fmt == '*')
20003210:	2b2a      	cmp	r3, #42	; 0x2a
20003212:	d100      	bne.n	20003216 <ee_printf+0x15e>
20003214:	e0de      	b.n	200033d4 <ee_printf+0x31c>
      ++fmt;    
20003216:	4680      	mov	r8, r0
      if (precision < 0) precision = 0;
20003218:	2400      	movs	r4, #0
2000321a:	e792      	b.n	20003142 <ee_printf+0x8a>
  int i = 0;
2000321c:	2700      	movs	r7, #0
2000321e:	001a      	movs	r2, r3
20003220:	4644      	mov	r4, r8
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
20003222:	00bb      	lsls	r3, r7, #2
20003224:	19df      	adds	r7, r3, r7
20003226:	3401      	adds	r4, #1
20003228:	0079      	lsls	r1, r7, #1
2000322a:	188f      	adds	r7, r1, r2
2000322c:	7822      	ldrb	r2, [r4, #0]
2000322e:	3f30      	subs	r7, #48	; 0x30
20003230:	0010      	movs	r0, r2
20003232:	3830      	subs	r0, #48	; 0x30
20003234:	2809      	cmp	r0, #9
20003236:	d9f4      	bls.n	20003222 <ee_printf+0x16a>
20003238:	0013      	movs	r3, r2
2000323a:	46a0      	mov	r8, r4
2000323c:	e77d      	b.n	2000313a <ee_printf+0x82>
      field_width = va_arg(args, int);
2000323e:	4659      	mov	r1, fp
20003240:	c980      	ldmia	r1!, {r7}
      fmt++;
20003242:	1ca3      	adds	r3, r4, #2
20003244:	4698      	mov	r8, r3
      if (field_width < 0)
20003246:	2f00      	cmp	r7, #0
20003248:	db02      	blt.n	20003250 <ee_printf+0x198>
      field_width = va_arg(args, int);
2000324a:	468b      	mov	fp, r1
    if (*fmt == '.')
2000324c:	78a3      	ldrb	r3, [r4, #2]
2000324e:	e774      	b.n	2000313a <ee_printf+0x82>
        flags |= LEFT;
20003250:	2010      	movs	r0, #16
      field_width = va_arg(args, int);
20003252:	468b      	mov	fp, r1
    if (*fmt == '.')
20003254:	78a3      	ldrb	r3, [r4, #2]
        field_width = -field_width;
20003256:	427f      	negs	r7, r7
        flags |= LEFT;
20003258:	4305      	orrs	r5, r0
2000325a:	e76e      	b.n	2000313a <ee_printf+0x82>
        flags |= UPPERCASE;
2000325c:	2140      	movs	r1, #64	; 0x40
2000325e:	430d      	orrs	r5, r1
        if (qualifier == 'l')
20003260:	2b6c      	cmp	r3, #108	; 0x6c
20003262:	d100      	bne.n	20003266 <ee_printf+0x1ae>
20003264:	e0ca      	b.n	200033fc <ee_printf+0x344>
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
20003266:	4658      	mov	r0, fp
20003268:	c804      	ldmia	r0!, {r2}
    n = addr[i];
2000326a:	7813      	ldrb	r3, [r2, #0]
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
2000326c:	9204      	str	r2, [sp, #16]
    n = addr[i];
2000326e:	4698      	mov	r8, r3
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
20003270:	9006      	str	r0, [sp, #24]
    if (n == 0)
20003272:	2b00      	cmp	r3, #0
20003274:	d000      	beq.n	20003278 <ee_printf+0x1c0>
20003276:	e129      	b.n	200034cc <ee_printf+0x414>
      tmp[len++] = digits[0];
20003278:	2330      	movs	r3, #48	; 0x30
2000327a:	ac24      	add	r4, sp, #144	; 0x90
2000327c:	46a3      	mov	fp, r4
2000327e:	7023      	strb	r3, [r4, #0]
20003280:	2401      	movs	r4, #1
    if (i != 0) tmp[len++] = '.';
20003282:	202e      	movs	r0, #46	; 0x2e
20003284:	465b      	mov	r3, fp
    n = addr[i];
20003286:	9904      	ldr	r1, [sp, #16]
    if (i != 0) tmp[len++] = '.';
20003288:	1c62      	adds	r2, r4, #1
2000328a:	5518      	strb	r0, [r3, r4]
2000328c:	9205      	str	r2, [sp, #20]
    n = addr[i];
2000328e:	784a      	ldrb	r2, [r1, #1]
20003290:	4690      	mov	r8, r2
    if (n == 0)
20003292:	2a00      	cmp	r2, #0
20003294:	d100      	bne.n	20003298 <ee_printf+0x1e0>
20003296:	e332      	b.n	200038fe <ee_printf+0x846>
      if (n >= 100) 
20003298:	2a63      	cmp	r2, #99	; 0x63
2000329a:	dc00      	bgt.n	2000329e <ee_printf+0x1e6>
2000329c:	e387      	b.n	200039ae <ee_printf+0x8f6>
        tmp[len++] = digits[n / 100];
2000329e:	2164      	movs	r1, #100	; 0x64
200032a0:	0010      	movs	r0, r2
200032a2:	f000 fcc1 	bl	20003c28 <____aeabi_idiv_veneer>
200032a6:	465a      	mov	r2, fp
200032a8:	4b53      	ldr	r3, [pc, #332]	; (200033f8 <ee_printf+0x340>)
200032aa:	1c61      	adds	r1, r4, #1
200032ac:	5c18      	ldrb	r0, [r3, r0]
200032ae:	9307      	str	r3, [sp, #28]
200032b0:	5450      	strb	r0, [r2, r1]
        n = n % 100;
200032b2:	4640      	mov	r0, r8
200032b4:	2164      	movs	r1, #100	; 0x64
200032b6:	f000 fd0f 	bl	20003cd8 <____aeabi_idivmod_veneer>
200032ba:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
200032bc:	1ce3      	adds	r3, r4, #3
200032be:	210a      	movs	r1, #10
200032c0:	4640      	mov	r0, r8
200032c2:	9305      	str	r3, [sp, #20]
200032c4:	f000 fcb0 	bl	20003c28 <____aeabi_idiv_veneer>
200032c8:	9a07      	ldr	r2, [sp, #28]
200032ca:	445c      	add	r4, fp
200032cc:	5c10      	ldrb	r0, [r2, r0]
        n = n % 10;
200032ce:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
200032d0:	70a0      	strb	r0, [r4, #2]
        n = n % 10;
200032d2:	4640      	mov	r0, r8
200032d4:	f000 fd00 	bl	20003cd8 <____aeabi_idivmod_veneer>
200032d8:	4688      	mov	r8, r1
      tmp[len++] = digits[n];
200032da:	4641      	mov	r1, r8
200032dc:	9b07      	ldr	r3, [sp, #28]
200032de:	9a05      	ldr	r2, [sp, #20]
200032e0:	5c58      	ldrb	r0, [r3, r1]
200032e2:	465b      	mov	r3, fp
200032e4:	1c54      	adds	r4, r2, #1
200032e6:	5498      	strb	r0, [r3, r2]
    if (i != 0) tmp[len++] = '.';
200032e8:	202e      	movs	r0, #46	; 0x2e
200032ea:	465a      	mov	r2, fp
    n = addr[i];
200032ec:	9904      	ldr	r1, [sp, #16]
    if (i != 0) tmp[len++] = '.';
200032ee:	1c63      	adds	r3, r4, #1
200032f0:	5510      	strb	r0, [r2, r4]
200032f2:	9305      	str	r3, [sp, #20]
    n = addr[i];
200032f4:	788b      	ldrb	r3, [r1, #2]
200032f6:	4698      	mov	r8, r3
    if (n == 0)
200032f8:	2b00      	cmp	r3, #0
200032fa:	d100      	bne.n	200032fe <ee_printf+0x246>
200032fc:	e32c      	b.n	20003958 <ee_printf+0x8a0>
      if (n >= 100) 
200032fe:	2b63      	cmp	r3, #99	; 0x63
20003300:	dc00      	bgt.n	20003304 <ee_printf+0x24c>
20003302:	e340      	b.n	20003986 <ee_printf+0x8ce>
        tmp[len++] = digits[n / 100];
20003304:	2164      	movs	r1, #100	; 0x64
20003306:	0018      	movs	r0, r3
20003308:	f000 fc8e 	bl	20003c28 <____aeabi_idiv_veneer>
2000330c:	4a3a      	ldr	r2, [pc, #232]	; (200033f8 <ee_printf+0x340>)
2000330e:	1c61      	adds	r1, r4, #1
20003310:	5c13      	ldrb	r3, [r2, r0]
20003312:	4658      	mov	r0, fp
20003314:	5443      	strb	r3, [r0, r1]
        n = n % 100;
20003316:	4640      	mov	r0, r8
20003318:	2164      	movs	r1, #100	; 0x64
        tmp[len++] = digits[n / 100];
2000331a:	9207      	str	r2, [sp, #28]
        n = n % 100;
2000331c:	f000 fcdc 	bl	20003cd8 <____aeabi_idivmod_veneer>
20003320:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
20003322:	1ce2      	adds	r2, r4, #3
20003324:	210a      	movs	r1, #10
20003326:	4640      	mov	r0, r8
20003328:	9205      	str	r2, [sp, #20]
2000332a:	f000 fc7d 	bl	20003c28 <____aeabi_idiv_veneer>
2000332e:	9b07      	ldr	r3, [sp, #28]
20003330:	445c      	add	r4, fp
20003332:	5c18      	ldrb	r0, [r3, r0]
        n = n % 10;
20003334:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
20003336:	70a0      	strb	r0, [r4, #2]
        n = n % 10;
20003338:	4640      	mov	r0, r8
2000333a:	f000 fccd 	bl	20003cd8 <____aeabi_idivmod_veneer>
2000333e:	4688      	mov	r8, r1
      tmp[len++] = digits[n];
20003340:	4641      	mov	r1, r8
20003342:	9b07      	ldr	r3, [sp, #28]
20003344:	9a05      	ldr	r2, [sp, #20]
20003346:	5c58      	ldrb	r0, [r3, r1]
20003348:	465b      	mov	r3, fp
2000334a:	1c54      	adds	r4, r2, #1
2000334c:	5498      	strb	r0, [r3, r2]
    if (i != 0) tmp[len++] = '.';
2000334e:	232e      	movs	r3, #46	; 0x2e
20003350:	465a      	mov	r2, fp
    n = addr[i];
20003352:	9904      	ldr	r1, [sp, #16]
    if (i != 0) tmp[len++] = '.';
20003354:	5513      	strb	r3, [r2, r4]
    n = addr[i];
20003356:	78cb      	ldrb	r3, [r1, #3]
    if (i != 0) tmp[len++] = '.';
20003358:	1c60      	adds	r0, r4, #1
    n = addr[i];
2000335a:	4698      	mov	r8, r3
    if (i != 0) tmp[len++] = '.';
2000335c:	9005      	str	r0, [sp, #20]
    if (n == 0)
2000335e:	2b00      	cmp	r3, #0
20003360:	d000      	beq.n	20003364 <ee_printf+0x2ac>
20003362:	e2d1      	b.n	20003908 <ee_printf+0x850>
      tmp[len++] = digits[0];
20003364:	3330      	adds	r3, #48	; 0x30
20003366:	3402      	adds	r4, #2
20003368:	5413      	strb	r3, [r2, r0]
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
2000336a:	06eb      	lsls	r3, r5, #27
2000336c:	d40e      	bmi.n	2000338c <ee_printf+0x2d4>
2000336e:	1e7d      	subs	r5, r7, #1
20003370:	46a8      	mov	r8, r5
20003372:	42a7      	cmp	r7, r4
20003374:	dc01      	bgt.n	2000337a <ee_printf+0x2c2>
20003376:	f000 fc0a 	bl	20003b8e <ee_printf+0xad6>
2000337a:	1b3d      	subs	r5, r7, r4
2000337c:	0030      	movs	r0, r6
2000337e:	002a      	movs	r2, r5
20003380:	2120      	movs	r1, #32
20003382:	f000 fc81 	bl	20003c88 <__memset_veneer>
20003386:	1be7      	subs	r7, r4, r7
20003388:	1976      	adds	r6, r6, r5
2000338a:	4447      	add	r7, r8
  for (i = 0; i < len; ++i) *str++ = tmp[i];
2000338c:	0022      	movs	r2, r4
2000338e:	4659      	mov	r1, fp
20003390:	0030      	movs	r0, r6
20003392:	f000 fc99 	bl	20003cc8 <__memcpy_veneer>
20003396:	1930      	adds	r0, r6, r4
  while (len < size--) *str++ = ' ';
20003398:	42bc      	cmp	r4, r7
2000339a:	db00      	blt.n	2000339e <ee_printf+0x2e6>
2000339c:	e3ed      	b.n	20003b7a <ee_printf+0xac2>
2000339e:	2120      	movs	r1, #32
200033a0:	1b3a      	subs	r2, r7, r4
200033a2:	f000 fc71 	bl	20003c88 <__memset_veneer>
200033a6:	19f6      	adds	r6, r6, r7
  for (str = buf; *fmt; fmt++)
200033a8:	464f      	mov	r7, r9
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
200033aa:	9906      	ldr	r1, [sp, #24]
  for (str = buf; *fmt; fmt++)
200033ac:	787b      	ldrb	r3, [r7, #1]
          str = iaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
200033ae:	468b      	mov	fp, r1
  for (str = buf; *fmt; fmt++)
200033b0:	1c7c      	adds	r4, r7, #1
200033b2:	e69c      	b.n	200030ee <ee_printf+0x36>
  int i = 0;
200033b4:	2400      	movs	r4, #0
200033b6:	001a      	movs	r2, r3
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
200033b8:	00a1      	lsls	r1, r4, #2
200033ba:	190c      	adds	r4, r1, r4
200033bc:	3001      	adds	r0, #1
200033be:	0063      	lsls	r3, r4, #1
200033c0:	189c      	adds	r4, r3, r2
200033c2:	7802      	ldrb	r2, [r0, #0]
200033c4:	3c30      	subs	r4, #48	; 0x30
200033c6:	0011      	movs	r1, r2
200033c8:	3930      	subs	r1, #48	; 0x30
200033ca:	2909      	cmp	r1, #9
200033cc:	d9f4      	bls.n	200033b8 <ee_printf+0x300>
200033ce:	0013      	movs	r3, r2
      if (precision < 0) precision = 0;
200033d0:	4680      	mov	r8, r0
200033d2:	e6b6      	b.n	20003142 <ee_printf+0x8a>
        precision = va_arg(args, int);
200033d4:	465a      	mov	r2, fp
200033d6:	ca10      	ldmia	r2!, {r4}
        ++fmt;
200033d8:	4641      	mov	r1, r8
200033da:	43e3      	mvns	r3, r4
200033dc:	1c88      	adds	r0, r1, #2
        precision = va_arg(args, int);
200033de:	17d9      	asrs	r1, r3, #31
    if (*fmt == 'l' || *fmt == 'L')
200033e0:	4643      	mov	r3, r8
        precision = va_arg(args, int);
200033e2:	4693      	mov	fp, r2
      if (precision < 0) precision = 0;
200033e4:	4680      	mov	r8, r0
    if (*fmt == 'l' || *fmt == 'L')
200033e6:	789b      	ldrb	r3, [r3, #2]
200033e8:	400c      	ands	r4, r1
200033ea:	e6aa      	b.n	20003142 <ee_printf+0x8a>
200033ec:	20003cf8 	.word	0x20003cf8
200033f0:	20003d3c 	.word	0x20003d3c
200033f4:	20003e1c 	.word	0x20003e1c
200033f8:	20002dd8 	.word	0x20002dd8
          str = eaddr(str, va_arg(args, unsigned char *), field_width, precision, flags);
200033fc:	465c      	mov	r4, fp
200033fe:	cc02      	ldmia	r4!, {r1}
20003400:	46a3      	mov	fp, r4
  if (type & UPPERCASE)  dig = upper_digits;
20003402:	066b      	lsls	r3, r5, #25
20003404:	d400      	bmi.n	20003408 <ee_printf+0x350>
20003406:	e2bc      	b.n	20003982 <ee_printf+0x8ca>
20003408:	4bc9      	ldr	r3, [pc, #804]	; (20003730 <ee_printf+0x678>)
    tmp[len++] = dig[addr[i] >> 4];
2000340a:	7808      	ldrb	r0, [r1, #0]
2000340c:	ac24      	add	r4, sp, #144	; 0x90
2000340e:	0902      	lsrs	r2, r0, #4
20003410:	5c9a      	ldrb	r2, [r3, r2]
20003412:	7022      	strb	r2, [r4, #0]
    tmp[len++] = dig[addr[i] & 0x0F];
20003414:	220f      	movs	r2, #15
20003416:	4010      	ands	r0, r2
20003418:	5c18      	ldrb	r0, [r3, r0]
2000341a:	7060      	strb	r0, [r4, #1]
    if (i != 0) tmp[len++] = ':';
2000341c:	203a      	movs	r0, #58	; 0x3a
2000341e:	70a0      	strb	r0, [r4, #2]
    tmp[len++] = dig[addr[i] >> 4];
20003420:	7848      	ldrb	r0, [r1, #1]
20003422:	4681      	mov	r9, r0
20003424:	0900      	lsrs	r0, r0, #4
20003426:	5c18      	ldrb	r0, [r3, r0]
20003428:	70e0      	strb	r0, [r4, #3]
    tmp[len++] = dig[addr[i] & 0x0F];
2000342a:	4648      	mov	r0, r9
2000342c:	4010      	ands	r0, r2
2000342e:	5c18      	ldrb	r0, [r3, r0]
20003430:	7120      	strb	r0, [r4, #4]
    if (i != 0) tmp[len++] = ':';
20003432:	203a      	movs	r0, #58	; 0x3a
20003434:	7160      	strb	r0, [r4, #5]
    tmp[len++] = dig[addr[i] >> 4];
20003436:	7888      	ldrb	r0, [r1, #2]
20003438:	4684      	mov	ip, r0
2000343a:	0900      	lsrs	r0, r0, #4
2000343c:	5c18      	ldrb	r0, [r3, r0]
2000343e:	71a0      	strb	r0, [r4, #6]
    tmp[len++] = dig[addr[i] & 0x0F];
20003440:	4660      	mov	r0, ip
20003442:	4010      	ands	r0, r2
20003444:	5c18      	ldrb	r0, [r3, r0]
20003446:	71e0      	strb	r0, [r4, #7]
    if (i != 0) tmp[len++] = ':';
20003448:	203a      	movs	r0, #58	; 0x3a
2000344a:	7220      	strb	r0, [r4, #8]
    tmp[len++] = dig[addr[i] >> 4];
2000344c:	78c8      	ldrb	r0, [r1, #3]
2000344e:	4681      	mov	r9, r0
20003450:	0900      	lsrs	r0, r0, #4
20003452:	5c18      	ldrb	r0, [r3, r0]
20003454:	7260      	strb	r0, [r4, #9]
    tmp[len++] = dig[addr[i] & 0x0F];
20003456:	4648      	mov	r0, r9
20003458:	4010      	ands	r0, r2
2000345a:	5c18      	ldrb	r0, [r3, r0]
2000345c:	72a0      	strb	r0, [r4, #10]
    if (i != 0) tmp[len++] = ':';
2000345e:	203a      	movs	r0, #58	; 0x3a
20003460:	72e0      	strb	r0, [r4, #11]
    tmp[len++] = dig[addr[i] >> 4];
20003462:	7908      	ldrb	r0, [r1, #4]
20003464:	4684      	mov	ip, r0
20003466:	0900      	lsrs	r0, r0, #4
20003468:	5c18      	ldrb	r0, [r3, r0]
2000346a:	7320      	strb	r0, [r4, #12]
    tmp[len++] = dig[addr[i] & 0x0F];
2000346c:	4660      	mov	r0, ip
2000346e:	4010      	ands	r0, r2
20003470:	5c18      	ldrb	r0, [r3, r0]
20003472:	7360      	strb	r0, [r4, #13]
    if (i != 0) tmp[len++] = ':';
20003474:	203a      	movs	r0, #58	; 0x3a
20003476:	73a0      	strb	r0, [r4, #14]
    tmp[len++] = dig[addr[i] >> 4];
20003478:	7949      	ldrb	r1, [r1, #5]
2000347a:	0908      	lsrs	r0, r1, #4
2000347c:	5c18      	ldrb	r0, [r3, r0]
    tmp[len++] = dig[addr[i] & 0x0F];
2000347e:	400a      	ands	r2, r1
    tmp[len++] = dig[addr[i] >> 4];
20003480:	73e0      	strb	r0, [r4, #15]
    tmp[len++] = dig[addr[i] & 0x0F];
20003482:	5c9b      	ldrb	r3, [r3, r2]
20003484:	7423      	strb	r3, [r4, #16]
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
20003486:	06eb      	lsls	r3, r5, #27
20003488:	d40b      	bmi.n	200034a2 <ee_printf+0x3ea>
2000348a:	1e7d      	subs	r5, r7, #1
2000348c:	2f11      	cmp	r7, #17
2000348e:	dc00      	bgt.n	20003492 <ee_printf+0x3da>
20003490:	e39b      	b.n	20003bca <ee_printf+0xb12>
20003492:	3f11      	subs	r7, #17
20003494:	003a      	movs	r2, r7
20003496:	0030      	movs	r0, r6
20003498:	2120      	movs	r1, #32
2000349a:	f000 fbf5 	bl	20003c88 <__memset_veneer>
2000349e:	19f6      	adds	r6, r6, r7
200034a0:	1bef      	subs	r7, r5, r7
  for (i = 0; i < len; ++i) *str++ = tmp[i];
200034a2:	2211      	movs	r2, #17
200034a4:	0021      	movs	r1, r4
200034a6:	0030      	movs	r0, r6
200034a8:	f000 fc0e 	bl	20003cc8 <__memcpy_veneer>
200034ac:	0030      	movs	r0, r6
200034ae:	3011      	adds	r0, #17
  while (len < size--) *str++ = ' ';
200034b0:	2f11      	cmp	r7, #17
200034b2:	dc00      	bgt.n	200034b6 <ee_printf+0x3fe>
200034b4:	e36e      	b.n	20003b94 <ee_printf+0xadc>
200034b6:	003a      	movs	r2, r7
200034b8:	2120      	movs	r1, #32
200034ba:	3a11      	subs	r2, #17
200034bc:	f000 fbe4 	bl	20003c88 <__memset_veneer>
200034c0:	19f6      	adds	r6, r6, r7
  for (str = buf; *fmt; fmt++)
200034c2:	4647      	mov	r7, r8
200034c4:	4644      	mov	r4, r8
200034c6:	78bb      	ldrb	r3, [r7, #2]
200034c8:	3402      	adds	r4, #2
200034ca:	e610      	b.n	200030ee <ee_printf+0x36>
      if (n >= 100) 
200034cc:	2b63      	cmp	r3, #99	; 0x63
200034ce:	dc00      	bgt.n	200034d2 <ee_printf+0x41a>
200034d0:	e294      	b.n	200039fc <ee_printf+0x944>
        tmp[len++] = digits[n / 100];
200034d2:	a824      	add	r0, sp, #144	; 0x90
200034d4:	4683      	mov	fp, r0
200034d6:	2164      	movs	r1, #100	; 0x64
200034d8:	0018      	movs	r0, r3
200034da:	f000 fba5 	bl	20003c28 <____aeabi_idiv_veneer>
200034de:	465c      	mov	r4, fp
200034e0:	4a94      	ldr	r2, [pc, #592]	; (20003734 <ee_printf+0x67c>)
        n = n % 100;
200034e2:	2164      	movs	r1, #100	; 0x64
        tmp[len++] = digits[n / 100];
200034e4:	5c13      	ldrb	r3, [r2, r0]
        n = n % 100;
200034e6:	4640      	mov	r0, r8
        tmp[len++] = digits[n / 100];
200034e8:	7023      	strb	r3, [r4, #0]
200034ea:	9205      	str	r2, [sp, #20]
        n = n % 100;
200034ec:	f000 fbf4 	bl	20003cd8 <____aeabi_idivmod_veneer>
200034f0:	000c      	movs	r4, r1
        tmp[len++] = digits[n / 10];
200034f2:	210a      	movs	r1, #10
200034f4:	0020      	movs	r0, r4
200034f6:	f000 fb97 	bl	20003c28 <____aeabi_idiv_veneer>
200034fa:	465a      	mov	r2, fp
200034fc:	9905      	ldr	r1, [sp, #20]
200034fe:	5c08      	ldrb	r0, [r1, r0]
        n = n % 10;
20003500:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
20003502:	7050      	strb	r0, [r2, #1]
        n = n % 10;
20003504:	0020      	movs	r0, r4
20003506:	f000 fbe7 	bl	20003cd8 <____aeabi_idivmod_veneer>
        tmp[len++] = digits[n / 10];
2000350a:	2302      	movs	r3, #2
        n = n % 10;
2000350c:	4688      	mov	r8, r1
      tmp[len++] = digits[n];
2000350e:	4641      	mov	r1, r8
20003510:	9805      	ldr	r0, [sp, #20]
20003512:	1c5c      	adds	r4, r3, #1
20003514:	5c42      	ldrb	r2, [r0, r1]
20003516:	4658      	mov	r0, fp
20003518:	54c2      	strb	r2, [r0, r3]
2000351a:	e6b2      	b.n	20003282 <ee_printf+0x1ca>
        if (*fmt)
2000351c:	464a      	mov	r2, r9
2000351e:	0030      	movs	r0, r6
20003520:	7811      	ldrb	r1, [r2, #0]
  for (str = buf; *fmt; fmt++)
20003522:	464d      	mov	r5, r9
          *str++ = *fmt;
20003524:	7001      	strb	r1, [r0, #0]
  for (str = buf; *fmt; fmt++)
20003526:	786b      	ldrb	r3, [r5, #1]
          *str++ = *fmt;
20003528:	1c46      	adds	r6, r0, #1
  for (str = buf; *fmt; fmt++)
2000352a:	1c6c      	adds	r4, r5, #1
2000352c:	e5df      	b.n	200030ee <ee_printf+0x36>
        flags |= SIGN;
2000352e:	2202      	movs	r2, #2
20003530:	4315      	orrs	r5, r2
    base = 10;
20003532:	3208      	adds	r2, #8
      num = va_arg(args, int);
20003534:	465b      	mov	r3, fp
20003536:	cb02      	ldmia	r3!, {r1}
    str = number(str, num, base, field_width, precision, flags);
20003538:	9501      	str	r5, [sp, #4]
      num = va_arg(args, int);
2000353a:	469b      	mov	fp, r3
    str = number(str, num, base, field_width, precision, flags);
2000353c:	003b      	movs	r3, r7
2000353e:	9400      	str	r4, [sp, #0]
20003540:	0030      	movs	r0, r6
20003542:	f7ff fc71 	bl	20002e28 <number>
20003546:	0006      	movs	r6, r0
  for (str = buf; *fmt; fmt++)
20003548:	464a      	mov	r2, r9
2000354a:	7853      	ldrb	r3, [r2, #1]
2000354c:	1c54      	adds	r4, r2, #1
2000354e:	e5ce      	b.n	200030ee <ee_printf+0x36>
    if (*fmt == 'l' || *fmt == 'L')
20003550:	46c1      	mov	r9, r8
        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
20003552:	4659      	mov	r1, fp
20003554:	2207      	movs	r2, #7
20003556:	3107      	adds	r1, #7
20003558:	4391      	bics	r1, r2
2000355a:	000b      	movs	r3, r1
2000355c:	2008      	movs	r0, #8
2000355e:	685a      	ldr	r2, [r3, #4]
20003560:	2310      	movs	r3, #16
20003562:	4683      	mov	fp, r0
20003564:	0018      	movs	r0, r3
20003566:	448b      	add	fp, r1
20003568:	6809      	ldr	r1, [r1, #0]
2000356a:	4028      	ands	r0, r5
2000356c:	4690      	mov	r8, r2
2000356e:	9104      	str	r1, [sp, #16]
20003570:	9006      	str	r0, [sp, #24]
  if (flags & LEFT) flags &= ~ZEROPAD;
20003572:	422b      	tst	r3, r5
20003574:	d000      	beq.n	20003578 <ee_printf+0x4c0>
20003576:	e1fa      	b.n	2000396e <ee_printf+0x8b6>
20003578:	2111      	movs	r1, #17
  c = (flags & ZEROPAD) ? '0' : ' ';
2000357a:	2230      	movs	r2, #48	; 0x30
        str = flt(str, va_arg(args, double), field_width, precision, *fmt, flags | SIGN);
2000357c:	3b0e      	subs	r3, #14
2000357e:	432b      	orrs	r3, r5
20003580:	4029      	ands	r1, r5
20003582:	9305      	str	r3, [sp, #20]
20003584:	9107      	str	r1, [sp, #28]
  c = (flags & ZEROPAD) ? '0' : ' ';
20003586:	9209      	str	r2, [sp, #36]	; 0x24
20003588:	07eb      	lsls	r3, r5, #31
2000358a:	d400      	bmi.n	2000358e <ee_printf+0x4d6>
2000358c:	e1f6      	b.n	2000397c <ee_printf+0x8c4>
    if (num < 0.0)
2000358e:	2200      	movs	r2, #0
20003590:	2300      	movs	r3, #0
20003592:	4641      	mov	r1, r8
20003594:	9804      	ldr	r0, [sp, #16]
20003596:	f000 fba7 	bl	20003ce8 <____aeabi_dcmplt_veneer>
2000359a:	2800      	cmp	r0, #0
2000359c:	d000      	beq.n	200035a0 <ee_printf+0x4e8>
2000359e:	e29c      	b.n	20003ada <ee_printf+0xa22>
    else if (flags & PLUS)
200035a0:	9905      	ldr	r1, [sp, #20]
200035a2:	074b      	lsls	r3, r1, #29
200035a4:	d400      	bmi.n	200035a8 <ee_printf+0x4f0>
200035a6:	e26f      	b.n	20003a88 <ee_printf+0x9d0>
      sign = '+';
200035a8:	202b      	movs	r0, #43	; 0x2b
      size--;
200035aa:	3f01      	subs	r7, #1
      sign = '+';
200035ac:	9008      	str	r0, [sp, #32]
  if (precision < 0)
200035ae:	1c63      	adds	r3, r4, #1
200035b0:	d100      	bne.n	200035b4 <ee_printf+0x4fc>
    precision = 6; // Default precision: 6
200035b2:	3407      	adds	r4, #7
    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
200035b4:	ad24      	add	r5, sp, #144	; 0x90
200035b6:	a80f      	add	r0, sp, #60	; 0x3c
200035b8:	4641      	mov	r1, r8
200035ba:	9501      	str	r5, [sp, #4]
200035bc:	9000      	str	r0, [sp, #0]
200035be:	0022      	movs	r2, r4
200035c0:	9804      	ldr	r0, [sp, #16]
200035c2:	ab0e      	add	r3, sp, #56	; 0x38
200035c4:	f000 fb48 	bl	20003c58 <__fcvtbuf_veneer>
    if (sign) *buffer++ = '-';
200035c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    digits = fcvtbuf(value, precision, &decpt, &sign, cvtbuf);
200035ca:	4680      	mov	r8, r0
    if (sign) *buffer++ = '-';
200035cc:	ad10      	add	r5, sp, #64	; 0x40
200035ce:	2900      	cmp	r1, #0
200035d0:	d100      	bne.n	200035d4 <ee_printf+0x51c>
200035d2:	e27d      	b.n	20003ad0 <ee_printf+0xa18>
200035d4:	232d      	movs	r3, #45	; 0x2d
200035d6:	aa0a      	add	r2, sp, #40	; 0x28
200035d8:	4694      	mov	ip, r2
200035da:	702b      	strb	r3, [r5, #0]
200035dc:	3b14      	subs	r3, #20
200035de:	4463      	add	r3, ip
    if (*digits)
200035e0:	4640      	mov	r0, r8
200035e2:	7801      	ldrb	r1, [r0, #0]
200035e4:	910a      	str	r1, [sp, #40]	; 0x28
200035e6:	2900      	cmp	r1, #0
200035e8:	d100      	bne.n	200035ec <ee_printf+0x534>
200035ea:	e2dc      	b.n	20003ba6 <ee_printf+0xaee>
          if (pos++ == decpt) *buffer++ = '.';
200035ec:	222e      	movs	r2, #46	; 0x2e
      if (decpt <= 0)
200035ee:	980e      	ldr	r0, [sp, #56]	; 0x38
200035f0:	2101      	movs	r1, #1
          if (pos++ == decpt) *buffer++ = '.';
200035f2:	4694      	mov	ip, r2
      if (decpt <= 0)
200035f4:	2800      	cmp	r0, #0
200035f6:	dc00      	bgt.n	200035fa <ee_printf+0x542>
200035f8:	e2e9      	b.n	20003bce <ee_printf+0xb16>
200035fa:	464a      	mov	r2, r9
200035fc:	46a1      	mov	r9, r4
200035fe:	9204      	str	r2, [sp, #16]
20003600:	0004      	movs	r4, r0
20003602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
20003604:	950a      	str	r5, [sp, #40]	; 0x28
20003606:	e006      	b.n	20003616 <ee_printf+0x55e>
          if (pos++ == decpt) *buffer++ = '.';
20003608:	428c      	cmp	r4, r1
2000360a:	d102      	bne.n	20003612 <ee_printf+0x55a>
2000360c:	4665      	mov	r5, ip
2000360e:	1c98      	adds	r0, r3, #2
20003610:	705d      	strb	r5, [r3, #1]
20003612:	0003      	movs	r3, r0
20003614:	3101      	adds	r1, #1
        while (*digits)
20003616:	4645      	mov	r5, r8
          *buffer++ = *digits++;
20003618:	701a      	strb	r2, [r3, #0]
        while (*digits)
2000361a:	5c6a      	ldrb	r2, [r5, r1]
          *buffer++ = *digits++;
2000361c:	1c58      	adds	r0, r3, #1
        while (*digits)
2000361e:	2a00      	cmp	r2, #0
20003620:	d1f2      	bne.n	20003608 <ee_printf+0x550>
20003622:	9b04      	ldr	r3, [sp, #16]
20003624:	4649      	mov	r1, r9
20003626:	4699      	mov	r9, r3
20003628:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  *buffer = '\0';
2000362a:	2300      	movs	r3, #0
  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
2000362c:	9a05      	ldr	r2, [sp, #20]
  *buffer = '\0';
2000362e:	7003      	strb	r3, [r0, #0]
  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
20003630:	0693      	lsls	r3, r2, #26
20003632:	d502      	bpl.n	2000363a <ee_printf+0x582>
20003634:	2900      	cmp	r1, #0
20003636:	d100      	bne.n	2000363a <ee_printf+0x582>
20003638:	e25c      	b.n	20003af4 <ee_printf+0xa3c>
  for (sc = s; *sc != '\0' && count--; ++sc);
2000363a:	7828      	ldrb	r0, [r5, #0]
2000363c:	2400      	movs	r4, #0
2000363e:	2800      	cmp	r0, #0
20003640:	d030      	beq.n	200036a4 <ee_printf+0x5ec>
20003642:	002c      	movs	r4, r5
20003644:	a950      	add	r1, sp, #320	; 0x140
20003646:	7862      	ldrb	r2, [r4, #1]
20003648:	3401      	adds	r4, #1
2000364a:	0023      	movs	r3, r4
2000364c:	2a00      	cmp	r2, #0
2000364e:	d100      	bne.n	20003652 <ee_printf+0x59a>
20003650:	e240      	b.n	20003ad4 <ee_printf+0xa1c>
20003652:	7860      	ldrb	r0, [r4, #1]
20003654:	3401      	adds	r4, #1
20003656:	2800      	cmp	r0, #0
20003658:	d100      	bne.n	2000365c <ee_printf+0x5a4>
2000365a:	e23b      	b.n	20003ad4 <ee_printf+0xa1c>
2000365c:	789a      	ldrb	r2, [r3, #2]
2000365e:	1c9c      	adds	r4, r3, #2
20003660:	2a00      	cmp	r2, #0
20003662:	d100      	bne.n	20003666 <ee_printf+0x5ae>
20003664:	e236      	b.n	20003ad4 <ee_printf+0xa1c>
20003666:	78d8      	ldrb	r0, [r3, #3]
20003668:	1cdc      	adds	r4, r3, #3
2000366a:	2800      	cmp	r0, #0
2000366c:	d100      	bne.n	20003670 <ee_printf+0x5b8>
2000366e:	e231      	b.n	20003ad4 <ee_printf+0xa1c>
20003670:	791a      	ldrb	r2, [r3, #4]
20003672:	1d1c      	adds	r4, r3, #4
20003674:	2a00      	cmp	r2, #0
20003676:	d100      	bne.n	2000367a <ee_printf+0x5c2>
20003678:	e22c      	b.n	20003ad4 <ee_printf+0xa1c>
2000367a:	7958      	ldrb	r0, [r3, #5]
2000367c:	1d5c      	adds	r4, r3, #5
2000367e:	2800      	cmp	r0, #0
20003680:	d100      	bne.n	20003684 <ee_printf+0x5cc>
20003682:	e227      	b.n	20003ad4 <ee_printf+0xa1c>
20003684:	799a      	ldrb	r2, [r3, #6]
20003686:	1d9c      	adds	r4, r3, #6
20003688:	2a00      	cmp	r2, #0
2000368a:	d100      	bne.n	2000368e <ee_printf+0x5d6>
2000368c:	e222      	b.n	20003ad4 <ee_printf+0xa1c>
2000368e:	1ddc      	adds	r4, r3, #7
20003690:	79db      	ldrb	r3, [r3, #7]
20003692:	2b00      	cmp	r3, #0
20003694:	d100      	bne.n	20003698 <ee_printf+0x5e0>
20003696:	e21d      	b.n	20003ad4 <ee_printf+0xa1c>
20003698:	428c      	cmp	r4, r1
2000369a:	d1d4      	bne.n	20003646 <ee_printf+0x58e>
  size -= n;
2000369c:	2180      	movs	r1, #128	; 0x80
2000369e:	3f01      	subs	r7, #1
200036a0:	3fff      	subs	r7, #255	; 0xff
200036a2:	004c      	lsls	r4, r1, #1
  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
200036a4:	9807      	ldr	r0, [sp, #28]
200036a6:	2800      	cmp	r0, #0
200036a8:	d10b      	bne.n	200036c2 <ee_printf+0x60a>
200036aa:	1e7a      	subs	r2, r7, #1
200036ac:	2f00      	cmp	r7, #0
200036ae:	dc00      	bgt.n	200036b2 <ee_printf+0x5fa>
200036b0:	e289      	b.n	20003bc6 <ee_printf+0xb0e>
200036b2:	003a      	movs	r2, r7
200036b4:	0030      	movs	r0, r6
200036b6:	2120      	movs	r1, #32
200036b8:	19f6      	adds	r6, r6, r7
200036ba:	2701      	movs	r7, #1
200036bc:	f000 fae4 	bl	20003c88 <__memset_veneer>
200036c0:	427f      	negs	r7, r7
  if (sign) *str++ = sign;
200036c2:	9b08      	ldr	r3, [sp, #32]
200036c4:	2b00      	cmp	r3, #0
200036c6:	d001      	beq.n	200036cc <ee_printf+0x614>
200036c8:	7033      	strb	r3, [r6, #0]
200036ca:	3601      	adds	r6, #1
  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
200036cc:	9906      	ldr	r1, [sp, #24]
200036ce:	2900      	cmp	r1, #0
200036d0:	d10b      	bne.n	200036ea <ee_printf+0x632>
200036d2:	1e78      	subs	r0, r7, #1
200036d4:	2f00      	cmp	r7, #0
200036d6:	dc00      	bgt.n	200036da <ee_printf+0x622>
200036d8:	e263      	b.n	20003ba2 <ee_printf+0xaea>
200036da:	003a      	movs	r2, r7
200036dc:	0030      	movs	r0, r6
200036de:	9909      	ldr	r1, [sp, #36]	; 0x24
200036e0:	f000 fad2 	bl	20003c88 <__memset_veneer>
200036e4:	2201      	movs	r2, #1
200036e6:	19f6      	adds	r6, r6, r7
200036e8:	4257      	negs	r7, r2
  for (i = 0; i < n; i++) *str++ = tmp[i];
200036ea:	2c00      	cmp	r4, #0
200036ec:	dd05      	ble.n	200036fa <ee_printf+0x642>
200036ee:	0030      	movs	r0, r6
200036f0:	0022      	movs	r2, r4
200036f2:	0029      	movs	r1, r5
200036f4:	f000 fae8 	bl	20003cc8 <__memcpy_veneer>
200036f8:	1936      	adds	r6, r6, r4
  while (size-- > 0) *str++ = ' ';
200036fa:	2f00      	cmp	r7, #0
200036fc:	dc00      	bgt.n	20003700 <ee_printf+0x648>
200036fe:	e723      	b.n	20003548 <ee_printf+0x490>
20003700:	0030      	movs	r0, r6
20003702:	003a      	movs	r2, r7
20003704:	2120      	movs	r1, #32
20003706:	f000 fabf 	bl	20003c88 <__memset_veneer>
2000370a:	19f6      	adds	r6, r6, r7
        continue;
2000370c:	e71c      	b.n	20003548 <ee_printf+0x490>
    if (*fmt == 'l' || *fmt == 'L')
2000370e:	46c1      	mov	r9, r8
        base = 8;
20003710:	2208      	movs	r2, #8
20003712:	e70f      	b.n	20003534 <ee_printf+0x47c>
    if (*fmt == 'l' || *fmt == 'L')
20003714:	46c1      	mov	r9, r8
        if (field_width == -1)
20003716:	1c7b      	adds	r3, r7, #1
20003718:	d102      	bne.n	20003720 <ee_printf+0x668>
          flags |= ZEROPAD;
2000371a:	2301      	movs	r3, #1
          field_width = 2 * sizeof(void *);
2000371c:	3709      	adds	r7, #9
          flags |= ZEROPAD;
2000371e:	431d      	orrs	r5, r3
        str = number(str, (unsigned long) va_arg(args, void *), 16, field_width, precision, flags);
20003720:	4658      	mov	r0, fp
20003722:	c802      	ldmia	r0!, {r1}
20003724:	003b      	movs	r3, r7
20003726:	4683      	mov	fp, r0
20003728:	2210      	movs	r2, #16
2000372a:	9501      	str	r5, [sp, #4]
2000372c:	9400      	str	r4, [sp, #0]
2000372e:	e707      	b.n	20003540 <ee_printf+0x488>
20003730:	20002e00 	.word	0x20002e00
20003734:	20002dd8 	.word	0x20002dd8
    if (*fmt == 'l' || *fmt == 'L')
20003738:	46c1      	mov	r9, r8
        s = va_arg(args, char *);
2000373a:	465b      	mov	r3, fp
2000373c:	cb02      	ldmia	r3!, {r1}
2000373e:	4688      	mov	r8, r1
20003740:	469b      	mov	fp, r3
        if (!s) s = "<NULL>";
20003742:	2900      	cmp	r1, #0
20003744:	d100      	bne.n	20003748 <ee_printf+0x690>
20003746:	e16d      	b.n	20003a24 <ee_printf+0x96c>
  for (sc = s; *sc != '\0' && count--; ++sc);
20003748:	780a      	ldrb	r2, [r1, #0]
2000374a:	2a00      	cmp	r2, #0
2000374c:	d100      	bne.n	20003750 <ee_printf+0x698>
2000374e:	e216      	b.n	20003b7e <ee_printf+0xac6>
20003750:	2c00      	cmp	r4, #0
20003752:	d100      	bne.n	20003756 <ee_printf+0x69e>
20003754:	e213      	b.n	20003b7e <ee_printf+0xac6>
20003756:	2107      	movs	r1, #7
20003758:	4643      	mov	r3, r8
2000375a:	000a      	movs	r2, r1
2000375c:	1918      	adds	r0, r3, r4
2000375e:	4022      	ands	r2, r4
20003760:	4221      	tst	r1, r4
20003762:	d02a      	beq.n	200037ba <ee_printf+0x702>
20003764:	2a01      	cmp	r2, #1
20003766:	d022      	beq.n	200037ae <ee_printf+0x6f6>
20003768:	2a02      	cmp	r2, #2
2000376a:	d01c      	beq.n	200037a6 <ee_printf+0x6ee>
2000376c:	2a03      	cmp	r2, #3
2000376e:	d016      	beq.n	2000379e <ee_printf+0x6e6>
20003770:	2a04      	cmp	r2, #4
20003772:	d010      	beq.n	20003796 <ee_printf+0x6de>
20003774:	2a05      	cmp	r2, #5
20003776:	d00a      	beq.n	2000378e <ee_printf+0x6d6>
20003778:	2a06      	cmp	r2, #6
2000377a:	d004      	beq.n	20003786 <ee_printf+0x6ce>
2000377c:	4644      	mov	r4, r8
2000377e:	7861      	ldrb	r1, [r4, #1]
20003780:	3301      	adds	r3, #1
20003782:	2900      	cmp	r1, #0
20003784:	d03a      	beq.n	200037fc <ee_printf+0x744>
20003786:	785a      	ldrb	r2, [r3, #1]
20003788:	3301      	adds	r3, #1
2000378a:	2a00      	cmp	r2, #0
2000378c:	d036      	beq.n	200037fc <ee_printf+0x744>
2000378e:	785c      	ldrb	r4, [r3, #1]
20003790:	3301      	adds	r3, #1
20003792:	2c00      	cmp	r4, #0
20003794:	d032      	beq.n	200037fc <ee_printf+0x744>
20003796:	7859      	ldrb	r1, [r3, #1]
20003798:	3301      	adds	r3, #1
2000379a:	2900      	cmp	r1, #0
2000379c:	d02e      	beq.n	200037fc <ee_printf+0x744>
2000379e:	785a      	ldrb	r2, [r3, #1]
200037a0:	3301      	adds	r3, #1
200037a2:	2a00      	cmp	r2, #0
200037a4:	d02a      	beq.n	200037fc <ee_printf+0x744>
200037a6:	785c      	ldrb	r4, [r3, #1]
200037a8:	3301      	adds	r3, #1
200037aa:	2c00      	cmp	r4, #0
200037ac:	d026      	beq.n	200037fc <ee_printf+0x744>
200037ae:	7859      	ldrb	r1, [r3, #1]
200037b0:	3301      	adds	r3, #1
200037b2:	2900      	cmp	r1, #0
200037b4:	d022      	beq.n	200037fc <ee_printf+0x744>
200037b6:	4283      	cmp	r3, r0
200037b8:	d020      	beq.n	200037fc <ee_printf+0x744>
200037ba:	785c      	ldrb	r4, [r3, #1]
200037bc:	3301      	adds	r3, #1
200037be:	001a      	movs	r2, r3
200037c0:	2c00      	cmp	r4, #0
200037c2:	d01b      	beq.n	200037fc <ee_printf+0x744>
200037c4:	7859      	ldrb	r1, [r3, #1]
200037c6:	3301      	adds	r3, #1
200037c8:	2900      	cmp	r1, #0
200037ca:	d017      	beq.n	200037fc <ee_printf+0x744>
200037cc:	7894      	ldrb	r4, [r2, #2]
200037ce:	1c93      	adds	r3, r2, #2
200037d0:	2c00      	cmp	r4, #0
200037d2:	d013      	beq.n	200037fc <ee_printf+0x744>
200037d4:	78d1      	ldrb	r1, [r2, #3]
200037d6:	1cd3      	adds	r3, r2, #3
200037d8:	2900      	cmp	r1, #0
200037da:	d00f      	beq.n	200037fc <ee_printf+0x744>
200037dc:	7914      	ldrb	r4, [r2, #4]
200037de:	1d13      	adds	r3, r2, #4
200037e0:	2c00      	cmp	r4, #0
200037e2:	d00b      	beq.n	200037fc <ee_printf+0x744>
200037e4:	7951      	ldrb	r1, [r2, #5]
200037e6:	1d53      	adds	r3, r2, #5
200037e8:	2900      	cmp	r1, #0
200037ea:	d007      	beq.n	200037fc <ee_printf+0x744>
200037ec:	7994      	ldrb	r4, [r2, #6]
200037ee:	1d93      	adds	r3, r2, #6
200037f0:	2c00      	cmp	r4, #0
200037f2:	d003      	beq.n	200037fc <ee_printf+0x744>
200037f4:	1dd3      	adds	r3, r2, #7
200037f6:	79d2      	ldrb	r2, [r2, #7]
200037f8:	2a00      	cmp	r2, #0
200037fa:	d1dc      	bne.n	200037b6 <ee_printf+0x6fe>
  return sc - s;
200037fc:	4640      	mov	r0, r8
200037fe:	1a1c      	subs	r4, r3, r0
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
20003800:	06eb      	lsls	r3, r5, #27
20003802:	d400      	bmi.n	20003806 <ee_printf+0x74e>
20003804:	e111      	b.n	20003a2a <ee_printf+0x972>
        for (i = 0; i < len; ++i) *str++ = *s++;
20003806:	2c00      	cmp	r4, #0
20003808:	dd4b      	ble.n	200038a2 <ee_printf+0x7ea>
2000380a:	2007      	movs	r0, #7
2000380c:	0002      	movs	r2, r0
2000380e:	2300      	movs	r3, #0
20003810:	4022      	ands	r2, r4
20003812:	4220      	tst	r0, r4
20003814:	d029      	beq.n	2000386a <ee_printf+0x7b2>
20003816:	2a01      	cmp	r2, #1
20003818:	d021      	beq.n	2000385e <ee_printf+0x7a6>
2000381a:	2a02      	cmp	r2, #2
2000381c:	d01b      	beq.n	20003856 <ee_printf+0x79e>
2000381e:	2a03      	cmp	r2, #3
20003820:	d015      	beq.n	2000384e <ee_printf+0x796>
20003822:	2a04      	cmp	r2, #4
20003824:	d00f      	beq.n	20003846 <ee_printf+0x78e>
20003826:	2a05      	cmp	r2, #5
20003828:	d009      	beq.n	2000383e <ee_printf+0x786>
2000382a:	2a06      	cmp	r2, #6
2000382c:	d003      	beq.n	20003836 <ee_printf+0x77e>
2000382e:	4643      	mov	r3, r8
20003830:	781d      	ldrb	r5, [r3, #0]
20003832:	2301      	movs	r3, #1
20003834:	7035      	strb	r5, [r6, #0]
20003836:	4641      	mov	r1, r8
20003838:	5cc8      	ldrb	r0, [r1, r3]
2000383a:	54f0      	strb	r0, [r6, r3]
2000383c:	3301      	adds	r3, #1
2000383e:	4642      	mov	r2, r8
20003840:	5cd5      	ldrb	r5, [r2, r3]
20003842:	54f5      	strb	r5, [r6, r3]
20003844:	3301      	adds	r3, #1
20003846:	4641      	mov	r1, r8
20003848:	5cc8      	ldrb	r0, [r1, r3]
2000384a:	54f0      	strb	r0, [r6, r3]
2000384c:	3301      	adds	r3, #1
2000384e:	4642      	mov	r2, r8
20003850:	5cd5      	ldrb	r5, [r2, r3]
20003852:	54f5      	strb	r5, [r6, r3]
20003854:	3301      	adds	r3, #1
20003856:	4641      	mov	r1, r8
20003858:	5cc8      	ldrb	r0, [r1, r3]
2000385a:	54f0      	strb	r0, [r6, r3]
2000385c:	3301      	adds	r3, #1
2000385e:	4642      	mov	r2, r8
20003860:	5cd5      	ldrb	r5, [r2, r3]
20003862:	54f5      	strb	r5, [r6, r3]
20003864:	3301      	adds	r3, #1
20003866:	42a3      	cmp	r3, r4
20003868:	d01a      	beq.n	200038a0 <ee_printf+0x7e8>
2000386a:	4642      	mov	r2, r8
2000386c:	5cd1      	ldrb	r1, [r2, r3]
2000386e:	1c5d      	adds	r5, r3, #1
20003870:	54f1      	strb	r1, [r6, r3]
20003872:	5d50      	ldrb	r0, [r2, r5]
20003874:	1c99      	adds	r1, r3, #2
20003876:	5570      	strb	r0, [r6, r5]
20003878:	5c55      	ldrb	r5, [r2, r1]
2000387a:	5475      	strb	r5, [r6, r1]
2000387c:	1cd9      	adds	r1, r3, #3
2000387e:	5c50      	ldrb	r0, [r2, r1]
20003880:	1d1d      	adds	r5, r3, #4
20003882:	5470      	strb	r0, [r6, r1]
20003884:	5d51      	ldrb	r1, [r2, r5]
20003886:	5571      	strb	r1, [r6, r5]
20003888:	1d5d      	adds	r5, r3, #5
2000388a:	5d50      	ldrb	r0, [r2, r5]
2000388c:	1d99      	adds	r1, r3, #6
2000388e:	5570      	strb	r0, [r6, r5]
20003890:	5c55      	ldrb	r5, [r2, r1]
20003892:	5475      	strb	r5, [r6, r1]
20003894:	1dd9      	adds	r1, r3, #7
20003896:	5c50      	ldrb	r0, [r2, r1]
20003898:	3308      	adds	r3, #8
2000389a:	5470      	strb	r0, [r6, r1]
2000389c:	42a3      	cmp	r3, r4
2000389e:	d1e5      	bne.n	2000386c <ee_printf+0x7b4>
200038a0:	1936      	adds	r6, r6, r4
        while (len < field_width--) *str++ = ' ';
200038a2:	42bc      	cmp	r4, r7
200038a4:	db00      	blt.n	200038a8 <ee_printf+0x7f0>
200038a6:	e64f      	b.n	20003548 <ee_printf+0x490>
200038a8:	1b3f      	subs	r7, r7, r4
  for (str = buf; *fmt; fmt++)
200038aa:	464c      	mov	r4, r9
        while (len < field_width--) *str++ = ' ';
200038ac:	0030      	movs	r0, r6
200038ae:	003a      	movs	r2, r7
200038b0:	2120      	movs	r1, #32
200038b2:	f000 f9e9 	bl	20003c88 <__memset_veneer>
200038b6:	19f6      	adds	r6, r6, r7
  for (str = buf; *fmt; fmt++)
200038b8:	7863      	ldrb	r3, [r4, #1]
200038ba:	3401      	adds	r4, #1
200038bc:	e417      	b.n	200030ee <ee_printf+0x36>
    if (*fmt == 'l' || *fmt == 'L')
200038be:	46c1      	mov	r9, r8
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
200038c0:	06eb      	lsls	r3, r5, #27
200038c2:	d400      	bmi.n	200038c6 <ee_printf+0x80e>
200038c4:	e0c1      	b.n	20003a4a <ee_printf+0x992>
        *str++ = (unsigned char) va_arg(args, int);
200038c6:	465d      	mov	r5, fp
200038c8:	cd08      	ldmia	r5!, {r3}
200038ca:	1c70      	adds	r0, r6, #1
200038cc:	7033      	strb	r3, [r6, #0]
        while (--field_width > 0) *str++ = ' ';
200038ce:	2f01      	cmp	r7, #1
200038d0:	dc00      	bgt.n	200038d4 <ee_printf+0x81c>
200038d2:	e0f6      	b.n	20003ac2 <ee_printf+0xa0a>
200038d4:	2120      	movs	r1, #32
200038d6:	1e7a      	subs	r2, r7, #1
200038d8:	f000 f9d6 	bl	20003c88 <__memset_veneer>
  for (str = buf; *fmt; fmt++)
200038dc:	4649      	mov	r1, r9
        *str++ = (unsigned char) va_arg(args, int);
200038de:	46ab      	mov	fp, r5
  for (str = buf; *fmt; fmt++)
200038e0:	784b      	ldrb	r3, [r1, #1]
        while (--field_width > 0) *str++ = ' ';
200038e2:	19f6      	adds	r6, r6, r7
  for (str = buf; *fmt; fmt++)
200038e4:	1c4c      	adds	r4, r1, #1
200038e6:	f7ff fc02 	bl	200030ee <ee_printf+0x36>
        flags |= UPPERCASE;
200038ea:	2240      	movs	r2, #64	; 0x40
200038ec:	4315      	orrs	r5, r2
        base = 16;
200038ee:	3a30      	subs	r2, #48	; 0x30
200038f0:	e620      	b.n	20003534 <ee_printf+0x47c>
    if (*fmt == 'l' || *fmt == 'L')
200038f2:	46c1      	mov	r9, r8
        base = 16;
200038f4:	2210      	movs	r2, #16
200038f6:	e61d      	b.n	20003534 <ee_printf+0x47c>
    if (*fmt == 'l' || *fmt == 'L')
200038f8:	46c1      	mov	r9, r8
200038fa:	220a      	movs	r2, #10
200038fc:	e61a      	b.n	20003534 <ee_printf+0x47c>
      tmp[len++] = digits[0];
200038fe:	2030      	movs	r0, #48	; 0x30
20003900:	9905      	ldr	r1, [sp, #20]
20003902:	3402      	adds	r4, #2
20003904:	5458      	strb	r0, [r3, r1]
20003906:	e4ef      	b.n	200032e8 <ee_printf+0x230>
      if (n >= 100) 
20003908:	0018      	movs	r0, r3
2000390a:	2b63      	cmp	r3, #99	; 0x63
2000390c:	dd63      	ble.n	200039d6 <ee_printf+0x91e>
        tmp[len++] = digits[n / 100];
2000390e:	2164      	movs	r1, #100	; 0x64
20003910:	f000 f98a 	bl	20003c28 <____aeabi_idiv_veneer>
20003914:	49c1      	ldr	r1, [pc, #772]	; (20003c1c <ee_printf+0xb64>)
20003916:	9a05      	ldr	r2, [sp, #20]
20003918:	5c0b      	ldrb	r3, [r1, r0]
2000391a:	4658      	mov	r0, fp
2000391c:	9104      	str	r1, [sp, #16]
2000391e:	5483      	strb	r3, [r0, r2]
        n = n % 100;
20003920:	2164      	movs	r1, #100	; 0x64
20003922:	4640      	mov	r0, r8
20003924:	f000 f9d8 	bl	20003cd8 <____aeabi_idivmod_veneer>
20003928:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
2000392a:	1ce1      	adds	r1, r4, #3
2000392c:	4640      	mov	r0, r8
2000392e:	9105      	str	r1, [sp, #20]
20003930:	210a      	movs	r1, #10
20003932:	f000 f979 	bl	20003c28 <____aeabi_idiv_veneer>
20003936:	9b04      	ldr	r3, [sp, #16]
20003938:	445c      	add	r4, fp
2000393a:	5c18      	ldrb	r0, [r3, r0]
        n = n % 10;
2000393c:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
2000393e:	70a0      	strb	r0, [r4, #2]
        n = n % 10;
20003940:	4640      	mov	r0, r8
20003942:	f000 f9c9 	bl	20003cd8 <____aeabi_idivmod_veneer>
20003946:	4688      	mov	r8, r1
      tmp[len++] = digits[n];
20003948:	4641      	mov	r1, r8
2000394a:	9b04      	ldr	r3, [sp, #16]
2000394c:	9a05      	ldr	r2, [sp, #20]
2000394e:	5c58      	ldrb	r0, [r3, r1]
20003950:	465b      	mov	r3, fp
20003952:	1c54      	adds	r4, r2, #1
20003954:	5498      	strb	r0, [r3, r2]
20003956:	e508      	b.n	2000336a <ee_printf+0x2b2>
      tmp[len++] = digits[0];
20003958:	2030      	movs	r0, #48	; 0x30
2000395a:	9905      	ldr	r1, [sp, #20]
2000395c:	3402      	adds	r4, #2
2000395e:	5450      	strb	r0, [r2, r1]
20003960:	e4f5      	b.n	2000334e <ee_printf+0x296>
  int n=0;
20003962:	2000      	movs	r0, #0
  return n;
20003964:	e442      	b.n	200031ec <ee_printf+0x134>
  for (str = buf; *fmt; fmt++)
20003966:	a838      	add	r0, sp, #224	; 0xe0
20003968:	4682      	mov	sl, r0
2000396a:	9003      	str	r0, [sp, #12]
2000396c:	e428      	b.n	200031c0 <ee_printf+0x108>
  if (flags & LEFT) flags &= ~ZEROPAD;
2000396e:	2301      	movs	r3, #1
20003970:	439d      	bics	r5, r3
20003972:	3301      	adds	r3, #1
20003974:	431d      	orrs	r5, r3
20003976:	9505      	str	r5, [sp, #20]
20003978:	9d06      	ldr	r5, [sp, #24]
2000397a:	9507      	str	r5, [sp, #28]
  c = (flags & ZEROPAD) ? '0' : ' ';
2000397c:	2020      	movs	r0, #32
2000397e:	9009      	str	r0, [sp, #36]	; 0x24
20003980:	e605      	b.n	2000358e <ee_printf+0x4d6>
  char *dig = digits;
20003982:	4ba6      	ldr	r3, [pc, #664]	; (20003c1c <ee_printf+0xb64>)
20003984:	e541      	b.n	2000340a <ee_printf+0x352>
      else if (n >= 10) 
20003986:	0018      	movs	r0, r3
20003988:	2b09      	cmp	r3, #9
2000398a:	dd7a      	ble.n	20003a82 <ee_printf+0x9ca>
        tmp[len++] = digits[n / 10];
2000398c:	210a      	movs	r1, #10
2000398e:	f000 f94b 	bl	20003c28 <____aeabi_idiv_veneer>
20003992:	4aa2      	ldr	r2, [pc, #648]	; (20003c1c <ee_printf+0xb64>)
20003994:	9905      	ldr	r1, [sp, #20]
20003996:	5c13      	ldrb	r3, [r2, r0]
20003998:	4658      	mov	r0, fp
2000399a:	5443      	strb	r3, [r0, r1]
        n = n % 10;
2000399c:	4640      	mov	r0, r8
2000399e:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
200039a0:	9207      	str	r2, [sp, #28]
        n = n % 10;
200039a2:	f000 f999 	bl	20003cd8 <____aeabi_idivmod_veneer>
        tmp[len++] = digits[n / 10];
200039a6:	3402      	adds	r4, #2
        n = n % 10;
200039a8:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
200039aa:	9405      	str	r4, [sp, #20]
200039ac:	e4c8      	b.n	20003340 <ee_printf+0x288>
      else if (n >= 10) 
200039ae:	0010      	movs	r0, r2
200039b0:	2a09      	cmp	r2, #9
200039b2:	dd63      	ble.n	20003a7c <ee_printf+0x9c4>
        tmp[len++] = digits[n / 10];
200039b4:	210a      	movs	r1, #10
200039b6:	f000 f937 	bl	20003c28 <____aeabi_idiv_veneer>
200039ba:	465a      	mov	r2, fp
200039bc:	4b97      	ldr	r3, [pc, #604]	; (20003c1c <ee_printf+0xb64>)
200039be:	9905      	ldr	r1, [sp, #20]
200039c0:	5c18      	ldrb	r0, [r3, r0]
200039c2:	9307      	str	r3, [sp, #28]
200039c4:	5450      	strb	r0, [r2, r1]
        n = n % 10;
200039c6:	4640      	mov	r0, r8
200039c8:	210a      	movs	r1, #10
200039ca:	f000 f985 	bl	20003cd8 <____aeabi_idivmod_veneer>
        tmp[len++] = digits[n / 10];
200039ce:	3402      	adds	r4, #2
        n = n % 10;
200039d0:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
200039d2:	9405      	str	r4, [sp, #20]
200039d4:	e481      	b.n	200032da <ee_printf+0x222>
      else if (n >= 10) 
200039d6:	2b09      	cmp	r3, #9
200039d8:	dd4d      	ble.n	20003a76 <ee_printf+0x9be>
        tmp[len++] = digits[n / 10];
200039da:	210a      	movs	r1, #10
200039dc:	f000 f924 	bl	20003c28 <____aeabi_idiv_veneer>
200039e0:	498e      	ldr	r1, [pc, #568]	; (20003c1c <ee_printf+0xb64>)
200039e2:	9a05      	ldr	r2, [sp, #20]
200039e4:	5c0b      	ldrb	r3, [r1, r0]
200039e6:	4658      	mov	r0, fp
200039e8:	9104      	str	r1, [sp, #16]
200039ea:	5483      	strb	r3, [r0, r2]
        n = n % 10;
200039ec:	210a      	movs	r1, #10
200039ee:	4640      	mov	r0, r8
200039f0:	f000 f972 	bl	20003cd8 <____aeabi_idivmod_veneer>
        tmp[len++] = digits[n / 10];
200039f4:	3402      	adds	r4, #2
        n = n % 10;
200039f6:	4688      	mov	r8, r1
        tmp[len++] = digits[n / 10];
200039f8:	9405      	str	r4, [sp, #20]
200039fa:	e7a5      	b.n	20003948 <ee_printf+0x890>
      else if (n >= 10) 
200039fc:	2b09      	cmp	r3, #9
200039fe:	dd34      	ble.n	20003a6a <ee_printf+0x9b2>
        tmp[len++] = digits[n / 10];
20003a00:	aa24      	add	r2, sp, #144	; 0x90
20003a02:	4693      	mov	fp, r2
20003a04:	210a      	movs	r1, #10
20003a06:	0018      	movs	r0, r3
20003a08:	f000 f90e 	bl	20003c28 <____aeabi_idiv_veneer>
20003a0c:	4659      	mov	r1, fp
20003a0e:	4b83      	ldr	r3, [pc, #524]	; (20003c1c <ee_printf+0xb64>)
20003a10:	5c1c      	ldrb	r4, [r3, r0]
        n = n % 10;
20003a12:	4640      	mov	r0, r8
        tmp[len++] = digits[n / 10];
20003a14:	700c      	strb	r4, [r1, #0]
        n = n % 10;
20003a16:	210a      	movs	r1, #10
        tmp[len++] = digits[n / 10];
20003a18:	9305      	str	r3, [sp, #20]
        n = n % 10;
20003a1a:	f000 f95d 	bl	20003cd8 <____aeabi_idivmod_veneer>
        tmp[len++] = digits[n / 10];
20003a1e:	2301      	movs	r3, #1
        n = n % 10;
20003a20:	4688      	mov	r8, r1
20003a22:	e574      	b.n	2000350e <ee_printf+0x456>
        if (!s) s = "<NULL>";
20003a24:	4b7e      	ldr	r3, [pc, #504]	; (20003c20 <ee_printf+0xb68>)
20003a26:	4698      	mov	r8, r3
20003a28:	e692      	b.n	20003750 <ee_printf+0x698>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
20003a2a:	1e7d      	subs	r5, r7, #1
20003a2c:	9504      	str	r5, [sp, #16]
20003a2e:	42a7      	cmp	r7, r4
20003a30:	dd41      	ble.n	20003ab6 <ee_printf+0x9fe>
20003a32:	1b3d      	subs	r5, r7, r4
20003a34:	2120      	movs	r1, #32
20003a36:	0030      	movs	r0, r6
20003a38:	002a      	movs	r2, r5
20003a3a:	f000 f925 	bl	20003c88 <__memset_veneer>
20003a3e:	9904      	ldr	r1, [sp, #16]
20003a40:	1be7      	subs	r7, r4, r7
20003a42:	468c      	mov	ip, r1
20003a44:	1976      	adds	r6, r6, r5
20003a46:	4467      	add	r7, ip
20003a48:	e6dd      	b.n	20003806 <ee_printf+0x74e>
        if (!(flags & LEFT)) while (--field_width > 0) *str++ = ' ';
20003a4a:	3f01      	subs	r7, #1
20003a4c:	2f00      	cmp	r7, #0
20003a4e:	dd34      	ble.n	20003aba <ee_printf+0xa02>
20003a50:	003a      	movs	r2, r7
20003a52:	0030      	movs	r0, r6
20003a54:	2120      	movs	r1, #32
20003a56:	19f6      	adds	r6, r6, r7
20003a58:	f000 f916 	bl	20003c88 <__memset_veneer>
20003a5c:	2700      	movs	r7, #0
20003a5e:	e732      	b.n	200038c6 <ee_printf+0x80e>
        flags |= SIGN;
20003a60:	2302      	movs	r3, #2
20003a62:	46c1      	mov	r9, r8
    base = 10;
20003a64:	220a      	movs	r2, #10
        flags |= SIGN;
20003a66:	431d      	orrs	r5, r3
    if (qualifier == 'l')
20003a68:	e564      	b.n	20003534 <ee_printf+0x47c>
20003a6a:	496c      	ldr	r1, [pc, #432]	; (20003c1c <ee_printf+0xb64>)
20003a6c:	a824      	add	r0, sp, #144	; 0x90
  len = 0;
20003a6e:	2300      	movs	r3, #0
20003a70:	4683      	mov	fp, r0
20003a72:	9105      	str	r1, [sp, #20]
20003a74:	e54b      	b.n	2000350e <ee_printf+0x456>
20003a76:	4c69      	ldr	r4, [pc, #420]	; (20003c1c <ee_printf+0xb64>)
20003a78:	9404      	str	r4, [sp, #16]
20003a7a:	e765      	b.n	20003948 <ee_printf+0x890>
20003a7c:	4c67      	ldr	r4, [pc, #412]	; (20003c1c <ee_printf+0xb64>)
20003a7e:	9407      	str	r4, [sp, #28]
20003a80:	e42b      	b.n	200032da <ee_printf+0x222>
20003a82:	4c66      	ldr	r4, [pc, #408]	; (20003c1c <ee_printf+0xb64>)
20003a84:	9407      	str	r4, [sp, #28]
20003a86:	e45b      	b.n	20003340 <ee_printf+0x288>
  sign = 0;
20003a88:	2200      	movs	r2, #0
    else if (flags & SPACE)
20003a8a:	9b05      	ldr	r3, [sp, #20]
  sign = 0;
20003a8c:	9208      	str	r2, [sp, #32]
    else if (flags & SPACE)
20003a8e:	071b      	lsls	r3, r3, #28
20003a90:	d400      	bmi.n	20003a94 <ee_printf+0x9dc>
20003a92:	e58c      	b.n	200035ae <ee_printf+0x4f6>
      sign = ' ';
20003a94:	2520      	movs	r5, #32
      size--;
20003a96:	3f01      	subs	r7, #1
      sign = ' ';
20003a98:	9508      	str	r5, [sp, #32]
20003a9a:	e588      	b.n	200035ae <ee_printf+0x4f6>
    if (*fmt == 'l' || *fmt == 'L')
20003a9c:	46c1      	mov	r9, r8
20003a9e:	f7ff fbe2 	bl	20003266 <ee_printf+0x1ae>
        flags |= UPPERCASE;
20003aa2:	2040      	movs	r0, #64	; 0x40
20003aa4:	46c1      	mov	r9, r8
        base = 16;
20003aa6:	2210      	movs	r2, #16
        flags |= UPPERCASE;
20003aa8:	4305      	orrs	r5, r0
    if (qualifier == 'l')
20003aaa:	e543      	b.n	20003534 <ee_printf+0x47c>
        flags |= UPPERCASE;
20003aac:	2140      	movs	r1, #64	; 0x40
20003aae:	46c1      	mov	r9, r8
20003ab0:	430d      	orrs	r5, r1
        if (qualifier == 'l')
20003ab2:	f7ff fbd8 	bl	20003266 <ee_printf+0x1ae>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
20003ab6:	9f04      	ldr	r7, [sp, #16]
20003ab8:	e6a5      	b.n	20003806 <ee_printf+0x74e>
        *str++ = (unsigned char) va_arg(args, int);
20003aba:	465d      	mov	r5, fp
20003abc:	cd10      	ldmia	r5!, {r4}
20003abe:	1c70      	adds	r0, r6, #1
20003ac0:	7034      	strb	r4, [r6, #0]
  for (str = buf; *fmt; fmt++)
20003ac2:	464e      	mov	r6, r9
20003ac4:	46ab      	mov	fp, r5
20003ac6:	7873      	ldrb	r3, [r6, #1]
20003ac8:	1c74      	adds	r4, r6, #1
20003aca:	0006      	movs	r6, r0
20003acc:	f7ff fb0f 	bl	200030ee <ee_printf+0x36>
20003ad0:	002b      	movs	r3, r5
20003ad2:	e585      	b.n	200035e0 <ee_printf+0x528>
  return sc - s;
20003ad4:	1b64      	subs	r4, r4, r5
  size -= n;
20003ad6:	1b3f      	subs	r7, r7, r4
20003ad8:	e5e4      	b.n	200036a4 <ee_printf+0x5ec>
      num = -num;
20003ada:	2180      	movs	r1, #128	; 0x80
20003adc:	060a      	lsls	r2, r1, #24
20003ade:	4694      	mov	ip, r2
      sign = '-';
20003ae0:	232d      	movs	r3, #45	; 0x2d
      num = -num;
20003ae2:	44e0      	add	r8, ip
      size--;
20003ae4:	3f01      	subs	r7, #1
      sign = '-';
20003ae6:	9308      	str	r3, [sp, #32]
20003ae8:	e561      	b.n	200035ae <ee_printf+0x4f6>
  *buffer = '\0';
20003aea:	705c      	strb	r4, [r3, #1]
  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
20003aec:	9c05      	ldr	r4, [sp, #20]
20003aee:	06a3      	lsls	r3, r4, #26
20003af0:	d400      	bmi.n	20003af4 <ee_printf+0xa3c>
20003af2:	e5a2      	b.n	2000363a <ee_printf+0x582>
  while (*buffer)
20003af4:	7828      	ldrb	r0, [r5, #0]
20003af6:	002c      	movs	r4, r5
20003af8:	2800      	cmp	r0, #0
20003afa:	d04d      	beq.n	20003b98 <ee_printf+0xae0>
    if (*buffer == 'e' || *buffer == 'E') break;
20003afc:	2120      	movs	r1, #32
20003afe:	e003      	b.n	20003b08 <ee_printf+0xa50>
  while (*buffer)
20003b00:	7860      	ldrb	r0, [r4, #1]
    buffer++;
20003b02:	3401      	adds	r4, #1
  while (*buffer)
20003b04:	2800      	cmp	r0, #0
20003b06:	d047      	beq.n	20003b98 <ee_printf+0xae0>
    if (*buffer == '.') return;
20003b08:	282e      	cmp	r0, #46	; 0x2e
20003b0a:	d100      	bne.n	20003b0e <ee_printf+0xa56>
20003b0c:	e599      	b.n	20003642 <ee_printf+0x58a>
    if (*buffer == 'e' || *buffer == 'E') break;
20003b0e:	4388      	bics	r0, r1
20003b10:	2845      	cmp	r0, #69	; 0x45
20003b12:	d1f5      	bne.n	20003b00 <ee_printf+0xa48>
  for (sc = s; *sc != '\0' && count--; ++sc);
20003b14:	7820      	ldrb	r0, [r4, #0]
20003b16:	1c61      	adds	r1, r4, #1
20003b18:	0022      	movs	r2, r4
20003b1a:	31ff      	adds	r1, #255	; 0xff
20003b1c:	2800      	cmp	r0, #0
20003b1e:	d029      	beq.n	20003b74 <ee_printf+0xabc>
20003b20:	7850      	ldrb	r0, [r2, #1]
20003b22:	3201      	adds	r2, #1
20003b24:	0013      	movs	r3, r2
20003b26:	2800      	cmp	r0, #0
20003b28:	d01d      	beq.n	20003b66 <ee_printf+0xaae>
20003b2a:	7850      	ldrb	r0, [r2, #1]
20003b2c:	3201      	adds	r2, #1
20003b2e:	2800      	cmp	r0, #0
20003b30:	d019      	beq.n	20003b66 <ee_printf+0xaae>
20003b32:	7898      	ldrb	r0, [r3, #2]
20003b34:	1c9a      	adds	r2, r3, #2
20003b36:	2800      	cmp	r0, #0
20003b38:	d015      	beq.n	20003b66 <ee_printf+0xaae>
20003b3a:	78d8      	ldrb	r0, [r3, #3]
20003b3c:	1cda      	adds	r2, r3, #3
20003b3e:	2800      	cmp	r0, #0
20003b40:	d011      	beq.n	20003b66 <ee_printf+0xaae>
20003b42:	7918      	ldrb	r0, [r3, #4]
20003b44:	1d1a      	adds	r2, r3, #4
20003b46:	2800      	cmp	r0, #0
20003b48:	d00d      	beq.n	20003b66 <ee_printf+0xaae>
20003b4a:	7958      	ldrb	r0, [r3, #5]
20003b4c:	1d5a      	adds	r2, r3, #5
20003b4e:	2800      	cmp	r0, #0
20003b50:	d009      	beq.n	20003b66 <ee_printf+0xaae>
20003b52:	7998      	ldrb	r0, [r3, #6]
20003b54:	1d9a      	adds	r2, r3, #6
20003b56:	2800      	cmp	r0, #0
20003b58:	d005      	beq.n	20003b66 <ee_printf+0xaae>
20003b5a:	1dda      	adds	r2, r3, #7
20003b5c:	79db      	ldrb	r3, [r3, #7]
20003b5e:	2b00      	cmp	r3, #0
20003b60:	d001      	beq.n	20003b66 <ee_printf+0xaae>
20003b62:	4291      	cmp	r1, r2
20003b64:	d1dc      	bne.n	20003b20 <ee_printf+0xa68>
  return sc - s;
20003b66:	1b12      	subs	r2, r2, r4
    while (n > 0) 
20003b68:	2a00      	cmp	r2, #0
20003b6a:	dd03      	ble.n	20003b74 <ee_printf+0xabc>
      buffer[n + 1] = buffer[n];
20003b6c:	1c61      	adds	r1, r4, #1
20003b6e:	1ca0      	adds	r0, r4, #2
20003b70:	f000 f8a2 	bl	20003cb8 <__memmove_veneer>
    *buffer = '.';
20003b74:	212e      	movs	r1, #46	; 0x2e
20003b76:	7021      	strb	r1, [r4, #0]
20003b78:	e55f      	b.n	2000363a <ee_printf+0x582>
  for (i = 0; i < len; ++i) *str++ = tmp[i];
20003b7a:	0006      	movs	r6, r0
20003b7c:	e414      	b.n	200033a8 <ee_printf+0x2f0>
        if (!(flags & LEFT)) while (len < field_width--) *str++ = ' ';
20003b7e:	2110      	movs	r1, #16
20003b80:	000c      	movs	r4, r1
20003b82:	402c      	ands	r4, r5
20003b84:	4229      	tst	r1, r5
20003b86:	d100      	bne.n	20003b8a <ee_printf+0xad2>
20003b88:	e74f      	b.n	20003a2a <ee_printf+0x972>
  return sc - s;
20003b8a:	2400      	movs	r4, #0
20003b8c:	e689      	b.n	200038a2 <ee_printf+0x7ea>
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
20003b8e:	002f      	movs	r7, r5
20003b90:	f7ff fbfc 	bl	2000338c <ee_printf+0x2d4>
  for (i = 0; i < len; ++i) *str++ = tmp[i];
20003b94:	0006      	movs	r6, r0
20003b96:	e494      	b.n	200034c2 <ee_printf+0x40a>
    *buffer++ = '.';
20003b98:	232e      	movs	r3, #46	; 0x2e
    *buffer = '\0';
20003b9a:	2200      	movs	r2, #0
    *buffer++ = '.';
20003b9c:	7023      	strb	r3, [r4, #0]
    *buffer = '\0';
20003b9e:	7062      	strb	r2, [r4, #1]
20003ba0:	e54b      	b.n	2000363a <ee_printf+0x582>
  if (!(flags & LEFT)) while (size-- > 0) *str++ = c;
20003ba2:	0007      	movs	r7, r0
20003ba4:	e5a1      	b.n	200036ea <ee_printf+0x632>
      *buffer++ = '0';
20003ba6:	2230      	movs	r2, #48	; 0x30
20003ba8:	701a      	strb	r2, [r3, #0]
      if (precision > 0)
20003baa:	2c00      	cmp	r4, #0
20003bac:	d09d      	beq.n	20003aea <ee_printf+0xa32>
        *buffer++ = '.';
20003bae:	1c98      	adds	r0, r3, #2
20003bb0:	212e      	movs	r1, #46	; 0x2e
20003bb2:	4680      	mov	r8, r0
20003bb4:	7059      	strb	r1, [r3, #1]
        for (pos = 0; pos < precision; pos++) *buffer++ = '0';
20003bb6:	0022      	movs	r2, r4
20003bb8:	2130      	movs	r1, #48	; 0x30
20003bba:	f000 f865 	bl	20003c88 <__memset_veneer>
  *buffer = '\0';
20003bbe:	4643      	mov	r3, r8
20003bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
20003bc2:	551a      	strb	r2, [r3, r4]
  if ((flags & HEX_PREP) && precision == 0) decimal_point(tmp);
20003bc4:	e539      	b.n	2000363a <ee_printf+0x582>
  if (!(flags & (ZEROPAD | LEFT))) while (size-- > 0) *str++ = ' ';
20003bc6:	0017      	movs	r7, r2
20003bc8:	e57b      	b.n	200036c2 <ee_printf+0x60a>
  if (!(type & LEFT)) while (len < size--) *str++ = ' ';
20003bca:	002f      	movs	r7, r5
20003bcc:	e469      	b.n	200034a2 <ee_printf+0x3ea>
        *buffer++ = '.';
20003bce:	212e      	movs	r1, #46	; 0x2e
        *buffer++ = '0';
20003bd0:	3202      	adds	r2, #2
20003bd2:	701a      	strb	r2, [r3, #0]
        *buffer++ = '.';
20003bd4:	1c9a      	adds	r2, r3, #2
20003bd6:	7059      	strb	r1, [r3, #1]
20003bd8:	9204      	str	r2, [sp, #16]
        for (pos = 0; pos < -decpt; pos++) *buffer++ = '0';
20003bda:	4243      	negs	r3, r0
20003bdc:	2800      	cmp	r0, #0
20003bde:	d00e      	beq.n	20003bfe <ee_printf+0xb46>
20003be0:	392d      	subs	r1, #45	; 0x2d
20003be2:	910b      	str	r1, [sp, #44]	; 0x2c
20003be4:	2800      	cmp	r0, #0
20003be6:	da00      	bge.n	20003bea <ee_printf+0xb32>
20003be8:	930b      	str	r3, [sp, #44]	; 0x2c
20003bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
20003bec:	2130      	movs	r1, #48	; 0x30
20003bee:	9804      	ldr	r0, [sp, #16]
20003bf0:	f000 f84a 	bl	20003c88 <__memset_veneer>
20003bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
20003bf6:	9804      	ldr	r0, [sp, #16]
20003bf8:	4694      	mov	ip, r2
20003bfa:	4460      	add	r0, ip
20003bfc:	9004      	str	r0, [sp, #16]
        while (*digits) *buffer++ = *digits++;
20003bfe:	46a4      	mov	ip, r4
20003c00:	4641      	mov	r1, r8
20003c02:	9b04      	ldr	r3, [sp, #16]
20003c04:	980a      	ldr	r0, [sp, #40]	; 0x28
20003c06:	001a      	movs	r2, r3
20003c08:	3101      	adds	r1, #1
20003c0a:	7010      	strb	r0, [r2, #0]
20003c0c:	7808      	ldrb	r0, [r1, #0]
20003c0e:	3301      	adds	r3, #1
20003c10:	2800      	cmp	r0, #0
20003c12:	d1f8      	bne.n	20003c06 <ee_printf+0xb4e>
20003c14:	0018      	movs	r0, r3
20003c16:	4661      	mov	r1, ip
20003c18:	e507      	b.n	2000362a <ee_printf+0x572>
20003c1a:	46c0      	nop			; (mov r8, r8)
20003c1c:	20002dd8 	.word	0x20002dd8
20003c20:	200030b0 	.word	0x200030b0
20003c24:	00000000 	.word	0x00000000

20003c28 <____aeabi_idiv_veneer>:
20003c28:	b401      	push	{r0}
20003c2a:	4802      	ldr	r0, [pc, #8]	; (20003c34 <____aeabi_idiv_veneer+0xc>)
20003c2c:	4684      	mov	ip, r0
20003c2e:	bc01      	pop	{r0}
20003c30:	4760      	bx	ip
20003c32:	bf00      	nop
20003c34:	00004365 	.word	0x00004365

20003c38 <____aeabi_uidiv_veneer>:
20003c38:	b401      	push	{r0}
20003c3a:	4802      	ldr	r0, [pc, #8]	; (20003c44 <____aeabi_uidiv_veneer+0xc>)
20003c3c:	4684      	mov	ip, r0
20003c3e:	bc01      	pop	{r0}
20003c40:	4760      	bx	ip
20003c42:	bf00      	nop
20003c44:	00004251 	.word	0x00004251

20003c48 <__rt_tick_get_veneer>:
20003c48:	b401      	push	{r0}
20003c4a:	4802      	ldr	r0, [pc, #8]	; (20003c54 <__rt_tick_get_veneer+0xc>)
20003c4c:	4684      	mov	ip, r0
20003c4e:	bc01      	pop	{r0}
20003c50:	4760      	bx	ip
20003c52:	bf00      	nop
20003c54:	00009219 	.word	0x00009219

20003c58 <__fcvtbuf_veneer>:
20003c58:	b401      	push	{r0}
20003c5a:	4802      	ldr	r0, [pc, #8]	; (20003c64 <__fcvtbuf_veneer+0xc>)
20003c5c:	4684      	mov	ip, r0
20003c5e:	bc01      	pop	{r0}
20003c60:	4760      	bx	ip
20003c62:	bf00      	nop
20003c64:	0000dcb5 	.word	0x0000dcb5

20003c68 <__rt_free_veneer>:
20003c68:	b401      	push	{r0}
20003c6a:	4802      	ldr	r0, [pc, #8]	; (20003c74 <__rt_free_veneer+0xc>)
20003c6c:	4684      	mov	ip, r0
20003c6e:	bc01      	pop	{r0}
20003c70:	4760      	bx	ip
20003c72:	bf00      	nop
20003c74:	0000a9c9 	.word	0x0000a9c9

20003c78 <__rt_kputs_veneer>:
20003c78:	b401      	push	{r0}
20003c7a:	4802      	ldr	r0, [pc, #8]	; (20003c84 <__rt_kputs_veneer+0xc>)
20003c7c:	4684      	mov	ip, r0
20003c7e:	bc01      	pop	{r0}
20003c80:	4760      	bx	ip
20003c82:	bf00      	nop
20003c84:	0000a1f5 	.word	0x0000a1f5

20003c88 <__memset_veneer>:
20003c88:	b401      	push	{r0}
20003c8a:	4802      	ldr	r0, [pc, #8]	; (20003c94 <__memset_veneer+0xc>)
20003c8c:	4684      	mov	ip, r0
20003c8e:	bc01      	pop	{r0}
20003c90:	4760      	bx	ip
20003c92:	bf00      	nop
20003c94:	0000ebe5 	.word	0x0000ebe5

20003c98 <____aeabi_uidivmod_veneer>:
20003c98:	b401      	push	{r0}
20003c9a:	4802      	ldr	r0, [pc, #8]	; (20003ca4 <____aeabi_uidivmod_veneer+0xc>)
20003c9c:	4684      	mov	ip, r0
20003c9e:	bc01      	pop	{r0}
20003ca0:	4760      	bx	ip
20003ca2:	bf00      	nop
20003ca4:	0000435d 	.word	0x0000435d

20003ca8 <__rt_malloc_veneer>:
20003ca8:	b401      	push	{r0}
20003caa:	4802      	ldr	r0, [pc, #8]	; (20003cb4 <__rt_malloc_veneer+0xc>)
20003cac:	4684      	mov	ip, r0
20003cae:	bc01      	pop	{r0}
20003cb0:	4760      	bx	ip
20003cb2:	bf00      	nop
20003cb4:	0000a689 	.word	0x0000a689

20003cb8 <__memmove_veneer>:
20003cb8:	b401      	push	{r0}
20003cba:	4802      	ldr	r0, [pc, #8]	; (20003cc4 <__memmove_veneer+0xc>)
20003cbc:	4684      	mov	ip, r0
20003cbe:	bc01      	pop	{r0}
20003cc0:	4760      	bx	ip
20003cc2:	bf00      	nop
20003cc4:	0000eb39 	.word	0x0000eb39

20003cc8 <__memcpy_veneer>:
20003cc8:	b401      	push	{r0}
20003cca:	4802      	ldr	r0, [pc, #8]	; (20003cd4 <__memcpy_veneer+0xc>)
20003ccc:	4684      	mov	ip, r0
20003cce:	bc01      	pop	{r0}
20003cd0:	4760      	bx	ip
20003cd2:	bf00      	nop
20003cd4:	0000ea95 	.word	0x0000ea95

20003cd8 <____aeabi_idivmod_veneer>:
20003cd8:	b401      	push	{r0}
20003cda:	4802      	ldr	r0, [pc, #8]	; (20003ce4 <____aeabi_idivmod_veneer+0xc>)
20003cdc:	4684      	mov	ip, r0
20003cde:	bc01      	pop	{r0}
20003ce0:	4760      	bx	ip
20003ce2:	bf00      	nop
20003ce4:	00004531 	.word	0x00004531

20003ce8 <____aeabi_dcmplt_veneer>:
20003ce8:	b401      	push	{r0}
20003cea:	4802      	ldr	r0, [pc, #8]	; (20003cf4 <____aeabi_dcmplt_veneer+0xc>)
20003cec:	4684      	mov	ip, r0
20003cee:	bc01      	pop	{r0}
20003cf0:	4760      	bx	ip
20003cf2:	bf00      	nop
20003cf4:	00004569 	.word	0x00004569
20003cf8:	2000317e 	.word	0x2000317e
20003cfc:	2000311e 	.word	0x2000311e
20003d00:	2000311e 	.word	0x2000311e
20003d04:	20003176 	.word	0x20003176
20003d08:	2000311e 	.word	0x2000311e
20003d0c:	2000311e 	.word	0x2000311e
20003d10:	2000311e 	.word	0x2000311e
20003d14:	2000311e 	.word	0x2000311e
20003d18:	2000311e 	.word	0x2000311e
20003d1c:	2000311e 	.word	0x2000311e
20003d20:	2000311e 	.word	0x2000311e
20003d24:	20003170 	.word	0x20003170
20003d28:	2000311e 	.word	0x2000311e
20003d2c:	20003168 	.word	0x20003168
20003d30:	2000311e 	.word	0x2000311e
20003d34:	2000311e 	.word	0x2000311e
20003d38:	20003160 	.word	0x20003160
20003d3c:	20003aac 	.word	0x20003aac
20003d40:	20003184 	.word	0x20003184
20003d44:	20003184 	.word	0x20003184
20003d48:	20003184 	.word	0x20003184
20003d4c:	20003184 	.word	0x20003184
20003d50:	20003184 	.word	0x20003184
20003d54:	20003184 	.word	0x20003184
20003d58:	20003184 	.word	0x20003184
20003d5c:	20003184 	.word	0x20003184
20003d60:	20003184 	.word	0x20003184
20003d64:	20003184 	.word	0x20003184
20003d68:	20003184 	.word	0x20003184
20003d6c:	20003184 	.word	0x20003184
20003d70:	20003184 	.word	0x20003184
20003d74:	20003184 	.word	0x20003184
20003d78:	20003184 	.word	0x20003184
20003d7c:	20003184 	.word	0x20003184
20003d80:	20003184 	.word	0x20003184
20003d84:	20003184 	.word	0x20003184
20003d88:	20003184 	.word	0x20003184
20003d8c:	20003184 	.word	0x20003184
20003d90:	20003184 	.word	0x20003184
20003d94:	20003184 	.word	0x20003184
20003d98:	20003aa2 	.word	0x20003aa2
20003d9c:	20003184 	.word	0x20003184
20003da0:	20003184 	.word	0x20003184
20003da4:	20003184 	.word	0x20003184
20003da8:	20003184 	.word	0x20003184
20003dac:	20003184 	.word	0x20003184
20003db0:	20003184 	.word	0x20003184
20003db4:	20003184 	.word	0x20003184
20003db8:	20003184 	.word	0x20003184
20003dbc:	20003a9c 	.word	0x20003a9c
20003dc0:	20003184 	.word	0x20003184
20003dc4:	200038be 	.word	0x200038be
20003dc8:	20003a60 	.word	0x20003a60
20003dcc:	20003184 	.word	0x20003184
20003dd0:	20003550 	.word	0x20003550
20003dd4:	20003184 	.word	0x20003184
20003dd8:	20003184 	.word	0x20003184
20003ddc:	20003a60 	.word	0x20003a60
20003de0:	20003184 	.word	0x20003184
20003de4:	20003184 	.word	0x20003184
20003de8:	20003184 	.word	0x20003184
20003dec:	20003184 	.word	0x20003184
20003df0:	20003184 	.word	0x20003184
20003df4:	2000370e 	.word	0x2000370e
20003df8:	20003714 	.word	0x20003714
20003dfc:	20003184 	.word	0x20003184
20003e00:	20003184 	.word	0x20003184
20003e04:	20003738 	.word	0x20003738
20003e08:	20003184 	.word	0x20003184
20003e0c:	200038f8 	.word	0x200038f8
20003e10:	20003184 	.word	0x20003184
20003e14:	20003184 	.word	0x20003184
20003e18:	200038f2 	.word	0x200038f2
20003e1c:	2000325c 	.word	0x2000325c
20003e20:	20003188 	.word	0x20003188
20003e24:	20003188 	.word	0x20003188
20003e28:	20003188 	.word	0x20003188
20003e2c:	20003188 	.word	0x20003188
20003e30:	20003188 	.word	0x20003188
20003e34:	20003188 	.word	0x20003188
20003e38:	20003188 	.word	0x20003188
20003e3c:	20003188 	.word	0x20003188
20003e40:	20003188 	.word	0x20003188
20003e44:	20003188 	.word	0x20003188
20003e48:	20003188 	.word	0x20003188
20003e4c:	20003188 	.word	0x20003188
20003e50:	20003188 	.word	0x20003188
20003e54:	20003188 	.word	0x20003188
20003e58:	20003188 	.word	0x20003188
20003e5c:	20003188 	.word	0x20003188
20003e60:	20003188 	.word	0x20003188
20003e64:	20003188 	.word	0x20003188
20003e68:	20003188 	.word	0x20003188
20003e6c:	20003188 	.word	0x20003188
20003e70:	20003188 	.word	0x20003188
20003e74:	20003188 	.word	0x20003188
20003e78:	200038ea 	.word	0x200038ea
20003e7c:	20003188 	.word	0x20003188
20003e80:	20003188 	.word	0x20003188
20003e84:	20003188 	.word	0x20003188
20003e88:	20003188 	.word	0x20003188
20003e8c:	20003188 	.word	0x20003188
20003e90:	20003188 	.word	0x20003188
20003e94:	20003188 	.word	0x20003188
20003e98:	20003188 	.word	0x20003188
20003e9c:	20003260 	.word	0x20003260
20003ea0:	20003188 	.word	0x20003188
20003ea4:	200038c0 	.word	0x200038c0
20003ea8:	2000352e 	.word	0x2000352e
20003eac:	20003188 	.word	0x20003188
20003eb0:	20003552 	.word	0x20003552
20003eb4:	20003188 	.word	0x20003188
20003eb8:	20003188 	.word	0x20003188
20003ebc:	2000352e 	.word	0x2000352e
20003ec0:	20003188 	.word	0x20003188
20003ec4:	20003188 	.word	0x20003188
20003ec8:	20003188 	.word	0x20003188
20003ecc:	20003188 	.word	0x20003188
20003ed0:	20003188 	.word	0x20003188
20003ed4:	20003710 	.word	0x20003710
20003ed8:	20003716 	.word	0x20003716
20003edc:	20003188 	.word	0x20003188
20003ee0:	20003188 	.word	0x20003188
20003ee4:	2000373a 	.word	0x2000373a
20003ee8:	20003188 	.word	0x20003188
20003eec:	200038fa 	.word	0x200038fa
20003ef0:	20003188 	.word	0x20003188
20003ef4:	20003188 	.word	0x20003188
20003ef8:	200038f4 	.word	0x200038f4

Disassembly of section .ddr.text:

000040b0 <rt_hw_interrupt_disable>:
    40b0:	f3ef 8010 	mrs	r0, PRIMASK
    40b4:	b672      	cpsid	i
    40b6:	4770      	bx	lr

000040b8 <rt_hw_interrupt_enable>:
    40b8:	f380 8810 	msr	PRIMASK, r0
    40bc:	4770      	bx	lr

000040be <rt_hw_context_switch>:
    40be:	4a3a      	ldr	r2, [pc, #232]	; (41a8 <rt_hw_interrupt_check+0x6>)
    40c0:	6813      	ldr	r3, [r2, #0]
    40c2:	2b01      	cmp	r3, #1
    40c4:	d003      	beq.n	40ce <_reswitch>
    40c6:	2301      	movs	r3, #1
    40c8:	6013      	str	r3, [r2, #0]
    40ca:	4a38      	ldr	r2, [pc, #224]	; (41ac <rt_hw_interrupt_check+0xa>)
    40cc:	6010      	str	r0, [r2, #0]

000040ce <_reswitch>:
    40ce:	4a38      	ldr	r2, [pc, #224]	; (41b0 <rt_hw_interrupt_check+0xe>)
    40d0:	6011      	str	r1, [r2, #0]
    40d2:	4838      	ldr	r0, [pc, #224]	; (41b4 <rt_hw_interrupt_check+0x12>)
    40d4:	4938      	ldr	r1, [pc, #224]	; (41b8 <rt_hw_interrupt_check+0x16>)
    40d6:	6001      	str	r1, [r0, #0]
    40d8:	4770      	bx	lr

000040da <PendSV_Handler>:
    40da:	f3ef 8210 	mrs	r2, PRIMASK
    40de:	b672      	cpsid	i
    40e0:	4831      	ldr	r0, [pc, #196]	; (41a8 <rt_hw_interrupt_check+0x6>)
    40e2:	6801      	ldr	r1, [r0, #0]
    40e4:	2900      	cmp	r1, #0
    40e6:	d01d      	beq.n	4124 <pendsv_exit>
    40e8:	2100      	movs	r1, #0
    40ea:	6001      	str	r1, [r0, #0]
    40ec:	482f      	ldr	r0, [pc, #188]	; (41ac <rt_hw_interrupt_check+0xa>)
    40ee:	6801      	ldr	r1, [r0, #0]
    40f0:	2900      	cmp	r1, #0
    40f2:	d00a      	beq.n	410a <switch_to_thread>
    40f4:	f3ef 8109 	mrs	r1, PSP
    40f8:	3920      	subs	r1, #32
    40fa:	6800      	ldr	r0, [r0, #0]
    40fc:	6001      	str	r1, [r0, #0]
    40fe:	c1f0      	stmia	r1!, {r4, r5, r6, r7}
    4100:	4644      	mov	r4, r8
    4102:	464d      	mov	r5, r9
    4104:	4656      	mov	r6, sl
    4106:	465f      	mov	r7, fp
    4108:	c1f0      	stmia	r1!, {r4, r5, r6, r7}

0000410a <switch_to_thread>:
    410a:	4929      	ldr	r1, [pc, #164]	; (41b0 <rt_hw_interrupt_check+0xe>)
    410c:	6809      	ldr	r1, [r1, #0]
    410e:	6809      	ldr	r1, [r1, #0]
    4110:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    4112:	b4f0      	push	{r4, r5, r6, r7}
    4114:	c9f0      	ldmia	r1!, {r4, r5, r6, r7}
    4116:	46a0      	mov	r8, r4
    4118:	46a9      	mov	r9, r5
    411a:	46b2      	mov	sl, r6
    411c:	46bb      	mov	fp, r7
    411e:	bcf0      	pop	{r4, r5, r6, r7}
    4120:	f381 8809 	msr	PSP, r1

00004124 <pendsv_exit>:
    4124:	f382 8810 	msr	PRIMASK, r2
    4128:	2004      	movs	r0, #4
    412a:	4240      	negs	r0, r0
    412c:	4700      	bx	r0

0000412e <rt_hw_context_switch_to>:
    412e:	4920      	ldr	r1, [pc, #128]	; (41b0 <rt_hw_interrupt_check+0xe>)
    4130:	6008      	str	r0, [r1, #0]
    4132:	491e      	ldr	r1, [pc, #120]	; (41ac <rt_hw_interrupt_check+0xa>)
    4134:	2000      	movs	r0, #0
    4136:	6008      	str	r0, [r1, #0]
    4138:	491b      	ldr	r1, [pc, #108]	; (41a8 <rt_hw_interrupt_check+0x6>)
    413a:	2001      	movs	r0, #1
    413c:	6008      	str	r0, [r1, #0]
    413e:	481f      	ldr	r0, [pc, #124]	; (41bc <rt_hw_interrupt_check+0x1a>)
    4140:	491f      	ldr	r1, [pc, #124]	; (41c0 <rt_hw_interrupt_check+0x1e>)
    4142:	6802      	ldr	r2, [r0, #0]
    4144:	4311      	orrs	r1, r2
    4146:	6001      	str	r1, [r0, #0]
    4148:	481a      	ldr	r0, [pc, #104]	; (41b4 <rt_hw_interrupt_check+0x12>)
    414a:	491b      	ldr	r1, [pc, #108]	; (41b8 <rt_hw_interrupt_check+0x16>)
    414c:	6001      	str	r1, [r0, #0]
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	481c      	ldr	r0, [pc, #112]	; (41c4 <rt_hw_interrupt_check+0x22>)
    4152:	6800      	ldr	r0, [r0, #0]
    4154:	6800      	ldr	r0, [r0, #0]
    4156:	46c0      	nop			; (mov r8, r8)
    4158:	f380 8808 	msr	MSP, r0
    415c:	b662      	cpsie	i

0000415e <rt_hw_interrupt_thread_switch>:
    415e:	4770      	bx	lr
    4160:	46c0      	nop			; (mov r8, r8)

00004162 <HardFault_Handler>:
    4162:	f3ef 8008 	mrs	r0, MSP
    4166:	4671      	mov	r1, lr
    4168:	2204      	movs	r2, #4
    416a:	4211      	tst	r1, r2
    416c:	d001      	beq.n	4172 <_get_sp_done>
    416e:	f3ef 8009 	mrs	r0, PSP

00004172 <_get_sp_done>:
    4172:	3824      	subs	r0, #36	; 0x24
    4174:	4673      	mov	r3, lr
    4176:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
    4178:	4643      	mov	r3, r8
    417a:	464c      	mov	r4, r9
    417c:	4655      	mov	r5, sl
    417e:	465e      	mov	r6, fp
    4180:	c078      	stmia	r0!, {r3, r4, r5, r6}
    4182:	3824      	subs	r0, #36	; 0x24
    4184:	4211      	tst	r1, r2
    4186:	d002      	beq.n	418e <_update_msp>
    4188:	f380 8809 	msr	PSP, r0
    418c:	e001      	b.n	4192 <_update_done>

0000418e <_update_msp>:
    418e:	f380 8808 	msr	MSP, r0

00004192 <_update_done>:
    4192:	b500      	push	{lr}
    4194:	f007 fab8 	bl	b708 <rt_hw_hard_fault_exception>
    4198:	bc02      	pop	{r1}
    419a:	2204      	movs	r2, #4
    419c:	4311      	orrs	r1, r2
    419e:	468e      	mov	lr, r1
    41a0:	4770      	bx	lr

000041a2 <rt_hw_interrupt_check>:
    41a2:	f3ef 8005 	mrs	r0, IPSR
    41a6:	4770      	bx	lr
    41a8:	000186b4 	.word	0x000186b4
    41ac:	000186ac 	.word	0x000186ac
    41b0:	000186b0 	.word	0x000186b0
    41b4:	e000ed04 	.word	0xe000ed04
    41b8:	10000000 	.word	0x10000000
    41bc:	e000ed20 	.word	0xe000ed20
    41c0:	00ff0000 	.word	0x00ff0000
    41c4:	e000ed08 	.word	0xe000ed08

000041c8 <strcmp>:
    41c8:	4602      	mov	r2, r0
    41ca:	b570      	push	{r4, r5, r6, lr}
    41cc:	430a      	orrs	r2, r1
    41ce:	0792      	lsls	r2, r2, #30
    41d0:	d12a      	bne.n	4228 <strcmp+0x60>
    41d2:	4d1e      	ldr	r5, [pc, #120]	; (424c <strcmp+0x84>)
    41d4:	01ee      	lsls	r6, r5, #7
    41d6:	c804      	ldmia	r0!, {r2}
    41d8:	c908      	ldmia	r1!, {r3}
    41da:	1b54      	subs	r4, r2, r5
    41dc:	4394      	bics	r4, r2
    41de:	4034      	ands	r4, r6
    41e0:	d017      	beq.n	4212 <strcmp+0x4a>
    41e2:	b2d0      	uxtb	r0, r2
    41e4:	b2d9      	uxtb	r1, r3
    41e6:	1a40      	subs	r0, r0, r1
    41e8:	0621      	lsls	r1, r4, #24
    41ea:	4301      	orrs	r1, r0
    41ec:	d110      	bne.n	4210 <strcmp+0x48>
    41ee:	b290      	uxth	r0, r2
    41f0:	b299      	uxth	r1, r3
    41f2:	1a40      	subs	r0, r0, r1
    41f4:	0421      	lsls	r1, r4, #16
    41f6:	4301      	orrs	r1, r0
    41f8:	d10a      	bne.n	4210 <strcmp+0x48>
    41fa:	0210      	lsls	r0, r2, #8
    41fc:	0219      	lsls	r1, r3, #8
    41fe:	0a00      	lsrs	r0, r0, #8
    4200:	0a09      	lsrs	r1, r1, #8
    4202:	1a40      	subs	r0, r0, r1
    4204:	0221      	lsls	r1, r4, #8
    4206:	4301      	orrs	r1, r0
    4208:	d102      	bne.n	4210 <strcmp+0x48>
    420a:	0e10      	lsrs	r0, r2, #24
    420c:	0e19      	lsrs	r1, r3, #24
    420e:	1a40      	subs	r0, r0, r1
    4210:	bd70      	pop	{r4, r5, r6, pc}
    4212:	429a      	cmp	r2, r3
    4214:	d0df      	beq.n	41d6 <strcmp+0xe>
    4216:	ba10      	rev	r0, r2
    4218:	ba19      	rev	r1, r3
    421a:	4288      	cmp	r0, r1
    421c:	d901      	bls.n	4222 <strcmp+0x5a>
    421e:	2001      	movs	r0, #1
    4220:	bd70      	pop	{r4, r5, r6, pc}
    4222:	2000      	movs	r0, #0
    4224:	43c0      	mvns	r0, r0
    4226:	bd70      	pop	{r4, r5, r6, pc}
    4228:	7802      	ldrb	r2, [r0, #0]
    422a:	780b      	ldrb	r3, [r1, #0]
    422c:	3001      	adds	r0, #1
    422e:	3101      	adds	r1, #1
    4230:	2a00      	cmp	r2, #0
    4232:	d009      	beq.n	4248 <strcmp+0x80>
    4234:	429a      	cmp	r2, r3
    4236:	d107      	bne.n	4248 <strcmp+0x80>
    4238:	7802      	ldrb	r2, [r0, #0]
    423a:	780b      	ldrb	r3, [r1, #0]
    423c:	3001      	adds	r0, #1
    423e:	3101      	adds	r1, #1
    4240:	2a00      	cmp	r2, #0
    4242:	d001      	beq.n	4248 <strcmp+0x80>
    4244:	429a      	cmp	r2, r3
    4246:	d0ef      	beq.n	4228 <strcmp+0x60>
    4248:	1ad0      	subs	r0, r2, r3
    424a:	bd70      	pop	{r4, r5, r6, pc}
    424c:	01010101 	.word	0x01010101

00004250 <__udivsi3>:
    4250:	2200      	movs	r2, #0
    4252:	0843      	lsrs	r3, r0, #1
    4254:	428b      	cmp	r3, r1
    4256:	d374      	bcc.n	4342 <__udivsi3+0xf2>
    4258:	0903      	lsrs	r3, r0, #4
    425a:	428b      	cmp	r3, r1
    425c:	d35f      	bcc.n	431e <__udivsi3+0xce>
    425e:	0a03      	lsrs	r3, r0, #8
    4260:	428b      	cmp	r3, r1
    4262:	d344      	bcc.n	42ee <__udivsi3+0x9e>
    4264:	0b03      	lsrs	r3, r0, #12
    4266:	428b      	cmp	r3, r1
    4268:	d328      	bcc.n	42bc <__udivsi3+0x6c>
    426a:	0c03      	lsrs	r3, r0, #16
    426c:	428b      	cmp	r3, r1
    426e:	d30d      	bcc.n	428c <__udivsi3+0x3c>
    4270:	22ff      	movs	r2, #255	; 0xff
    4272:	0209      	lsls	r1, r1, #8
    4274:	ba12      	rev	r2, r2
    4276:	0c03      	lsrs	r3, r0, #16
    4278:	428b      	cmp	r3, r1
    427a:	d302      	bcc.n	4282 <__udivsi3+0x32>
    427c:	1212      	asrs	r2, r2, #8
    427e:	0209      	lsls	r1, r1, #8
    4280:	d065      	beq.n	434e <__udivsi3+0xfe>
    4282:	0b03      	lsrs	r3, r0, #12
    4284:	428b      	cmp	r3, r1
    4286:	d319      	bcc.n	42bc <__udivsi3+0x6c>
    4288:	e000      	b.n	428c <__udivsi3+0x3c>
    428a:	0a09      	lsrs	r1, r1, #8
    428c:	0bc3      	lsrs	r3, r0, #15
    428e:	428b      	cmp	r3, r1
    4290:	d301      	bcc.n	4296 <__udivsi3+0x46>
    4292:	03cb      	lsls	r3, r1, #15
    4294:	1ac0      	subs	r0, r0, r3
    4296:	4152      	adcs	r2, r2
    4298:	0b83      	lsrs	r3, r0, #14
    429a:	428b      	cmp	r3, r1
    429c:	d301      	bcc.n	42a2 <__udivsi3+0x52>
    429e:	038b      	lsls	r3, r1, #14
    42a0:	1ac0      	subs	r0, r0, r3
    42a2:	4152      	adcs	r2, r2
    42a4:	0b43      	lsrs	r3, r0, #13
    42a6:	428b      	cmp	r3, r1
    42a8:	d301      	bcc.n	42ae <__udivsi3+0x5e>
    42aa:	034b      	lsls	r3, r1, #13
    42ac:	1ac0      	subs	r0, r0, r3
    42ae:	4152      	adcs	r2, r2
    42b0:	0b03      	lsrs	r3, r0, #12
    42b2:	428b      	cmp	r3, r1
    42b4:	d301      	bcc.n	42ba <__udivsi3+0x6a>
    42b6:	030b      	lsls	r3, r1, #12
    42b8:	1ac0      	subs	r0, r0, r3
    42ba:	4152      	adcs	r2, r2
    42bc:	0ac3      	lsrs	r3, r0, #11
    42be:	428b      	cmp	r3, r1
    42c0:	d301      	bcc.n	42c6 <__udivsi3+0x76>
    42c2:	02cb      	lsls	r3, r1, #11
    42c4:	1ac0      	subs	r0, r0, r3
    42c6:	4152      	adcs	r2, r2
    42c8:	0a83      	lsrs	r3, r0, #10
    42ca:	428b      	cmp	r3, r1
    42cc:	d301      	bcc.n	42d2 <__udivsi3+0x82>
    42ce:	028b      	lsls	r3, r1, #10
    42d0:	1ac0      	subs	r0, r0, r3
    42d2:	4152      	adcs	r2, r2
    42d4:	0a43      	lsrs	r3, r0, #9
    42d6:	428b      	cmp	r3, r1
    42d8:	d301      	bcc.n	42de <__udivsi3+0x8e>
    42da:	024b      	lsls	r3, r1, #9
    42dc:	1ac0      	subs	r0, r0, r3
    42de:	4152      	adcs	r2, r2
    42e0:	0a03      	lsrs	r3, r0, #8
    42e2:	428b      	cmp	r3, r1
    42e4:	d301      	bcc.n	42ea <__udivsi3+0x9a>
    42e6:	020b      	lsls	r3, r1, #8
    42e8:	1ac0      	subs	r0, r0, r3
    42ea:	4152      	adcs	r2, r2
    42ec:	d2cd      	bcs.n	428a <__udivsi3+0x3a>
    42ee:	09c3      	lsrs	r3, r0, #7
    42f0:	428b      	cmp	r3, r1
    42f2:	d301      	bcc.n	42f8 <__udivsi3+0xa8>
    42f4:	01cb      	lsls	r3, r1, #7
    42f6:	1ac0      	subs	r0, r0, r3
    42f8:	4152      	adcs	r2, r2
    42fa:	0983      	lsrs	r3, r0, #6
    42fc:	428b      	cmp	r3, r1
    42fe:	d301      	bcc.n	4304 <__udivsi3+0xb4>
    4300:	018b      	lsls	r3, r1, #6
    4302:	1ac0      	subs	r0, r0, r3
    4304:	4152      	adcs	r2, r2
    4306:	0943      	lsrs	r3, r0, #5
    4308:	428b      	cmp	r3, r1
    430a:	d301      	bcc.n	4310 <__udivsi3+0xc0>
    430c:	014b      	lsls	r3, r1, #5
    430e:	1ac0      	subs	r0, r0, r3
    4310:	4152      	adcs	r2, r2
    4312:	0903      	lsrs	r3, r0, #4
    4314:	428b      	cmp	r3, r1
    4316:	d301      	bcc.n	431c <__udivsi3+0xcc>
    4318:	010b      	lsls	r3, r1, #4
    431a:	1ac0      	subs	r0, r0, r3
    431c:	4152      	adcs	r2, r2
    431e:	08c3      	lsrs	r3, r0, #3
    4320:	428b      	cmp	r3, r1
    4322:	d301      	bcc.n	4328 <__udivsi3+0xd8>
    4324:	00cb      	lsls	r3, r1, #3
    4326:	1ac0      	subs	r0, r0, r3
    4328:	4152      	adcs	r2, r2
    432a:	0883      	lsrs	r3, r0, #2
    432c:	428b      	cmp	r3, r1
    432e:	d301      	bcc.n	4334 <__udivsi3+0xe4>
    4330:	008b      	lsls	r3, r1, #2
    4332:	1ac0      	subs	r0, r0, r3
    4334:	4152      	adcs	r2, r2
    4336:	0843      	lsrs	r3, r0, #1
    4338:	428b      	cmp	r3, r1
    433a:	d301      	bcc.n	4340 <__udivsi3+0xf0>
    433c:	004b      	lsls	r3, r1, #1
    433e:	1ac0      	subs	r0, r0, r3
    4340:	4152      	adcs	r2, r2
    4342:	1a41      	subs	r1, r0, r1
    4344:	d200      	bcs.n	4348 <__udivsi3+0xf8>
    4346:	4601      	mov	r1, r0
    4348:	4152      	adcs	r2, r2
    434a:	4610      	mov	r0, r2
    434c:	4770      	bx	lr
    434e:	e7ff      	b.n	4350 <__udivsi3+0x100>
    4350:	b501      	push	{r0, lr}
    4352:	2000      	movs	r0, #0
    4354:	f000 f8f0 	bl	4538 <__aeabi_idiv0>
    4358:	bd02      	pop	{r1, pc}
    435a:	46c0      	nop			; (mov r8, r8)

0000435c <__aeabi_uidivmod>:
    435c:	2900      	cmp	r1, #0
    435e:	d0f7      	beq.n	4350 <__udivsi3+0x100>
    4360:	e776      	b.n	4250 <__udivsi3>
    4362:	4770      	bx	lr

00004364 <__divsi3>:
    4364:	4603      	mov	r3, r0
    4366:	430b      	orrs	r3, r1
    4368:	d47f      	bmi.n	446a <__divsi3+0x106>
    436a:	2200      	movs	r2, #0
    436c:	0843      	lsrs	r3, r0, #1
    436e:	428b      	cmp	r3, r1
    4370:	d374      	bcc.n	445c <__divsi3+0xf8>
    4372:	0903      	lsrs	r3, r0, #4
    4374:	428b      	cmp	r3, r1
    4376:	d35f      	bcc.n	4438 <__divsi3+0xd4>
    4378:	0a03      	lsrs	r3, r0, #8
    437a:	428b      	cmp	r3, r1
    437c:	d344      	bcc.n	4408 <__divsi3+0xa4>
    437e:	0b03      	lsrs	r3, r0, #12
    4380:	428b      	cmp	r3, r1
    4382:	d328      	bcc.n	43d6 <__divsi3+0x72>
    4384:	0c03      	lsrs	r3, r0, #16
    4386:	428b      	cmp	r3, r1
    4388:	d30d      	bcc.n	43a6 <__divsi3+0x42>
    438a:	22ff      	movs	r2, #255	; 0xff
    438c:	0209      	lsls	r1, r1, #8
    438e:	ba12      	rev	r2, r2
    4390:	0c03      	lsrs	r3, r0, #16
    4392:	428b      	cmp	r3, r1
    4394:	d302      	bcc.n	439c <__divsi3+0x38>
    4396:	1212      	asrs	r2, r2, #8
    4398:	0209      	lsls	r1, r1, #8
    439a:	d065      	beq.n	4468 <__divsi3+0x104>
    439c:	0b03      	lsrs	r3, r0, #12
    439e:	428b      	cmp	r3, r1
    43a0:	d319      	bcc.n	43d6 <__divsi3+0x72>
    43a2:	e000      	b.n	43a6 <__divsi3+0x42>
    43a4:	0a09      	lsrs	r1, r1, #8
    43a6:	0bc3      	lsrs	r3, r0, #15
    43a8:	428b      	cmp	r3, r1
    43aa:	d301      	bcc.n	43b0 <__divsi3+0x4c>
    43ac:	03cb      	lsls	r3, r1, #15
    43ae:	1ac0      	subs	r0, r0, r3
    43b0:	4152      	adcs	r2, r2
    43b2:	0b83      	lsrs	r3, r0, #14
    43b4:	428b      	cmp	r3, r1
    43b6:	d301      	bcc.n	43bc <__divsi3+0x58>
    43b8:	038b      	lsls	r3, r1, #14
    43ba:	1ac0      	subs	r0, r0, r3
    43bc:	4152      	adcs	r2, r2
    43be:	0b43      	lsrs	r3, r0, #13
    43c0:	428b      	cmp	r3, r1
    43c2:	d301      	bcc.n	43c8 <__divsi3+0x64>
    43c4:	034b      	lsls	r3, r1, #13
    43c6:	1ac0      	subs	r0, r0, r3
    43c8:	4152      	adcs	r2, r2
    43ca:	0b03      	lsrs	r3, r0, #12
    43cc:	428b      	cmp	r3, r1
    43ce:	d301      	bcc.n	43d4 <__divsi3+0x70>
    43d0:	030b      	lsls	r3, r1, #12
    43d2:	1ac0      	subs	r0, r0, r3
    43d4:	4152      	adcs	r2, r2
    43d6:	0ac3      	lsrs	r3, r0, #11
    43d8:	428b      	cmp	r3, r1
    43da:	d301      	bcc.n	43e0 <__divsi3+0x7c>
    43dc:	02cb      	lsls	r3, r1, #11
    43de:	1ac0      	subs	r0, r0, r3
    43e0:	4152      	adcs	r2, r2
    43e2:	0a83      	lsrs	r3, r0, #10
    43e4:	428b      	cmp	r3, r1
    43e6:	d301      	bcc.n	43ec <__divsi3+0x88>
    43e8:	028b      	lsls	r3, r1, #10
    43ea:	1ac0      	subs	r0, r0, r3
    43ec:	4152      	adcs	r2, r2
    43ee:	0a43      	lsrs	r3, r0, #9
    43f0:	428b      	cmp	r3, r1
    43f2:	d301      	bcc.n	43f8 <__divsi3+0x94>
    43f4:	024b      	lsls	r3, r1, #9
    43f6:	1ac0      	subs	r0, r0, r3
    43f8:	4152      	adcs	r2, r2
    43fa:	0a03      	lsrs	r3, r0, #8
    43fc:	428b      	cmp	r3, r1
    43fe:	d301      	bcc.n	4404 <__divsi3+0xa0>
    4400:	020b      	lsls	r3, r1, #8
    4402:	1ac0      	subs	r0, r0, r3
    4404:	4152      	adcs	r2, r2
    4406:	d2cd      	bcs.n	43a4 <__divsi3+0x40>
    4408:	09c3      	lsrs	r3, r0, #7
    440a:	428b      	cmp	r3, r1
    440c:	d301      	bcc.n	4412 <__divsi3+0xae>
    440e:	01cb      	lsls	r3, r1, #7
    4410:	1ac0      	subs	r0, r0, r3
    4412:	4152      	adcs	r2, r2
    4414:	0983      	lsrs	r3, r0, #6
    4416:	428b      	cmp	r3, r1
    4418:	d301      	bcc.n	441e <__divsi3+0xba>
    441a:	018b      	lsls	r3, r1, #6
    441c:	1ac0      	subs	r0, r0, r3
    441e:	4152      	adcs	r2, r2
    4420:	0943      	lsrs	r3, r0, #5
    4422:	428b      	cmp	r3, r1
    4424:	d301      	bcc.n	442a <__divsi3+0xc6>
    4426:	014b      	lsls	r3, r1, #5
    4428:	1ac0      	subs	r0, r0, r3
    442a:	4152      	adcs	r2, r2
    442c:	0903      	lsrs	r3, r0, #4
    442e:	428b      	cmp	r3, r1
    4430:	d301      	bcc.n	4436 <__divsi3+0xd2>
    4432:	010b      	lsls	r3, r1, #4
    4434:	1ac0      	subs	r0, r0, r3
    4436:	4152      	adcs	r2, r2
    4438:	08c3      	lsrs	r3, r0, #3
    443a:	428b      	cmp	r3, r1
    443c:	d301      	bcc.n	4442 <__divsi3+0xde>
    443e:	00cb      	lsls	r3, r1, #3
    4440:	1ac0      	subs	r0, r0, r3
    4442:	4152      	adcs	r2, r2
    4444:	0883      	lsrs	r3, r0, #2
    4446:	428b      	cmp	r3, r1
    4448:	d301      	bcc.n	444e <__divsi3+0xea>
    444a:	008b      	lsls	r3, r1, #2
    444c:	1ac0      	subs	r0, r0, r3
    444e:	4152      	adcs	r2, r2
    4450:	0843      	lsrs	r3, r0, #1
    4452:	428b      	cmp	r3, r1
    4454:	d301      	bcc.n	445a <__divsi3+0xf6>
    4456:	004b      	lsls	r3, r1, #1
    4458:	1ac0      	subs	r0, r0, r3
    445a:	4152      	adcs	r2, r2
    445c:	1a41      	subs	r1, r0, r1
    445e:	d200      	bcs.n	4462 <__divsi3+0xfe>
    4460:	4601      	mov	r1, r0
    4462:	4152      	adcs	r2, r2
    4464:	4610      	mov	r0, r2
    4466:	4770      	bx	lr
    4468:	e05d      	b.n	4526 <__divsi3+0x1c2>
    446a:	0fca      	lsrs	r2, r1, #31
    446c:	d000      	beq.n	4470 <__divsi3+0x10c>
    446e:	4249      	negs	r1, r1
    4470:	1003      	asrs	r3, r0, #32
    4472:	d300      	bcc.n	4476 <__divsi3+0x112>
    4474:	4240      	negs	r0, r0
    4476:	4053      	eors	r3, r2
    4478:	2200      	movs	r2, #0
    447a:	469c      	mov	ip, r3
    447c:	0903      	lsrs	r3, r0, #4
    447e:	428b      	cmp	r3, r1
    4480:	d32d      	bcc.n	44de <__divsi3+0x17a>
    4482:	0a03      	lsrs	r3, r0, #8
    4484:	428b      	cmp	r3, r1
    4486:	d312      	bcc.n	44ae <__divsi3+0x14a>
    4488:	22fc      	movs	r2, #252	; 0xfc
    448a:	0189      	lsls	r1, r1, #6
    448c:	ba12      	rev	r2, r2
    448e:	0a03      	lsrs	r3, r0, #8
    4490:	428b      	cmp	r3, r1
    4492:	d30c      	bcc.n	44ae <__divsi3+0x14a>
    4494:	0189      	lsls	r1, r1, #6
    4496:	1192      	asrs	r2, r2, #6
    4498:	428b      	cmp	r3, r1
    449a:	d308      	bcc.n	44ae <__divsi3+0x14a>
    449c:	0189      	lsls	r1, r1, #6
    449e:	1192      	asrs	r2, r2, #6
    44a0:	428b      	cmp	r3, r1
    44a2:	d304      	bcc.n	44ae <__divsi3+0x14a>
    44a4:	0189      	lsls	r1, r1, #6
    44a6:	d03a      	beq.n	451e <__divsi3+0x1ba>
    44a8:	1192      	asrs	r2, r2, #6
    44aa:	e000      	b.n	44ae <__divsi3+0x14a>
    44ac:	0989      	lsrs	r1, r1, #6
    44ae:	09c3      	lsrs	r3, r0, #7
    44b0:	428b      	cmp	r3, r1
    44b2:	d301      	bcc.n	44b8 <__divsi3+0x154>
    44b4:	01cb      	lsls	r3, r1, #7
    44b6:	1ac0      	subs	r0, r0, r3
    44b8:	4152      	adcs	r2, r2
    44ba:	0983      	lsrs	r3, r0, #6
    44bc:	428b      	cmp	r3, r1
    44be:	d301      	bcc.n	44c4 <__divsi3+0x160>
    44c0:	018b      	lsls	r3, r1, #6
    44c2:	1ac0      	subs	r0, r0, r3
    44c4:	4152      	adcs	r2, r2
    44c6:	0943      	lsrs	r3, r0, #5
    44c8:	428b      	cmp	r3, r1
    44ca:	d301      	bcc.n	44d0 <__divsi3+0x16c>
    44cc:	014b      	lsls	r3, r1, #5
    44ce:	1ac0      	subs	r0, r0, r3
    44d0:	4152      	adcs	r2, r2
    44d2:	0903      	lsrs	r3, r0, #4
    44d4:	428b      	cmp	r3, r1
    44d6:	d301      	bcc.n	44dc <__divsi3+0x178>
    44d8:	010b      	lsls	r3, r1, #4
    44da:	1ac0      	subs	r0, r0, r3
    44dc:	4152      	adcs	r2, r2
    44de:	08c3      	lsrs	r3, r0, #3
    44e0:	428b      	cmp	r3, r1
    44e2:	d301      	bcc.n	44e8 <__divsi3+0x184>
    44e4:	00cb      	lsls	r3, r1, #3
    44e6:	1ac0      	subs	r0, r0, r3
    44e8:	4152      	adcs	r2, r2
    44ea:	0883      	lsrs	r3, r0, #2
    44ec:	428b      	cmp	r3, r1
    44ee:	d301      	bcc.n	44f4 <__divsi3+0x190>
    44f0:	008b      	lsls	r3, r1, #2
    44f2:	1ac0      	subs	r0, r0, r3
    44f4:	4152      	adcs	r2, r2
    44f6:	d2d9      	bcs.n	44ac <__divsi3+0x148>
    44f8:	0843      	lsrs	r3, r0, #1
    44fa:	428b      	cmp	r3, r1
    44fc:	d301      	bcc.n	4502 <__divsi3+0x19e>
    44fe:	004b      	lsls	r3, r1, #1
    4500:	1ac0      	subs	r0, r0, r3
    4502:	4152      	adcs	r2, r2
    4504:	1a41      	subs	r1, r0, r1
    4506:	d200      	bcs.n	450a <__divsi3+0x1a6>
    4508:	4601      	mov	r1, r0
    450a:	4663      	mov	r3, ip
    450c:	4152      	adcs	r2, r2
    450e:	105b      	asrs	r3, r3, #1
    4510:	4610      	mov	r0, r2
    4512:	d301      	bcc.n	4518 <__divsi3+0x1b4>
    4514:	4240      	negs	r0, r0
    4516:	2b00      	cmp	r3, #0
    4518:	d500      	bpl.n	451c <__divsi3+0x1b8>
    451a:	4249      	negs	r1, r1
    451c:	4770      	bx	lr
    451e:	4663      	mov	r3, ip
    4520:	105b      	asrs	r3, r3, #1
    4522:	d300      	bcc.n	4526 <__divsi3+0x1c2>
    4524:	4240      	negs	r0, r0
    4526:	b501      	push	{r0, lr}
    4528:	2000      	movs	r0, #0
    452a:	f000 f805 	bl	4538 <__aeabi_idiv0>
    452e:	bd02      	pop	{r1, pc}

00004530 <__aeabi_idivmod>:
    4530:	2900      	cmp	r1, #0
    4532:	d0f8      	beq.n	4526 <__divsi3+0x1c2>
    4534:	e716      	b.n	4364 <__divsi3>
    4536:	4770      	bx	lr

00004538 <__aeabi_idiv0>:
    4538:	4770      	bx	lr
    453a:	46c0      	nop			; (mov r8, r8)

0000453c <__aeabi_cdrcmple>:
    453c:	4684      	mov	ip, r0
    453e:	0010      	movs	r0, r2
    4540:	4662      	mov	r2, ip
    4542:	468c      	mov	ip, r1
    4544:	0019      	movs	r1, r3
    4546:	4663      	mov	r3, ip
    4548:	e000      	b.n	454c <__aeabi_cdcmpeq>
    454a:	46c0      	nop			; (mov r8, r8)

0000454c <__aeabi_cdcmpeq>:
    454c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    454e:	f001 fbc7 	bl	5ce0 <__ledf2>
    4552:	2800      	cmp	r0, #0
    4554:	d401      	bmi.n	455a <__aeabi_cdcmpeq+0xe>
    4556:	2100      	movs	r1, #0
    4558:	42c8      	cmn	r0, r1
    455a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000455c <__aeabi_dcmpeq>:
    455c:	b510      	push	{r4, lr}
    455e:	f001 fb17 	bl	5b90 <__eqdf2>
    4562:	4240      	negs	r0, r0
    4564:	3001      	adds	r0, #1
    4566:	bd10      	pop	{r4, pc}

00004568 <__aeabi_dcmplt>:
    4568:	b510      	push	{r4, lr}
    456a:	f001 fbb9 	bl	5ce0 <__ledf2>
    456e:	2800      	cmp	r0, #0
    4570:	db01      	blt.n	4576 <__aeabi_dcmplt+0xe>
    4572:	2000      	movs	r0, #0
    4574:	bd10      	pop	{r4, pc}
    4576:	2001      	movs	r0, #1
    4578:	bd10      	pop	{r4, pc}
    457a:	46c0      	nop			; (mov r8, r8)

0000457c <__aeabi_dcmple>:
    457c:	b510      	push	{r4, lr}
    457e:	f001 fbaf 	bl	5ce0 <__ledf2>
    4582:	2800      	cmp	r0, #0
    4584:	dd01      	ble.n	458a <__aeabi_dcmple+0xe>
    4586:	2000      	movs	r0, #0
    4588:	bd10      	pop	{r4, pc}
    458a:	2001      	movs	r0, #1
    458c:	bd10      	pop	{r4, pc}
    458e:	46c0      	nop			; (mov r8, r8)

00004590 <__aeabi_dcmpgt>:
    4590:	b510      	push	{r4, lr}
    4592:	f001 fb3f 	bl	5c14 <__gedf2>
    4596:	2800      	cmp	r0, #0
    4598:	dc01      	bgt.n	459e <__aeabi_dcmpgt+0xe>
    459a:	2000      	movs	r0, #0
    459c:	bd10      	pop	{r4, pc}
    459e:	2001      	movs	r0, #1
    45a0:	bd10      	pop	{r4, pc}
    45a2:	46c0      	nop			; (mov r8, r8)

000045a4 <__aeabi_dcmpge>:
    45a4:	b510      	push	{r4, lr}
    45a6:	f001 fb35 	bl	5c14 <__gedf2>
    45aa:	2800      	cmp	r0, #0
    45ac:	da01      	bge.n	45b2 <__aeabi_dcmpge+0xe>
    45ae:	2000      	movs	r0, #0
    45b0:	bd10      	pop	{r4, pc}
    45b2:	2001      	movs	r0, #1
    45b4:	bd10      	pop	{r4, pc}
    45b6:	46c0      	nop			; (mov r8, r8)

000045b8 <__aeabi_cfrcmple>:
    45b8:	4684      	mov	ip, r0
    45ba:	0008      	movs	r0, r1
    45bc:	4661      	mov	r1, ip
    45be:	e7ff      	b.n	45c0 <__aeabi_cfcmpeq>

000045c0 <__aeabi_cfcmpeq>:
    45c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    45c2:	f000 fc6f 	bl	4ea4 <__lesf2>
    45c6:	2800      	cmp	r0, #0
    45c8:	d401      	bmi.n	45ce <__aeabi_cfcmpeq+0xe>
    45ca:	2100      	movs	r1, #0
    45cc:	42c8      	cmn	r0, r1
    45ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000045d0 <__aeabi_fcmpeq>:
    45d0:	b510      	push	{r4, lr}
    45d2:	f000 fbfb 	bl	4dcc <__eqsf2>
    45d6:	4240      	negs	r0, r0
    45d8:	3001      	adds	r0, #1
    45da:	bd10      	pop	{r4, pc}

000045dc <__aeabi_fcmplt>:
    45dc:	b510      	push	{r4, lr}
    45de:	f000 fc61 	bl	4ea4 <__lesf2>
    45e2:	2800      	cmp	r0, #0
    45e4:	db01      	blt.n	45ea <__aeabi_fcmplt+0xe>
    45e6:	2000      	movs	r0, #0
    45e8:	bd10      	pop	{r4, pc}
    45ea:	2001      	movs	r0, #1
    45ec:	bd10      	pop	{r4, pc}
    45ee:	46c0      	nop			; (mov r8, r8)

000045f0 <__aeabi_fcmple>:
    45f0:	b510      	push	{r4, lr}
    45f2:	f000 fc57 	bl	4ea4 <__lesf2>
    45f6:	2800      	cmp	r0, #0
    45f8:	dd01      	ble.n	45fe <__aeabi_fcmple+0xe>
    45fa:	2000      	movs	r0, #0
    45fc:	bd10      	pop	{r4, pc}
    45fe:	2001      	movs	r0, #1
    4600:	bd10      	pop	{r4, pc}
    4602:	46c0      	nop			; (mov r8, r8)

00004604 <__aeabi_fcmpgt>:
    4604:	b510      	push	{r4, lr}
    4606:	f000 fc07 	bl	4e18 <__gesf2>
    460a:	2800      	cmp	r0, #0
    460c:	dc01      	bgt.n	4612 <__aeabi_fcmpgt+0xe>
    460e:	2000      	movs	r0, #0
    4610:	bd10      	pop	{r4, pc}
    4612:	2001      	movs	r0, #1
    4614:	bd10      	pop	{r4, pc}
    4616:	46c0      	nop			; (mov r8, r8)

00004618 <__aeabi_fcmpge>:
    4618:	b510      	push	{r4, lr}
    461a:	f000 fbfd 	bl	4e18 <__gesf2>
    461e:	2800      	cmp	r0, #0
    4620:	da01      	bge.n	4626 <__aeabi_fcmpge+0xe>
    4622:	2000      	movs	r0, #0
    4624:	bd10      	pop	{r4, pc}
    4626:	2001      	movs	r0, #1
    4628:	bd10      	pop	{r4, pc}
    462a:	46c0      	nop			; (mov r8, r8)

0000462c <__aeabi_uldivmod>:
    462c:	2b00      	cmp	r3, #0
    462e:	d111      	bne.n	4654 <__aeabi_uldivmod+0x28>
    4630:	2a00      	cmp	r2, #0
    4632:	d10f      	bne.n	4654 <__aeabi_uldivmod+0x28>
    4634:	2900      	cmp	r1, #0
    4636:	d100      	bne.n	463a <__aeabi_uldivmod+0xe>
    4638:	2800      	cmp	r0, #0
    463a:	d002      	beq.n	4642 <__aeabi_uldivmod+0x16>
    463c:	2100      	movs	r1, #0
    463e:	43c9      	mvns	r1, r1
    4640:	0008      	movs	r0, r1
    4642:	b407      	push	{r0, r1, r2}
    4644:	4802      	ldr	r0, [pc, #8]	; (4650 <__aeabi_uldivmod+0x24>)
    4646:	a102      	add	r1, pc, #8	; (adr r1, 4650 <__aeabi_uldivmod+0x24>)
    4648:	1840      	adds	r0, r0, r1
    464a:	9002      	str	r0, [sp, #8]
    464c:	bd03      	pop	{r0, r1, pc}
    464e:	46c0      	nop			; (mov r8, r8)
    4650:	fffffee9 	.word	0xfffffee9
    4654:	b403      	push	{r0, r1}
    4656:	4668      	mov	r0, sp
    4658:	b501      	push	{r0, lr}
    465a:	9802      	ldr	r0, [sp, #8]
    465c:	f000 f834 	bl	46c8 <__udivmoddi4>
    4660:	9b01      	ldr	r3, [sp, #4]
    4662:	469e      	mov	lr, r3
    4664:	b002      	add	sp, #8
    4666:	bc0c      	pop	{r2, r3}
    4668:	4770      	bx	lr
    466a:	46c0      	nop			; (mov r8, r8)

0000466c <__aeabi_lmul>:
    466c:	b5f0      	push	{r4, r5, r6, r7, lr}
    466e:	46ce      	mov	lr, r9
    4670:	4647      	mov	r7, r8
    4672:	b580      	push	{r7, lr}
    4674:	0007      	movs	r7, r0
    4676:	4699      	mov	r9, r3
    4678:	0c3b      	lsrs	r3, r7, #16
    467a:	469c      	mov	ip, r3
    467c:	0413      	lsls	r3, r2, #16
    467e:	0c1b      	lsrs	r3, r3, #16
    4680:	001d      	movs	r5, r3
    4682:	000e      	movs	r6, r1
    4684:	4661      	mov	r1, ip
    4686:	0400      	lsls	r0, r0, #16
    4688:	0c14      	lsrs	r4, r2, #16
    468a:	0c00      	lsrs	r0, r0, #16
    468c:	4345      	muls	r5, r0
    468e:	434b      	muls	r3, r1
    4690:	4360      	muls	r0, r4
    4692:	4361      	muls	r1, r4
    4694:	18c0      	adds	r0, r0, r3
    4696:	0c2c      	lsrs	r4, r5, #16
    4698:	1820      	adds	r0, r4, r0
    469a:	468c      	mov	ip, r1
    469c:	4283      	cmp	r3, r0
    469e:	d903      	bls.n	46a8 <__aeabi_lmul+0x3c>
    46a0:	2380      	movs	r3, #128	; 0x80
    46a2:	025b      	lsls	r3, r3, #9
    46a4:	4698      	mov	r8, r3
    46a6:	44c4      	add	ip, r8
    46a8:	4649      	mov	r1, r9
    46aa:	4379      	muls	r1, r7
    46ac:	4372      	muls	r2, r6
    46ae:	0c03      	lsrs	r3, r0, #16
    46b0:	4463      	add	r3, ip
    46b2:	042d      	lsls	r5, r5, #16
    46b4:	0c2d      	lsrs	r5, r5, #16
    46b6:	18c9      	adds	r1, r1, r3
    46b8:	0400      	lsls	r0, r0, #16
    46ba:	1940      	adds	r0, r0, r5
    46bc:	1889      	adds	r1, r1, r2
    46be:	bcc0      	pop	{r6, r7}
    46c0:	46b9      	mov	r9, r7
    46c2:	46b0      	mov	r8, r6
    46c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46c6:	46c0      	nop			; (mov r8, r8)

000046c8 <__udivmoddi4>:
    46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ca:	4657      	mov	r7, sl
    46cc:	464e      	mov	r6, r9
    46ce:	4645      	mov	r5, r8
    46d0:	46de      	mov	lr, fp
    46d2:	b5e0      	push	{r5, r6, r7, lr}
    46d4:	0004      	movs	r4, r0
    46d6:	000d      	movs	r5, r1
    46d8:	4692      	mov	sl, r2
    46da:	4699      	mov	r9, r3
    46dc:	b083      	sub	sp, #12
    46de:	428b      	cmp	r3, r1
    46e0:	d830      	bhi.n	4744 <__udivmoddi4+0x7c>
    46e2:	d02d      	beq.n	4740 <__udivmoddi4+0x78>
    46e4:	4649      	mov	r1, r9
    46e6:	4650      	mov	r0, sl
    46e8:	f003 fa76 	bl	7bd8 <__clzdi2>
    46ec:	0029      	movs	r1, r5
    46ee:	0006      	movs	r6, r0
    46f0:	0020      	movs	r0, r4
    46f2:	f003 fa71 	bl	7bd8 <__clzdi2>
    46f6:	1a33      	subs	r3, r6, r0
    46f8:	4698      	mov	r8, r3
    46fa:	3b20      	subs	r3, #32
    46fc:	469b      	mov	fp, r3
    46fe:	d433      	bmi.n	4768 <__udivmoddi4+0xa0>
    4700:	465a      	mov	r2, fp
    4702:	4653      	mov	r3, sl
    4704:	4093      	lsls	r3, r2
    4706:	4642      	mov	r2, r8
    4708:	001f      	movs	r7, r3
    470a:	4653      	mov	r3, sl
    470c:	4093      	lsls	r3, r2
    470e:	001e      	movs	r6, r3
    4710:	42af      	cmp	r7, r5
    4712:	d83a      	bhi.n	478a <__udivmoddi4+0xc2>
    4714:	42af      	cmp	r7, r5
    4716:	d100      	bne.n	471a <__udivmoddi4+0x52>
    4718:	e078      	b.n	480c <__udivmoddi4+0x144>
    471a:	465b      	mov	r3, fp
    471c:	1ba4      	subs	r4, r4, r6
    471e:	41bd      	sbcs	r5, r7
    4720:	2b00      	cmp	r3, #0
    4722:	da00      	bge.n	4726 <__udivmoddi4+0x5e>
    4724:	e075      	b.n	4812 <__udivmoddi4+0x14a>
    4726:	2200      	movs	r2, #0
    4728:	2300      	movs	r3, #0
    472a:	9200      	str	r2, [sp, #0]
    472c:	9301      	str	r3, [sp, #4]
    472e:	2301      	movs	r3, #1
    4730:	465a      	mov	r2, fp
    4732:	4093      	lsls	r3, r2
    4734:	9301      	str	r3, [sp, #4]
    4736:	2301      	movs	r3, #1
    4738:	4642      	mov	r2, r8
    473a:	4093      	lsls	r3, r2
    473c:	9300      	str	r3, [sp, #0]
    473e:	e028      	b.n	4792 <__udivmoddi4+0xca>
    4740:	4282      	cmp	r2, r0
    4742:	d9cf      	bls.n	46e4 <__udivmoddi4+0x1c>
    4744:	2200      	movs	r2, #0
    4746:	2300      	movs	r3, #0
    4748:	9200      	str	r2, [sp, #0]
    474a:	9301      	str	r3, [sp, #4]
    474c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    474e:	2b00      	cmp	r3, #0
    4750:	d001      	beq.n	4756 <__udivmoddi4+0x8e>
    4752:	601c      	str	r4, [r3, #0]
    4754:	605d      	str	r5, [r3, #4]
    4756:	9800      	ldr	r0, [sp, #0]
    4758:	9901      	ldr	r1, [sp, #4]
    475a:	b003      	add	sp, #12
    475c:	bcf0      	pop	{r4, r5, r6, r7}
    475e:	46bb      	mov	fp, r7
    4760:	46b2      	mov	sl, r6
    4762:	46a9      	mov	r9, r5
    4764:	46a0      	mov	r8, r4
    4766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4768:	4642      	mov	r2, r8
    476a:	2320      	movs	r3, #32
    476c:	1a9b      	subs	r3, r3, r2
    476e:	4652      	mov	r2, sl
    4770:	40da      	lsrs	r2, r3
    4772:	4641      	mov	r1, r8
    4774:	0013      	movs	r3, r2
    4776:	464a      	mov	r2, r9
    4778:	408a      	lsls	r2, r1
    477a:	0017      	movs	r7, r2
    477c:	4642      	mov	r2, r8
    477e:	431f      	orrs	r7, r3
    4780:	4653      	mov	r3, sl
    4782:	4093      	lsls	r3, r2
    4784:	001e      	movs	r6, r3
    4786:	42af      	cmp	r7, r5
    4788:	d9c4      	bls.n	4714 <__udivmoddi4+0x4c>
    478a:	2200      	movs	r2, #0
    478c:	2300      	movs	r3, #0
    478e:	9200      	str	r2, [sp, #0]
    4790:	9301      	str	r3, [sp, #4]
    4792:	4643      	mov	r3, r8
    4794:	2b00      	cmp	r3, #0
    4796:	d0d9      	beq.n	474c <__udivmoddi4+0x84>
    4798:	07fb      	lsls	r3, r7, #31
    479a:	0872      	lsrs	r2, r6, #1
    479c:	431a      	orrs	r2, r3
    479e:	4646      	mov	r6, r8
    47a0:	087b      	lsrs	r3, r7, #1
    47a2:	e00e      	b.n	47c2 <__udivmoddi4+0xfa>
    47a4:	42ab      	cmp	r3, r5
    47a6:	d101      	bne.n	47ac <__udivmoddi4+0xe4>
    47a8:	42a2      	cmp	r2, r4
    47aa:	d80c      	bhi.n	47c6 <__udivmoddi4+0xfe>
    47ac:	1aa4      	subs	r4, r4, r2
    47ae:	419d      	sbcs	r5, r3
    47b0:	2001      	movs	r0, #1
    47b2:	1924      	adds	r4, r4, r4
    47b4:	416d      	adcs	r5, r5
    47b6:	2100      	movs	r1, #0
    47b8:	3e01      	subs	r6, #1
    47ba:	1824      	adds	r4, r4, r0
    47bc:	414d      	adcs	r5, r1
    47be:	2e00      	cmp	r6, #0
    47c0:	d006      	beq.n	47d0 <__udivmoddi4+0x108>
    47c2:	42ab      	cmp	r3, r5
    47c4:	d9ee      	bls.n	47a4 <__udivmoddi4+0xdc>
    47c6:	3e01      	subs	r6, #1
    47c8:	1924      	adds	r4, r4, r4
    47ca:	416d      	adcs	r5, r5
    47cc:	2e00      	cmp	r6, #0
    47ce:	d1f8      	bne.n	47c2 <__udivmoddi4+0xfa>
    47d0:	9800      	ldr	r0, [sp, #0]
    47d2:	9901      	ldr	r1, [sp, #4]
    47d4:	465b      	mov	r3, fp
    47d6:	1900      	adds	r0, r0, r4
    47d8:	4169      	adcs	r1, r5
    47da:	2b00      	cmp	r3, #0
    47dc:	db24      	blt.n	4828 <__udivmoddi4+0x160>
    47de:	002b      	movs	r3, r5
    47e0:	465a      	mov	r2, fp
    47e2:	4644      	mov	r4, r8
    47e4:	40d3      	lsrs	r3, r2
    47e6:	002a      	movs	r2, r5
    47e8:	40e2      	lsrs	r2, r4
    47ea:	001c      	movs	r4, r3
    47ec:	465b      	mov	r3, fp
    47ee:	0015      	movs	r5, r2
    47f0:	2b00      	cmp	r3, #0
    47f2:	db2a      	blt.n	484a <__udivmoddi4+0x182>
    47f4:	0026      	movs	r6, r4
    47f6:	409e      	lsls	r6, r3
    47f8:	0033      	movs	r3, r6
    47fa:	0026      	movs	r6, r4
    47fc:	4647      	mov	r7, r8
    47fe:	40be      	lsls	r6, r7
    4800:	0032      	movs	r2, r6
    4802:	1a80      	subs	r0, r0, r2
    4804:	4199      	sbcs	r1, r3
    4806:	9000      	str	r0, [sp, #0]
    4808:	9101      	str	r1, [sp, #4]
    480a:	e79f      	b.n	474c <__udivmoddi4+0x84>
    480c:	42a3      	cmp	r3, r4
    480e:	d8bc      	bhi.n	478a <__udivmoddi4+0xc2>
    4810:	e783      	b.n	471a <__udivmoddi4+0x52>
    4812:	4642      	mov	r2, r8
    4814:	2320      	movs	r3, #32
    4816:	2100      	movs	r1, #0
    4818:	1a9b      	subs	r3, r3, r2
    481a:	2200      	movs	r2, #0
    481c:	9100      	str	r1, [sp, #0]
    481e:	9201      	str	r2, [sp, #4]
    4820:	2201      	movs	r2, #1
    4822:	40da      	lsrs	r2, r3
    4824:	9201      	str	r2, [sp, #4]
    4826:	e786      	b.n	4736 <__udivmoddi4+0x6e>
    4828:	4642      	mov	r2, r8
    482a:	2320      	movs	r3, #32
    482c:	1a9b      	subs	r3, r3, r2
    482e:	002a      	movs	r2, r5
    4830:	4646      	mov	r6, r8
    4832:	409a      	lsls	r2, r3
    4834:	0023      	movs	r3, r4
    4836:	40f3      	lsrs	r3, r6
    4838:	4644      	mov	r4, r8
    483a:	4313      	orrs	r3, r2
    483c:	002a      	movs	r2, r5
    483e:	40e2      	lsrs	r2, r4
    4840:	001c      	movs	r4, r3
    4842:	465b      	mov	r3, fp
    4844:	0015      	movs	r5, r2
    4846:	2b00      	cmp	r3, #0
    4848:	dad4      	bge.n	47f4 <__udivmoddi4+0x12c>
    484a:	4642      	mov	r2, r8
    484c:	002f      	movs	r7, r5
    484e:	2320      	movs	r3, #32
    4850:	0026      	movs	r6, r4
    4852:	4097      	lsls	r7, r2
    4854:	1a9b      	subs	r3, r3, r2
    4856:	40de      	lsrs	r6, r3
    4858:	003b      	movs	r3, r7
    485a:	4333      	orrs	r3, r6
    485c:	e7cd      	b.n	47fa <__udivmoddi4+0x132>
    485e:	46c0      	nop			; (mov r8, r8)

00004860 <__aeabi_fadd>:
    4860:	b5f0      	push	{r4, r5, r6, r7, lr}
    4862:	46c6      	mov	lr, r8
    4864:	0243      	lsls	r3, r0, #9
    4866:	0a5b      	lsrs	r3, r3, #9
    4868:	024e      	lsls	r6, r1, #9
    486a:	0045      	lsls	r5, r0, #1
    486c:	004f      	lsls	r7, r1, #1
    486e:	00da      	lsls	r2, r3, #3
    4870:	0fc4      	lsrs	r4, r0, #31
    4872:	469c      	mov	ip, r3
    4874:	0a70      	lsrs	r0, r6, #9
    4876:	4690      	mov	r8, r2
    4878:	b500      	push	{lr}
    487a:	0e2d      	lsrs	r5, r5, #24
    487c:	0e3f      	lsrs	r7, r7, #24
    487e:	0fc9      	lsrs	r1, r1, #31
    4880:	09b6      	lsrs	r6, r6, #6
    4882:	428c      	cmp	r4, r1
    4884:	d04b      	beq.n	491e <__aeabi_fadd+0xbe>
    4886:	1bea      	subs	r2, r5, r7
    4888:	2a00      	cmp	r2, #0
    488a:	dd36      	ble.n	48fa <__aeabi_fadd+0x9a>
    488c:	2f00      	cmp	r7, #0
    488e:	d061      	beq.n	4954 <__aeabi_fadd+0xf4>
    4890:	2dff      	cmp	r5, #255	; 0xff
    4892:	d100      	bne.n	4896 <__aeabi_fadd+0x36>
    4894:	e0ad      	b.n	49f2 <__aeabi_fadd+0x192>
    4896:	2380      	movs	r3, #128	; 0x80
    4898:	04db      	lsls	r3, r3, #19
    489a:	431e      	orrs	r6, r3
    489c:	2a1b      	cmp	r2, #27
    489e:	dc00      	bgt.n	48a2 <__aeabi_fadd+0x42>
    48a0:	e0d3      	b.n	4a4a <__aeabi_fadd+0x1ea>
    48a2:	2001      	movs	r0, #1
    48a4:	4643      	mov	r3, r8
    48a6:	1a18      	subs	r0, r3, r0
    48a8:	0143      	lsls	r3, r0, #5
    48aa:	d400      	bmi.n	48ae <__aeabi_fadd+0x4e>
    48ac:	e08c      	b.n	49c8 <__aeabi_fadd+0x168>
    48ae:	0180      	lsls	r0, r0, #6
    48b0:	0987      	lsrs	r7, r0, #6
    48b2:	0038      	movs	r0, r7
    48b4:	f003 f972 	bl	7b9c <__clzsi2>
    48b8:	3805      	subs	r0, #5
    48ba:	4087      	lsls	r7, r0
    48bc:	4285      	cmp	r5, r0
    48be:	dc00      	bgt.n	48c2 <__aeabi_fadd+0x62>
    48c0:	e0b6      	b.n	4a30 <__aeabi_fadd+0x1d0>
    48c2:	1a2d      	subs	r5, r5, r0
    48c4:	48b3      	ldr	r0, [pc, #716]	; (4b94 <__aeabi_fadd+0x334>)
    48c6:	4038      	ands	r0, r7
    48c8:	0743      	lsls	r3, r0, #29
    48ca:	d004      	beq.n	48d6 <__aeabi_fadd+0x76>
    48cc:	230f      	movs	r3, #15
    48ce:	4003      	ands	r3, r0
    48d0:	2b04      	cmp	r3, #4
    48d2:	d000      	beq.n	48d6 <__aeabi_fadd+0x76>
    48d4:	3004      	adds	r0, #4
    48d6:	0143      	lsls	r3, r0, #5
    48d8:	d400      	bmi.n	48dc <__aeabi_fadd+0x7c>
    48da:	e078      	b.n	49ce <__aeabi_fadd+0x16e>
    48dc:	1c6a      	adds	r2, r5, #1
    48de:	2dfe      	cmp	r5, #254	; 0xfe
    48e0:	d065      	beq.n	49ae <__aeabi_fadd+0x14e>
    48e2:	0180      	lsls	r0, r0, #6
    48e4:	0a43      	lsrs	r3, r0, #9
    48e6:	469c      	mov	ip, r3
    48e8:	b2d2      	uxtb	r2, r2
    48ea:	4663      	mov	r3, ip
    48ec:	05d0      	lsls	r0, r2, #23
    48ee:	4318      	orrs	r0, r3
    48f0:	07e4      	lsls	r4, r4, #31
    48f2:	4320      	orrs	r0, r4
    48f4:	bc80      	pop	{r7}
    48f6:	46b8      	mov	r8, r7
    48f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48fa:	2a00      	cmp	r2, #0
    48fc:	d035      	beq.n	496a <__aeabi_fadd+0x10a>
    48fe:	1b7a      	subs	r2, r7, r5
    4900:	2d00      	cmp	r5, #0
    4902:	d000      	beq.n	4906 <__aeabi_fadd+0xa6>
    4904:	e0af      	b.n	4a66 <__aeabi_fadd+0x206>
    4906:	4643      	mov	r3, r8
    4908:	2b00      	cmp	r3, #0
    490a:	d100      	bne.n	490e <__aeabi_fadd+0xae>
    490c:	e0a7      	b.n	4a5e <__aeabi_fadd+0x1fe>
    490e:	1e53      	subs	r3, r2, #1
    4910:	2a01      	cmp	r2, #1
    4912:	d100      	bne.n	4916 <__aeabi_fadd+0xb6>
    4914:	e12f      	b.n	4b76 <__aeabi_fadd+0x316>
    4916:	2aff      	cmp	r2, #255	; 0xff
    4918:	d069      	beq.n	49ee <__aeabi_fadd+0x18e>
    491a:	001a      	movs	r2, r3
    491c:	e0aa      	b.n	4a74 <__aeabi_fadd+0x214>
    491e:	1be9      	subs	r1, r5, r7
    4920:	2900      	cmp	r1, #0
    4922:	dd70      	ble.n	4a06 <__aeabi_fadd+0x1a6>
    4924:	2f00      	cmp	r7, #0
    4926:	d037      	beq.n	4998 <__aeabi_fadd+0x138>
    4928:	2dff      	cmp	r5, #255	; 0xff
    492a:	d062      	beq.n	49f2 <__aeabi_fadd+0x192>
    492c:	2380      	movs	r3, #128	; 0x80
    492e:	04db      	lsls	r3, r3, #19
    4930:	431e      	orrs	r6, r3
    4932:	291b      	cmp	r1, #27
    4934:	dc00      	bgt.n	4938 <__aeabi_fadd+0xd8>
    4936:	e0b0      	b.n	4a9a <__aeabi_fadd+0x23a>
    4938:	2001      	movs	r0, #1
    493a:	4440      	add	r0, r8
    493c:	0143      	lsls	r3, r0, #5
    493e:	d543      	bpl.n	49c8 <__aeabi_fadd+0x168>
    4940:	3501      	adds	r5, #1
    4942:	2dff      	cmp	r5, #255	; 0xff
    4944:	d033      	beq.n	49ae <__aeabi_fadd+0x14e>
    4946:	2301      	movs	r3, #1
    4948:	4a93      	ldr	r2, [pc, #588]	; (4b98 <__aeabi_fadd+0x338>)
    494a:	4003      	ands	r3, r0
    494c:	0840      	lsrs	r0, r0, #1
    494e:	4010      	ands	r0, r2
    4950:	4318      	orrs	r0, r3
    4952:	e7b9      	b.n	48c8 <__aeabi_fadd+0x68>
    4954:	2e00      	cmp	r6, #0
    4956:	d100      	bne.n	495a <__aeabi_fadd+0xfa>
    4958:	e083      	b.n	4a62 <__aeabi_fadd+0x202>
    495a:	1e51      	subs	r1, r2, #1
    495c:	2a01      	cmp	r2, #1
    495e:	d100      	bne.n	4962 <__aeabi_fadd+0x102>
    4960:	e0d8      	b.n	4b14 <__aeabi_fadd+0x2b4>
    4962:	2aff      	cmp	r2, #255	; 0xff
    4964:	d045      	beq.n	49f2 <__aeabi_fadd+0x192>
    4966:	000a      	movs	r2, r1
    4968:	e798      	b.n	489c <__aeabi_fadd+0x3c>
    496a:	27fe      	movs	r7, #254	; 0xfe
    496c:	1c6a      	adds	r2, r5, #1
    496e:	4217      	tst	r7, r2
    4970:	d000      	beq.n	4974 <__aeabi_fadd+0x114>
    4972:	e086      	b.n	4a82 <__aeabi_fadd+0x222>
    4974:	2d00      	cmp	r5, #0
    4976:	d000      	beq.n	497a <__aeabi_fadd+0x11a>
    4978:	e0b7      	b.n	4aea <__aeabi_fadd+0x28a>
    497a:	4643      	mov	r3, r8
    497c:	2b00      	cmp	r3, #0
    497e:	d100      	bne.n	4982 <__aeabi_fadd+0x122>
    4980:	e0f3      	b.n	4b6a <__aeabi_fadd+0x30a>
    4982:	2200      	movs	r2, #0
    4984:	2e00      	cmp	r6, #0
    4986:	d0b0      	beq.n	48ea <__aeabi_fadd+0x8a>
    4988:	1b98      	subs	r0, r3, r6
    498a:	0143      	lsls	r3, r0, #5
    498c:	d400      	bmi.n	4990 <__aeabi_fadd+0x130>
    498e:	e0fa      	b.n	4b86 <__aeabi_fadd+0x326>
    4990:	4643      	mov	r3, r8
    4992:	000c      	movs	r4, r1
    4994:	1af0      	subs	r0, r6, r3
    4996:	e797      	b.n	48c8 <__aeabi_fadd+0x68>
    4998:	2e00      	cmp	r6, #0
    499a:	d100      	bne.n	499e <__aeabi_fadd+0x13e>
    499c:	e0c8      	b.n	4b30 <__aeabi_fadd+0x2d0>
    499e:	1e4a      	subs	r2, r1, #1
    49a0:	2901      	cmp	r1, #1
    49a2:	d100      	bne.n	49a6 <__aeabi_fadd+0x146>
    49a4:	e0ae      	b.n	4b04 <__aeabi_fadd+0x2a4>
    49a6:	29ff      	cmp	r1, #255	; 0xff
    49a8:	d023      	beq.n	49f2 <__aeabi_fadd+0x192>
    49aa:	0011      	movs	r1, r2
    49ac:	e7c1      	b.n	4932 <__aeabi_fadd+0xd2>
    49ae:	2300      	movs	r3, #0
    49b0:	22ff      	movs	r2, #255	; 0xff
    49b2:	469c      	mov	ip, r3
    49b4:	e799      	b.n	48ea <__aeabi_fadd+0x8a>
    49b6:	21fe      	movs	r1, #254	; 0xfe
    49b8:	1c6a      	adds	r2, r5, #1
    49ba:	4211      	tst	r1, r2
    49bc:	d077      	beq.n	4aae <__aeabi_fadd+0x24e>
    49be:	2aff      	cmp	r2, #255	; 0xff
    49c0:	d0f5      	beq.n	49ae <__aeabi_fadd+0x14e>
    49c2:	0015      	movs	r5, r2
    49c4:	4446      	add	r6, r8
    49c6:	0870      	lsrs	r0, r6, #1
    49c8:	0743      	lsls	r3, r0, #29
    49ca:	d000      	beq.n	49ce <__aeabi_fadd+0x16e>
    49cc:	e77e      	b.n	48cc <__aeabi_fadd+0x6c>
    49ce:	08c3      	lsrs	r3, r0, #3
    49d0:	2dff      	cmp	r5, #255	; 0xff
    49d2:	d00e      	beq.n	49f2 <__aeabi_fadd+0x192>
    49d4:	025b      	lsls	r3, r3, #9
    49d6:	0a5b      	lsrs	r3, r3, #9
    49d8:	469c      	mov	ip, r3
    49da:	b2ea      	uxtb	r2, r5
    49dc:	e785      	b.n	48ea <__aeabi_fadd+0x8a>
    49de:	2e00      	cmp	r6, #0
    49e0:	d007      	beq.n	49f2 <__aeabi_fadd+0x192>
    49e2:	2280      	movs	r2, #128	; 0x80
    49e4:	03d2      	lsls	r2, r2, #15
    49e6:	4213      	tst	r3, r2
    49e8:	d003      	beq.n	49f2 <__aeabi_fadd+0x192>
    49ea:	4210      	tst	r0, r2
    49ec:	d101      	bne.n	49f2 <__aeabi_fadd+0x192>
    49ee:	000c      	movs	r4, r1
    49f0:	0003      	movs	r3, r0
    49f2:	2b00      	cmp	r3, #0
    49f4:	d0db      	beq.n	49ae <__aeabi_fadd+0x14e>
    49f6:	2080      	movs	r0, #128	; 0x80
    49f8:	03c0      	lsls	r0, r0, #15
    49fa:	4318      	orrs	r0, r3
    49fc:	0240      	lsls	r0, r0, #9
    49fe:	0a43      	lsrs	r3, r0, #9
    4a00:	469c      	mov	ip, r3
    4a02:	22ff      	movs	r2, #255	; 0xff
    4a04:	e771      	b.n	48ea <__aeabi_fadd+0x8a>
    4a06:	2900      	cmp	r1, #0
    4a08:	d0d5      	beq.n	49b6 <__aeabi_fadd+0x156>
    4a0a:	1b7a      	subs	r2, r7, r5
    4a0c:	2d00      	cmp	r5, #0
    4a0e:	d160      	bne.n	4ad2 <__aeabi_fadd+0x272>
    4a10:	4643      	mov	r3, r8
    4a12:	2b00      	cmp	r3, #0
    4a14:	d024      	beq.n	4a60 <__aeabi_fadd+0x200>
    4a16:	1e53      	subs	r3, r2, #1
    4a18:	2a01      	cmp	r2, #1
    4a1a:	d073      	beq.n	4b04 <__aeabi_fadd+0x2a4>
    4a1c:	2aff      	cmp	r2, #255	; 0xff
    4a1e:	d0e7      	beq.n	49f0 <__aeabi_fadd+0x190>
    4a20:	001a      	movs	r2, r3
    4a22:	2a1b      	cmp	r2, #27
    4a24:	dc00      	bgt.n	4a28 <__aeabi_fadd+0x1c8>
    4a26:	e085      	b.n	4b34 <__aeabi_fadd+0x2d4>
    4a28:	2001      	movs	r0, #1
    4a2a:	003d      	movs	r5, r7
    4a2c:	1980      	adds	r0, r0, r6
    4a2e:	e785      	b.n	493c <__aeabi_fadd+0xdc>
    4a30:	2320      	movs	r3, #32
    4a32:	003a      	movs	r2, r7
    4a34:	1b45      	subs	r5, r0, r5
    4a36:	0038      	movs	r0, r7
    4a38:	3501      	adds	r5, #1
    4a3a:	40ea      	lsrs	r2, r5
    4a3c:	1b5d      	subs	r5, r3, r5
    4a3e:	40a8      	lsls	r0, r5
    4a40:	1e43      	subs	r3, r0, #1
    4a42:	4198      	sbcs	r0, r3
    4a44:	2500      	movs	r5, #0
    4a46:	4310      	orrs	r0, r2
    4a48:	e73e      	b.n	48c8 <__aeabi_fadd+0x68>
    4a4a:	2320      	movs	r3, #32
    4a4c:	0030      	movs	r0, r6
    4a4e:	1a9b      	subs	r3, r3, r2
    4a50:	0031      	movs	r1, r6
    4a52:	4098      	lsls	r0, r3
    4a54:	40d1      	lsrs	r1, r2
    4a56:	1e43      	subs	r3, r0, #1
    4a58:	4198      	sbcs	r0, r3
    4a5a:	4308      	orrs	r0, r1
    4a5c:	e722      	b.n	48a4 <__aeabi_fadd+0x44>
    4a5e:	000c      	movs	r4, r1
    4a60:	0003      	movs	r3, r0
    4a62:	0015      	movs	r5, r2
    4a64:	e7b4      	b.n	49d0 <__aeabi_fadd+0x170>
    4a66:	2fff      	cmp	r7, #255	; 0xff
    4a68:	d0c1      	beq.n	49ee <__aeabi_fadd+0x18e>
    4a6a:	2380      	movs	r3, #128	; 0x80
    4a6c:	4640      	mov	r0, r8
    4a6e:	04db      	lsls	r3, r3, #19
    4a70:	4318      	orrs	r0, r3
    4a72:	4680      	mov	r8, r0
    4a74:	2a1b      	cmp	r2, #27
    4a76:	dd51      	ble.n	4b1c <__aeabi_fadd+0x2bc>
    4a78:	2001      	movs	r0, #1
    4a7a:	000c      	movs	r4, r1
    4a7c:	003d      	movs	r5, r7
    4a7e:	1a30      	subs	r0, r6, r0
    4a80:	e712      	b.n	48a8 <__aeabi_fadd+0x48>
    4a82:	4643      	mov	r3, r8
    4a84:	1b9f      	subs	r7, r3, r6
    4a86:	017b      	lsls	r3, r7, #5
    4a88:	d42b      	bmi.n	4ae2 <__aeabi_fadd+0x282>
    4a8a:	2f00      	cmp	r7, #0
    4a8c:	d000      	beq.n	4a90 <__aeabi_fadd+0x230>
    4a8e:	e710      	b.n	48b2 <__aeabi_fadd+0x52>
    4a90:	2300      	movs	r3, #0
    4a92:	2400      	movs	r4, #0
    4a94:	2200      	movs	r2, #0
    4a96:	469c      	mov	ip, r3
    4a98:	e727      	b.n	48ea <__aeabi_fadd+0x8a>
    4a9a:	2320      	movs	r3, #32
    4a9c:	0032      	movs	r2, r6
    4a9e:	0030      	movs	r0, r6
    4aa0:	40ca      	lsrs	r2, r1
    4aa2:	1a59      	subs	r1, r3, r1
    4aa4:	4088      	lsls	r0, r1
    4aa6:	1e43      	subs	r3, r0, #1
    4aa8:	4198      	sbcs	r0, r3
    4aaa:	4310      	orrs	r0, r2
    4aac:	e745      	b.n	493a <__aeabi_fadd+0xda>
    4aae:	2d00      	cmp	r5, #0
    4ab0:	d14a      	bne.n	4b48 <__aeabi_fadd+0x2e8>
    4ab2:	4643      	mov	r3, r8
    4ab4:	2b00      	cmp	r3, #0
    4ab6:	d063      	beq.n	4b80 <__aeabi_fadd+0x320>
    4ab8:	2200      	movs	r2, #0
    4aba:	2e00      	cmp	r6, #0
    4abc:	d100      	bne.n	4ac0 <__aeabi_fadd+0x260>
    4abe:	e714      	b.n	48ea <__aeabi_fadd+0x8a>
    4ac0:	0030      	movs	r0, r6
    4ac2:	4440      	add	r0, r8
    4ac4:	0143      	lsls	r3, r0, #5
    4ac6:	d400      	bmi.n	4aca <__aeabi_fadd+0x26a>
    4ac8:	e77e      	b.n	49c8 <__aeabi_fadd+0x168>
    4aca:	4b32      	ldr	r3, [pc, #200]	; (4b94 <__aeabi_fadd+0x334>)
    4acc:	3501      	adds	r5, #1
    4ace:	4018      	ands	r0, r3
    4ad0:	e77a      	b.n	49c8 <__aeabi_fadd+0x168>
    4ad2:	2fff      	cmp	r7, #255	; 0xff
    4ad4:	d08c      	beq.n	49f0 <__aeabi_fadd+0x190>
    4ad6:	2380      	movs	r3, #128	; 0x80
    4ad8:	4641      	mov	r1, r8
    4ada:	04db      	lsls	r3, r3, #19
    4adc:	4319      	orrs	r1, r3
    4ade:	4688      	mov	r8, r1
    4ae0:	e79f      	b.n	4a22 <__aeabi_fadd+0x1c2>
    4ae2:	4643      	mov	r3, r8
    4ae4:	000c      	movs	r4, r1
    4ae6:	1af7      	subs	r7, r6, r3
    4ae8:	e6e3      	b.n	48b2 <__aeabi_fadd+0x52>
    4aea:	4642      	mov	r2, r8
    4aec:	2a00      	cmp	r2, #0
    4aee:	d000      	beq.n	4af2 <__aeabi_fadd+0x292>
    4af0:	e775      	b.n	49de <__aeabi_fadd+0x17e>
    4af2:	2e00      	cmp	r6, #0
    4af4:	d000      	beq.n	4af8 <__aeabi_fadd+0x298>
    4af6:	e77a      	b.n	49ee <__aeabi_fadd+0x18e>
    4af8:	2380      	movs	r3, #128	; 0x80
    4afa:	03db      	lsls	r3, r3, #15
    4afc:	2400      	movs	r4, #0
    4afe:	469c      	mov	ip, r3
    4b00:	22ff      	movs	r2, #255	; 0xff
    4b02:	e6f2      	b.n	48ea <__aeabi_fadd+0x8a>
    4b04:	0030      	movs	r0, r6
    4b06:	4440      	add	r0, r8
    4b08:	2501      	movs	r5, #1
    4b0a:	0143      	lsls	r3, r0, #5
    4b0c:	d400      	bmi.n	4b10 <__aeabi_fadd+0x2b0>
    4b0e:	e75b      	b.n	49c8 <__aeabi_fadd+0x168>
    4b10:	2502      	movs	r5, #2
    4b12:	e718      	b.n	4946 <__aeabi_fadd+0xe6>
    4b14:	4643      	mov	r3, r8
    4b16:	2501      	movs	r5, #1
    4b18:	1b98      	subs	r0, r3, r6
    4b1a:	e6c5      	b.n	48a8 <__aeabi_fadd+0x48>
    4b1c:	2320      	movs	r3, #32
    4b1e:	4644      	mov	r4, r8
    4b20:	4640      	mov	r0, r8
    4b22:	40d4      	lsrs	r4, r2
    4b24:	1a9a      	subs	r2, r3, r2
    4b26:	4090      	lsls	r0, r2
    4b28:	1e43      	subs	r3, r0, #1
    4b2a:	4198      	sbcs	r0, r3
    4b2c:	4320      	orrs	r0, r4
    4b2e:	e7a4      	b.n	4a7a <__aeabi_fadd+0x21a>
    4b30:	000d      	movs	r5, r1
    4b32:	e74d      	b.n	49d0 <__aeabi_fadd+0x170>
    4b34:	2320      	movs	r3, #32
    4b36:	4641      	mov	r1, r8
    4b38:	4640      	mov	r0, r8
    4b3a:	40d1      	lsrs	r1, r2
    4b3c:	1a9a      	subs	r2, r3, r2
    4b3e:	4090      	lsls	r0, r2
    4b40:	1e43      	subs	r3, r0, #1
    4b42:	4198      	sbcs	r0, r3
    4b44:	4308      	orrs	r0, r1
    4b46:	e770      	b.n	4a2a <__aeabi_fadd+0x1ca>
    4b48:	4642      	mov	r2, r8
    4b4a:	2a00      	cmp	r2, #0
    4b4c:	d100      	bne.n	4b50 <__aeabi_fadd+0x2f0>
    4b4e:	e74f      	b.n	49f0 <__aeabi_fadd+0x190>
    4b50:	2e00      	cmp	r6, #0
    4b52:	d100      	bne.n	4b56 <__aeabi_fadd+0x2f6>
    4b54:	e74d      	b.n	49f2 <__aeabi_fadd+0x192>
    4b56:	2280      	movs	r2, #128	; 0x80
    4b58:	03d2      	lsls	r2, r2, #15
    4b5a:	4213      	tst	r3, r2
    4b5c:	d100      	bne.n	4b60 <__aeabi_fadd+0x300>
    4b5e:	e748      	b.n	49f2 <__aeabi_fadd+0x192>
    4b60:	4210      	tst	r0, r2
    4b62:	d000      	beq.n	4b66 <__aeabi_fadd+0x306>
    4b64:	e745      	b.n	49f2 <__aeabi_fadd+0x192>
    4b66:	0003      	movs	r3, r0
    4b68:	e743      	b.n	49f2 <__aeabi_fadd+0x192>
    4b6a:	2e00      	cmp	r6, #0
    4b6c:	d090      	beq.n	4a90 <__aeabi_fadd+0x230>
    4b6e:	000c      	movs	r4, r1
    4b70:	4684      	mov	ip, r0
    4b72:	2200      	movs	r2, #0
    4b74:	e6b9      	b.n	48ea <__aeabi_fadd+0x8a>
    4b76:	4643      	mov	r3, r8
    4b78:	000c      	movs	r4, r1
    4b7a:	1af0      	subs	r0, r6, r3
    4b7c:	3501      	adds	r5, #1
    4b7e:	e693      	b.n	48a8 <__aeabi_fadd+0x48>
    4b80:	4684      	mov	ip, r0
    4b82:	2200      	movs	r2, #0
    4b84:	e6b1      	b.n	48ea <__aeabi_fadd+0x8a>
    4b86:	2800      	cmp	r0, #0
    4b88:	d000      	beq.n	4b8c <__aeabi_fadd+0x32c>
    4b8a:	e71d      	b.n	49c8 <__aeabi_fadd+0x168>
    4b8c:	2300      	movs	r3, #0
    4b8e:	2400      	movs	r4, #0
    4b90:	469c      	mov	ip, r3
    4b92:	e6aa      	b.n	48ea <__aeabi_fadd+0x8a>
    4b94:	fbffffff 	.word	0xfbffffff
    4b98:	7dffffff 	.word	0x7dffffff

00004b9c <__aeabi_fdiv>:
    4b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b9e:	464f      	mov	r7, r9
    4ba0:	4646      	mov	r6, r8
    4ba2:	46d6      	mov	lr, sl
    4ba4:	0245      	lsls	r5, r0, #9
    4ba6:	b5c0      	push	{r6, r7, lr}
    4ba8:	0047      	lsls	r7, r0, #1
    4baa:	1c0c      	adds	r4, r1, #0
    4bac:	0a6d      	lsrs	r5, r5, #9
    4bae:	0e3f      	lsrs	r7, r7, #24
    4bb0:	0fc6      	lsrs	r6, r0, #31
    4bb2:	2f00      	cmp	r7, #0
    4bb4:	d100      	bne.n	4bb8 <__aeabi_fdiv+0x1c>
    4bb6:	e070      	b.n	4c9a <__aeabi_fdiv+0xfe>
    4bb8:	2fff      	cmp	r7, #255	; 0xff
    4bba:	d100      	bne.n	4bbe <__aeabi_fdiv+0x22>
    4bbc:	e075      	b.n	4caa <__aeabi_fdiv+0x10e>
    4bbe:	00eb      	lsls	r3, r5, #3
    4bc0:	2580      	movs	r5, #128	; 0x80
    4bc2:	04ed      	lsls	r5, r5, #19
    4bc4:	431d      	orrs	r5, r3
    4bc6:	2300      	movs	r3, #0
    4bc8:	4699      	mov	r9, r3
    4bca:	469a      	mov	sl, r3
    4bcc:	3f7f      	subs	r7, #127	; 0x7f
    4bce:	0260      	lsls	r0, r4, #9
    4bd0:	0a43      	lsrs	r3, r0, #9
    4bd2:	4698      	mov	r8, r3
    4bd4:	0063      	lsls	r3, r4, #1
    4bd6:	0e1b      	lsrs	r3, r3, #24
    4bd8:	0fe4      	lsrs	r4, r4, #31
    4bda:	2b00      	cmp	r3, #0
    4bdc:	d04e      	beq.n	4c7c <__aeabi_fdiv+0xe0>
    4bde:	2bff      	cmp	r3, #255	; 0xff
    4be0:	d046      	beq.n	4c70 <__aeabi_fdiv+0xd4>
    4be2:	4642      	mov	r2, r8
    4be4:	00d0      	lsls	r0, r2, #3
    4be6:	2280      	movs	r2, #128	; 0x80
    4be8:	04d2      	lsls	r2, r2, #19
    4bea:	4302      	orrs	r2, r0
    4bec:	4690      	mov	r8, r2
    4bee:	2200      	movs	r2, #0
    4bf0:	3b7f      	subs	r3, #127	; 0x7f
    4bf2:	0031      	movs	r1, r6
    4bf4:	1aff      	subs	r7, r7, r3
    4bf6:	464b      	mov	r3, r9
    4bf8:	4061      	eors	r1, r4
    4bfa:	b2c9      	uxtb	r1, r1
    4bfc:	4313      	orrs	r3, r2
    4bfe:	2b0f      	cmp	r3, #15
    4c00:	d900      	bls.n	4c04 <__aeabi_fdiv+0x68>
    4c02:	e0b5      	b.n	4d70 <__aeabi_fdiv+0x1d4>
    4c04:	486e      	ldr	r0, [pc, #440]	; (4dc0 <__aeabi_fdiv+0x224>)
    4c06:	009b      	lsls	r3, r3, #2
    4c08:	58c3      	ldr	r3, [r0, r3]
    4c0a:	469f      	mov	pc, r3
    4c0c:	2300      	movs	r3, #0
    4c0e:	4698      	mov	r8, r3
    4c10:	0026      	movs	r6, r4
    4c12:	4645      	mov	r5, r8
    4c14:	4692      	mov	sl, r2
    4c16:	4653      	mov	r3, sl
    4c18:	2b02      	cmp	r3, #2
    4c1a:	d100      	bne.n	4c1e <__aeabi_fdiv+0x82>
    4c1c:	e089      	b.n	4d32 <__aeabi_fdiv+0x196>
    4c1e:	2b03      	cmp	r3, #3
    4c20:	d100      	bne.n	4c24 <__aeabi_fdiv+0x88>
    4c22:	e09e      	b.n	4d62 <__aeabi_fdiv+0x1c6>
    4c24:	2b01      	cmp	r3, #1
    4c26:	d018      	beq.n	4c5a <__aeabi_fdiv+0xbe>
    4c28:	003b      	movs	r3, r7
    4c2a:	337f      	adds	r3, #127	; 0x7f
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	dd69      	ble.n	4d04 <__aeabi_fdiv+0x168>
    4c30:	076a      	lsls	r2, r5, #29
    4c32:	d004      	beq.n	4c3e <__aeabi_fdiv+0xa2>
    4c34:	220f      	movs	r2, #15
    4c36:	402a      	ands	r2, r5
    4c38:	2a04      	cmp	r2, #4
    4c3a:	d000      	beq.n	4c3e <__aeabi_fdiv+0xa2>
    4c3c:	3504      	adds	r5, #4
    4c3e:	012a      	lsls	r2, r5, #4
    4c40:	d503      	bpl.n	4c4a <__aeabi_fdiv+0xae>
    4c42:	4b60      	ldr	r3, [pc, #384]	; (4dc4 <__aeabi_fdiv+0x228>)
    4c44:	401d      	ands	r5, r3
    4c46:	003b      	movs	r3, r7
    4c48:	3380      	adds	r3, #128	; 0x80
    4c4a:	2bfe      	cmp	r3, #254	; 0xfe
    4c4c:	dd00      	ble.n	4c50 <__aeabi_fdiv+0xb4>
    4c4e:	e070      	b.n	4d32 <__aeabi_fdiv+0x196>
    4c50:	01ad      	lsls	r5, r5, #6
    4c52:	0a6d      	lsrs	r5, r5, #9
    4c54:	b2d8      	uxtb	r0, r3
    4c56:	e002      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4c58:	000e      	movs	r6, r1
    4c5a:	2000      	movs	r0, #0
    4c5c:	2500      	movs	r5, #0
    4c5e:	05c0      	lsls	r0, r0, #23
    4c60:	4328      	orrs	r0, r5
    4c62:	07f6      	lsls	r6, r6, #31
    4c64:	4330      	orrs	r0, r6
    4c66:	bce0      	pop	{r5, r6, r7}
    4c68:	46ba      	mov	sl, r7
    4c6a:	46b1      	mov	r9, r6
    4c6c:	46a8      	mov	r8, r5
    4c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c70:	4643      	mov	r3, r8
    4c72:	2b00      	cmp	r3, #0
    4c74:	d13f      	bne.n	4cf6 <__aeabi_fdiv+0x15a>
    4c76:	2202      	movs	r2, #2
    4c78:	3fff      	subs	r7, #255	; 0xff
    4c7a:	e003      	b.n	4c84 <__aeabi_fdiv+0xe8>
    4c7c:	4643      	mov	r3, r8
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d12d      	bne.n	4cde <__aeabi_fdiv+0x142>
    4c82:	2201      	movs	r2, #1
    4c84:	0031      	movs	r1, r6
    4c86:	464b      	mov	r3, r9
    4c88:	4061      	eors	r1, r4
    4c8a:	b2c9      	uxtb	r1, r1
    4c8c:	4313      	orrs	r3, r2
    4c8e:	2b0f      	cmp	r3, #15
    4c90:	d834      	bhi.n	4cfc <__aeabi_fdiv+0x160>
    4c92:	484d      	ldr	r0, [pc, #308]	; (4dc8 <__aeabi_fdiv+0x22c>)
    4c94:	009b      	lsls	r3, r3, #2
    4c96:	58c3      	ldr	r3, [r0, r3]
    4c98:	469f      	mov	pc, r3
    4c9a:	2d00      	cmp	r5, #0
    4c9c:	d113      	bne.n	4cc6 <__aeabi_fdiv+0x12a>
    4c9e:	2304      	movs	r3, #4
    4ca0:	4699      	mov	r9, r3
    4ca2:	3b03      	subs	r3, #3
    4ca4:	2700      	movs	r7, #0
    4ca6:	469a      	mov	sl, r3
    4ca8:	e791      	b.n	4bce <__aeabi_fdiv+0x32>
    4caa:	2d00      	cmp	r5, #0
    4cac:	d105      	bne.n	4cba <__aeabi_fdiv+0x11e>
    4cae:	2308      	movs	r3, #8
    4cb0:	4699      	mov	r9, r3
    4cb2:	3b06      	subs	r3, #6
    4cb4:	27ff      	movs	r7, #255	; 0xff
    4cb6:	469a      	mov	sl, r3
    4cb8:	e789      	b.n	4bce <__aeabi_fdiv+0x32>
    4cba:	230c      	movs	r3, #12
    4cbc:	4699      	mov	r9, r3
    4cbe:	3b09      	subs	r3, #9
    4cc0:	27ff      	movs	r7, #255	; 0xff
    4cc2:	469a      	mov	sl, r3
    4cc4:	e783      	b.n	4bce <__aeabi_fdiv+0x32>
    4cc6:	0028      	movs	r0, r5
    4cc8:	f002 ff68 	bl	7b9c <__clzsi2>
    4ccc:	2776      	movs	r7, #118	; 0x76
    4cce:	1f43      	subs	r3, r0, #5
    4cd0:	409d      	lsls	r5, r3
    4cd2:	2300      	movs	r3, #0
    4cd4:	427f      	negs	r7, r7
    4cd6:	4699      	mov	r9, r3
    4cd8:	469a      	mov	sl, r3
    4cda:	1a3f      	subs	r7, r7, r0
    4cdc:	e777      	b.n	4bce <__aeabi_fdiv+0x32>
    4cde:	4640      	mov	r0, r8
    4ce0:	f002 ff5c 	bl	7b9c <__clzsi2>
    4ce4:	4642      	mov	r2, r8
    4ce6:	1f43      	subs	r3, r0, #5
    4ce8:	409a      	lsls	r2, r3
    4cea:	2376      	movs	r3, #118	; 0x76
    4cec:	425b      	negs	r3, r3
    4cee:	4690      	mov	r8, r2
    4cf0:	1a1b      	subs	r3, r3, r0
    4cf2:	2200      	movs	r2, #0
    4cf4:	e77d      	b.n	4bf2 <__aeabi_fdiv+0x56>
    4cf6:	23ff      	movs	r3, #255	; 0xff
    4cf8:	2203      	movs	r2, #3
    4cfa:	e77a      	b.n	4bf2 <__aeabi_fdiv+0x56>
    4cfc:	000e      	movs	r6, r1
    4cfe:	20ff      	movs	r0, #255	; 0xff
    4d00:	2500      	movs	r5, #0
    4d02:	e7ac      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d04:	2001      	movs	r0, #1
    4d06:	1ac0      	subs	r0, r0, r3
    4d08:	281b      	cmp	r0, #27
    4d0a:	dca6      	bgt.n	4c5a <__aeabi_fdiv+0xbe>
    4d0c:	379e      	adds	r7, #158	; 0x9e
    4d0e:	002a      	movs	r2, r5
    4d10:	40bd      	lsls	r5, r7
    4d12:	40c2      	lsrs	r2, r0
    4d14:	1e6b      	subs	r3, r5, #1
    4d16:	419d      	sbcs	r5, r3
    4d18:	4315      	orrs	r5, r2
    4d1a:	076b      	lsls	r3, r5, #29
    4d1c:	d004      	beq.n	4d28 <__aeabi_fdiv+0x18c>
    4d1e:	230f      	movs	r3, #15
    4d20:	402b      	ands	r3, r5
    4d22:	2b04      	cmp	r3, #4
    4d24:	d000      	beq.n	4d28 <__aeabi_fdiv+0x18c>
    4d26:	3504      	adds	r5, #4
    4d28:	016b      	lsls	r3, r5, #5
    4d2a:	d544      	bpl.n	4db6 <__aeabi_fdiv+0x21a>
    4d2c:	2001      	movs	r0, #1
    4d2e:	2500      	movs	r5, #0
    4d30:	e795      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d32:	20ff      	movs	r0, #255	; 0xff
    4d34:	2500      	movs	r5, #0
    4d36:	e792      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d38:	2580      	movs	r5, #128	; 0x80
    4d3a:	2600      	movs	r6, #0
    4d3c:	20ff      	movs	r0, #255	; 0xff
    4d3e:	03ed      	lsls	r5, r5, #15
    4d40:	e78d      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d42:	2300      	movs	r3, #0
    4d44:	4698      	mov	r8, r3
    4d46:	2080      	movs	r0, #128	; 0x80
    4d48:	03c0      	lsls	r0, r0, #15
    4d4a:	4205      	tst	r5, r0
    4d4c:	d009      	beq.n	4d62 <__aeabi_fdiv+0x1c6>
    4d4e:	4643      	mov	r3, r8
    4d50:	4203      	tst	r3, r0
    4d52:	d106      	bne.n	4d62 <__aeabi_fdiv+0x1c6>
    4d54:	4645      	mov	r5, r8
    4d56:	4305      	orrs	r5, r0
    4d58:	026d      	lsls	r5, r5, #9
    4d5a:	0026      	movs	r6, r4
    4d5c:	20ff      	movs	r0, #255	; 0xff
    4d5e:	0a6d      	lsrs	r5, r5, #9
    4d60:	e77d      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d62:	2080      	movs	r0, #128	; 0x80
    4d64:	03c0      	lsls	r0, r0, #15
    4d66:	4305      	orrs	r5, r0
    4d68:	026d      	lsls	r5, r5, #9
    4d6a:	20ff      	movs	r0, #255	; 0xff
    4d6c:	0a6d      	lsrs	r5, r5, #9
    4d6e:	e776      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4d70:	4642      	mov	r2, r8
    4d72:	016b      	lsls	r3, r5, #5
    4d74:	0150      	lsls	r0, r2, #5
    4d76:	4283      	cmp	r3, r0
    4d78:	d219      	bcs.n	4dae <__aeabi_fdiv+0x212>
    4d7a:	221b      	movs	r2, #27
    4d7c:	2500      	movs	r5, #0
    4d7e:	3f01      	subs	r7, #1
    4d80:	2601      	movs	r6, #1
    4d82:	001c      	movs	r4, r3
    4d84:	006d      	lsls	r5, r5, #1
    4d86:	005b      	lsls	r3, r3, #1
    4d88:	2c00      	cmp	r4, #0
    4d8a:	db01      	blt.n	4d90 <__aeabi_fdiv+0x1f4>
    4d8c:	4298      	cmp	r0, r3
    4d8e:	d801      	bhi.n	4d94 <__aeabi_fdiv+0x1f8>
    4d90:	1a1b      	subs	r3, r3, r0
    4d92:	4335      	orrs	r5, r6
    4d94:	3a01      	subs	r2, #1
    4d96:	2a00      	cmp	r2, #0
    4d98:	d1f3      	bne.n	4d82 <__aeabi_fdiv+0x1e6>
    4d9a:	1e5a      	subs	r2, r3, #1
    4d9c:	4193      	sbcs	r3, r2
    4d9e:	431d      	orrs	r5, r3
    4da0:	003b      	movs	r3, r7
    4da2:	337f      	adds	r3, #127	; 0x7f
    4da4:	000e      	movs	r6, r1
    4da6:	2b00      	cmp	r3, #0
    4da8:	dd00      	ble.n	4dac <__aeabi_fdiv+0x210>
    4daa:	e741      	b.n	4c30 <__aeabi_fdiv+0x94>
    4dac:	e7aa      	b.n	4d04 <__aeabi_fdiv+0x168>
    4dae:	221a      	movs	r2, #26
    4db0:	2501      	movs	r5, #1
    4db2:	1a1b      	subs	r3, r3, r0
    4db4:	e7e4      	b.n	4d80 <__aeabi_fdiv+0x1e4>
    4db6:	01ad      	lsls	r5, r5, #6
    4db8:	2000      	movs	r0, #0
    4dba:	0a6d      	lsrs	r5, r5, #9
    4dbc:	e74f      	b.n	4c5e <__aeabi_fdiv+0xc2>
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	000142c0 	.word	0x000142c0
    4dc4:	f7ffffff 	.word	0xf7ffffff
    4dc8:	00014300 	.word	0x00014300

00004dcc <__eqsf2>:
    4dcc:	b570      	push	{r4, r5, r6, lr}
    4dce:	0042      	lsls	r2, r0, #1
    4dd0:	0245      	lsls	r5, r0, #9
    4dd2:	024e      	lsls	r6, r1, #9
    4dd4:	004c      	lsls	r4, r1, #1
    4dd6:	0fc3      	lsrs	r3, r0, #31
    4dd8:	0a6d      	lsrs	r5, r5, #9
    4dda:	2001      	movs	r0, #1
    4ddc:	0e12      	lsrs	r2, r2, #24
    4dde:	0a76      	lsrs	r6, r6, #9
    4de0:	0e24      	lsrs	r4, r4, #24
    4de2:	0fc9      	lsrs	r1, r1, #31
    4de4:	2aff      	cmp	r2, #255	; 0xff
    4de6:	d006      	beq.n	4df6 <__eqsf2+0x2a>
    4de8:	2cff      	cmp	r4, #255	; 0xff
    4dea:	d003      	beq.n	4df4 <__eqsf2+0x28>
    4dec:	42a2      	cmp	r2, r4
    4dee:	d101      	bne.n	4df4 <__eqsf2+0x28>
    4df0:	42b5      	cmp	r5, r6
    4df2:	d006      	beq.n	4e02 <__eqsf2+0x36>
    4df4:	bd70      	pop	{r4, r5, r6, pc}
    4df6:	2d00      	cmp	r5, #0
    4df8:	d1fc      	bne.n	4df4 <__eqsf2+0x28>
    4dfa:	2cff      	cmp	r4, #255	; 0xff
    4dfc:	d1fa      	bne.n	4df4 <__eqsf2+0x28>
    4dfe:	2e00      	cmp	r6, #0
    4e00:	d1f8      	bne.n	4df4 <__eqsf2+0x28>
    4e02:	428b      	cmp	r3, r1
    4e04:	d006      	beq.n	4e14 <__eqsf2+0x48>
    4e06:	2001      	movs	r0, #1
    4e08:	2a00      	cmp	r2, #0
    4e0a:	d1f3      	bne.n	4df4 <__eqsf2+0x28>
    4e0c:	0028      	movs	r0, r5
    4e0e:	1e43      	subs	r3, r0, #1
    4e10:	4198      	sbcs	r0, r3
    4e12:	e7ef      	b.n	4df4 <__eqsf2+0x28>
    4e14:	2000      	movs	r0, #0
    4e16:	e7ed      	b.n	4df4 <__eqsf2+0x28>

00004e18 <__gesf2>:
    4e18:	b570      	push	{r4, r5, r6, lr}
    4e1a:	0042      	lsls	r2, r0, #1
    4e1c:	0245      	lsls	r5, r0, #9
    4e1e:	024e      	lsls	r6, r1, #9
    4e20:	004c      	lsls	r4, r1, #1
    4e22:	0fc3      	lsrs	r3, r0, #31
    4e24:	0a6d      	lsrs	r5, r5, #9
    4e26:	0e12      	lsrs	r2, r2, #24
    4e28:	0a76      	lsrs	r6, r6, #9
    4e2a:	0e24      	lsrs	r4, r4, #24
    4e2c:	0fc8      	lsrs	r0, r1, #31
    4e2e:	2aff      	cmp	r2, #255	; 0xff
    4e30:	d01b      	beq.n	4e6a <__gesf2+0x52>
    4e32:	2cff      	cmp	r4, #255	; 0xff
    4e34:	d00e      	beq.n	4e54 <__gesf2+0x3c>
    4e36:	2a00      	cmp	r2, #0
    4e38:	d11b      	bne.n	4e72 <__gesf2+0x5a>
    4e3a:	2c00      	cmp	r4, #0
    4e3c:	d101      	bne.n	4e42 <__gesf2+0x2a>
    4e3e:	2e00      	cmp	r6, #0
    4e40:	d01c      	beq.n	4e7c <__gesf2+0x64>
    4e42:	2d00      	cmp	r5, #0
    4e44:	d00c      	beq.n	4e60 <__gesf2+0x48>
    4e46:	4283      	cmp	r3, r0
    4e48:	d01c      	beq.n	4e84 <__gesf2+0x6c>
    4e4a:	2102      	movs	r1, #2
    4e4c:	1e58      	subs	r0, r3, #1
    4e4e:	4008      	ands	r0, r1
    4e50:	3801      	subs	r0, #1
    4e52:	bd70      	pop	{r4, r5, r6, pc}
    4e54:	2e00      	cmp	r6, #0
    4e56:	d122      	bne.n	4e9e <__gesf2+0x86>
    4e58:	2a00      	cmp	r2, #0
    4e5a:	d1f4      	bne.n	4e46 <__gesf2+0x2e>
    4e5c:	2d00      	cmp	r5, #0
    4e5e:	d1f2      	bne.n	4e46 <__gesf2+0x2e>
    4e60:	2800      	cmp	r0, #0
    4e62:	d1f6      	bne.n	4e52 <__gesf2+0x3a>
    4e64:	2001      	movs	r0, #1
    4e66:	4240      	negs	r0, r0
    4e68:	e7f3      	b.n	4e52 <__gesf2+0x3a>
    4e6a:	2d00      	cmp	r5, #0
    4e6c:	d117      	bne.n	4e9e <__gesf2+0x86>
    4e6e:	2cff      	cmp	r4, #255	; 0xff
    4e70:	d0f0      	beq.n	4e54 <__gesf2+0x3c>
    4e72:	2c00      	cmp	r4, #0
    4e74:	d1e7      	bne.n	4e46 <__gesf2+0x2e>
    4e76:	2e00      	cmp	r6, #0
    4e78:	d1e5      	bne.n	4e46 <__gesf2+0x2e>
    4e7a:	e7e6      	b.n	4e4a <__gesf2+0x32>
    4e7c:	2000      	movs	r0, #0
    4e7e:	2d00      	cmp	r5, #0
    4e80:	d0e7      	beq.n	4e52 <__gesf2+0x3a>
    4e82:	e7e2      	b.n	4e4a <__gesf2+0x32>
    4e84:	42a2      	cmp	r2, r4
    4e86:	dc05      	bgt.n	4e94 <__gesf2+0x7c>
    4e88:	dbea      	blt.n	4e60 <__gesf2+0x48>
    4e8a:	42b5      	cmp	r5, r6
    4e8c:	d802      	bhi.n	4e94 <__gesf2+0x7c>
    4e8e:	d3e7      	bcc.n	4e60 <__gesf2+0x48>
    4e90:	2000      	movs	r0, #0
    4e92:	e7de      	b.n	4e52 <__gesf2+0x3a>
    4e94:	4243      	negs	r3, r0
    4e96:	4158      	adcs	r0, r3
    4e98:	0040      	lsls	r0, r0, #1
    4e9a:	3801      	subs	r0, #1
    4e9c:	e7d9      	b.n	4e52 <__gesf2+0x3a>
    4e9e:	2002      	movs	r0, #2
    4ea0:	4240      	negs	r0, r0
    4ea2:	e7d6      	b.n	4e52 <__gesf2+0x3a>

00004ea4 <__lesf2>:
    4ea4:	b570      	push	{r4, r5, r6, lr}
    4ea6:	0042      	lsls	r2, r0, #1
    4ea8:	0245      	lsls	r5, r0, #9
    4eaa:	024e      	lsls	r6, r1, #9
    4eac:	004c      	lsls	r4, r1, #1
    4eae:	0fc3      	lsrs	r3, r0, #31
    4eb0:	0a6d      	lsrs	r5, r5, #9
    4eb2:	0e12      	lsrs	r2, r2, #24
    4eb4:	0a76      	lsrs	r6, r6, #9
    4eb6:	0e24      	lsrs	r4, r4, #24
    4eb8:	0fc8      	lsrs	r0, r1, #31
    4eba:	2aff      	cmp	r2, #255	; 0xff
    4ebc:	d00b      	beq.n	4ed6 <__lesf2+0x32>
    4ebe:	2cff      	cmp	r4, #255	; 0xff
    4ec0:	d00d      	beq.n	4ede <__lesf2+0x3a>
    4ec2:	2a00      	cmp	r2, #0
    4ec4:	d11f      	bne.n	4f06 <__lesf2+0x62>
    4ec6:	2c00      	cmp	r4, #0
    4ec8:	d116      	bne.n	4ef8 <__lesf2+0x54>
    4eca:	2e00      	cmp	r6, #0
    4ecc:	d114      	bne.n	4ef8 <__lesf2+0x54>
    4ece:	2000      	movs	r0, #0
    4ed0:	2d00      	cmp	r5, #0
    4ed2:	d010      	beq.n	4ef6 <__lesf2+0x52>
    4ed4:	e009      	b.n	4eea <__lesf2+0x46>
    4ed6:	2d00      	cmp	r5, #0
    4ed8:	d10c      	bne.n	4ef4 <__lesf2+0x50>
    4eda:	2cff      	cmp	r4, #255	; 0xff
    4edc:	d113      	bne.n	4f06 <__lesf2+0x62>
    4ede:	2e00      	cmp	r6, #0
    4ee0:	d108      	bne.n	4ef4 <__lesf2+0x50>
    4ee2:	2a00      	cmp	r2, #0
    4ee4:	d008      	beq.n	4ef8 <__lesf2+0x54>
    4ee6:	4283      	cmp	r3, r0
    4ee8:	d012      	beq.n	4f10 <__lesf2+0x6c>
    4eea:	2102      	movs	r1, #2
    4eec:	1e58      	subs	r0, r3, #1
    4eee:	4008      	ands	r0, r1
    4ef0:	3801      	subs	r0, #1
    4ef2:	e000      	b.n	4ef6 <__lesf2+0x52>
    4ef4:	2002      	movs	r0, #2
    4ef6:	bd70      	pop	{r4, r5, r6, pc}
    4ef8:	2d00      	cmp	r5, #0
    4efa:	d1f4      	bne.n	4ee6 <__lesf2+0x42>
    4efc:	2800      	cmp	r0, #0
    4efe:	d1fa      	bne.n	4ef6 <__lesf2+0x52>
    4f00:	2001      	movs	r0, #1
    4f02:	4240      	negs	r0, r0
    4f04:	e7f7      	b.n	4ef6 <__lesf2+0x52>
    4f06:	2c00      	cmp	r4, #0
    4f08:	d1ed      	bne.n	4ee6 <__lesf2+0x42>
    4f0a:	2e00      	cmp	r6, #0
    4f0c:	d1eb      	bne.n	4ee6 <__lesf2+0x42>
    4f0e:	e7ec      	b.n	4eea <__lesf2+0x46>
    4f10:	42a2      	cmp	r2, r4
    4f12:	dc05      	bgt.n	4f20 <__lesf2+0x7c>
    4f14:	dbf2      	blt.n	4efc <__lesf2+0x58>
    4f16:	42b5      	cmp	r5, r6
    4f18:	d802      	bhi.n	4f20 <__lesf2+0x7c>
    4f1a:	d3ef      	bcc.n	4efc <__lesf2+0x58>
    4f1c:	2000      	movs	r0, #0
    4f1e:	e7ea      	b.n	4ef6 <__lesf2+0x52>
    4f20:	4243      	negs	r3, r0
    4f22:	4158      	adcs	r0, r3
    4f24:	0040      	lsls	r0, r0, #1
    4f26:	3801      	subs	r0, #1
    4f28:	e7e5      	b.n	4ef6 <__lesf2+0x52>
    4f2a:	46c0      	nop			; (mov r8, r8)

00004f2c <__aeabi_dadd>:
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	464f      	mov	r7, r9
    4f30:	4646      	mov	r6, r8
    4f32:	46d6      	mov	lr, sl
    4f34:	000d      	movs	r5, r1
    4f36:	0004      	movs	r4, r0
    4f38:	b5c0      	push	{r6, r7, lr}
    4f3a:	001f      	movs	r7, r3
    4f3c:	0011      	movs	r1, r2
    4f3e:	0328      	lsls	r0, r5, #12
    4f40:	0f62      	lsrs	r2, r4, #29
    4f42:	0a40      	lsrs	r0, r0, #9
    4f44:	4310      	orrs	r0, r2
    4f46:	007a      	lsls	r2, r7, #1
    4f48:	0d52      	lsrs	r2, r2, #21
    4f4a:	00e3      	lsls	r3, r4, #3
    4f4c:	033c      	lsls	r4, r7, #12
    4f4e:	4691      	mov	r9, r2
    4f50:	0a64      	lsrs	r4, r4, #9
    4f52:	0ffa      	lsrs	r2, r7, #31
    4f54:	0f4f      	lsrs	r7, r1, #29
    4f56:	006e      	lsls	r6, r5, #1
    4f58:	4327      	orrs	r7, r4
    4f5a:	4692      	mov	sl, r2
    4f5c:	46b8      	mov	r8, r7
    4f5e:	0d76      	lsrs	r6, r6, #21
    4f60:	0fed      	lsrs	r5, r5, #31
    4f62:	00c9      	lsls	r1, r1, #3
    4f64:	4295      	cmp	r5, r2
    4f66:	d100      	bne.n	4f6a <__aeabi_dadd+0x3e>
    4f68:	e099      	b.n	509e <__aeabi_dadd+0x172>
    4f6a:	464c      	mov	r4, r9
    4f6c:	1b34      	subs	r4, r6, r4
    4f6e:	46a4      	mov	ip, r4
    4f70:	2c00      	cmp	r4, #0
    4f72:	dc00      	bgt.n	4f76 <__aeabi_dadd+0x4a>
    4f74:	e07c      	b.n	5070 <__aeabi_dadd+0x144>
    4f76:	464a      	mov	r2, r9
    4f78:	2a00      	cmp	r2, #0
    4f7a:	d100      	bne.n	4f7e <__aeabi_dadd+0x52>
    4f7c:	e0b8      	b.n	50f0 <__aeabi_dadd+0x1c4>
    4f7e:	4ac5      	ldr	r2, [pc, #788]	; (5294 <__aeabi_dadd+0x368>)
    4f80:	4296      	cmp	r6, r2
    4f82:	d100      	bne.n	4f86 <__aeabi_dadd+0x5a>
    4f84:	e11c      	b.n	51c0 <__aeabi_dadd+0x294>
    4f86:	2280      	movs	r2, #128	; 0x80
    4f88:	003c      	movs	r4, r7
    4f8a:	0412      	lsls	r2, r2, #16
    4f8c:	4314      	orrs	r4, r2
    4f8e:	46a0      	mov	r8, r4
    4f90:	4662      	mov	r2, ip
    4f92:	2a38      	cmp	r2, #56	; 0x38
    4f94:	dd00      	ble.n	4f98 <__aeabi_dadd+0x6c>
    4f96:	e161      	b.n	525c <__aeabi_dadd+0x330>
    4f98:	2a1f      	cmp	r2, #31
    4f9a:	dd00      	ble.n	4f9e <__aeabi_dadd+0x72>
    4f9c:	e1cc      	b.n	5338 <__aeabi_dadd+0x40c>
    4f9e:	4664      	mov	r4, ip
    4fa0:	2220      	movs	r2, #32
    4fa2:	1b12      	subs	r2, r2, r4
    4fa4:	4644      	mov	r4, r8
    4fa6:	4094      	lsls	r4, r2
    4fa8:	000f      	movs	r7, r1
    4faa:	46a1      	mov	r9, r4
    4fac:	4664      	mov	r4, ip
    4fae:	4091      	lsls	r1, r2
    4fb0:	40e7      	lsrs	r7, r4
    4fb2:	464c      	mov	r4, r9
    4fb4:	1e4a      	subs	r2, r1, #1
    4fb6:	4191      	sbcs	r1, r2
    4fb8:	433c      	orrs	r4, r7
    4fba:	4642      	mov	r2, r8
    4fbc:	4321      	orrs	r1, r4
    4fbe:	4664      	mov	r4, ip
    4fc0:	40e2      	lsrs	r2, r4
    4fc2:	1a80      	subs	r0, r0, r2
    4fc4:	1a5c      	subs	r4, r3, r1
    4fc6:	42a3      	cmp	r3, r4
    4fc8:	419b      	sbcs	r3, r3
    4fca:	425f      	negs	r7, r3
    4fcc:	1bc7      	subs	r7, r0, r7
    4fce:	023b      	lsls	r3, r7, #8
    4fd0:	d400      	bmi.n	4fd4 <__aeabi_dadd+0xa8>
    4fd2:	e0d0      	b.n	5176 <__aeabi_dadd+0x24a>
    4fd4:	027f      	lsls	r7, r7, #9
    4fd6:	0a7f      	lsrs	r7, r7, #9
    4fd8:	2f00      	cmp	r7, #0
    4fda:	d100      	bne.n	4fde <__aeabi_dadd+0xb2>
    4fdc:	e0ff      	b.n	51de <__aeabi_dadd+0x2b2>
    4fde:	0038      	movs	r0, r7
    4fe0:	f002 fddc 	bl	7b9c <__clzsi2>
    4fe4:	0001      	movs	r1, r0
    4fe6:	3908      	subs	r1, #8
    4fe8:	2320      	movs	r3, #32
    4fea:	0022      	movs	r2, r4
    4fec:	1a5b      	subs	r3, r3, r1
    4fee:	408f      	lsls	r7, r1
    4ff0:	40da      	lsrs	r2, r3
    4ff2:	408c      	lsls	r4, r1
    4ff4:	4317      	orrs	r7, r2
    4ff6:	42b1      	cmp	r1, r6
    4ff8:	da00      	bge.n	4ffc <__aeabi_dadd+0xd0>
    4ffa:	e0ff      	b.n	51fc <__aeabi_dadd+0x2d0>
    4ffc:	1b89      	subs	r1, r1, r6
    4ffe:	1c4b      	adds	r3, r1, #1
    5000:	2b1f      	cmp	r3, #31
    5002:	dd00      	ble.n	5006 <__aeabi_dadd+0xda>
    5004:	e0a8      	b.n	5158 <__aeabi_dadd+0x22c>
    5006:	2220      	movs	r2, #32
    5008:	0039      	movs	r1, r7
    500a:	1ad2      	subs	r2, r2, r3
    500c:	0020      	movs	r0, r4
    500e:	4094      	lsls	r4, r2
    5010:	4091      	lsls	r1, r2
    5012:	40d8      	lsrs	r0, r3
    5014:	1e62      	subs	r2, r4, #1
    5016:	4194      	sbcs	r4, r2
    5018:	40df      	lsrs	r7, r3
    501a:	2600      	movs	r6, #0
    501c:	4301      	orrs	r1, r0
    501e:	430c      	orrs	r4, r1
    5020:	0763      	lsls	r3, r4, #29
    5022:	d009      	beq.n	5038 <__aeabi_dadd+0x10c>
    5024:	230f      	movs	r3, #15
    5026:	4023      	ands	r3, r4
    5028:	2b04      	cmp	r3, #4
    502a:	d005      	beq.n	5038 <__aeabi_dadd+0x10c>
    502c:	1d23      	adds	r3, r4, #4
    502e:	42a3      	cmp	r3, r4
    5030:	41a4      	sbcs	r4, r4
    5032:	4264      	negs	r4, r4
    5034:	193f      	adds	r7, r7, r4
    5036:	001c      	movs	r4, r3
    5038:	023b      	lsls	r3, r7, #8
    503a:	d400      	bmi.n	503e <__aeabi_dadd+0x112>
    503c:	e09e      	b.n	517c <__aeabi_dadd+0x250>
    503e:	4b95      	ldr	r3, [pc, #596]	; (5294 <__aeabi_dadd+0x368>)
    5040:	3601      	adds	r6, #1
    5042:	429e      	cmp	r6, r3
    5044:	d100      	bne.n	5048 <__aeabi_dadd+0x11c>
    5046:	e0b7      	b.n	51b8 <__aeabi_dadd+0x28c>
    5048:	4a93      	ldr	r2, [pc, #588]	; (5298 <__aeabi_dadd+0x36c>)
    504a:	08e4      	lsrs	r4, r4, #3
    504c:	4017      	ands	r7, r2
    504e:	077b      	lsls	r3, r7, #29
    5050:	0571      	lsls	r1, r6, #21
    5052:	027f      	lsls	r7, r7, #9
    5054:	4323      	orrs	r3, r4
    5056:	0b3f      	lsrs	r7, r7, #12
    5058:	0d4a      	lsrs	r2, r1, #21
    505a:	0512      	lsls	r2, r2, #20
    505c:	433a      	orrs	r2, r7
    505e:	07ed      	lsls	r5, r5, #31
    5060:	432a      	orrs	r2, r5
    5062:	0018      	movs	r0, r3
    5064:	0011      	movs	r1, r2
    5066:	bce0      	pop	{r5, r6, r7}
    5068:	46ba      	mov	sl, r7
    506a:	46b1      	mov	r9, r6
    506c:	46a8      	mov	r8, r5
    506e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5070:	2c00      	cmp	r4, #0
    5072:	d04b      	beq.n	510c <__aeabi_dadd+0x1e0>
    5074:	464c      	mov	r4, r9
    5076:	1ba4      	subs	r4, r4, r6
    5078:	46a4      	mov	ip, r4
    507a:	2e00      	cmp	r6, #0
    507c:	d000      	beq.n	5080 <__aeabi_dadd+0x154>
    507e:	e123      	b.n	52c8 <__aeabi_dadd+0x39c>
    5080:	0004      	movs	r4, r0
    5082:	431c      	orrs	r4, r3
    5084:	d100      	bne.n	5088 <__aeabi_dadd+0x15c>
    5086:	e1af      	b.n	53e8 <__aeabi_dadd+0x4bc>
    5088:	4662      	mov	r2, ip
    508a:	1e54      	subs	r4, r2, #1
    508c:	2a01      	cmp	r2, #1
    508e:	d100      	bne.n	5092 <__aeabi_dadd+0x166>
    5090:	e215      	b.n	54be <__aeabi_dadd+0x592>
    5092:	4d80      	ldr	r5, [pc, #512]	; (5294 <__aeabi_dadd+0x368>)
    5094:	45ac      	cmp	ip, r5
    5096:	d100      	bne.n	509a <__aeabi_dadd+0x16e>
    5098:	e1c8      	b.n	542c <__aeabi_dadd+0x500>
    509a:	46a4      	mov	ip, r4
    509c:	e11b      	b.n	52d6 <__aeabi_dadd+0x3aa>
    509e:	464a      	mov	r2, r9
    50a0:	1ab2      	subs	r2, r6, r2
    50a2:	4694      	mov	ip, r2
    50a4:	2a00      	cmp	r2, #0
    50a6:	dc00      	bgt.n	50aa <__aeabi_dadd+0x17e>
    50a8:	e0ac      	b.n	5204 <__aeabi_dadd+0x2d8>
    50aa:	464a      	mov	r2, r9
    50ac:	2a00      	cmp	r2, #0
    50ae:	d043      	beq.n	5138 <__aeabi_dadd+0x20c>
    50b0:	4a78      	ldr	r2, [pc, #480]	; (5294 <__aeabi_dadd+0x368>)
    50b2:	4296      	cmp	r6, r2
    50b4:	d100      	bne.n	50b8 <__aeabi_dadd+0x18c>
    50b6:	e1af      	b.n	5418 <__aeabi_dadd+0x4ec>
    50b8:	2280      	movs	r2, #128	; 0x80
    50ba:	003c      	movs	r4, r7
    50bc:	0412      	lsls	r2, r2, #16
    50be:	4314      	orrs	r4, r2
    50c0:	46a0      	mov	r8, r4
    50c2:	4662      	mov	r2, ip
    50c4:	2a38      	cmp	r2, #56	; 0x38
    50c6:	dc67      	bgt.n	5198 <__aeabi_dadd+0x26c>
    50c8:	2a1f      	cmp	r2, #31
    50ca:	dc00      	bgt.n	50ce <__aeabi_dadd+0x1a2>
    50cc:	e15f      	b.n	538e <__aeabi_dadd+0x462>
    50ce:	4647      	mov	r7, r8
    50d0:	3a20      	subs	r2, #32
    50d2:	40d7      	lsrs	r7, r2
    50d4:	4662      	mov	r2, ip
    50d6:	2a20      	cmp	r2, #32
    50d8:	d005      	beq.n	50e6 <__aeabi_dadd+0x1ba>
    50da:	4664      	mov	r4, ip
    50dc:	2240      	movs	r2, #64	; 0x40
    50de:	1b12      	subs	r2, r2, r4
    50e0:	4644      	mov	r4, r8
    50e2:	4094      	lsls	r4, r2
    50e4:	4321      	orrs	r1, r4
    50e6:	1e4a      	subs	r2, r1, #1
    50e8:	4191      	sbcs	r1, r2
    50ea:	000c      	movs	r4, r1
    50ec:	433c      	orrs	r4, r7
    50ee:	e057      	b.n	51a0 <__aeabi_dadd+0x274>
    50f0:	003a      	movs	r2, r7
    50f2:	430a      	orrs	r2, r1
    50f4:	d100      	bne.n	50f8 <__aeabi_dadd+0x1cc>
    50f6:	e105      	b.n	5304 <__aeabi_dadd+0x3d8>
    50f8:	0022      	movs	r2, r4
    50fa:	3a01      	subs	r2, #1
    50fc:	2c01      	cmp	r4, #1
    50fe:	d100      	bne.n	5102 <__aeabi_dadd+0x1d6>
    5100:	e182      	b.n	5408 <__aeabi_dadd+0x4dc>
    5102:	4c64      	ldr	r4, [pc, #400]	; (5294 <__aeabi_dadd+0x368>)
    5104:	45a4      	cmp	ip, r4
    5106:	d05b      	beq.n	51c0 <__aeabi_dadd+0x294>
    5108:	4694      	mov	ip, r2
    510a:	e741      	b.n	4f90 <__aeabi_dadd+0x64>
    510c:	4c63      	ldr	r4, [pc, #396]	; (529c <__aeabi_dadd+0x370>)
    510e:	1c77      	adds	r7, r6, #1
    5110:	4227      	tst	r7, r4
    5112:	d000      	beq.n	5116 <__aeabi_dadd+0x1ea>
    5114:	e0c4      	b.n	52a0 <__aeabi_dadd+0x374>
    5116:	0004      	movs	r4, r0
    5118:	431c      	orrs	r4, r3
    511a:	2e00      	cmp	r6, #0
    511c:	d000      	beq.n	5120 <__aeabi_dadd+0x1f4>
    511e:	e169      	b.n	53f4 <__aeabi_dadd+0x4c8>
    5120:	2c00      	cmp	r4, #0
    5122:	d100      	bne.n	5126 <__aeabi_dadd+0x1fa>
    5124:	e1bf      	b.n	54a6 <__aeabi_dadd+0x57a>
    5126:	4644      	mov	r4, r8
    5128:	430c      	orrs	r4, r1
    512a:	d000      	beq.n	512e <__aeabi_dadd+0x202>
    512c:	e1d0      	b.n	54d0 <__aeabi_dadd+0x5a4>
    512e:	0742      	lsls	r2, r0, #29
    5130:	08db      	lsrs	r3, r3, #3
    5132:	4313      	orrs	r3, r2
    5134:	08c0      	lsrs	r0, r0, #3
    5136:	e029      	b.n	518c <__aeabi_dadd+0x260>
    5138:	003a      	movs	r2, r7
    513a:	430a      	orrs	r2, r1
    513c:	d100      	bne.n	5140 <__aeabi_dadd+0x214>
    513e:	e170      	b.n	5422 <__aeabi_dadd+0x4f6>
    5140:	4662      	mov	r2, ip
    5142:	4664      	mov	r4, ip
    5144:	3a01      	subs	r2, #1
    5146:	2c01      	cmp	r4, #1
    5148:	d100      	bne.n	514c <__aeabi_dadd+0x220>
    514a:	e0e0      	b.n	530e <__aeabi_dadd+0x3e2>
    514c:	4c51      	ldr	r4, [pc, #324]	; (5294 <__aeabi_dadd+0x368>)
    514e:	45a4      	cmp	ip, r4
    5150:	d100      	bne.n	5154 <__aeabi_dadd+0x228>
    5152:	e161      	b.n	5418 <__aeabi_dadd+0x4ec>
    5154:	4694      	mov	ip, r2
    5156:	e7b4      	b.n	50c2 <__aeabi_dadd+0x196>
    5158:	003a      	movs	r2, r7
    515a:	391f      	subs	r1, #31
    515c:	40ca      	lsrs	r2, r1
    515e:	0011      	movs	r1, r2
    5160:	2b20      	cmp	r3, #32
    5162:	d003      	beq.n	516c <__aeabi_dadd+0x240>
    5164:	2240      	movs	r2, #64	; 0x40
    5166:	1ad3      	subs	r3, r2, r3
    5168:	409f      	lsls	r7, r3
    516a:	433c      	orrs	r4, r7
    516c:	1e63      	subs	r3, r4, #1
    516e:	419c      	sbcs	r4, r3
    5170:	2700      	movs	r7, #0
    5172:	2600      	movs	r6, #0
    5174:	430c      	orrs	r4, r1
    5176:	0763      	lsls	r3, r4, #29
    5178:	d000      	beq.n	517c <__aeabi_dadd+0x250>
    517a:	e753      	b.n	5024 <__aeabi_dadd+0xf8>
    517c:	46b4      	mov	ip, r6
    517e:	08e4      	lsrs	r4, r4, #3
    5180:	077b      	lsls	r3, r7, #29
    5182:	4323      	orrs	r3, r4
    5184:	08f8      	lsrs	r0, r7, #3
    5186:	4a43      	ldr	r2, [pc, #268]	; (5294 <__aeabi_dadd+0x368>)
    5188:	4594      	cmp	ip, r2
    518a:	d01d      	beq.n	51c8 <__aeabi_dadd+0x29c>
    518c:	4662      	mov	r2, ip
    518e:	0307      	lsls	r7, r0, #12
    5190:	0552      	lsls	r2, r2, #21
    5192:	0b3f      	lsrs	r7, r7, #12
    5194:	0d52      	lsrs	r2, r2, #21
    5196:	e760      	b.n	505a <__aeabi_dadd+0x12e>
    5198:	4644      	mov	r4, r8
    519a:	430c      	orrs	r4, r1
    519c:	1e62      	subs	r2, r4, #1
    519e:	4194      	sbcs	r4, r2
    51a0:	18e4      	adds	r4, r4, r3
    51a2:	429c      	cmp	r4, r3
    51a4:	419b      	sbcs	r3, r3
    51a6:	425f      	negs	r7, r3
    51a8:	183f      	adds	r7, r7, r0
    51aa:	023b      	lsls	r3, r7, #8
    51ac:	d5e3      	bpl.n	5176 <__aeabi_dadd+0x24a>
    51ae:	4b39      	ldr	r3, [pc, #228]	; (5294 <__aeabi_dadd+0x368>)
    51b0:	3601      	adds	r6, #1
    51b2:	429e      	cmp	r6, r3
    51b4:	d000      	beq.n	51b8 <__aeabi_dadd+0x28c>
    51b6:	e0b5      	b.n	5324 <__aeabi_dadd+0x3f8>
    51b8:	0032      	movs	r2, r6
    51ba:	2700      	movs	r7, #0
    51bc:	2300      	movs	r3, #0
    51be:	e74c      	b.n	505a <__aeabi_dadd+0x12e>
    51c0:	0742      	lsls	r2, r0, #29
    51c2:	08db      	lsrs	r3, r3, #3
    51c4:	4313      	orrs	r3, r2
    51c6:	08c0      	lsrs	r0, r0, #3
    51c8:	001a      	movs	r2, r3
    51ca:	4302      	orrs	r2, r0
    51cc:	d100      	bne.n	51d0 <__aeabi_dadd+0x2a4>
    51ce:	e1e1      	b.n	5594 <__aeabi_dadd+0x668>
    51d0:	2780      	movs	r7, #128	; 0x80
    51d2:	033f      	lsls	r7, r7, #12
    51d4:	4307      	orrs	r7, r0
    51d6:	033f      	lsls	r7, r7, #12
    51d8:	4a2e      	ldr	r2, [pc, #184]	; (5294 <__aeabi_dadd+0x368>)
    51da:	0b3f      	lsrs	r7, r7, #12
    51dc:	e73d      	b.n	505a <__aeabi_dadd+0x12e>
    51de:	0020      	movs	r0, r4
    51e0:	f002 fcdc 	bl	7b9c <__clzsi2>
    51e4:	0001      	movs	r1, r0
    51e6:	3118      	adds	r1, #24
    51e8:	291f      	cmp	r1, #31
    51ea:	dc00      	bgt.n	51ee <__aeabi_dadd+0x2c2>
    51ec:	e6fc      	b.n	4fe8 <__aeabi_dadd+0xbc>
    51ee:	3808      	subs	r0, #8
    51f0:	4084      	lsls	r4, r0
    51f2:	0027      	movs	r7, r4
    51f4:	2400      	movs	r4, #0
    51f6:	42b1      	cmp	r1, r6
    51f8:	db00      	blt.n	51fc <__aeabi_dadd+0x2d0>
    51fa:	e6ff      	b.n	4ffc <__aeabi_dadd+0xd0>
    51fc:	4a26      	ldr	r2, [pc, #152]	; (5298 <__aeabi_dadd+0x36c>)
    51fe:	1a76      	subs	r6, r6, r1
    5200:	4017      	ands	r7, r2
    5202:	e70d      	b.n	5020 <__aeabi_dadd+0xf4>
    5204:	2a00      	cmp	r2, #0
    5206:	d02f      	beq.n	5268 <__aeabi_dadd+0x33c>
    5208:	464a      	mov	r2, r9
    520a:	1b92      	subs	r2, r2, r6
    520c:	4694      	mov	ip, r2
    520e:	2e00      	cmp	r6, #0
    5210:	d100      	bne.n	5214 <__aeabi_dadd+0x2e8>
    5212:	e0ad      	b.n	5370 <__aeabi_dadd+0x444>
    5214:	4a1f      	ldr	r2, [pc, #124]	; (5294 <__aeabi_dadd+0x368>)
    5216:	4591      	cmp	r9, r2
    5218:	d100      	bne.n	521c <__aeabi_dadd+0x2f0>
    521a:	e10f      	b.n	543c <__aeabi_dadd+0x510>
    521c:	2280      	movs	r2, #128	; 0x80
    521e:	0412      	lsls	r2, r2, #16
    5220:	4310      	orrs	r0, r2
    5222:	4662      	mov	r2, ip
    5224:	2a38      	cmp	r2, #56	; 0x38
    5226:	dd00      	ble.n	522a <__aeabi_dadd+0x2fe>
    5228:	e10f      	b.n	544a <__aeabi_dadd+0x51e>
    522a:	2a1f      	cmp	r2, #31
    522c:	dd00      	ble.n	5230 <__aeabi_dadd+0x304>
    522e:	e180      	b.n	5532 <__aeabi_dadd+0x606>
    5230:	4664      	mov	r4, ip
    5232:	2220      	movs	r2, #32
    5234:	001e      	movs	r6, r3
    5236:	1b12      	subs	r2, r2, r4
    5238:	4667      	mov	r7, ip
    523a:	0004      	movs	r4, r0
    523c:	4093      	lsls	r3, r2
    523e:	4094      	lsls	r4, r2
    5240:	40fe      	lsrs	r6, r7
    5242:	1e5a      	subs	r2, r3, #1
    5244:	4193      	sbcs	r3, r2
    5246:	40f8      	lsrs	r0, r7
    5248:	4334      	orrs	r4, r6
    524a:	431c      	orrs	r4, r3
    524c:	4480      	add	r8, r0
    524e:	1864      	adds	r4, r4, r1
    5250:	428c      	cmp	r4, r1
    5252:	41bf      	sbcs	r7, r7
    5254:	427f      	negs	r7, r7
    5256:	464e      	mov	r6, r9
    5258:	4447      	add	r7, r8
    525a:	e7a6      	b.n	51aa <__aeabi_dadd+0x27e>
    525c:	4642      	mov	r2, r8
    525e:	430a      	orrs	r2, r1
    5260:	0011      	movs	r1, r2
    5262:	1e4a      	subs	r2, r1, #1
    5264:	4191      	sbcs	r1, r2
    5266:	e6ad      	b.n	4fc4 <__aeabi_dadd+0x98>
    5268:	4c0c      	ldr	r4, [pc, #48]	; (529c <__aeabi_dadd+0x370>)
    526a:	1c72      	adds	r2, r6, #1
    526c:	4222      	tst	r2, r4
    526e:	d000      	beq.n	5272 <__aeabi_dadd+0x346>
    5270:	e0a1      	b.n	53b6 <__aeabi_dadd+0x48a>
    5272:	0002      	movs	r2, r0
    5274:	431a      	orrs	r2, r3
    5276:	2e00      	cmp	r6, #0
    5278:	d000      	beq.n	527c <__aeabi_dadd+0x350>
    527a:	e0fa      	b.n	5472 <__aeabi_dadd+0x546>
    527c:	2a00      	cmp	r2, #0
    527e:	d100      	bne.n	5282 <__aeabi_dadd+0x356>
    5280:	e145      	b.n	550e <__aeabi_dadd+0x5e2>
    5282:	003a      	movs	r2, r7
    5284:	430a      	orrs	r2, r1
    5286:	d000      	beq.n	528a <__aeabi_dadd+0x35e>
    5288:	e146      	b.n	5518 <__aeabi_dadd+0x5ec>
    528a:	0742      	lsls	r2, r0, #29
    528c:	08db      	lsrs	r3, r3, #3
    528e:	4313      	orrs	r3, r2
    5290:	08c0      	lsrs	r0, r0, #3
    5292:	e77b      	b.n	518c <__aeabi_dadd+0x260>
    5294:	000007ff 	.word	0x000007ff
    5298:	ff7fffff 	.word	0xff7fffff
    529c:	000007fe 	.word	0x000007fe
    52a0:	4647      	mov	r7, r8
    52a2:	1a5c      	subs	r4, r3, r1
    52a4:	1bc2      	subs	r2, r0, r7
    52a6:	42a3      	cmp	r3, r4
    52a8:	41bf      	sbcs	r7, r7
    52aa:	427f      	negs	r7, r7
    52ac:	46b9      	mov	r9, r7
    52ae:	0017      	movs	r7, r2
    52b0:	464a      	mov	r2, r9
    52b2:	1abf      	subs	r7, r7, r2
    52b4:	023a      	lsls	r2, r7, #8
    52b6:	d500      	bpl.n	52ba <__aeabi_dadd+0x38e>
    52b8:	e08d      	b.n	53d6 <__aeabi_dadd+0x4aa>
    52ba:	0023      	movs	r3, r4
    52bc:	433b      	orrs	r3, r7
    52be:	d000      	beq.n	52c2 <__aeabi_dadd+0x396>
    52c0:	e68a      	b.n	4fd8 <__aeabi_dadd+0xac>
    52c2:	2000      	movs	r0, #0
    52c4:	2500      	movs	r5, #0
    52c6:	e761      	b.n	518c <__aeabi_dadd+0x260>
    52c8:	4cb4      	ldr	r4, [pc, #720]	; (559c <__aeabi_dadd+0x670>)
    52ca:	45a1      	cmp	r9, r4
    52cc:	d100      	bne.n	52d0 <__aeabi_dadd+0x3a4>
    52ce:	e0ad      	b.n	542c <__aeabi_dadd+0x500>
    52d0:	2480      	movs	r4, #128	; 0x80
    52d2:	0424      	lsls	r4, r4, #16
    52d4:	4320      	orrs	r0, r4
    52d6:	4664      	mov	r4, ip
    52d8:	2c38      	cmp	r4, #56	; 0x38
    52da:	dc3d      	bgt.n	5358 <__aeabi_dadd+0x42c>
    52dc:	4662      	mov	r2, ip
    52de:	2c1f      	cmp	r4, #31
    52e0:	dd00      	ble.n	52e4 <__aeabi_dadd+0x3b8>
    52e2:	e0b7      	b.n	5454 <__aeabi_dadd+0x528>
    52e4:	2520      	movs	r5, #32
    52e6:	001e      	movs	r6, r3
    52e8:	1b2d      	subs	r5, r5, r4
    52ea:	0004      	movs	r4, r0
    52ec:	40ab      	lsls	r3, r5
    52ee:	40ac      	lsls	r4, r5
    52f0:	40d6      	lsrs	r6, r2
    52f2:	40d0      	lsrs	r0, r2
    52f4:	4642      	mov	r2, r8
    52f6:	1e5d      	subs	r5, r3, #1
    52f8:	41ab      	sbcs	r3, r5
    52fa:	4334      	orrs	r4, r6
    52fc:	1a12      	subs	r2, r2, r0
    52fe:	4690      	mov	r8, r2
    5300:	4323      	orrs	r3, r4
    5302:	e02c      	b.n	535e <__aeabi_dadd+0x432>
    5304:	0742      	lsls	r2, r0, #29
    5306:	08db      	lsrs	r3, r3, #3
    5308:	4313      	orrs	r3, r2
    530a:	08c0      	lsrs	r0, r0, #3
    530c:	e73b      	b.n	5186 <__aeabi_dadd+0x25a>
    530e:	185c      	adds	r4, r3, r1
    5310:	429c      	cmp	r4, r3
    5312:	419b      	sbcs	r3, r3
    5314:	4440      	add	r0, r8
    5316:	425b      	negs	r3, r3
    5318:	18c7      	adds	r7, r0, r3
    531a:	2601      	movs	r6, #1
    531c:	023b      	lsls	r3, r7, #8
    531e:	d400      	bmi.n	5322 <__aeabi_dadd+0x3f6>
    5320:	e729      	b.n	5176 <__aeabi_dadd+0x24a>
    5322:	2602      	movs	r6, #2
    5324:	4a9e      	ldr	r2, [pc, #632]	; (55a0 <__aeabi_dadd+0x674>)
    5326:	0863      	lsrs	r3, r4, #1
    5328:	4017      	ands	r7, r2
    532a:	2201      	movs	r2, #1
    532c:	4014      	ands	r4, r2
    532e:	431c      	orrs	r4, r3
    5330:	07fb      	lsls	r3, r7, #31
    5332:	431c      	orrs	r4, r3
    5334:	087f      	lsrs	r7, r7, #1
    5336:	e673      	b.n	5020 <__aeabi_dadd+0xf4>
    5338:	4644      	mov	r4, r8
    533a:	3a20      	subs	r2, #32
    533c:	40d4      	lsrs	r4, r2
    533e:	4662      	mov	r2, ip
    5340:	2a20      	cmp	r2, #32
    5342:	d005      	beq.n	5350 <__aeabi_dadd+0x424>
    5344:	4667      	mov	r7, ip
    5346:	2240      	movs	r2, #64	; 0x40
    5348:	1bd2      	subs	r2, r2, r7
    534a:	4647      	mov	r7, r8
    534c:	4097      	lsls	r7, r2
    534e:	4339      	orrs	r1, r7
    5350:	1e4a      	subs	r2, r1, #1
    5352:	4191      	sbcs	r1, r2
    5354:	4321      	orrs	r1, r4
    5356:	e635      	b.n	4fc4 <__aeabi_dadd+0x98>
    5358:	4303      	orrs	r3, r0
    535a:	1e58      	subs	r0, r3, #1
    535c:	4183      	sbcs	r3, r0
    535e:	1acc      	subs	r4, r1, r3
    5360:	42a1      	cmp	r1, r4
    5362:	41bf      	sbcs	r7, r7
    5364:	4643      	mov	r3, r8
    5366:	427f      	negs	r7, r7
    5368:	4655      	mov	r5, sl
    536a:	464e      	mov	r6, r9
    536c:	1bdf      	subs	r7, r3, r7
    536e:	e62e      	b.n	4fce <__aeabi_dadd+0xa2>
    5370:	0002      	movs	r2, r0
    5372:	431a      	orrs	r2, r3
    5374:	d100      	bne.n	5378 <__aeabi_dadd+0x44c>
    5376:	e0bd      	b.n	54f4 <__aeabi_dadd+0x5c8>
    5378:	4662      	mov	r2, ip
    537a:	4664      	mov	r4, ip
    537c:	3a01      	subs	r2, #1
    537e:	2c01      	cmp	r4, #1
    5380:	d100      	bne.n	5384 <__aeabi_dadd+0x458>
    5382:	e0e5      	b.n	5550 <__aeabi_dadd+0x624>
    5384:	4c85      	ldr	r4, [pc, #532]	; (559c <__aeabi_dadd+0x670>)
    5386:	45a4      	cmp	ip, r4
    5388:	d058      	beq.n	543c <__aeabi_dadd+0x510>
    538a:	4694      	mov	ip, r2
    538c:	e749      	b.n	5222 <__aeabi_dadd+0x2f6>
    538e:	4664      	mov	r4, ip
    5390:	2220      	movs	r2, #32
    5392:	1b12      	subs	r2, r2, r4
    5394:	4644      	mov	r4, r8
    5396:	4094      	lsls	r4, r2
    5398:	000f      	movs	r7, r1
    539a:	46a1      	mov	r9, r4
    539c:	4664      	mov	r4, ip
    539e:	4091      	lsls	r1, r2
    53a0:	40e7      	lsrs	r7, r4
    53a2:	464c      	mov	r4, r9
    53a4:	1e4a      	subs	r2, r1, #1
    53a6:	4191      	sbcs	r1, r2
    53a8:	433c      	orrs	r4, r7
    53aa:	4642      	mov	r2, r8
    53ac:	430c      	orrs	r4, r1
    53ae:	4661      	mov	r1, ip
    53b0:	40ca      	lsrs	r2, r1
    53b2:	1880      	adds	r0, r0, r2
    53b4:	e6f4      	b.n	51a0 <__aeabi_dadd+0x274>
    53b6:	4c79      	ldr	r4, [pc, #484]	; (559c <__aeabi_dadd+0x670>)
    53b8:	42a2      	cmp	r2, r4
    53ba:	d100      	bne.n	53be <__aeabi_dadd+0x492>
    53bc:	e6fd      	b.n	51ba <__aeabi_dadd+0x28e>
    53be:	1859      	adds	r1, r3, r1
    53c0:	4299      	cmp	r1, r3
    53c2:	419b      	sbcs	r3, r3
    53c4:	4440      	add	r0, r8
    53c6:	425f      	negs	r7, r3
    53c8:	19c7      	adds	r7, r0, r7
    53ca:	07fc      	lsls	r4, r7, #31
    53cc:	0849      	lsrs	r1, r1, #1
    53ce:	0016      	movs	r6, r2
    53d0:	430c      	orrs	r4, r1
    53d2:	087f      	lsrs	r7, r7, #1
    53d4:	e6cf      	b.n	5176 <__aeabi_dadd+0x24a>
    53d6:	1acc      	subs	r4, r1, r3
    53d8:	42a1      	cmp	r1, r4
    53da:	41bf      	sbcs	r7, r7
    53dc:	4643      	mov	r3, r8
    53de:	427f      	negs	r7, r7
    53e0:	1a18      	subs	r0, r3, r0
    53e2:	4655      	mov	r5, sl
    53e4:	1bc7      	subs	r7, r0, r7
    53e6:	e5f7      	b.n	4fd8 <__aeabi_dadd+0xac>
    53e8:	08c9      	lsrs	r1, r1, #3
    53ea:	077b      	lsls	r3, r7, #29
    53ec:	4655      	mov	r5, sl
    53ee:	430b      	orrs	r3, r1
    53f0:	08f8      	lsrs	r0, r7, #3
    53f2:	e6c8      	b.n	5186 <__aeabi_dadd+0x25a>
    53f4:	2c00      	cmp	r4, #0
    53f6:	d000      	beq.n	53fa <__aeabi_dadd+0x4ce>
    53f8:	e081      	b.n	54fe <__aeabi_dadd+0x5d2>
    53fa:	4643      	mov	r3, r8
    53fc:	430b      	orrs	r3, r1
    53fe:	d115      	bne.n	542c <__aeabi_dadd+0x500>
    5400:	2080      	movs	r0, #128	; 0x80
    5402:	2500      	movs	r5, #0
    5404:	0300      	lsls	r0, r0, #12
    5406:	e6e3      	b.n	51d0 <__aeabi_dadd+0x2a4>
    5408:	1a5c      	subs	r4, r3, r1
    540a:	42a3      	cmp	r3, r4
    540c:	419b      	sbcs	r3, r3
    540e:	1bc7      	subs	r7, r0, r7
    5410:	425b      	negs	r3, r3
    5412:	2601      	movs	r6, #1
    5414:	1aff      	subs	r7, r7, r3
    5416:	e5da      	b.n	4fce <__aeabi_dadd+0xa2>
    5418:	0742      	lsls	r2, r0, #29
    541a:	08db      	lsrs	r3, r3, #3
    541c:	4313      	orrs	r3, r2
    541e:	08c0      	lsrs	r0, r0, #3
    5420:	e6d2      	b.n	51c8 <__aeabi_dadd+0x29c>
    5422:	0742      	lsls	r2, r0, #29
    5424:	08db      	lsrs	r3, r3, #3
    5426:	4313      	orrs	r3, r2
    5428:	08c0      	lsrs	r0, r0, #3
    542a:	e6ac      	b.n	5186 <__aeabi_dadd+0x25a>
    542c:	4643      	mov	r3, r8
    542e:	4642      	mov	r2, r8
    5430:	08c9      	lsrs	r1, r1, #3
    5432:	075b      	lsls	r3, r3, #29
    5434:	4655      	mov	r5, sl
    5436:	430b      	orrs	r3, r1
    5438:	08d0      	lsrs	r0, r2, #3
    543a:	e6c5      	b.n	51c8 <__aeabi_dadd+0x29c>
    543c:	4643      	mov	r3, r8
    543e:	4642      	mov	r2, r8
    5440:	075b      	lsls	r3, r3, #29
    5442:	08c9      	lsrs	r1, r1, #3
    5444:	430b      	orrs	r3, r1
    5446:	08d0      	lsrs	r0, r2, #3
    5448:	e6be      	b.n	51c8 <__aeabi_dadd+0x29c>
    544a:	4303      	orrs	r3, r0
    544c:	001c      	movs	r4, r3
    544e:	1e63      	subs	r3, r4, #1
    5450:	419c      	sbcs	r4, r3
    5452:	e6fc      	b.n	524e <__aeabi_dadd+0x322>
    5454:	0002      	movs	r2, r0
    5456:	3c20      	subs	r4, #32
    5458:	40e2      	lsrs	r2, r4
    545a:	0014      	movs	r4, r2
    545c:	4662      	mov	r2, ip
    545e:	2a20      	cmp	r2, #32
    5460:	d003      	beq.n	546a <__aeabi_dadd+0x53e>
    5462:	2540      	movs	r5, #64	; 0x40
    5464:	1aad      	subs	r5, r5, r2
    5466:	40a8      	lsls	r0, r5
    5468:	4303      	orrs	r3, r0
    546a:	1e58      	subs	r0, r3, #1
    546c:	4183      	sbcs	r3, r0
    546e:	4323      	orrs	r3, r4
    5470:	e775      	b.n	535e <__aeabi_dadd+0x432>
    5472:	2a00      	cmp	r2, #0
    5474:	d0e2      	beq.n	543c <__aeabi_dadd+0x510>
    5476:	003a      	movs	r2, r7
    5478:	430a      	orrs	r2, r1
    547a:	d0cd      	beq.n	5418 <__aeabi_dadd+0x4ec>
    547c:	0742      	lsls	r2, r0, #29
    547e:	08db      	lsrs	r3, r3, #3
    5480:	4313      	orrs	r3, r2
    5482:	2280      	movs	r2, #128	; 0x80
    5484:	08c0      	lsrs	r0, r0, #3
    5486:	0312      	lsls	r2, r2, #12
    5488:	4210      	tst	r0, r2
    548a:	d006      	beq.n	549a <__aeabi_dadd+0x56e>
    548c:	08fc      	lsrs	r4, r7, #3
    548e:	4214      	tst	r4, r2
    5490:	d103      	bne.n	549a <__aeabi_dadd+0x56e>
    5492:	0020      	movs	r0, r4
    5494:	08cb      	lsrs	r3, r1, #3
    5496:	077a      	lsls	r2, r7, #29
    5498:	4313      	orrs	r3, r2
    549a:	0f5a      	lsrs	r2, r3, #29
    549c:	00db      	lsls	r3, r3, #3
    549e:	0752      	lsls	r2, r2, #29
    54a0:	08db      	lsrs	r3, r3, #3
    54a2:	4313      	orrs	r3, r2
    54a4:	e690      	b.n	51c8 <__aeabi_dadd+0x29c>
    54a6:	4643      	mov	r3, r8
    54a8:	430b      	orrs	r3, r1
    54aa:	d100      	bne.n	54ae <__aeabi_dadd+0x582>
    54ac:	e709      	b.n	52c2 <__aeabi_dadd+0x396>
    54ae:	4643      	mov	r3, r8
    54b0:	4642      	mov	r2, r8
    54b2:	08c9      	lsrs	r1, r1, #3
    54b4:	075b      	lsls	r3, r3, #29
    54b6:	4655      	mov	r5, sl
    54b8:	430b      	orrs	r3, r1
    54ba:	08d0      	lsrs	r0, r2, #3
    54bc:	e666      	b.n	518c <__aeabi_dadd+0x260>
    54be:	1acc      	subs	r4, r1, r3
    54c0:	42a1      	cmp	r1, r4
    54c2:	4189      	sbcs	r1, r1
    54c4:	1a3f      	subs	r7, r7, r0
    54c6:	4249      	negs	r1, r1
    54c8:	4655      	mov	r5, sl
    54ca:	2601      	movs	r6, #1
    54cc:	1a7f      	subs	r7, r7, r1
    54ce:	e57e      	b.n	4fce <__aeabi_dadd+0xa2>
    54d0:	4642      	mov	r2, r8
    54d2:	1a5c      	subs	r4, r3, r1
    54d4:	1a87      	subs	r7, r0, r2
    54d6:	42a3      	cmp	r3, r4
    54d8:	4192      	sbcs	r2, r2
    54da:	4252      	negs	r2, r2
    54dc:	1abf      	subs	r7, r7, r2
    54de:	023a      	lsls	r2, r7, #8
    54e0:	d53d      	bpl.n	555e <__aeabi_dadd+0x632>
    54e2:	1acc      	subs	r4, r1, r3
    54e4:	42a1      	cmp	r1, r4
    54e6:	4189      	sbcs	r1, r1
    54e8:	4643      	mov	r3, r8
    54ea:	4249      	negs	r1, r1
    54ec:	1a1f      	subs	r7, r3, r0
    54ee:	4655      	mov	r5, sl
    54f0:	1a7f      	subs	r7, r7, r1
    54f2:	e595      	b.n	5020 <__aeabi_dadd+0xf4>
    54f4:	077b      	lsls	r3, r7, #29
    54f6:	08c9      	lsrs	r1, r1, #3
    54f8:	430b      	orrs	r3, r1
    54fa:	08f8      	lsrs	r0, r7, #3
    54fc:	e643      	b.n	5186 <__aeabi_dadd+0x25a>
    54fe:	4644      	mov	r4, r8
    5500:	08db      	lsrs	r3, r3, #3
    5502:	430c      	orrs	r4, r1
    5504:	d130      	bne.n	5568 <__aeabi_dadd+0x63c>
    5506:	0742      	lsls	r2, r0, #29
    5508:	4313      	orrs	r3, r2
    550a:	08c0      	lsrs	r0, r0, #3
    550c:	e65c      	b.n	51c8 <__aeabi_dadd+0x29c>
    550e:	077b      	lsls	r3, r7, #29
    5510:	08c9      	lsrs	r1, r1, #3
    5512:	430b      	orrs	r3, r1
    5514:	08f8      	lsrs	r0, r7, #3
    5516:	e639      	b.n	518c <__aeabi_dadd+0x260>
    5518:	185c      	adds	r4, r3, r1
    551a:	429c      	cmp	r4, r3
    551c:	419b      	sbcs	r3, r3
    551e:	4440      	add	r0, r8
    5520:	425b      	negs	r3, r3
    5522:	18c7      	adds	r7, r0, r3
    5524:	023b      	lsls	r3, r7, #8
    5526:	d400      	bmi.n	552a <__aeabi_dadd+0x5fe>
    5528:	e625      	b.n	5176 <__aeabi_dadd+0x24a>
    552a:	4b1d      	ldr	r3, [pc, #116]	; (55a0 <__aeabi_dadd+0x674>)
    552c:	2601      	movs	r6, #1
    552e:	401f      	ands	r7, r3
    5530:	e621      	b.n	5176 <__aeabi_dadd+0x24a>
    5532:	0004      	movs	r4, r0
    5534:	3a20      	subs	r2, #32
    5536:	40d4      	lsrs	r4, r2
    5538:	4662      	mov	r2, ip
    553a:	2a20      	cmp	r2, #32
    553c:	d004      	beq.n	5548 <__aeabi_dadd+0x61c>
    553e:	2240      	movs	r2, #64	; 0x40
    5540:	4666      	mov	r6, ip
    5542:	1b92      	subs	r2, r2, r6
    5544:	4090      	lsls	r0, r2
    5546:	4303      	orrs	r3, r0
    5548:	1e5a      	subs	r2, r3, #1
    554a:	4193      	sbcs	r3, r2
    554c:	431c      	orrs	r4, r3
    554e:	e67e      	b.n	524e <__aeabi_dadd+0x322>
    5550:	185c      	adds	r4, r3, r1
    5552:	428c      	cmp	r4, r1
    5554:	4189      	sbcs	r1, r1
    5556:	4440      	add	r0, r8
    5558:	4249      	negs	r1, r1
    555a:	1847      	adds	r7, r0, r1
    555c:	e6dd      	b.n	531a <__aeabi_dadd+0x3ee>
    555e:	0023      	movs	r3, r4
    5560:	433b      	orrs	r3, r7
    5562:	d100      	bne.n	5566 <__aeabi_dadd+0x63a>
    5564:	e6ad      	b.n	52c2 <__aeabi_dadd+0x396>
    5566:	e606      	b.n	5176 <__aeabi_dadd+0x24a>
    5568:	0744      	lsls	r4, r0, #29
    556a:	4323      	orrs	r3, r4
    556c:	2480      	movs	r4, #128	; 0x80
    556e:	08c0      	lsrs	r0, r0, #3
    5570:	0324      	lsls	r4, r4, #12
    5572:	4220      	tst	r0, r4
    5574:	d008      	beq.n	5588 <__aeabi_dadd+0x65c>
    5576:	4642      	mov	r2, r8
    5578:	08d6      	lsrs	r6, r2, #3
    557a:	4226      	tst	r6, r4
    557c:	d104      	bne.n	5588 <__aeabi_dadd+0x65c>
    557e:	4655      	mov	r5, sl
    5580:	0030      	movs	r0, r6
    5582:	08cb      	lsrs	r3, r1, #3
    5584:	0751      	lsls	r1, r2, #29
    5586:	430b      	orrs	r3, r1
    5588:	0f5a      	lsrs	r2, r3, #29
    558a:	00db      	lsls	r3, r3, #3
    558c:	08db      	lsrs	r3, r3, #3
    558e:	0752      	lsls	r2, r2, #29
    5590:	4313      	orrs	r3, r2
    5592:	e619      	b.n	51c8 <__aeabi_dadd+0x29c>
    5594:	2300      	movs	r3, #0
    5596:	4a01      	ldr	r2, [pc, #4]	; (559c <__aeabi_dadd+0x670>)
    5598:	001f      	movs	r7, r3
    559a:	e55e      	b.n	505a <__aeabi_dadd+0x12e>
    559c:	000007ff 	.word	0x000007ff
    55a0:	ff7fffff 	.word	0xff7fffff

000055a4 <__aeabi_ddiv>:
    55a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55a6:	4657      	mov	r7, sl
    55a8:	464e      	mov	r6, r9
    55aa:	4645      	mov	r5, r8
    55ac:	46de      	mov	lr, fp
    55ae:	b5e0      	push	{r5, r6, r7, lr}
    55b0:	4681      	mov	r9, r0
    55b2:	0005      	movs	r5, r0
    55b4:	030c      	lsls	r4, r1, #12
    55b6:	0048      	lsls	r0, r1, #1
    55b8:	4692      	mov	sl, r2
    55ba:	001f      	movs	r7, r3
    55bc:	b085      	sub	sp, #20
    55be:	0b24      	lsrs	r4, r4, #12
    55c0:	0d40      	lsrs	r0, r0, #21
    55c2:	0fce      	lsrs	r6, r1, #31
    55c4:	2800      	cmp	r0, #0
    55c6:	d100      	bne.n	55ca <__aeabi_ddiv+0x26>
    55c8:	e156      	b.n	5878 <__aeabi_ddiv+0x2d4>
    55ca:	4bd4      	ldr	r3, [pc, #848]	; (591c <__aeabi_ddiv+0x378>)
    55cc:	4298      	cmp	r0, r3
    55ce:	d100      	bne.n	55d2 <__aeabi_ddiv+0x2e>
    55d0:	e172      	b.n	58b8 <__aeabi_ddiv+0x314>
    55d2:	0f6b      	lsrs	r3, r5, #29
    55d4:	00e4      	lsls	r4, r4, #3
    55d6:	431c      	orrs	r4, r3
    55d8:	2380      	movs	r3, #128	; 0x80
    55da:	041b      	lsls	r3, r3, #16
    55dc:	4323      	orrs	r3, r4
    55de:	4698      	mov	r8, r3
    55e0:	4bcf      	ldr	r3, [pc, #828]	; (5920 <__aeabi_ddiv+0x37c>)
    55e2:	00ed      	lsls	r5, r5, #3
    55e4:	469b      	mov	fp, r3
    55e6:	2300      	movs	r3, #0
    55e8:	4699      	mov	r9, r3
    55ea:	4483      	add	fp, r0
    55ec:	9300      	str	r3, [sp, #0]
    55ee:	033c      	lsls	r4, r7, #12
    55f0:	007b      	lsls	r3, r7, #1
    55f2:	4650      	mov	r0, sl
    55f4:	0b24      	lsrs	r4, r4, #12
    55f6:	0d5b      	lsrs	r3, r3, #21
    55f8:	0fff      	lsrs	r7, r7, #31
    55fa:	2b00      	cmp	r3, #0
    55fc:	d100      	bne.n	5600 <__aeabi_ddiv+0x5c>
    55fe:	e11f      	b.n	5840 <__aeabi_ddiv+0x29c>
    5600:	4ac6      	ldr	r2, [pc, #792]	; (591c <__aeabi_ddiv+0x378>)
    5602:	4293      	cmp	r3, r2
    5604:	d100      	bne.n	5608 <__aeabi_ddiv+0x64>
    5606:	e162      	b.n	58ce <__aeabi_ddiv+0x32a>
    5608:	49c5      	ldr	r1, [pc, #788]	; (5920 <__aeabi_ddiv+0x37c>)
    560a:	0f42      	lsrs	r2, r0, #29
    560c:	468c      	mov	ip, r1
    560e:	00e4      	lsls	r4, r4, #3
    5610:	4659      	mov	r1, fp
    5612:	4314      	orrs	r4, r2
    5614:	2280      	movs	r2, #128	; 0x80
    5616:	4463      	add	r3, ip
    5618:	0412      	lsls	r2, r2, #16
    561a:	1acb      	subs	r3, r1, r3
    561c:	4314      	orrs	r4, r2
    561e:	469b      	mov	fp, r3
    5620:	00c2      	lsls	r2, r0, #3
    5622:	2000      	movs	r0, #0
    5624:	0033      	movs	r3, r6
    5626:	407b      	eors	r3, r7
    5628:	469a      	mov	sl, r3
    562a:	464b      	mov	r3, r9
    562c:	2b0f      	cmp	r3, #15
    562e:	d827      	bhi.n	5680 <__aeabi_ddiv+0xdc>
    5630:	49bc      	ldr	r1, [pc, #752]	; (5924 <__aeabi_ddiv+0x380>)
    5632:	009b      	lsls	r3, r3, #2
    5634:	58cb      	ldr	r3, [r1, r3]
    5636:	469f      	mov	pc, r3
    5638:	46b2      	mov	sl, r6
    563a:	9b00      	ldr	r3, [sp, #0]
    563c:	2b02      	cmp	r3, #2
    563e:	d016      	beq.n	566e <__aeabi_ddiv+0xca>
    5640:	2b03      	cmp	r3, #3
    5642:	d100      	bne.n	5646 <__aeabi_ddiv+0xa2>
    5644:	e28e      	b.n	5b64 <__aeabi_ddiv+0x5c0>
    5646:	2b01      	cmp	r3, #1
    5648:	d000      	beq.n	564c <__aeabi_ddiv+0xa8>
    564a:	e0d9      	b.n	5800 <__aeabi_ddiv+0x25c>
    564c:	2300      	movs	r3, #0
    564e:	2400      	movs	r4, #0
    5650:	2500      	movs	r5, #0
    5652:	4652      	mov	r2, sl
    5654:	051b      	lsls	r3, r3, #20
    5656:	4323      	orrs	r3, r4
    5658:	07d2      	lsls	r2, r2, #31
    565a:	4313      	orrs	r3, r2
    565c:	0028      	movs	r0, r5
    565e:	0019      	movs	r1, r3
    5660:	b005      	add	sp, #20
    5662:	bcf0      	pop	{r4, r5, r6, r7}
    5664:	46bb      	mov	fp, r7
    5666:	46b2      	mov	sl, r6
    5668:	46a9      	mov	r9, r5
    566a:	46a0      	mov	r8, r4
    566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    566e:	2400      	movs	r4, #0
    5670:	2500      	movs	r5, #0
    5672:	4baa      	ldr	r3, [pc, #680]	; (591c <__aeabi_ddiv+0x378>)
    5674:	e7ed      	b.n	5652 <__aeabi_ddiv+0xae>
    5676:	46ba      	mov	sl, r7
    5678:	46a0      	mov	r8, r4
    567a:	0015      	movs	r5, r2
    567c:	9000      	str	r0, [sp, #0]
    567e:	e7dc      	b.n	563a <__aeabi_ddiv+0x96>
    5680:	4544      	cmp	r4, r8
    5682:	d200      	bcs.n	5686 <__aeabi_ddiv+0xe2>
    5684:	e1c7      	b.n	5a16 <__aeabi_ddiv+0x472>
    5686:	d100      	bne.n	568a <__aeabi_ddiv+0xe6>
    5688:	e1c2      	b.n	5a10 <__aeabi_ddiv+0x46c>
    568a:	2301      	movs	r3, #1
    568c:	425b      	negs	r3, r3
    568e:	469c      	mov	ip, r3
    5690:	002e      	movs	r6, r5
    5692:	4640      	mov	r0, r8
    5694:	2500      	movs	r5, #0
    5696:	44e3      	add	fp, ip
    5698:	0223      	lsls	r3, r4, #8
    569a:	0e14      	lsrs	r4, r2, #24
    569c:	431c      	orrs	r4, r3
    569e:	0c1b      	lsrs	r3, r3, #16
    56a0:	4699      	mov	r9, r3
    56a2:	0423      	lsls	r3, r4, #16
    56a4:	0c1f      	lsrs	r7, r3, #16
    56a6:	0212      	lsls	r2, r2, #8
    56a8:	4649      	mov	r1, r9
    56aa:	9200      	str	r2, [sp, #0]
    56ac:	9701      	str	r7, [sp, #4]
    56ae:	f7fe fe55 	bl	435c <__aeabi_uidivmod>
    56b2:	0002      	movs	r2, r0
    56b4:	437a      	muls	r2, r7
    56b6:	040b      	lsls	r3, r1, #16
    56b8:	0c31      	lsrs	r1, r6, #16
    56ba:	4680      	mov	r8, r0
    56bc:	4319      	orrs	r1, r3
    56be:	428a      	cmp	r2, r1
    56c0:	d907      	bls.n	56d2 <__aeabi_ddiv+0x12e>
    56c2:	2301      	movs	r3, #1
    56c4:	425b      	negs	r3, r3
    56c6:	469c      	mov	ip, r3
    56c8:	1909      	adds	r1, r1, r4
    56ca:	44e0      	add	r8, ip
    56cc:	428c      	cmp	r4, r1
    56ce:	d800      	bhi.n	56d2 <__aeabi_ddiv+0x12e>
    56d0:	e207      	b.n	5ae2 <__aeabi_ddiv+0x53e>
    56d2:	1a88      	subs	r0, r1, r2
    56d4:	4649      	mov	r1, r9
    56d6:	f7fe fe41 	bl	435c <__aeabi_uidivmod>
    56da:	0409      	lsls	r1, r1, #16
    56dc:	468c      	mov	ip, r1
    56de:	0431      	lsls	r1, r6, #16
    56e0:	4666      	mov	r6, ip
    56e2:	9a01      	ldr	r2, [sp, #4]
    56e4:	0c09      	lsrs	r1, r1, #16
    56e6:	4342      	muls	r2, r0
    56e8:	0003      	movs	r3, r0
    56ea:	4331      	orrs	r1, r6
    56ec:	428a      	cmp	r2, r1
    56ee:	d904      	bls.n	56fa <__aeabi_ddiv+0x156>
    56f0:	1909      	adds	r1, r1, r4
    56f2:	3b01      	subs	r3, #1
    56f4:	428c      	cmp	r4, r1
    56f6:	d800      	bhi.n	56fa <__aeabi_ddiv+0x156>
    56f8:	e1ed      	b.n	5ad6 <__aeabi_ddiv+0x532>
    56fa:	1a88      	subs	r0, r1, r2
    56fc:	4642      	mov	r2, r8
    56fe:	0412      	lsls	r2, r2, #16
    5700:	431a      	orrs	r2, r3
    5702:	4690      	mov	r8, r2
    5704:	4641      	mov	r1, r8
    5706:	9b00      	ldr	r3, [sp, #0]
    5708:	040e      	lsls	r6, r1, #16
    570a:	0c1b      	lsrs	r3, r3, #16
    570c:	001f      	movs	r7, r3
    570e:	9302      	str	r3, [sp, #8]
    5710:	9b00      	ldr	r3, [sp, #0]
    5712:	0c36      	lsrs	r6, r6, #16
    5714:	041b      	lsls	r3, r3, #16
    5716:	0c19      	lsrs	r1, r3, #16
    5718:	000b      	movs	r3, r1
    571a:	4373      	muls	r3, r6
    571c:	0c12      	lsrs	r2, r2, #16
    571e:	437e      	muls	r6, r7
    5720:	9103      	str	r1, [sp, #12]
    5722:	4351      	muls	r1, r2
    5724:	437a      	muls	r2, r7
    5726:	0c1f      	lsrs	r7, r3, #16
    5728:	46bc      	mov	ip, r7
    572a:	1876      	adds	r6, r6, r1
    572c:	4466      	add	r6, ip
    572e:	42b1      	cmp	r1, r6
    5730:	d903      	bls.n	573a <__aeabi_ddiv+0x196>
    5732:	2180      	movs	r1, #128	; 0x80
    5734:	0249      	lsls	r1, r1, #9
    5736:	468c      	mov	ip, r1
    5738:	4462      	add	r2, ip
    573a:	0c31      	lsrs	r1, r6, #16
    573c:	188a      	adds	r2, r1, r2
    573e:	0431      	lsls	r1, r6, #16
    5740:	041e      	lsls	r6, r3, #16
    5742:	0c36      	lsrs	r6, r6, #16
    5744:	198e      	adds	r6, r1, r6
    5746:	4290      	cmp	r0, r2
    5748:	d302      	bcc.n	5750 <__aeabi_ddiv+0x1ac>
    574a:	d112      	bne.n	5772 <__aeabi_ddiv+0x1ce>
    574c:	42b5      	cmp	r5, r6
    574e:	d210      	bcs.n	5772 <__aeabi_ddiv+0x1ce>
    5750:	4643      	mov	r3, r8
    5752:	1e59      	subs	r1, r3, #1
    5754:	9b00      	ldr	r3, [sp, #0]
    5756:	469c      	mov	ip, r3
    5758:	4465      	add	r5, ip
    575a:	001f      	movs	r7, r3
    575c:	429d      	cmp	r5, r3
    575e:	419b      	sbcs	r3, r3
    5760:	425b      	negs	r3, r3
    5762:	191b      	adds	r3, r3, r4
    5764:	18c0      	adds	r0, r0, r3
    5766:	4284      	cmp	r4, r0
    5768:	d200      	bcs.n	576c <__aeabi_ddiv+0x1c8>
    576a:	e1a0      	b.n	5aae <__aeabi_ddiv+0x50a>
    576c:	d100      	bne.n	5770 <__aeabi_ddiv+0x1cc>
    576e:	e19b      	b.n	5aa8 <__aeabi_ddiv+0x504>
    5770:	4688      	mov	r8, r1
    5772:	1bae      	subs	r6, r5, r6
    5774:	42b5      	cmp	r5, r6
    5776:	41ad      	sbcs	r5, r5
    5778:	1a80      	subs	r0, r0, r2
    577a:	426d      	negs	r5, r5
    577c:	1b40      	subs	r0, r0, r5
    577e:	4284      	cmp	r4, r0
    5780:	d100      	bne.n	5784 <__aeabi_ddiv+0x1e0>
    5782:	e1d5      	b.n	5b30 <__aeabi_ddiv+0x58c>
    5784:	4649      	mov	r1, r9
    5786:	f7fe fde9 	bl	435c <__aeabi_uidivmod>
    578a:	9a01      	ldr	r2, [sp, #4]
    578c:	040b      	lsls	r3, r1, #16
    578e:	4342      	muls	r2, r0
    5790:	0c31      	lsrs	r1, r6, #16
    5792:	0005      	movs	r5, r0
    5794:	4319      	orrs	r1, r3
    5796:	428a      	cmp	r2, r1
    5798:	d900      	bls.n	579c <__aeabi_ddiv+0x1f8>
    579a:	e16c      	b.n	5a76 <__aeabi_ddiv+0x4d2>
    579c:	1a88      	subs	r0, r1, r2
    579e:	4649      	mov	r1, r9
    57a0:	f7fe fddc 	bl	435c <__aeabi_uidivmod>
    57a4:	9a01      	ldr	r2, [sp, #4]
    57a6:	0436      	lsls	r6, r6, #16
    57a8:	4342      	muls	r2, r0
    57aa:	0409      	lsls	r1, r1, #16
    57ac:	0c36      	lsrs	r6, r6, #16
    57ae:	0003      	movs	r3, r0
    57b0:	430e      	orrs	r6, r1
    57b2:	42b2      	cmp	r2, r6
    57b4:	d900      	bls.n	57b8 <__aeabi_ddiv+0x214>
    57b6:	e153      	b.n	5a60 <__aeabi_ddiv+0x4bc>
    57b8:	9803      	ldr	r0, [sp, #12]
    57ba:	1ab6      	subs	r6, r6, r2
    57bc:	0002      	movs	r2, r0
    57be:	042d      	lsls	r5, r5, #16
    57c0:	431d      	orrs	r5, r3
    57c2:	9f02      	ldr	r7, [sp, #8]
    57c4:	042b      	lsls	r3, r5, #16
    57c6:	0c1b      	lsrs	r3, r3, #16
    57c8:	435a      	muls	r2, r3
    57ca:	437b      	muls	r3, r7
    57cc:	469c      	mov	ip, r3
    57ce:	0c29      	lsrs	r1, r5, #16
    57d0:	4348      	muls	r0, r1
    57d2:	0c13      	lsrs	r3, r2, #16
    57d4:	4484      	add	ip, r0
    57d6:	4463      	add	r3, ip
    57d8:	4379      	muls	r1, r7
    57da:	4298      	cmp	r0, r3
    57dc:	d903      	bls.n	57e6 <__aeabi_ddiv+0x242>
    57de:	2080      	movs	r0, #128	; 0x80
    57e0:	0240      	lsls	r0, r0, #9
    57e2:	4684      	mov	ip, r0
    57e4:	4461      	add	r1, ip
    57e6:	0c18      	lsrs	r0, r3, #16
    57e8:	0412      	lsls	r2, r2, #16
    57ea:	041b      	lsls	r3, r3, #16
    57ec:	0c12      	lsrs	r2, r2, #16
    57ee:	1841      	adds	r1, r0, r1
    57f0:	189b      	adds	r3, r3, r2
    57f2:	428e      	cmp	r6, r1
    57f4:	d200      	bcs.n	57f8 <__aeabi_ddiv+0x254>
    57f6:	e0ff      	b.n	59f8 <__aeabi_ddiv+0x454>
    57f8:	d100      	bne.n	57fc <__aeabi_ddiv+0x258>
    57fa:	e0fa      	b.n	59f2 <__aeabi_ddiv+0x44e>
    57fc:	2301      	movs	r3, #1
    57fe:	431d      	orrs	r5, r3
    5800:	4a49      	ldr	r2, [pc, #292]	; (5928 <__aeabi_ddiv+0x384>)
    5802:	445a      	add	r2, fp
    5804:	2a00      	cmp	r2, #0
    5806:	dc00      	bgt.n	580a <__aeabi_ddiv+0x266>
    5808:	e0aa      	b.n	5960 <__aeabi_ddiv+0x3bc>
    580a:	076b      	lsls	r3, r5, #29
    580c:	d000      	beq.n	5810 <__aeabi_ddiv+0x26c>
    580e:	e13d      	b.n	5a8c <__aeabi_ddiv+0x4e8>
    5810:	08ed      	lsrs	r5, r5, #3
    5812:	4643      	mov	r3, r8
    5814:	01db      	lsls	r3, r3, #7
    5816:	d506      	bpl.n	5826 <__aeabi_ddiv+0x282>
    5818:	4642      	mov	r2, r8
    581a:	4b44      	ldr	r3, [pc, #272]	; (592c <__aeabi_ddiv+0x388>)
    581c:	401a      	ands	r2, r3
    581e:	4690      	mov	r8, r2
    5820:	2280      	movs	r2, #128	; 0x80
    5822:	00d2      	lsls	r2, r2, #3
    5824:	445a      	add	r2, fp
    5826:	4b42      	ldr	r3, [pc, #264]	; (5930 <__aeabi_ddiv+0x38c>)
    5828:	429a      	cmp	r2, r3
    582a:	dd00      	ble.n	582e <__aeabi_ddiv+0x28a>
    582c:	e71f      	b.n	566e <__aeabi_ddiv+0xca>
    582e:	4643      	mov	r3, r8
    5830:	075b      	lsls	r3, r3, #29
    5832:	431d      	orrs	r5, r3
    5834:	4643      	mov	r3, r8
    5836:	0552      	lsls	r2, r2, #21
    5838:	025c      	lsls	r4, r3, #9
    583a:	0b24      	lsrs	r4, r4, #12
    583c:	0d53      	lsrs	r3, r2, #21
    583e:	e708      	b.n	5652 <__aeabi_ddiv+0xae>
    5840:	4652      	mov	r2, sl
    5842:	4322      	orrs	r2, r4
    5844:	d100      	bne.n	5848 <__aeabi_ddiv+0x2a4>
    5846:	e07b      	b.n	5940 <__aeabi_ddiv+0x39c>
    5848:	2c00      	cmp	r4, #0
    584a:	d100      	bne.n	584e <__aeabi_ddiv+0x2aa>
    584c:	e0fa      	b.n	5a44 <__aeabi_ddiv+0x4a0>
    584e:	0020      	movs	r0, r4
    5850:	f002 f9a4 	bl	7b9c <__clzsi2>
    5854:	0002      	movs	r2, r0
    5856:	3a0b      	subs	r2, #11
    5858:	231d      	movs	r3, #29
    585a:	0001      	movs	r1, r0
    585c:	1a9b      	subs	r3, r3, r2
    585e:	4652      	mov	r2, sl
    5860:	3908      	subs	r1, #8
    5862:	40da      	lsrs	r2, r3
    5864:	408c      	lsls	r4, r1
    5866:	4314      	orrs	r4, r2
    5868:	4652      	mov	r2, sl
    586a:	408a      	lsls	r2, r1
    586c:	4b31      	ldr	r3, [pc, #196]	; (5934 <__aeabi_ddiv+0x390>)
    586e:	4458      	add	r0, fp
    5870:	469b      	mov	fp, r3
    5872:	4483      	add	fp, r0
    5874:	2000      	movs	r0, #0
    5876:	e6d5      	b.n	5624 <__aeabi_ddiv+0x80>
    5878:	464b      	mov	r3, r9
    587a:	4323      	orrs	r3, r4
    587c:	4698      	mov	r8, r3
    587e:	d044      	beq.n	590a <__aeabi_ddiv+0x366>
    5880:	2c00      	cmp	r4, #0
    5882:	d100      	bne.n	5886 <__aeabi_ddiv+0x2e2>
    5884:	e0ce      	b.n	5a24 <__aeabi_ddiv+0x480>
    5886:	0020      	movs	r0, r4
    5888:	f002 f988 	bl	7b9c <__clzsi2>
    588c:	0001      	movs	r1, r0
    588e:	0002      	movs	r2, r0
    5890:	390b      	subs	r1, #11
    5892:	231d      	movs	r3, #29
    5894:	1a5b      	subs	r3, r3, r1
    5896:	4649      	mov	r1, r9
    5898:	0010      	movs	r0, r2
    589a:	40d9      	lsrs	r1, r3
    589c:	3808      	subs	r0, #8
    589e:	4084      	lsls	r4, r0
    58a0:	000b      	movs	r3, r1
    58a2:	464d      	mov	r5, r9
    58a4:	4323      	orrs	r3, r4
    58a6:	4698      	mov	r8, r3
    58a8:	4085      	lsls	r5, r0
    58aa:	4823      	ldr	r0, [pc, #140]	; (5938 <__aeabi_ddiv+0x394>)
    58ac:	1a83      	subs	r3, r0, r2
    58ae:	469b      	mov	fp, r3
    58b0:	2300      	movs	r3, #0
    58b2:	4699      	mov	r9, r3
    58b4:	9300      	str	r3, [sp, #0]
    58b6:	e69a      	b.n	55ee <__aeabi_ddiv+0x4a>
    58b8:	464b      	mov	r3, r9
    58ba:	4323      	orrs	r3, r4
    58bc:	4698      	mov	r8, r3
    58be:	d11d      	bne.n	58fc <__aeabi_ddiv+0x358>
    58c0:	2308      	movs	r3, #8
    58c2:	4699      	mov	r9, r3
    58c4:	3b06      	subs	r3, #6
    58c6:	2500      	movs	r5, #0
    58c8:	4683      	mov	fp, r0
    58ca:	9300      	str	r3, [sp, #0]
    58cc:	e68f      	b.n	55ee <__aeabi_ddiv+0x4a>
    58ce:	4652      	mov	r2, sl
    58d0:	4322      	orrs	r2, r4
    58d2:	d109      	bne.n	58e8 <__aeabi_ddiv+0x344>
    58d4:	2302      	movs	r3, #2
    58d6:	4649      	mov	r1, r9
    58d8:	4319      	orrs	r1, r3
    58da:	4b18      	ldr	r3, [pc, #96]	; (593c <__aeabi_ddiv+0x398>)
    58dc:	4689      	mov	r9, r1
    58de:	469c      	mov	ip, r3
    58e0:	2400      	movs	r4, #0
    58e2:	2002      	movs	r0, #2
    58e4:	44e3      	add	fp, ip
    58e6:	e69d      	b.n	5624 <__aeabi_ddiv+0x80>
    58e8:	2303      	movs	r3, #3
    58ea:	464a      	mov	r2, r9
    58ec:	431a      	orrs	r2, r3
    58ee:	4b13      	ldr	r3, [pc, #76]	; (593c <__aeabi_ddiv+0x398>)
    58f0:	4691      	mov	r9, r2
    58f2:	469c      	mov	ip, r3
    58f4:	4652      	mov	r2, sl
    58f6:	2003      	movs	r0, #3
    58f8:	44e3      	add	fp, ip
    58fa:	e693      	b.n	5624 <__aeabi_ddiv+0x80>
    58fc:	230c      	movs	r3, #12
    58fe:	4699      	mov	r9, r3
    5900:	3b09      	subs	r3, #9
    5902:	46a0      	mov	r8, r4
    5904:	4683      	mov	fp, r0
    5906:	9300      	str	r3, [sp, #0]
    5908:	e671      	b.n	55ee <__aeabi_ddiv+0x4a>
    590a:	2304      	movs	r3, #4
    590c:	4699      	mov	r9, r3
    590e:	2300      	movs	r3, #0
    5910:	469b      	mov	fp, r3
    5912:	3301      	adds	r3, #1
    5914:	2500      	movs	r5, #0
    5916:	9300      	str	r3, [sp, #0]
    5918:	e669      	b.n	55ee <__aeabi_ddiv+0x4a>
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	000007ff 	.word	0x000007ff
    5920:	fffffc01 	.word	0xfffffc01
    5924:	00014340 	.word	0x00014340
    5928:	000003ff 	.word	0x000003ff
    592c:	feffffff 	.word	0xfeffffff
    5930:	000007fe 	.word	0x000007fe
    5934:	000003f3 	.word	0x000003f3
    5938:	fffffc0d 	.word	0xfffffc0d
    593c:	fffff801 	.word	0xfffff801
    5940:	4649      	mov	r1, r9
    5942:	2301      	movs	r3, #1
    5944:	4319      	orrs	r1, r3
    5946:	4689      	mov	r9, r1
    5948:	2400      	movs	r4, #0
    594a:	2001      	movs	r0, #1
    594c:	e66a      	b.n	5624 <__aeabi_ddiv+0x80>
    594e:	2300      	movs	r3, #0
    5950:	2480      	movs	r4, #128	; 0x80
    5952:	469a      	mov	sl, r3
    5954:	2500      	movs	r5, #0
    5956:	4b8a      	ldr	r3, [pc, #552]	; (5b80 <__aeabi_ddiv+0x5dc>)
    5958:	0324      	lsls	r4, r4, #12
    595a:	e67a      	b.n	5652 <__aeabi_ddiv+0xae>
    595c:	2501      	movs	r5, #1
    595e:	426d      	negs	r5, r5
    5960:	2301      	movs	r3, #1
    5962:	1a9b      	subs	r3, r3, r2
    5964:	2b38      	cmp	r3, #56	; 0x38
    5966:	dd00      	ble.n	596a <__aeabi_ddiv+0x3c6>
    5968:	e670      	b.n	564c <__aeabi_ddiv+0xa8>
    596a:	2b1f      	cmp	r3, #31
    596c:	dc00      	bgt.n	5970 <__aeabi_ddiv+0x3cc>
    596e:	e0bf      	b.n	5af0 <__aeabi_ddiv+0x54c>
    5970:	211f      	movs	r1, #31
    5972:	4249      	negs	r1, r1
    5974:	1a8a      	subs	r2, r1, r2
    5976:	4641      	mov	r1, r8
    5978:	40d1      	lsrs	r1, r2
    597a:	000a      	movs	r2, r1
    597c:	2b20      	cmp	r3, #32
    597e:	d004      	beq.n	598a <__aeabi_ddiv+0x3e6>
    5980:	4641      	mov	r1, r8
    5982:	4b80      	ldr	r3, [pc, #512]	; (5b84 <__aeabi_ddiv+0x5e0>)
    5984:	445b      	add	r3, fp
    5986:	4099      	lsls	r1, r3
    5988:	430d      	orrs	r5, r1
    598a:	1e6b      	subs	r3, r5, #1
    598c:	419d      	sbcs	r5, r3
    598e:	2307      	movs	r3, #7
    5990:	432a      	orrs	r2, r5
    5992:	001d      	movs	r5, r3
    5994:	2400      	movs	r4, #0
    5996:	4015      	ands	r5, r2
    5998:	4213      	tst	r3, r2
    599a:	d100      	bne.n	599e <__aeabi_ddiv+0x3fa>
    599c:	e0d4      	b.n	5b48 <__aeabi_ddiv+0x5a4>
    599e:	210f      	movs	r1, #15
    59a0:	2300      	movs	r3, #0
    59a2:	4011      	ands	r1, r2
    59a4:	2904      	cmp	r1, #4
    59a6:	d100      	bne.n	59aa <__aeabi_ddiv+0x406>
    59a8:	e0cb      	b.n	5b42 <__aeabi_ddiv+0x59e>
    59aa:	1d11      	adds	r1, r2, #4
    59ac:	4291      	cmp	r1, r2
    59ae:	4192      	sbcs	r2, r2
    59b0:	4252      	negs	r2, r2
    59b2:	189b      	adds	r3, r3, r2
    59b4:	000a      	movs	r2, r1
    59b6:	0219      	lsls	r1, r3, #8
    59b8:	d400      	bmi.n	59bc <__aeabi_ddiv+0x418>
    59ba:	e0c2      	b.n	5b42 <__aeabi_ddiv+0x59e>
    59bc:	2301      	movs	r3, #1
    59be:	2400      	movs	r4, #0
    59c0:	2500      	movs	r5, #0
    59c2:	e646      	b.n	5652 <__aeabi_ddiv+0xae>
    59c4:	2380      	movs	r3, #128	; 0x80
    59c6:	4641      	mov	r1, r8
    59c8:	031b      	lsls	r3, r3, #12
    59ca:	4219      	tst	r1, r3
    59cc:	d008      	beq.n	59e0 <__aeabi_ddiv+0x43c>
    59ce:	421c      	tst	r4, r3
    59d0:	d106      	bne.n	59e0 <__aeabi_ddiv+0x43c>
    59d2:	431c      	orrs	r4, r3
    59d4:	0324      	lsls	r4, r4, #12
    59d6:	46ba      	mov	sl, r7
    59d8:	0015      	movs	r5, r2
    59da:	4b69      	ldr	r3, [pc, #420]	; (5b80 <__aeabi_ddiv+0x5dc>)
    59dc:	0b24      	lsrs	r4, r4, #12
    59de:	e638      	b.n	5652 <__aeabi_ddiv+0xae>
    59e0:	2480      	movs	r4, #128	; 0x80
    59e2:	4643      	mov	r3, r8
    59e4:	0324      	lsls	r4, r4, #12
    59e6:	431c      	orrs	r4, r3
    59e8:	0324      	lsls	r4, r4, #12
    59ea:	46b2      	mov	sl, r6
    59ec:	4b64      	ldr	r3, [pc, #400]	; (5b80 <__aeabi_ddiv+0x5dc>)
    59ee:	0b24      	lsrs	r4, r4, #12
    59f0:	e62f      	b.n	5652 <__aeabi_ddiv+0xae>
    59f2:	2b00      	cmp	r3, #0
    59f4:	d100      	bne.n	59f8 <__aeabi_ddiv+0x454>
    59f6:	e703      	b.n	5800 <__aeabi_ddiv+0x25c>
    59f8:	19a6      	adds	r6, r4, r6
    59fa:	1e68      	subs	r0, r5, #1
    59fc:	42a6      	cmp	r6, r4
    59fe:	d200      	bcs.n	5a02 <__aeabi_ddiv+0x45e>
    5a00:	e08d      	b.n	5b1e <__aeabi_ddiv+0x57a>
    5a02:	428e      	cmp	r6, r1
    5a04:	d200      	bcs.n	5a08 <__aeabi_ddiv+0x464>
    5a06:	e0a3      	b.n	5b50 <__aeabi_ddiv+0x5ac>
    5a08:	d100      	bne.n	5a0c <__aeabi_ddiv+0x468>
    5a0a:	e0b3      	b.n	5b74 <__aeabi_ddiv+0x5d0>
    5a0c:	0005      	movs	r5, r0
    5a0e:	e6f5      	b.n	57fc <__aeabi_ddiv+0x258>
    5a10:	42aa      	cmp	r2, r5
    5a12:	d900      	bls.n	5a16 <__aeabi_ddiv+0x472>
    5a14:	e639      	b.n	568a <__aeabi_ddiv+0xe6>
    5a16:	4643      	mov	r3, r8
    5a18:	07de      	lsls	r6, r3, #31
    5a1a:	0858      	lsrs	r0, r3, #1
    5a1c:	086b      	lsrs	r3, r5, #1
    5a1e:	431e      	orrs	r6, r3
    5a20:	07ed      	lsls	r5, r5, #31
    5a22:	e639      	b.n	5698 <__aeabi_ddiv+0xf4>
    5a24:	4648      	mov	r0, r9
    5a26:	f002 f8b9 	bl	7b9c <__clzsi2>
    5a2a:	0001      	movs	r1, r0
    5a2c:	0002      	movs	r2, r0
    5a2e:	3115      	adds	r1, #21
    5a30:	3220      	adds	r2, #32
    5a32:	291c      	cmp	r1, #28
    5a34:	dc00      	bgt.n	5a38 <__aeabi_ddiv+0x494>
    5a36:	e72c      	b.n	5892 <__aeabi_ddiv+0x2ee>
    5a38:	464b      	mov	r3, r9
    5a3a:	3808      	subs	r0, #8
    5a3c:	4083      	lsls	r3, r0
    5a3e:	2500      	movs	r5, #0
    5a40:	4698      	mov	r8, r3
    5a42:	e732      	b.n	58aa <__aeabi_ddiv+0x306>
    5a44:	f002 f8aa 	bl	7b9c <__clzsi2>
    5a48:	0003      	movs	r3, r0
    5a4a:	001a      	movs	r2, r3
    5a4c:	3215      	adds	r2, #21
    5a4e:	3020      	adds	r0, #32
    5a50:	2a1c      	cmp	r2, #28
    5a52:	dc00      	bgt.n	5a56 <__aeabi_ddiv+0x4b2>
    5a54:	e700      	b.n	5858 <__aeabi_ddiv+0x2b4>
    5a56:	4654      	mov	r4, sl
    5a58:	3b08      	subs	r3, #8
    5a5a:	2200      	movs	r2, #0
    5a5c:	409c      	lsls	r4, r3
    5a5e:	e705      	b.n	586c <__aeabi_ddiv+0x2c8>
    5a60:	1936      	adds	r6, r6, r4
    5a62:	3b01      	subs	r3, #1
    5a64:	42b4      	cmp	r4, r6
    5a66:	d900      	bls.n	5a6a <__aeabi_ddiv+0x4c6>
    5a68:	e6a6      	b.n	57b8 <__aeabi_ddiv+0x214>
    5a6a:	42b2      	cmp	r2, r6
    5a6c:	d800      	bhi.n	5a70 <__aeabi_ddiv+0x4cc>
    5a6e:	e6a3      	b.n	57b8 <__aeabi_ddiv+0x214>
    5a70:	1e83      	subs	r3, r0, #2
    5a72:	1936      	adds	r6, r6, r4
    5a74:	e6a0      	b.n	57b8 <__aeabi_ddiv+0x214>
    5a76:	1909      	adds	r1, r1, r4
    5a78:	3d01      	subs	r5, #1
    5a7a:	428c      	cmp	r4, r1
    5a7c:	d900      	bls.n	5a80 <__aeabi_ddiv+0x4dc>
    5a7e:	e68d      	b.n	579c <__aeabi_ddiv+0x1f8>
    5a80:	428a      	cmp	r2, r1
    5a82:	d800      	bhi.n	5a86 <__aeabi_ddiv+0x4e2>
    5a84:	e68a      	b.n	579c <__aeabi_ddiv+0x1f8>
    5a86:	1e85      	subs	r5, r0, #2
    5a88:	1909      	adds	r1, r1, r4
    5a8a:	e687      	b.n	579c <__aeabi_ddiv+0x1f8>
    5a8c:	230f      	movs	r3, #15
    5a8e:	402b      	ands	r3, r5
    5a90:	2b04      	cmp	r3, #4
    5a92:	d100      	bne.n	5a96 <__aeabi_ddiv+0x4f2>
    5a94:	e6bc      	b.n	5810 <__aeabi_ddiv+0x26c>
    5a96:	2305      	movs	r3, #5
    5a98:	425b      	negs	r3, r3
    5a9a:	42ab      	cmp	r3, r5
    5a9c:	419b      	sbcs	r3, r3
    5a9e:	3504      	adds	r5, #4
    5aa0:	425b      	negs	r3, r3
    5aa2:	08ed      	lsrs	r5, r5, #3
    5aa4:	4498      	add	r8, r3
    5aa6:	e6b4      	b.n	5812 <__aeabi_ddiv+0x26e>
    5aa8:	42af      	cmp	r7, r5
    5aaa:	d900      	bls.n	5aae <__aeabi_ddiv+0x50a>
    5aac:	e660      	b.n	5770 <__aeabi_ddiv+0x1cc>
    5aae:	4282      	cmp	r2, r0
    5ab0:	d804      	bhi.n	5abc <__aeabi_ddiv+0x518>
    5ab2:	d000      	beq.n	5ab6 <__aeabi_ddiv+0x512>
    5ab4:	e65c      	b.n	5770 <__aeabi_ddiv+0x1cc>
    5ab6:	42ae      	cmp	r6, r5
    5ab8:	d800      	bhi.n	5abc <__aeabi_ddiv+0x518>
    5aba:	e659      	b.n	5770 <__aeabi_ddiv+0x1cc>
    5abc:	2302      	movs	r3, #2
    5abe:	425b      	negs	r3, r3
    5ac0:	469c      	mov	ip, r3
    5ac2:	9b00      	ldr	r3, [sp, #0]
    5ac4:	44e0      	add	r8, ip
    5ac6:	469c      	mov	ip, r3
    5ac8:	4465      	add	r5, ip
    5aca:	429d      	cmp	r5, r3
    5acc:	419b      	sbcs	r3, r3
    5ace:	425b      	negs	r3, r3
    5ad0:	191b      	adds	r3, r3, r4
    5ad2:	18c0      	adds	r0, r0, r3
    5ad4:	e64d      	b.n	5772 <__aeabi_ddiv+0x1ce>
    5ad6:	428a      	cmp	r2, r1
    5ad8:	d800      	bhi.n	5adc <__aeabi_ddiv+0x538>
    5ada:	e60e      	b.n	56fa <__aeabi_ddiv+0x156>
    5adc:	1e83      	subs	r3, r0, #2
    5ade:	1909      	adds	r1, r1, r4
    5ae0:	e60b      	b.n	56fa <__aeabi_ddiv+0x156>
    5ae2:	428a      	cmp	r2, r1
    5ae4:	d800      	bhi.n	5ae8 <__aeabi_ddiv+0x544>
    5ae6:	e5f4      	b.n	56d2 <__aeabi_ddiv+0x12e>
    5ae8:	1e83      	subs	r3, r0, #2
    5aea:	4698      	mov	r8, r3
    5aec:	1909      	adds	r1, r1, r4
    5aee:	e5f0      	b.n	56d2 <__aeabi_ddiv+0x12e>
    5af0:	4925      	ldr	r1, [pc, #148]	; (5b88 <__aeabi_ddiv+0x5e4>)
    5af2:	0028      	movs	r0, r5
    5af4:	4459      	add	r1, fp
    5af6:	408d      	lsls	r5, r1
    5af8:	4642      	mov	r2, r8
    5afa:	408a      	lsls	r2, r1
    5afc:	1e69      	subs	r1, r5, #1
    5afe:	418d      	sbcs	r5, r1
    5b00:	4641      	mov	r1, r8
    5b02:	40d8      	lsrs	r0, r3
    5b04:	40d9      	lsrs	r1, r3
    5b06:	4302      	orrs	r2, r0
    5b08:	432a      	orrs	r2, r5
    5b0a:	000b      	movs	r3, r1
    5b0c:	0751      	lsls	r1, r2, #29
    5b0e:	d100      	bne.n	5b12 <__aeabi_ddiv+0x56e>
    5b10:	e751      	b.n	59b6 <__aeabi_ddiv+0x412>
    5b12:	210f      	movs	r1, #15
    5b14:	4011      	ands	r1, r2
    5b16:	2904      	cmp	r1, #4
    5b18:	d000      	beq.n	5b1c <__aeabi_ddiv+0x578>
    5b1a:	e746      	b.n	59aa <__aeabi_ddiv+0x406>
    5b1c:	e74b      	b.n	59b6 <__aeabi_ddiv+0x412>
    5b1e:	0005      	movs	r5, r0
    5b20:	428e      	cmp	r6, r1
    5b22:	d000      	beq.n	5b26 <__aeabi_ddiv+0x582>
    5b24:	e66a      	b.n	57fc <__aeabi_ddiv+0x258>
    5b26:	9a00      	ldr	r2, [sp, #0]
    5b28:	4293      	cmp	r3, r2
    5b2a:	d000      	beq.n	5b2e <__aeabi_ddiv+0x58a>
    5b2c:	e666      	b.n	57fc <__aeabi_ddiv+0x258>
    5b2e:	e667      	b.n	5800 <__aeabi_ddiv+0x25c>
    5b30:	4a16      	ldr	r2, [pc, #88]	; (5b8c <__aeabi_ddiv+0x5e8>)
    5b32:	445a      	add	r2, fp
    5b34:	2a00      	cmp	r2, #0
    5b36:	dc00      	bgt.n	5b3a <__aeabi_ddiv+0x596>
    5b38:	e710      	b.n	595c <__aeabi_ddiv+0x3b8>
    5b3a:	2301      	movs	r3, #1
    5b3c:	2500      	movs	r5, #0
    5b3e:	4498      	add	r8, r3
    5b40:	e667      	b.n	5812 <__aeabi_ddiv+0x26e>
    5b42:	075d      	lsls	r5, r3, #29
    5b44:	025b      	lsls	r3, r3, #9
    5b46:	0b1c      	lsrs	r4, r3, #12
    5b48:	08d2      	lsrs	r2, r2, #3
    5b4a:	2300      	movs	r3, #0
    5b4c:	4315      	orrs	r5, r2
    5b4e:	e580      	b.n	5652 <__aeabi_ddiv+0xae>
    5b50:	9800      	ldr	r0, [sp, #0]
    5b52:	3d02      	subs	r5, #2
    5b54:	0042      	lsls	r2, r0, #1
    5b56:	4282      	cmp	r2, r0
    5b58:	41bf      	sbcs	r7, r7
    5b5a:	427f      	negs	r7, r7
    5b5c:	193c      	adds	r4, r7, r4
    5b5e:	1936      	adds	r6, r6, r4
    5b60:	9200      	str	r2, [sp, #0]
    5b62:	e7dd      	b.n	5b20 <__aeabi_ddiv+0x57c>
    5b64:	2480      	movs	r4, #128	; 0x80
    5b66:	4643      	mov	r3, r8
    5b68:	0324      	lsls	r4, r4, #12
    5b6a:	431c      	orrs	r4, r3
    5b6c:	0324      	lsls	r4, r4, #12
    5b6e:	4b04      	ldr	r3, [pc, #16]	; (5b80 <__aeabi_ddiv+0x5dc>)
    5b70:	0b24      	lsrs	r4, r4, #12
    5b72:	e56e      	b.n	5652 <__aeabi_ddiv+0xae>
    5b74:	9a00      	ldr	r2, [sp, #0]
    5b76:	429a      	cmp	r2, r3
    5b78:	d3ea      	bcc.n	5b50 <__aeabi_ddiv+0x5ac>
    5b7a:	0005      	movs	r5, r0
    5b7c:	e7d3      	b.n	5b26 <__aeabi_ddiv+0x582>
    5b7e:	46c0      	nop			; (mov r8, r8)
    5b80:	000007ff 	.word	0x000007ff
    5b84:	0000043e 	.word	0x0000043e
    5b88:	0000041e 	.word	0x0000041e
    5b8c:	000003ff 	.word	0x000003ff

00005b90 <__eqdf2>:
    5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b92:	464e      	mov	r6, r9
    5b94:	4645      	mov	r5, r8
    5b96:	46de      	mov	lr, fp
    5b98:	4657      	mov	r7, sl
    5b9a:	4690      	mov	r8, r2
    5b9c:	b5e0      	push	{r5, r6, r7, lr}
    5b9e:	0017      	movs	r7, r2
    5ba0:	031a      	lsls	r2, r3, #12
    5ba2:	0b12      	lsrs	r2, r2, #12
    5ba4:	0005      	movs	r5, r0
    5ba6:	4684      	mov	ip, r0
    5ba8:	4819      	ldr	r0, [pc, #100]	; (5c10 <__eqdf2+0x80>)
    5baa:	030e      	lsls	r6, r1, #12
    5bac:	004c      	lsls	r4, r1, #1
    5bae:	4691      	mov	r9, r2
    5bb0:	005a      	lsls	r2, r3, #1
    5bb2:	0fdb      	lsrs	r3, r3, #31
    5bb4:	469b      	mov	fp, r3
    5bb6:	0b36      	lsrs	r6, r6, #12
    5bb8:	0d64      	lsrs	r4, r4, #21
    5bba:	0fc9      	lsrs	r1, r1, #31
    5bbc:	0d52      	lsrs	r2, r2, #21
    5bbe:	4284      	cmp	r4, r0
    5bc0:	d019      	beq.n	5bf6 <__eqdf2+0x66>
    5bc2:	4282      	cmp	r2, r0
    5bc4:	d010      	beq.n	5be8 <__eqdf2+0x58>
    5bc6:	2001      	movs	r0, #1
    5bc8:	4294      	cmp	r4, r2
    5bca:	d10e      	bne.n	5bea <__eqdf2+0x5a>
    5bcc:	454e      	cmp	r6, r9
    5bce:	d10c      	bne.n	5bea <__eqdf2+0x5a>
    5bd0:	2001      	movs	r0, #1
    5bd2:	45c4      	cmp	ip, r8
    5bd4:	d109      	bne.n	5bea <__eqdf2+0x5a>
    5bd6:	4559      	cmp	r1, fp
    5bd8:	d017      	beq.n	5c0a <__eqdf2+0x7a>
    5bda:	2c00      	cmp	r4, #0
    5bdc:	d105      	bne.n	5bea <__eqdf2+0x5a>
    5bde:	0030      	movs	r0, r6
    5be0:	4328      	orrs	r0, r5
    5be2:	1e43      	subs	r3, r0, #1
    5be4:	4198      	sbcs	r0, r3
    5be6:	e000      	b.n	5bea <__eqdf2+0x5a>
    5be8:	2001      	movs	r0, #1
    5bea:	bcf0      	pop	{r4, r5, r6, r7}
    5bec:	46bb      	mov	fp, r7
    5bee:	46b2      	mov	sl, r6
    5bf0:	46a9      	mov	r9, r5
    5bf2:	46a0      	mov	r8, r4
    5bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bf6:	0033      	movs	r3, r6
    5bf8:	2001      	movs	r0, #1
    5bfa:	432b      	orrs	r3, r5
    5bfc:	d1f5      	bne.n	5bea <__eqdf2+0x5a>
    5bfe:	42a2      	cmp	r2, r4
    5c00:	d1f3      	bne.n	5bea <__eqdf2+0x5a>
    5c02:	464b      	mov	r3, r9
    5c04:	433b      	orrs	r3, r7
    5c06:	d1f0      	bne.n	5bea <__eqdf2+0x5a>
    5c08:	e7e2      	b.n	5bd0 <__eqdf2+0x40>
    5c0a:	2000      	movs	r0, #0
    5c0c:	e7ed      	b.n	5bea <__eqdf2+0x5a>
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	000007ff 	.word	0x000007ff

00005c14 <__gedf2>:
    5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c16:	4647      	mov	r7, r8
    5c18:	46ce      	mov	lr, r9
    5c1a:	0004      	movs	r4, r0
    5c1c:	0018      	movs	r0, r3
    5c1e:	0016      	movs	r6, r2
    5c20:	031b      	lsls	r3, r3, #12
    5c22:	0b1b      	lsrs	r3, r3, #12
    5c24:	4d2d      	ldr	r5, [pc, #180]	; (5cdc <__gedf2+0xc8>)
    5c26:	004a      	lsls	r2, r1, #1
    5c28:	4699      	mov	r9, r3
    5c2a:	b580      	push	{r7, lr}
    5c2c:	0043      	lsls	r3, r0, #1
    5c2e:	030f      	lsls	r7, r1, #12
    5c30:	46a4      	mov	ip, r4
    5c32:	46b0      	mov	r8, r6
    5c34:	0b3f      	lsrs	r7, r7, #12
    5c36:	0d52      	lsrs	r2, r2, #21
    5c38:	0fc9      	lsrs	r1, r1, #31
    5c3a:	0d5b      	lsrs	r3, r3, #21
    5c3c:	0fc0      	lsrs	r0, r0, #31
    5c3e:	42aa      	cmp	r2, r5
    5c40:	d021      	beq.n	5c86 <__gedf2+0x72>
    5c42:	42ab      	cmp	r3, r5
    5c44:	d013      	beq.n	5c6e <__gedf2+0x5a>
    5c46:	2a00      	cmp	r2, #0
    5c48:	d122      	bne.n	5c90 <__gedf2+0x7c>
    5c4a:	433c      	orrs	r4, r7
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d102      	bne.n	5c56 <__gedf2+0x42>
    5c50:	464d      	mov	r5, r9
    5c52:	432e      	orrs	r6, r5
    5c54:	d022      	beq.n	5c9c <__gedf2+0x88>
    5c56:	2c00      	cmp	r4, #0
    5c58:	d010      	beq.n	5c7c <__gedf2+0x68>
    5c5a:	4281      	cmp	r1, r0
    5c5c:	d022      	beq.n	5ca4 <__gedf2+0x90>
    5c5e:	2002      	movs	r0, #2
    5c60:	3901      	subs	r1, #1
    5c62:	4008      	ands	r0, r1
    5c64:	3801      	subs	r0, #1
    5c66:	bcc0      	pop	{r6, r7}
    5c68:	46b9      	mov	r9, r7
    5c6a:	46b0      	mov	r8, r6
    5c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c6e:	464d      	mov	r5, r9
    5c70:	432e      	orrs	r6, r5
    5c72:	d129      	bne.n	5cc8 <__gedf2+0xb4>
    5c74:	2a00      	cmp	r2, #0
    5c76:	d1f0      	bne.n	5c5a <__gedf2+0x46>
    5c78:	433c      	orrs	r4, r7
    5c7a:	d1ee      	bne.n	5c5a <__gedf2+0x46>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d1f2      	bne.n	5c66 <__gedf2+0x52>
    5c80:	2001      	movs	r0, #1
    5c82:	4240      	negs	r0, r0
    5c84:	e7ef      	b.n	5c66 <__gedf2+0x52>
    5c86:	003d      	movs	r5, r7
    5c88:	4325      	orrs	r5, r4
    5c8a:	d11d      	bne.n	5cc8 <__gedf2+0xb4>
    5c8c:	4293      	cmp	r3, r2
    5c8e:	d0ee      	beq.n	5c6e <__gedf2+0x5a>
    5c90:	2b00      	cmp	r3, #0
    5c92:	d1e2      	bne.n	5c5a <__gedf2+0x46>
    5c94:	464c      	mov	r4, r9
    5c96:	4326      	orrs	r6, r4
    5c98:	d1df      	bne.n	5c5a <__gedf2+0x46>
    5c9a:	e7e0      	b.n	5c5e <__gedf2+0x4a>
    5c9c:	2000      	movs	r0, #0
    5c9e:	2c00      	cmp	r4, #0
    5ca0:	d0e1      	beq.n	5c66 <__gedf2+0x52>
    5ca2:	e7dc      	b.n	5c5e <__gedf2+0x4a>
    5ca4:	429a      	cmp	r2, r3
    5ca6:	dc0a      	bgt.n	5cbe <__gedf2+0xaa>
    5ca8:	dbe8      	blt.n	5c7c <__gedf2+0x68>
    5caa:	454f      	cmp	r7, r9
    5cac:	d8d7      	bhi.n	5c5e <__gedf2+0x4a>
    5cae:	d00e      	beq.n	5cce <__gedf2+0xba>
    5cb0:	2000      	movs	r0, #0
    5cb2:	454f      	cmp	r7, r9
    5cb4:	d2d7      	bcs.n	5c66 <__gedf2+0x52>
    5cb6:	2900      	cmp	r1, #0
    5cb8:	d0e2      	beq.n	5c80 <__gedf2+0x6c>
    5cba:	0008      	movs	r0, r1
    5cbc:	e7d3      	b.n	5c66 <__gedf2+0x52>
    5cbe:	4243      	negs	r3, r0
    5cc0:	4158      	adcs	r0, r3
    5cc2:	0040      	lsls	r0, r0, #1
    5cc4:	3801      	subs	r0, #1
    5cc6:	e7ce      	b.n	5c66 <__gedf2+0x52>
    5cc8:	2002      	movs	r0, #2
    5cca:	4240      	negs	r0, r0
    5ccc:	e7cb      	b.n	5c66 <__gedf2+0x52>
    5cce:	45c4      	cmp	ip, r8
    5cd0:	d8c5      	bhi.n	5c5e <__gedf2+0x4a>
    5cd2:	2000      	movs	r0, #0
    5cd4:	45c4      	cmp	ip, r8
    5cd6:	d2c6      	bcs.n	5c66 <__gedf2+0x52>
    5cd8:	e7ed      	b.n	5cb6 <__gedf2+0xa2>
    5cda:	46c0      	nop			; (mov r8, r8)
    5cdc:	000007ff 	.word	0x000007ff

00005ce0 <__ledf2>:
    5ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ce2:	4647      	mov	r7, r8
    5ce4:	46ce      	mov	lr, r9
    5ce6:	0004      	movs	r4, r0
    5ce8:	0018      	movs	r0, r3
    5cea:	0016      	movs	r6, r2
    5cec:	031b      	lsls	r3, r3, #12
    5cee:	0b1b      	lsrs	r3, r3, #12
    5cf0:	4d2c      	ldr	r5, [pc, #176]	; (5da4 <__ledf2+0xc4>)
    5cf2:	004a      	lsls	r2, r1, #1
    5cf4:	4699      	mov	r9, r3
    5cf6:	b580      	push	{r7, lr}
    5cf8:	0043      	lsls	r3, r0, #1
    5cfa:	030f      	lsls	r7, r1, #12
    5cfc:	46a4      	mov	ip, r4
    5cfe:	46b0      	mov	r8, r6
    5d00:	0b3f      	lsrs	r7, r7, #12
    5d02:	0d52      	lsrs	r2, r2, #21
    5d04:	0fc9      	lsrs	r1, r1, #31
    5d06:	0d5b      	lsrs	r3, r3, #21
    5d08:	0fc0      	lsrs	r0, r0, #31
    5d0a:	42aa      	cmp	r2, r5
    5d0c:	d00d      	beq.n	5d2a <__ledf2+0x4a>
    5d0e:	42ab      	cmp	r3, r5
    5d10:	d010      	beq.n	5d34 <__ledf2+0x54>
    5d12:	2a00      	cmp	r2, #0
    5d14:	d127      	bne.n	5d66 <__ledf2+0x86>
    5d16:	433c      	orrs	r4, r7
    5d18:	2b00      	cmp	r3, #0
    5d1a:	d111      	bne.n	5d40 <__ledf2+0x60>
    5d1c:	464d      	mov	r5, r9
    5d1e:	432e      	orrs	r6, r5
    5d20:	d10e      	bne.n	5d40 <__ledf2+0x60>
    5d22:	2000      	movs	r0, #0
    5d24:	2c00      	cmp	r4, #0
    5d26:	d015      	beq.n	5d54 <__ledf2+0x74>
    5d28:	e00e      	b.n	5d48 <__ledf2+0x68>
    5d2a:	003d      	movs	r5, r7
    5d2c:	4325      	orrs	r5, r4
    5d2e:	d110      	bne.n	5d52 <__ledf2+0x72>
    5d30:	4293      	cmp	r3, r2
    5d32:	d118      	bne.n	5d66 <__ledf2+0x86>
    5d34:	464d      	mov	r5, r9
    5d36:	432e      	orrs	r6, r5
    5d38:	d10b      	bne.n	5d52 <__ledf2+0x72>
    5d3a:	2a00      	cmp	r2, #0
    5d3c:	d102      	bne.n	5d44 <__ledf2+0x64>
    5d3e:	433c      	orrs	r4, r7
    5d40:	2c00      	cmp	r4, #0
    5d42:	d00b      	beq.n	5d5c <__ledf2+0x7c>
    5d44:	4281      	cmp	r1, r0
    5d46:	d014      	beq.n	5d72 <__ledf2+0x92>
    5d48:	2002      	movs	r0, #2
    5d4a:	3901      	subs	r1, #1
    5d4c:	4008      	ands	r0, r1
    5d4e:	3801      	subs	r0, #1
    5d50:	e000      	b.n	5d54 <__ledf2+0x74>
    5d52:	2002      	movs	r0, #2
    5d54:	bcc0      	pop	{r6, r7}
    5d56:	46b9      	mov	r9, r7
    5d58:	46b0      	mov	r8, r6
    5d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d5c:	2800      	cmp	r0, #0
    5d5e:	d1f9      	bne.n	5d54 <__ledf2+0x74>
    5d60:	2001      	movs	r0, #1
    5d62:	4240      	negs	r0, r0
    5d64:	e7f6      	b.n	5d54 <__ledf2+0x74>
    5d66:	2b00      	cmp	r3, #0
    5d68:	d1ec      	bne.n	5d44 <__ledf2+0x64>
    5d6a:	464c      	mov	r4, r9
    5d6c:	4326      	orrs	r6, r4
    5d6e:	d1e9      	bne.n	5d44 <__ledf2+0x64>
    5d70:	e7ea      	b.n	5d48 <__ledf2+0x68>
    5d72:	429a      	cmp	r2, r3
    5d74:	dd04      	ble.n	5d80 <__ledf2+0xa0>
    5d76:	4243      	negs	r3, r0
    5d78:	4158      	adcs	r0, r3
    5d7a:	0040      	lsls	r0, r0, #1
    5d7c:	3801      	subs	r0, #1
    5d7e:	e7e9      	b.n	5d54 <__ledf2+0x74>
    5d80:	429a      	cmp	r2, r3
    5d82:	dbeb      	blt.n	5d5c <__ledf2+0x7c>
    5d84:	454f      	cmp	r7, r9
    5d86:	d8df      	bhi.n	5d48 <__ledf2+0x68>
    5d88:	d006      	beq.n	5d98 <__ledf2+0xb8>
    5d8a:	2000      	movs	r0, #0
    5d8c:	454f      	cmp	r7, r9
    5d8e:	d2e1      	bcs.n	5d54 <__ledf2+0x74>
    5d90:	2900      	cmp	r1, #0
    5d92:	d0e5      	beq.n	5d60 <__ledf2+0x80>
    5d94:	0008      	movs	r0, r1
    5d96:	e7dd      	b.n	5d54 <__ledf2+0x74>
    5d98:	45c4      	cmp	ip, r8
    5d9a:	d8d5      	bhi.n	5d48 <__ledf2+0x68>
    5d9c:	2000      	movs	r0, #0
    5d9e:	45c4      	cmp	ip, r8
    5da0:	d2d8      	bcs.n	5d54 <__ledf2+0x74>
    5da2:	e7f5      	b.n	5d90 <__ledf2+0xb0>
    5da4:	000007ff 	.word	0x000007ff

00005da8 <__aeabi_dmul>:
    5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5daa:	4657      	mov	r7, sl
    5dac:	464e      	mov	r6, r9
    5dae:	4645      	mov	r5, r8
    5db0:	46de      	mov	lr, fp
    5db2:	b5e0      	push	{r5, r6, r7, lr}
    5db4:	4698      	mov	r8, r3
    5db6:	030c      	lsls	r4, r1, #12
    5db8:	004b      	lsls	r3, r1, #1
    5dba:	0006      	movs	r6, r0
    5dbc:	4692      	mov	sl, r2
    5dbe:	b087      	sub	sp, #28
    5dc0:	0b24      	lsrs	r4, r4, #12
    5dc2:	0d5b      	lsrs	r3, r3, #21
    5dc4:	0fcf      	lsrs	r7, r1, #31
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d100      	bne.n	5dcc <__aeabi_dmul+0x24>
    5dca:	e15e      	b.n	608a <__aeabi_dmul+0x2e2>
    5dcc:	4ada      	ldr	r2, [pc, #872]	; (6138 <__aeabi_dmul+0x390>)
    5dce:	4293      	cmp	r3, r2
    5dd0:	d100      	bne.n	5dd4 <__aeabi_dmul+0x2c>
    5dd2:	e177      	b.n	60c4 <__aeabi_dmul+0x31c>
    5dd4:	0f42      	lsrs	r2, r0, #29
    5dd6:	00e4      	lsls	r4, r4, #3
    5dd8:	4314      	orrs	r4, r2
    5dda:	2280      	movs	r2, #128	; 0x80
    5ddc:	0412      	lsls	r2, r2, #16
    5dde:	4314      	orrs	r4, r2
    5de0:	4ad6      	ldr	r2, [pc, #856]	; (613c <__aeabi_dmul+0x394>)
    5de2:	00c5      	lsls	r5, r0, #3
    5de4:	4694      	mov	ip, r2
    5de6:	4463      	add	r3, ip
    5de8:	9300      	str	r3, [sp, #0]
    5dea:	2300      	movs	r3, #0
    5dec:	4699      	mov	r9, r3
    5dee:	469b      	mov	fp, r3
    5df0:	4643      	mov	r3, r8
    5df2:	4642      	mov	r2, r8
    5df4:	031e      	lsls	r6, r3, #12
    5df6:	0fd2      	lsrs	r2, r2, #31
    5df8:	005b      	lsls	r3, r3, #1
    5dfa:	4650      	mov	r0, sl
    5dfc:	4690      	mov	r8, r2
    5dfe:	0b36      	lsrs	r6, r6, #12
    5e00:	0d5b      	lsrs	r3, r3, #21
    5e02:	d100      	bne.n	5e06 <__aeabi_dmul+0x5e>
    5e04:	e122      	b.n	604c <__aeabi_dmul+0x2a4>
    5e06:	4acc      	ldr	r2, [pc, #816]	; (6138 <__aeabi_dmul+0x390>)
    5e08:	4293      	cmp	r3, r2
    5e0a:	d100      	bne.n	5e0e <__aeabi_dmul+0x66>
    5e0c:	e164      	b.n	60d8 <__aeabi_dmul+0x330>
    5e0e:	49cb      	ldr	r1, [pc, #812]	; (613c <__aeabi_dmul+0x394>)
    5e10:	0f42      	lsrs	r2, r0, #29
    5e12:	468c      	mov	ip, r1
    5e14:	9900      	ldr	r1, [sp, #0]
    5e16:	4463      	add	r3, ip
    5e18:	00f6      	lsls	r6, r6, #3
    5e1a:	468c      	mov	ip, r1
    5e1c:	4316      	orrs	r6, r2
    5e1e:	2280      	movs	r2, #128	; 0x80
    5e20:	449c      	add	ip, r3
    5e22:	0412      	lsls	r2, r2, #16
    5e24:	4663      	mov	r3, ip
    5e26:	4316      	orrs	r6, r2
    5e28:	00c2      	lsls	r2, r0, #3
    5e2a:	2000      	movs	r0, #0
    5e2c:	9300      	str	r3, [sp, #0]
    5e2e:	9900      	ldr	r1, [sp, #0]
    5e30:	4643      	mov	r3, r8
    5e32:	3101      	adds	r1, #1
    5e34:	468c      	mov	ip, r1
    5e36:	4649      	mov	r1, r9
    5e38:	407b      	eors	r3, r7
    5e3a:	9301      	str	r3, [sp, #4]
    5e3c:	290f      	cmp	r1, #15
    5e3e:	d826      	bhi.n	5e8e <__aeabi_dmul+0xe6>
    5e40:	4bbf      	ldr	r3, [pc, #764]	; (6140 <__aeabi_dmul+0x398>)
    5e42:	0089      	lsls	r1, r1, #2
    5e44:	5859      	ldr	r1, [r3, r1]
    5e46:	468f      	mov	pc, r1
    5e48:	4643      	mov	r3, r8
    5e4a:	9301      	str	r3, [sp, #4]
    5e4c:	0034      	movs	r4, r6
    5e4e:	0015      	movs	r5, r2
    5e50:	4683      	mov	fp, r0
    5e52:	465b      	mov	r3, fp
    5e54:	2b02      	cmp	r3, #2
    5e56:	d016      	beq.n	5e86 <__aeabi_dmul+0xde>
    5e58:	2b03      	cmp	r3, #3
    5e5a:	d100      	bne.n	5e5e <__aeabi_dmul+0xb6>
    5e5c:	e205      	b.n	626a <__aeabi_dmul+0x4c2>
    5e5e:	2b01      	cmp	r3, #1
    5e60:	d000      	beq.n	5e64 <__aeabi_dmul+0xbc>
    5e62:	e0cf      	b.n	6004 <__aeabi_dmul+0x25c>
    5e64:	2200      	movs	r2, #0
    5e66:	2400      	movs	r4, #0
    5e68:	2500      	movs	r5, #0
    5e6a:	9b01      	ldr	r3, [sp, #4]
    5e6c:	0512      	lsls	r2, r2, #20
    5e6e:	4322      	orrs	r2, r4
    5e70:	07db      	lsls	r3, r3, #31
    5e72:	431a      	orrs	r2, r3
    5e74:	0028      	movs	r0, r5
    5e76:	0011      	movs	r1, r2
    5e78:	b007      	add	sp, #28
    5e7a:	bcf0      	pop	{r4, r5, r6, r7}
    5e7c:	46bb      	mov	fp, r7
    5e7e:	46b2      	mov	sl, r6
    5e80:	46a9      	mov	r9, r5
    5e82:	46a0      	mov	r8, r4
    5e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e86:	2400      	movs	r4, #0
    5e88:	2500      	movs	r5, #0
    5e8a:	4aab      	ldr	r2, [pc, #684]	; (6138 <__aeabi_dmul+0x390>)
    5e8c:	e7ed      	b.n	5e6a <__aeabi_dmul+0xc2>
    5e8e:	0c28      	lsrs	r0, r5, #16
    5e90:	042d      	lsls	r5, r5, #16
    5e92:	0c2d      	lsrs	r5, r5, #16
    5e94:	002b      	movs	r3, r5
    5e96:	0c11      	lsrs	r1, r2, #16
    5e98:	0412      	lsls	r2, r2, #16
    5e9a:	0c12      	lsrs	r2, r2, #16
    5e9c:	4353      	muls	r3, r2
    5e9e:	4698      	mov	r8, r3
    5ea0:	0013      	movs	r3, r2
    5ea2:	002f      	movs	r7, r5
    5ea4:	4343      	muls	r3, r0
    5ea6:	4699      	mov	r9, r3
    5ea8:	434f      	muls	r7, r1
    5eaa:	444f      	add	r7, r9
    5eac:	46bb      	mov	fp, r7
    5eae:	4647      	mov	r7, r8
    5eb0:	000b      	movs	r3, r1
    5eb2:	0c3f      	lsrs	r7, r7, #16
    5eb4:	46ba      	mov	sl, r7
    5eb6:	465f      	mov	r7, fp
    5eb8:	4343      	muls	r3, r0
    5eba:	4457      	add	r7, sl
    5ebc:	9302      	str	r3, [sp, #8]
    5ebe:	45b9      	cmp	r9, r7
    5ec0:	d906      	bls.n	5ed0 <__aeabi_dmul+0x128>
    5ec2:	469a      	mov	sl, r3
    5ec4:	2380      	movs	r3, #128	; 0x80
    5ec6:	025b      	lsls	r3, r3, #9
    5ec8:	4699      	mov	r9, r3
    5eca:	44ca      	add	sl, r9
    5ecc:	4653      	mov	r3, sl
    5ece:	9302      	str	r3, [sp, #8]
    5ed0:	0c3b      	lsrs	r3, r7, #16
    5ed2:	469b      	mov	fp, r3
    5ed4:	4643      	mov	r3, r8
    5ed6:	041b      	lsls	r3, r3, #16
    5ed8:	043f      	lsls	r7, r7, #16
    5eda:	0c1b      	lsrs	r3, r3, #16
    5edc:	4698      	mov	r8, r3
    5ede:	003b      	movs	r3, r7
    5ee0:	4443      	add	r3, r8
    5ee2:	9304      	str	r3, [sp, #16]
    5ee4:	0c33      	lsrs	r3, r6, #16
    5ee6:	0436      	lsls	r6, r6, #16
    5ee8:	0c36      	lsrs	r6, r6, #16
    5eea:	4698      	mov	r8, r3
    5eec:	0033      	movs	r3, r6
    5eee:	4343      	muls	r3, r0
    5ef0:	4699      	mov	r9, r3
    5ef2:	4643      	mov	r3, r8
    5ef4:	4343      	muls	r3, r0
    5ef6:	002f      	movs	r7, r5
    5ef8:	469a      	mov	sl, r3
    5efa:	4643      	mov	r3, r8
    5efc:	4377      	muls	r7, r6
    5efe:	435d      	muls	r5, r3
    5f00:	0c38      	lsrs	r0, r7, #16
    5f02:	444d      	add	r5, r9
    5f04:	1945      	adds	r5, r0, r5
    5f06:	45a9      	cmp	r9, r5
    5f08:	d903      	bls.n	5f12 <__aeabi_dmul+0x16a>
    5f0a:	2380      	movs	r3, #128	; 0x80
    5f0c:	025b      	lsls	r3, r3, #9
    5f0e:	4699      	mov	r9, r3
    5f10:	44ca      	add	sl, r9
    5f12:	043f      	lsls	r7, r7, #16
    5f14:	0c28      	lsrs	r0, r5, #16
    5f16:	0c3f      	lsrs	r7, r7, #16
    5f18:	042d      	lsls	r5, r5, #16
    5f1a:	19ed      	adds	r5, r5, r7
    5f1c:	0c27      	lsrs	r7, r4, #16
    5f1e:	0424      	lsls	r4, r4, #16
    5f20:	0c24      	lsrs	r4, r4, #16
    5f22:	0003      	movs	r3, r0
    5f24:	0020      	movs	r0, r4
    5f26:	4350      	muls	r0, r2
    5f28:	437a      	muls	r2, r7
    5f2a:	4691      	mov	r9, r2
    5f2c:	003a      	movs	r2, r7
    5f2e:	4453      	add	r3, sl
    5f30:	9305      	str	r3, [sp, #20]
    5f32:	0c03      	lsrs	r3, r0, #16
    5f34:	469a      	mov	sl, r3
    5f36:	434a      	muls	r2, r1
    5f38:	4361      	muls	r1, r4
    5f3a:	4449      	add	r1, r9
    5f3c:	4451      	add	r1, sl
    5f3e:	44ab      	add	fp, r5
    5f40:	4589      	cmp	r9, r1
    5f42:	d903      	bls.n	5f4c <__aeabi_dmul+0x1a4>
    5f44:	2380      	movs	r3, #128	; 0x80
    5f46:	025b      	lsls	r3, r3, #9
    5f48:	4699      	mov	r9, r3
    5f4a:	444a      	add	r2, r9
    5f4c:	0400      	lsls	r0, r0, #16
    5f4e:	0c0b      	lsrs	r3, r1, #16
    5f50:	0c00      	lsrs	r0, r0, #16
    5f52:	0409      	lsls	r1, r1, #16
    5f54:	1809      	adds	r1, r1, r0
    5f56:	0020      	movs	r0, r4
    5f58:	4699      	mov	r9, r3
    5f5a:	4643      	mov	r3, r8
    5f5c:	4370      	muls	r0, r6
    5f5e:	435c      	muls	r4, r3
    5f60:	437e      	muls	r6, r7
    5f62:	435f      	muls	r7, r3
    5f64:	0c03      	lsrs	r3, r0, #16
    5f66:	4698      	mov	r8, r3
    5f68:	19a4      	adds	r4, r4, r6
    5f6a:	4444      	add	r4, r8
    5f6c:	444a      	add	r2, r9
    5f6e:	9703      	str	r7, [sp, #12]
    5f70:	42a6      	cmp	r6, r4
    5f72:	d904      	bls.n	5f7e <__aeabi_dmul+0x1d6>
    5f74:	2380      	movs	r3, #128	; 0x80
    5f76:	025b      	lsls	r3, r3, #9
    5f78:	4698      	mov	r8, r3
    5f7a:	4447      	add	r7, r8
    5f7c:	9703      	str	r7, [sp, #12]
    5f7e:	9b02      	ldr	r3, [sp, #8]
    5f80:	0400      	lsls	r0, r0, #16
    5f82:	445b      	add	r3, fp
    5f84:	001e      	movs	r6, r3
    5f86:	42ab      	cmp	r3, r5
    5f88:	41ad      	sbcs	r5, r5
    5f8a:	0423      	lsls	r3, r4, #16
    5f8c:	469a      	mov	sl, r3
    5f8e:	9b05      	ldr	r3, [sp, #20]
    5f90:	1876      	adds	r6, r6, r1
    5f92:	4698      	mov	r8, r3
    5f94:	428e      	cmp	r6, r1
    5f96:	4189      	sbcs	r1, r1
    5f98:	0c00      	lsrs	r0, r0, #16
    5f9a:	4450      	add	r0, sl
    5f9c:	4440      	add	r0, r8
    5f9e:	426d      	negs	r5, r5
    5fa0:	1947      	adds	r7, r0, r5
    5fa2:	46b8      	mov	r8, r7
    5fa4:	4693      	mov	fp, r2
    5fa6:	4249      	negs	r1, r1
    5fa8:	4689      	mov	r9, r1
    5faa:	44c3      	add	fp, r8
    5fac:	44d9      	add	r9, fp
    5fae:	4298      	cmp	r0, r3
    5fb0:	4180      	sbcs	r0, r0
    5fb2:	45a8      	cmp	r8, r5
    5fb4:	41ad      	sbcs	r5, r5
    5fb6:	4593      	cmp	fp, r2
    5fb8:	4192      	sbcs	r2, r2
    5fba:	4589      	cmp	r9, r1
    5fbc:	4189      	sbcs	r1, r1
    5fbe:	426d      	negs	r5, r5
    5fc0:	4240      	negs	r0, r0
    5fc2:	4328      	orrs	r0, r5
    5fc4:	0c24      	lsrs	r4, r4, #16
    5fc6:	4252      	negs	r2, r2
    5fc8:	4249      	negs	r1, r1
    5fca:	430a      	orrs	r2, r1
    5fcc:	9b03      	ldr	r3, [sp, #12]
    5fce:	1900      	adds	r0, r0, r4
    5fd0:	1880      	adds	r0, r0, r2
    5fd2:	18c7      	adds	r7, r0, r3
    5fd4:	464b      	mov	r3, r9
    5fd6:	0ddc      	lsrs	r4, r3, #23
    5fd8:	9b04      	ldr	r3, [sp, #16]
    5fda:	0275      	lsls	r5, r6, #9
    5fdc:	431d      	orrs	r5, r3
    5fde:	1e6a      	subs	r2, r5, #1
    5fe0:	4195      	sbcs	r5, r2
    5fe2:	464b      	mov	r3, r9
    5fe4:	0df6      	lsrs	r6, r6, #23
    5fe6:	027f      	lsls	r7, r7, #9
    5fe8:	4335      	orrs	r5, r6
    5fea:	025a      	lsls	r2, r3, #9
    5fec:	433c      	orrs	r4, r7
    5fee:	4315      	orrs	r5, r2
    5ff0:	01fb      	lsls	r3, r7, #7
    5ff2:	d400      	bmi.n	5ff6 <__aeabi_dmul+0x24e>
    5ff4:	e11c      	b.n	6230 <__aeabi_dmul+0x488>
    5ff6:	2101      	movs	r1, #1
    5ff8:	086a      	lsrs	r2, r5, #1
    5ffa:	400d      	ands	r5, r1
    5ffc:	4315      	orrs	r5, r2
    5ffe:	07e2      	lsls	r2, r4, #31
    6000:	4315      	orrs	r5, r2
    6002:	0864      	lsrs	r4, r4, #1
    6004:	494f      	ldr	r1, [pc, #316]	; (6144 <__aeabi_dmul+0x39c>)
    6006:	4461      	add	r1, ip
    6008:	2900      	cmp	r1, #0
    600a:	dc00      	bgt.n	600e <__aeabi_dmul+0x266>
    600c:	e0b0      	b.n	6170 <__aeabi_dmul+0x3c8>
    600e:	076b      	lsls	r3, r5, #29
    6010:	d009      	beq.n	6026 <__aeabi_dmul+0x27e>
    6012:	220f      	movs	r2, #15
    6014:	402a      	ands	r2, r5
    6016:	2a04      	cmp	r2, #4
    6018:	d005      	beq.n	6026 <__aeabi_dmul+0x27e>
    601a:	1d2a      	adds	r2, r5, #4
    601c:	42aa      	cmp	r2, r5
    601e:	41ad      	sbcs	r5, r5
    6020:	426d      	negs	r5, r5
    6022:	1964      	adds	r4, r4, r5
    6024:	0015      	movs	r5, r2
    6026:	01e3      	lsls	r3, r4, #7
    6028:	d504      	bpl.n	6034 <__aeabi_dmul+0x28c>
    602a:	2180      	movs	r1, #128	; 0x80
    602c:	4a46      	ldr	r2, [pc, #280]	; (6148 <__aeabi_dmul+0x3a0>)
    602e:	00c9      	lsls	r1, r1, #3
    6030:	4014      	ands	r4, r2
    6032:	4461      	add	r1, ip
    6034:	4a45      	ldr	r2, [pc, #276]	; (614c <__aeabi_dmul+0x3a4>)
    6036:	4291      	cmp	r1, r2
    6038:	dd00      	ble.n	603c <__aeabi_dmul+0x294>
    603a:	e724      	b.n	5e86 <__aeabi_dmul+0xde>
    603c:	0762      	lsls	r2, r4, #29
    603e:	08ed      	lsrs	r5, r5, #3
    6040:	0264      	lsls	r4, r4, #9
    6042:	0549      	lsls	r1, r1, #21
    6044:	4315      	orrs	r5, r2
    6046:	0b24      	lsrs	r4, r4, #12
    6048:	0d4a      	lsrs	r2, r1, #21
    604a:	e70e      	b.n	5e6a <__aeabi_dmul+0xc2>
    604c:	4652      	mov	r2, sl
    604e:	4332      	orrs	r2, r6
    6050:	d100      	bne.n	6054 <__aeabi_dmul+0x2ac>
    6052:	e07f      	b.n	6154 <__aeabi_dmul+0x3ac>
    6054:	2e00      	cmp	r6, #0
    6056:	d100      	bne.n	605a <__aeabi_dmul+0x2b2>
    6058:	e0dc      	b.n	6214 <__aeabi_dmul+0x46c>
    605a:	0030      	movs	r0, r6
    605c:	f001 fd9e 	bl	7b9c <__clzsi2>
    6060:	0002      	movs	r2, r0
    6062:	3a0b      	subs	r2, #11
    6064:	231d      	movs	r3, #29
    6066:	0001      	movs	r1, r0
    6068:	1a9b      	subs	r3, r3, r2
    606a:	4652      	mov	r2, sl
    606c:	3908      	subs	r1, #8
    606e:	40da      	lsrs	r2, r3
    6070:	408e      	lsls	r6, r1
    6072:	4316      	orrs	r6, r2
    6074:	4652      	mov	r2, sl
    6076:	408a      	lsls	r2, r1
    6078:	9b00      	ldr	r3, [sp, #0]
    607a:	4935      	ldr	r1, [pc, #212]	; (6150 <__aeabi_dmul+0x3a8>)
    607c:	1a18      	subs	r0, r3, r0
    607e:	0003      	movs	r3, r0
    6080:	468c      	mov	ip, r1
    6082:	4463      	add	r3, ip
    6084:	2000      	movs	r0, #0
    6086:	9300      	str	r3, [sp, #0]
    6088:	e6d1      	b.n	5e2e <__aeabi_dmul+0x86>
    608a:	0025      	movs	r5, r4
    608c:	4305      	orrs	r5, r0
    608e:	d04a      	beq.n	6126 <__aeabi_dmul+0x37e>
    6090:	2c00      	cmp	r4, #0
    6092:	d100      	bne.n	6096 <__aeabi_dmul+0x2ee>
    6094:	e0b0      	b.n	61f8 <__aeabi_dmul+0x450>
    6096:	0020      	movs	r0, r4
    6098:	f001 fd80 	bl	7b9c <__clzsi2>
    609c:	0001      	movs	r1, r0
    609e:	0002      	movs	r2, r0
    60a0:	390b      	subs	r1, #11
    60a2:	231d      	movs	r3, #29
    60a4:	0010      	movs	r0, r2
    60a6:	1a5b      	subs	r3, r3, r1
    60a8:	0031      	movs	r1, r6
    60aa:	0035      	movs	r5, r6
    60ac:	3808      	subs	r0, #8
    60ae:	4084      	lsls	r4, r0
    60b0:	40d9      	lsrs	r1, r3
    60b2:	4085      	lsls	r5, r0
    60b4:	430c      	orrs	r4, r1
    60b6:	4826      	ldr	r0, [pc, #152]	; (6150 <__aeabi_dmul+0x3a8>)
    60b8:	1a83      	subs	r3, r0, r2
    60ba:	9300      	str	r3, [sp, #0]
    60bc:	2300      	movs	r3, #0
    60be:	4699      	mov	r9, r3
    60c0:	469b      	mov	fp, r3
    60c2:	e695      	b.n	5df0 <__aeabi_dmul+0x48>
    60c4:	0005      	movs	r5, r0
    60c6:	4325      	orrs	r5, r4
    60c8:	d126      	bne.n	6118 <__aeabi_dmul+0x370>
    60ca:	2208      	movs	r2, #8
    60cc:	9300      	str	r3, [sp, #0]
    60ce:	2302      	movs	r3, #2
    60d0:	2400      	movs	r4, #0
    60d2:	4691      	mov	r9, r2
    60d4:	469b      	mov	fp, r3
    60d6:	e68b      	b.n	5df0 <__aeabi_dmul+0x48>
    60d8:	4652      	mov	r2, sl
    60da:	9b00      	ldr	r3, [sp, #0]
    60dc:	4332      	orrs	r2, r6
    60de:	d110      	bne.n	6102 <__aeabi_dmul+0x35a>
    60e0:	4915      	ldr	r1, [pc, #84]	; (6138 <__aeabi_dmul+0x390>)
    60e2:	2600      	movs	r6, #0
    60e4:	468c      	mov	ip, r1
    60e6:	4463      	add	r3, ip
    60e8:	4649      	mov	r1, r9
    60ea:	9300      	str	r3, [sp, #0]
    60ec:	2302      	movs	r3, #2
    60ee:	4319      	orrs	r1, r3
    60f0:	4689      	mov	r9, r1
    60f2:	2002      	movs	r0, #2
    60f4:	e69b      	b.n	5e2e <__aeabi_dmul+0x86>
    60f6:	465b      	mov	r3, fp
    60f8:	9701      	str	r7, [sp, #4]
    60fa:	2b02      	cmp	r3, #2
    60fc:	d000      	beq.n	6100 <__aeabi_dmul+0x358>
    60fe:	e6ab      	b.n	5e58 <__aeabi_dmul+0xb0>
    6100:	e6c1      	b.n	5e86 <__aeabi_dmul+0xde>
    6102:	4a0d      	ldr	r2, [pc, #52]	; (6138 <__aeabi_dmul+0x390>)
    6104:	2003      	movs	r0, #3
    6106:	4694      	mov	ip, r2
    6108:	4463      	add	r3, ip
    610a:	464a      	mov	r2, r9
    610c:	9300      	str	r3, [sp, #0]
    610e:	2303      	movs	r3, #3
    6110:	431a      	orrs	r2, r3
    6112:	4691      	mov	r9, r2
    6114:	4652      	mov	r2, sl
    6116:	e68a      	b.n	5e2e <__aeabi_dmul+0x86>
    6118:	220c      	movs	r2, #12
    611a:	9300      	str	r3, [sp, #0]
    611c:	2303      	movs	r3, #3
    611e:	0005      	movs	r5, r0
    6120:	4691      	mov	r9, r2
    6122:	469b      	mov	fp, r3
    6124:	e664      	b.n	5df0 <__aeabi_dmul+0x48>
    6126:	2304      	movs	r3, #4
    6128:	4699      	mov	r9, r3
    612a:	2300      	movs	r3, #0
    612c:	9300      	str	r3, [sp, #0]
    612e:	3301      	adds	r3, #1
    6130:	2400      	movs	r4, #0
    6132:	469b      	mov	fp, r3
    6134:	e65c      	b.n	5df0 <__aeabi_dmul+0x48>
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	000007ff 	.word	0x000007ff
    613c:	fffffc01 	.word	0xfffffc01
    6140:	00014380 	.word	0x00014380
    6144:	000003ff 	.word	0x000003ff
    6148:	feffffff 	.word	0xfeffffff
    614c:	000007fe 	.word	0x000007fe
    6150:	fffffc0d 	.word	0xfffffc0d
    6154:	4649      	mov	r1, r9
    6156:	2301      	movs	r3, #1
    6158:	4319      	orrs	r1, r3
    615a:	4689      	mov	r9, r1
    615c:	2600      	movs	r6, #0
    615e:	2001      	movs	r0, #1
    6160:	e665      	b.n	5e2e <__aeabi_dmul+0x86>
    6162:	2300      	movs	r3, #0
    6164:	2480      	movs	r4, #128	; 0x80
    6166:	2500      	movs	r5, #0
    6168:	4a43      	ldr	r2, [pc, #268]	; (6278 <__aeabi_dmul+0x4d0>)
    616a:	9301      	str	r3, [sp, #4]
    616c:	0324      	lsls	r4, r4, #12
    616e:	e67c      	b.n	5e6a <__aeabi_dmul+0xc2>
    6170:	2001      	movs	r0, #1
    6172:	1a40      	subs	r0, r0, r1
    6174:	2838      	cmp	r0, #56	; 0x38
    6176:	dd00      	ble.n	617a <__aeabi_dmul+0x3d2>
    6178:	e674      	b.n	5e64 <__aeabi_dmul+0xbc>
    617a:	281f      	cmp	r0, #31
    617c:	dd5b      	ble.n	6236 <__aeabi_dmul+0x48e>
    617e:	221f      	movs	r2, #31
    6180:	0023      	movs	r3, r4
    6182:	4252      	negs	r2, r2
    6184:	1a51      	subs	r1, r2, r1
    6186:	40cb      	lsrs	r3, r1
    6188:	0019      	movs	r1, r3
    618a:	2820      	cmp	r0, #32
    618c:	d003      	beq.n	6196 <__aeabi_dmul+0x3ee>
    618e:	4a3b      	ldr	r2, [pc, #236]	; (627c <__aeabi_dmul+0x4d4>)
    6190:	4462      	add	r2, ip
    6192:	4094      	lsls	r4, r2
    6194:	4325      	orrs	r5, r4
    6196:	1e6a      	subs	r2, r5, #1
    6198:	4195      	sbcs	r5, r2
    619a:	002a      	movs	r2, r5
    619c:	430a      	orrs	r2, r1
    619e:	2107      	movs	r1, #7
    61a0:	000d      	movs	r5, r1
    61a2:	2400      	movs	r4, #0
    61a4:	4015      	ands	r5, r2
    61a6:	4211      	tst	r1, r2
    61a8:	d05b      	beq.n	6262 <__aeabi_dmul+0x4ba>
    61aa:	210f      	movs	r1, #15
    61ac:	2400      	movs	r4, #0
    61ae:	4011      	ands	r1, r2
    61b0:	2904      	cmp	r1, #4
    61b2:	d053      	beq.n	625c <__aeabi_dmul+0x4b4>
    61b4:	1d11      	adds	r1, r2, #4
    61b6:	4291      	cmp	r1, r2
    61b8:	4192      	sbcs	r2, r2
    61ba:	4252      	negs	r2, r2
    61bc:	18a4      	adds	r4, r4, r2
    61be:	000a      	movs	r2, r1
    61c0:	0223      	lsls	r3, r4, #8
    61c2:	d54b      	bpl.n	625c <__aeabi_dmul+0x4b4>
    61c4:	2201      	movs	r2, #1
    61c6:	2400      	movs	r4, #0
    61c8:	2500      	movs	r5, #0
    61ca:	e64e      	b.n	5e6a <__aeabi_dmul+0xc2>
    61cc:	2380      	movs	r3, #128	; 0x80
    61ce:	031b      	lsls	r3, r3, #12
    61d0:	421c      	tst	r4, r3
    61d2:	d009      	beq.n	61e8 <__aeabi_dmul+0x440>
    61d4:	421e      	tst	r6, r3
    61d6:	d107      	bne.n	61e8 <__aeabi_dmul+0x440>
    61d8:	4333      	orrs	r3, r6
    61da:	031c      	lsls	r4, r3, #12
    61dc:	4643      	mov	r3, r8
    61de:	0015      	movs	r5, r2
    61e0:	0b24      	lsrs	r4, r4, #12
    61e2:	4a25      	ldr	r2, [pc, #148]	; (6278 <__aeabi_dmul+0x4d0>)
    61e4:	9301      	str	r3, [sp, #4]
    61e6:	e640      	b.n	5e6a <__aeabi_dmul+0xc2>
    61e8:	2280      	movs	r2, #128	; 0x80
    61ea:	0312      	lsls	r2, r2, #12
    61ec:	4314      	orrs	r4, r2
    61ee:	0324      	lsls	r4, r4, #12
    61f0:	4a21      	ldr	r2, [pc, #132]	; (6278 <__aeabi_dmul+0x4d0>)
    61f2:	0b24      	lsrs	r4, r4, #12
    61f4:	9701      	str	r7, [sp, #4]
    61f6:	e638      	b.n	5e6a <__aeabi_dmul+0xc2>
    61f8:	f001 fcd0 	bl	7b9c <__clzsi2>
    61fc:	0001      	movs	r1, r0
    61fe:	0002      	movs	r2, r0
    6200:	3115      	adds	r1, #21
    6202:	3220      	adds	r2, #32
    6204:	291c      	cmp	r1, #28
    6206:	dc00      	bgt.n	620a <__aeabi_dmul+0x462>
    6208:	e74b      	b.n	60a2 <__aeabi_dmul+0x2fa>
    620a:	0034      	movs	r4, r6
    620c:	3808      	subs	r0, #8
    620e:	2500      	movs	r5, #0
    6210:	4084      	lsls	r4, r0
    6212:	e750      	b.n	60b6 <__aeabi_dmul+0x30e>
    6214:	f001 fcc2 	bl	7b9c <__clzsi2>
    6218:	0003      	movs	r3, r0
    621a:	001a      	movs	r2, r3
    621c:	3215      	adds	r2, #21
    621e:	3020      	adds	r0, #32
    6220:	2a1c      	cmp	r2, #28
    6222:	dc00      	bgt.n	6226 <__aeabi_dmul+0x47e>
    6224:	e71e      	b.n	6064 <__aeabi_dmul+0x2bc>
    6226:	4656      	mov	r6, sl
    6228:	3b08      	subs	r3, #8
    622a:	2200      	movs	r2, #0
    622c:	409e      	lsls	r6, r3
    622e:	e723      	b.n	6078 <__aeabi_dmul+0x2d0>
    6230:	9b00      	ldr	r3, [sp, #0]
    6232:	469c      	mov	ip, r3
    6234:	e6e6      	b.n	6004 <__aeabi_dmul+0x25c>
    6236:	4912      	ldr	r1, [pc, #72]	; (6280 <__aeabi_dmul+0x4d8>)
    6238:	0022      	movs	r2, r4
    623a:	4461      	add	r1, ip
    623c:	002e      	movs	r6, r5
    623e:	408d      	lsls	r5, r1
    6240:	408a      	lsls	r2, r1
    6242:	40c6      	lsrs	r6, r0
    6244:	1e69      	subs	r1, r5, #1
    6246:	418d      	sbcs	r5, r1
    6248:	4332      	orrs	r2, r6
    624a:	432a      	orrs	r2, r5
    624c:	40c4      	lsrs	r4, r0
    624e:	0753      	lsls	r3, r2, #29
    6250:	d0b6      	beq.n	61c0 <__aeabi_dmul+0x418>
    6252:	210f      	movs	r1, #15
    6254:	4011      	ands	r1, r2
    6256:	2904      	cmp	r1, #4
    6258:	d1ac      	bne.n	61b4 <__aeabi_dmul+0x40c>
    625a:	e7b1      	b.n	61c0 <__aeabi_dmul+0x418>
    625c:	0765      	lsls	r5, r4, #29
    625e:	0264      	lsls	r4, r4, #9
    6260:	0b24      	lsrs	r4, r4, #12
    6262:	08d2      	lsrs	r2, r2, #3
    6264:	4315      	orrs	r5, r2
    6266:	2200      	movs	r2, #0
    6268:	e5ff      	b.n	5e6a <__aeabi_dmul+0xc2>
    626a:	2280      	movs	r2, #128	; 0x80
    626c:	0312      	lsls	r2, r2, #12
    626e:	4314      	orrs	r4, r2
    6270:	0324      	lsls	r4, r4, #12
    6272:	4a01      	ldr	r2, [pc, #4]	; (6278 <__aeabi_dmul+0x4d0>)
    6274:	0b24      	lsrs	r4, r4, #12
    6276:	e5f8      	b.n	5e6a <__aeabi_dmul+0xc2>
    6278:	000007ff 	.word	0x000007ff
    627c:	0000043e 	.word	0x0000043e
    6280:	0000041e 	.word	0x0000041e

00006284 <__aeabi_dsub>:
    6284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6286:	4657      	mov	r7, sl
    6288:	464e      	mov	r6, r9
    628a:	4645      	mov	r5, r8
    628c:	46de      	mov	lr, fp
    628e:	b5e0      	push	{r5, r6, r7, lr}
    6290:	001e      	movs	r6, r3
    6292:	0017      	movs	r7, r2
    6294:	004a      	lsls	r2, r1, #1
    6296:	030b      	lsls	r3, r1, #12
    6298:	0d52      	lsrs	r2, r2, #21
    629a:	0a5b      	lsrs	r3, r3, #9
    629c:	4690      	mov	r8, r2
    629e:	0f42      	lsrs	r2, r0, #29
    62a0:	431a      	orrs	r2, r3
    62a2:	0fcd      	lsrs	r5, r1, #31
    62a4:	4ccd      	ldr	r4, [pc, #820]	; (65dc <__aeabi_dsub+0x358>)
    62a6:	0331      	lsls	r1, r6, #12
    62a8:	00c3      	lsls	r3, r0, #3
    62aa:	4694      	mov	ip, r2
    62ac:	0070      	lsls	r0, r6, #1
    62ae:	0f7a      	lsrs	r2, r7, #29
    62b0:	0a49      	lsrs	r1, r1, #9
    62b2:	00ff      	lsls	r7, r7, #3
    62b4:	469a      	mov	sl, r3
    62b6:	46b9      	mov	r9, r7
    62b8:	0d40      	lsrs	r0, r0, #21
    62ba:	0ff6      	lsrs	r6, r6, #31
    62bc:	4311      	orrs	r1, r2
    62be:	42a0      	cmp	r0, r4
    62c0:	d100      	bne.n	62c4 <__aeabi_dsub+0x40>
    62c2:	e0b1      	b.n	6428 <__aeabi_dsub+0x1a4>
    62c4:	2201      	movs	r2, #1
    62c6:	4056      	eors	r6, r2
    62c8:	46b3      	mov	fp, r6
    62ca:	42b5      	cmp	r5, r6
    62cc:	d100      	bne.n	62d0 <__aeabi_dsub+0x4c>
    62ce:	e088      	b.n	63e2 <__aeabi_dsub+0x15e>
    62d0:	4642      	mov	r2, r8
    62d2:	1a12      	subs	r2, r2, r0
    62d4:	2a00      	cmp	r2, #0
    62d6:	dc00      	bgt.n	62da <__aeabi_dsub+0x56>
    62d8:	e0ae      	b.n	6438 <__aeabi_dsub+0x1b4>
    62da:	2800      	cmp	r0, #0
    62dc:	d100      	bne.n	62e0 <__aeabi_dsub+0x5c>
    62de:	e0c1      	b.n	6464 <__aeabi_dsub+0x1e0>
    62e0:	48be      	ldr	r0, [pc, #760]	; (65dc <__aeabi_dsub+0x358>)
    62e2:	4580      	cmp	r8, r0
    62e4:	d100      	bne.n	62e8 <__aeabi_dsub+0x64>
    62e6:	e151      	b.n	658c <__aeabi_dsub+0x308>
    62e8:	2080      	movs	r0, #128	; 0x80
    62ea:	0400      	lsls	r0, r0, #16
    62ec:	4301      	orrs	r1, r0
    62ee:	2a38      	cmp	r2, #56	; 0x38
    62f0:	dd00      	ble.n	62f4 <__aeabi_dsub+0x70>
    62f2:	e17b      	b.n	65ec <__aeabi_dsub+0x368>
    62f4:	2a1f      	cmp	r2, #31
    62f6:	dd00      	ble.n	62fa <__aeabi_dsub+0x76>
    62f8:	e1ee      	b.n	66d8 <__aeabi_dsub+0x454>
    62fa:	2020      	movs	r0, #32
    62fc:	003e      	movs	r6, r7
    62fe:	1a80      	subs	r0, r0, r2
    6300:	000c      	movs	r4, r1
    6302:	40d6      	lsrs	r6, r2
    6304:	40d1      	lsrs	r1, r2
    6306:	4087      	lsls	r7, r0
    6308:	4662      	mov	r2, ip
    630a:	4084      	lsls	r4, r0
    630c:	1a52      	subs	r2, r2, r1
    630e:	1e78      	subs	r0, r7, #1
    6310:	4187      	sbcs	r7, r0
    6312:	4694      	mov	ip, r2
    6314:	4334      	orrs	r4, r6
    6316:	4327      	orrs	r7, r4
    6318:	1bdc      	subs	r4, r3, r7
    631a:	42a3      	cmp	r3, r4
    631c:	419b      	sbcs	r3, r3
    631e:	4662      	mov	r2, ip
    6320:	425b      	negs	r3, r3
    6322:	1ad3      	subs	r3, r2, r3
    6324:	4699      	mov	r9, r3
    6326:	464b      	mov	r3, r9
    6328:	021b      	lsls	r3, r3, #8
    632a:	d400      	bmi.n	632e <__aeabi_dsub+0xaa>
    632c:	e118      	b.n	6560 <__aeabi_dsub+0x2dc>
    632e:	464b      	mov	r3, r9
    6330:	0258      	lsls	r0, r3, #9
    6332:	0a43      	lsrs	r3, r0, #9
    6334:	4699      	mov	r9, r3
    6336:	464b      	mov	r3, r9
    6338:	2b00      	cmp	r3, #0
    633a:	d100      	bne.n	633e <__aeabi_dsub+0xba>
    633c:	e137      	b.n	65ae <__aeabi_dsub+0x32a>
    633e:	4648      	mov	r0, r9
    6340:	f001 fc2c 	bl	7b9c <__clzsi2>
    6344:	0001      	movs	r1, r0
    6346:	3908      	subs	r1, #8
    6348:	2320      	movs	r3, #32
    634a:	0022      	movs	r2, r4
    634c:	4648      	mov	r0, r9
    634e:	1a5b      	subs	r3, r3, r1
    6350:	40da      	lsrs	r2, r3
    6352:	4088      	lsls	r0, r1
    6354:	408c      	lsls	r4, r1
    6356:	4643      	mov	r3, r8
    6358:	4310      	orrs	r0, r2
    635a:	4588      	cmp	r8, r1
    635c:	dd00      	ble.n	6360 <__aeabi_dsub+0xdc>
    635e:	e136      	b.n	65ce <__aeabi_dsub+0x34a>
    6360:	1ac9      	subs	r1, r1, r3
    6362:	1c4b      	adds	r3, r1, #1
    6364:	2b1f      	cmp	r3, #31
    6366:	dd00      	ble.n	636a <__aeabi_dsub+0xe6>
    6368:	e0ea      	b.n	6540 <__aeabi_dsub+0x2bc>
    636a:	2220      	movs	r2, #32
    636c:	0026      	movs	r6, r4
    636e:	1ad2      	subs	r2, r2, r3
    6370:	0001      	movs	r1, r0
    6372:	4094      	lsls	r4, r2
    6374:	40de      	lsrs	r6, r3
    6376:	40d8      	lsrs	r0, r3
    6378:	2300      	movs	r3, #0
    637a:	4091      	lsls	r1, r2
    637c:	1e62      	subs	r2, r4, #1
    637e:	4194      	sbcs	r4, r2
    6380:	4681      	mov	r9, r0
    6382:	4698      	mov	r8, r3
    6384:	4331      	orrs	r1, r6
    6386:	430c      	orrs	r4, r1
    6388:	0763      	lsls	r3, r4, #29
    638a:	d009      	beq.n	63a0 <__aeabi_dsub+0x11c>
    638c:	230f      	movs	r3, #15
    638e:	4023      	ands	r3, r4
    6390:	2b04      	cmp	r3, #4
    6392:	d005      	beq.n	63a0 <__aeabi_dsub+0x11c>
    6394:	1d23      	adds	r3, r4, #4
    6396:	42a3      	cmp	r3, r4
    6398:	41a4      	sbcs	r4, r4
    639a:	4264      	negs	r4, r4
    639c:	44a1      	add	r9, r4
    639e:	001c      	movs	r4, r3
    63a0:	464b      	mov	r3, r9
    63a2:	021b      	lsls	r3, r3, #8
    63a4:	d400      	bmi.n	63a8 <__aeabi_dsub+0x124>
    63a6:	e0de      	b.n	6566 <__aeabi_dsub+0x2e2>
    63a8:	4641      	mov	r1, r8
    63aa:	4b8c      	ldr	r3, [pc, #560]	; (65dc <__aeabi_dsub+0x358>)
    63ac:	3101      	adds	r1, #1
    63ae:	4299      	cmp	r1, r3
    63b0:	d100      	bne.n	63b4 <__aeabi_dsub+0x130>
    63b2:	e0e7      	b.n	6584 <__aeabi_dsub+0x300>
    63b4:	464b      	mov	r3, r9
    63b6:	488a      	ldr	r0, [pc, #552]	; (65e0 <__aeabi_dsub+0x35c>)
    63b8:	08e4      	lsrs	r4, r4, #3
    63ba:	4003      	ands	r3, r0
    63bc:	0018      	movs	r0, r3
    63be:	0549      	lsls	r1, r1, #21
    63c0:	075b      	lsls	r3, r3, #29
    63c2:	0240      	lsls	r0, r0, #9
    63c4:	4323      	orrs	r3, r4
    63c6:	0d4a      	lsrs	r2, r1, #21
    63c8:	0b04      	lsrs	r4, r0, #12
    63ca:	0512      	lsls	r2, r2, #20
    63cc:	07ed      	lsls	r5, r5, #31
    63ce:	4322      	orrs	r2, r4
    63d0:	432a      	orrs	r2, r5
    63d2:	0018      	movs	r0, r3
    63d4:	0011      	movs	r1, r2
    63d6:	bcf0      	pop	{r4, r5, r6, r7}
    63d8:	46bb      	mov	fp, r7
    63da:	46b2      	mov	sl, r6
    63dc:	46a9      	mov	r9, r5
    63de:	46a0      	mov	r8, r4
    63e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63e2:	4642      	mov	r2, r8
    63e4:	1a12      	subs	r2, r2, r0
    63e6:	2a00      	cmp	r2, #0
    63e8:	dd52      	ble.n	6490 <__aeabi_dsub+0x20c>
    63ea:	2800      	cmp	r0, #0
    63ec:	d100      	bne.n	63f0 <__aeabi_dsub+0x16c>
    63ee:	e09c      	b.n	652a <__aeabi_dsub+0x2a6>
    63f0:	45a0      	cmp	r8, r4
    63f2:	d100      	bne.n	63f6 <__aeabi_dsub+0x172>
    63f4:	e0ca      	b.n	658c <__aeabi_dsub+0x308>
    63f6:	2080      	movs	r0, #128	; 0x80
    63f8:	0400      	lsls	r0, r0, #16
    63fa:	4301      	orrs	r1, r0
    63fc:	2a38      	cmp	r2, #56	; 0x38
    63fe:	dd00      	ble.n	6402 <__aeabi_dsub+0x17e>
    6400:	e149      	b.n	6696 <__aeabi_dsub+0x412>
    6402:	2a1f      	cmp	r2, #31
    6404:	dc00      	bgt.n	6408 <__aeabi_dsub+0x184>
    6406:	e197      	b.n	6738 <__aeabi_dsub+0x4b4>
    6408:	0010      	movs	r0, r2
    640a:	000e      	movs	r6, r1
    640c:	3820      	subs	r0, #32
    640e:	40c6      	lsrs	r6, r0
    6410:	2a20      	cmp	r2, #32
    6412:	d004      	beq.n	641e <__aeabi_dsub+0x19a>
    6414:	2040      	movs	r0, #64	; 0x40
    6416:	1a82      	subs	r2, r0, r2
    6418:	4091      	lsls	r1, r2
    641a:	430f      	orrs	r7, r1
    641c:	46b9      	mov	r9, r7
    641e:	464c      	mov	r4, r9
    6420:	1e62      	subs	r2, r4, #1
    6422:	4194      	sbcs	r4, r2
    6424:	4334      	orrs	r4, r6
    6426:	e13a      	b.n	669e <__aeabi_dsub+0x41a>
    6428:	000a      	movs	r2, r1
    642a:	433a      	orrs	r2, r7
    642c:	d028      	beq.n	6480 <__aeabi_dsub+0x1fc>
    642e:	46b3      	mov	fp, r6
    6430:	42b5      	cmp	r5, r6
    6432:	d02b      	beq.n	648c <__aeabi_dsub+0x208>
    6434:	4a6b      	ldr	r2, [pc, #428]	; (65e4 <__aeabi_dsub+0x360>)
    6436:	4442      	add	r2, r8
    6438:	2a00      	cmp	r2, #0
    643a:	d05d      	beq.n	64f8 <__aeabi_dsub+0x274>
    643c:	4642      	mov	r2, r8
    643e:	4644      	mov	r4, r8
    6440:	1a82      	subs	r2, r0, r2
    6442:	2c00      	cmp	r4, #0
    6444:	d000      	beq.n	6448 <__aeabi_dsub+0x1c4>
    6446:	e0f5      	b.n	6634 <__aeabi_dsub+0x3b0>
    6448:	4665      	mov	r5, ip
    644a:	431d      	orrs	r5, r3
    644c:	d100      	bne.n	6450 <__aeabi_dsub+0x1cc>
    644e:	e19c      	b.n	678a <__aeabi_dsub+0x506>
    6450:	1e55      	subs	r5, r2, #1
    6452:	2a01      	cmp	r2, #1
    6454:	d100      	bne.n	6458 <__aeabi_dsub+0x1d4>
    6456:	e1fb      	b.n	6850 <__aeabi_dsub+0x5cc>
    6458:	4c60      	ldr	r4, [pc, #384]	; (65dc <__aeabi_dsub+0x358>)
    645a:	42a2      	cmp	r2, r4
    645c:	d100      	bne.n	6460 <__aeabi_dsub+0x1dc>
    645e:	e1bd      	b.n	67dc <__aeabi_dsub+0x558>
    6460:	002a      	movs	r2, r5
    6462:	e0f0      	b.n	6646 <__aeabi_dsub+0x3c2>
    6464:	0008      	movs	r0, r1
    6466:	4338      	orrs	r0, r7
    6468:	d100      	bne.n	646c <__aeabi_dsub+0x1e8>
    646a:	e0c3      	b.n	65f4 <__aeabi_dsub+0x370>
    646c:	1e50      	subs	r0, r2, #1
    646e:	2a01      	cmp	r2, #1
    6470:	d100      	bne.n	6474 <__aeabi_dsub+0x1f0>
    6472:	e1a8      	b.n	67c6 <__aeabi_dsub+0x542>
    6474:	4c59      	ldr	r4, [pc, #356]	; (65dc <__aeabi_dsub+0x358>)
    6476:	42a2      	cmp	r2, r4
    6478:	d100      	bne.n	647c <__aeabi_dsub+0x1f8>
    647a:	e087      	b.n	658c <__aeabi_dsub+0x308>
    647c:	0002      	movs	r2, r0
    647e:	e736      	b.n	62ee <__aeabi_dsub+0x6a>
    6480:	2201      	movs	r2, #1
    6482:	4056      	eors	r6, r2
    6484:	46b3      	mov	fp, r6
    6486:	42b5      	cmp	r5, r6
    6488:	d000      	beq.n	648c <__aeabi_dsub+0x208>
    648a:	e721      	b.n	62d0 <__aeabi_dsub+0x4c>
    648c:	4a55      	ldr	r2, [pc, #340]	; (65e4 <__aeabi_dsub+0x360>)
    648e:	4442      	add	r2, r8
    6490:	2a00      	cmp	r2, #0
    6492:	d100      	bne.n	6496 <__aeabi_dsub+0x212>
    6494:	e0b5      	b.n	6602 <__aeabi_dsub+0x37e>
    6496:	4642      	mov	r2, r8
    6498:	4644      	mov	r4, r8
    649a:	1a82      	subs	r2, r0, r2
    649c:	2c00      	cmp	r4, #0
    649e:	d100      	bne.n	64a2 <__aeabi_dsub+0x21e>
    64a0:	e138      	b.n	6714 <__aeabi_dsub+0x490>
    64a2:	4e4e      	ldr	r6, [pc, #312]	; (65dc <__aeabi_dsub+0x358>)
    64a4:	42b0      	cmp	r0, r6
    64a6:	d100      	bne.n	64aa <__aeabi_dsub+0x226>
    64a8:	e1de      	b.n	6868 <__aeabi_dsub+0x5e4>
    64aa:	2680      	movs	r6, #128	; 0x80
    64ac:	4664      	mov	r4, ip
    64ae:	0436      	lsls	r6, r6, #16
    64b0:	4334      	orrs	r4, r6
    64b2:	46a4      	mov	ip, r4
    64b4:	2a38      	cmp	r2, #56	; 0x38
    64b6:	dd00      	ble.n	64ba <__aeabi_dsub+0x236>
    64b8:	e196      	b.n	67e8 <__aeabi_dsub+0x564>
    64ba:	2a1f      	cmp	r2, #31
    64bc:	dd00      	ble.n	64c0 <__aeabi_dsub+0x23c>
    64be:	e224      	b.n	690a <__aeabi_dsub+0x686>
    64c0:	2620      	movs	r6, #32
    64c2:	1ab4      	subs	r4, r6, r2
    64c4:	46a2      	mov	sl, r4
    64c6:	4664      	mov	r4, ip
    64c8:	4656      	mov	r6, sl
    64ca:	40b4      	lsls	r4, r6
    64cc:	46a1      	mov	r9, r4
    64ce:	001c      	movs	r4, r3
    64d0:	464e      	mov	r6, r9
    64d2:	40d4      	lsrs	r4, r2
    64d4:	4326      	orrs	r6, r4
    64d6:	0034      	movs	r4, r6
    64d8:	4656      	mov	r6, sl
    64da:	40b3      	lsls	r3, r6
    64dc:	1e5e      	subs	r6, r3, #1
    64de:	41b3      	sbcs	r3, r6
    64e0:	431c      	orrs	r4, r3
    64e2:	4663      	mov	r3, ip
    64e4:	40d3      	lsrs	r3, r2
    64e6:	18c9      	adds	r1, r1, r3
    64e8:	19e4      	adds	r4, r4, r7
    64ea:	42bc      	cmp	r4, r7
    64ec:	41bf      	sbcs	r7, r7
    64ee:	427f      	negs	r7, r7
    64f0:	46b9      	mov	r9, r7
    64f2:	4680      	mov	r8, r0
    64f4:	4489      	add	r9, r1
    64f6:	e0d8      	b.n	66aa <__aeabi_dsub+0x426>
    64f8:	4640      	mov	r0, r8
    64fa:	4c3b      	ldr	r4, [pc, #236]	; (65e8 <__aeabi_dsub+0x364>)
    64fc:	3001      	adds	r0, #1
    64fe:	4220      	tst	r0, r4
    6500:	d000      	beq.n	6504 <__aeabi_dsub+0x280>
    6502:	e0b4      	b.n	666e <__aeabi_dsub+0x3ea>
    6504:	4640      	mov	r0, r8
    6506:	2800      	cmp	r0, #0
    6508:	d000      	beq.n	650c <__aeabi_dsub+0x288>
    650a:	e144      	b.n	6796 <__aeabi_dsub+0x512>
    650c:	4660      	mov	r0, ip
    650e:	4318      	orrs	r0, r3
    6510:	d100      	bne.n	6514 <__aeabi_dsub+0x290>
    6512:	e190      	b.n	6836 <__aeabi_dsub+0x5b2>
    6514:	0008      	movs	r0, r1
    6516:	4338      	orrs	r0, r7
    6518:	d000      	beq.n	651c <__aeabi_dsub+0x298>
    651a:	e1aa      	b.n	6872 <__aeabi_dsub+0x5ee>
    651c:	4661      	mov	r1, ip
    651e:	08db      	lsrs	r3, r3, #3
    6520:	0749      	lsls	r1, r1, #29
    6522:	430b      	orrs	r3, r1
    6524:	4661      	mov	r1, ip
    6526:	08cc      	lsrs	r4, r1, #3
    6528:	e027      	b.n	657a <__aeabi_dsub+0x2f6>
    652a:	0008      	movs	r0, r1
    652c:	4338      	orrs	r0, r7
    652e:	d061      	beq.n	65f4 <__aeabi_dsub+0x370>
    6530:	1e50      	subs	r0, r2, #1
    6532:	2a01      	cmp	r2, #1
    6534:	d100      	bne.n	6538 <__aeabi_dsub+0x2b4>
    6536:	e139      	b.n	67ac <__aeabi_dsub+0x528>
    6538:	42a2      	cmp	r2, r4
    653a:	d027      	beq.n	658c <__aeabi_dsub+0x308>
    653c:	0002      	movs	r2, r0
    653e:	e75d      	b.n	63fc <__aeabi_dsub+0x178>
    6540:	0002      	movs	r2, r0
    6542:	391f      	subs	r1, #31
    6544:	40ca      	lsrs	r2, r1
    6546:	0011      	movs	r1, r2
    6548:	2b20      	cmp	r3, #32
    654a:	d003      	beq.n	6554 <__aeabi_dsub+0x2d0>
    654c:	2240      	movs	r2, #64	; 0x40
    654e:	1ad3      	subs	r3, r2, r3
    6550:	4098      	lsls	r0, r3
    6552:	4304      	orrs	r4, r0
    6554:	1e63      	subs	r3, r4, #1
    6556:	419c      	sbcs	r4, r3
    6558:	2300      	movs	r3, #0
    655a:	4699      	mov	r9, r3
    655c:	4698      	mov	r8, r3
    655e:	430c      	orrs	r4, r1
    6560:	0763      	lsls	r3, r4, #29
    6562:	d000      	beq.n	6566 <__aeabi_dsub+0x2e2>
    6564:	e712      	b.n	638c <__aeabi_dsub+0x108>
    6566:	464b      	mov	r3, r9
    6568:	464a      	mov	r2, r9
    656a:	08e4      	lsrs	r4, r4, #3
    656c:	075b      	lsls	r3, r3, #29
    656e:	4323      	orrs	r3, r4
    6570:	08d4      	lsrs	r4, r2, #3
    6572:	4642      	mov	r2, r8
    6574:	4919      	ldr	r1, [pc, #100]	; (65dc <__aeabi_dsub+0x358>)
    6576:	428a      	cmp	r2, r1
    6578:	d00e      	beq.n	6598 <__aeabi_dsub+0x314>
    657a:	0324      	lsls	r4, r4, #12
    657c:	0552      	lsls	r2, r2, #21
    657e:	0b24      	lsrs	r4, r4, #12
    6580:	0d52      	lsrs	r2, r2, #21
    6582:	e722      	b.n	63ca <__aeabi_dsub+0x146>
    6584:	000a      	movs	r2, r1
    6586:	2400      	movs	r4, #0
    6588:	2300      	movs	r3, #0
    658a:	e71e      	b.n	63ca <__aeabi_dsub+0x146>
    658c:	08db      	lsrs	r3, r3, #3
    658e:	4662      	mov	r2, ip
    6590:	0752      	lsls	r2, r2, #29
    6592:	4313      	orrs	r3, r2
    6594:	4662      	mov	r2, ip
    6596:	08d4      	lsrs	r4, r2, #3
    6598:	001a      	movs	r2, r3
    659a:	4322      	orrs	r2, r4
    659c:	d100      	bne.n	65a0 <__aeabi_dsub+0x31c>
    659e:	e1fc      	b.n	699a <__aeabi_dsub+0x716>
    65a0:	2280      	movs	r2, #128	; 0x80
    65a2:	0312      	lsls	r2, r2, #12
    65a4:	4314      	orrs	r4, r2
    65a6:	0324      	lsls	r4, r4, #12
    65a8:	4a0c      	ldr	r2, [pc, #48]	; (65dc <__aeabi_dsub+0x358>)
    65aa:	0b24      	lsrs	r4, r4, #12
    65ac:	e70d      	b.n	63ca <__aeabi_dsub+0x146>
    65ae:	0020      	movs	r0, r4
    65b0:	f001 faf4 	bl	7b9c <__clzsi2>
    65b4:	0001      	movs	r1, r0
    65b6:	3118      	adds	r1, #24
    65b8:	291f      	cmp	r1, #31
    65ba:	dc00      	bgt.n	65be <__aeabi_dsub+0x33a>
    65bc:	e6c4      	b.n	6348 <__aeabi_dsub+0xc4>
    65be:	3808      	subs	r0, #8
    65c0:	4084      	lsls	r4, r0
    65c2:	4643      	mov	r3, r8
    65c4:	0020      	movs	r0, r4
    65c6:	2400      	movs	r4, #0
    65c8:	4588      	cmp	r8, r1
    65ca:	dc00      	bgt.n	65ce <__aeabi_dsub+0x34a>
    65cc:	e6c8      	b.n	6360 <__aeabi_dsub+0xdc>
    65ce:	4a04      	ldr	r2, [pc, #16]	; (65e0 <__aeabi_dsub+0x35c>)
    65d0:	1a5b      	subs	r3, r3, r1
    65d2:	4010      	ands	r0, r2
    65d4:	4698      	mov	r8, r3
    65d6:	4681      	mov	r9, r0
    65d8:	e6d6      	b.n	6388 <__aeabi_dsub+0x104>
    65da:	46c0      	nop			; (mov r8, r8)
    65dc:	000007ff 	.word	0x000007ff
    65e0:	ff7fffff 	.word	0xff7fffff
    65e4:	fffff801 	.word	0xfffff801
    65e8:	000007fe 	.word	0x000007fe
    65ec:	430f      	orrs	r7, r1
    65ee:	1e7a      	subs	r2, r7, #1
    65f0:	4197      	sbcs	r7, r2
    65f2:	e691      	b.n	6318 <__aeabi_dsub+0x94>
    65f4:	4661      	mov	r1, ip
    65f6:	08db      	lsrs	r3, r3, #3
    65f8:	0749      	lsls	r1, r1, #29
    65fa:	430b      	orrs	r3, r1
    65fc:	4661      	mov	r1, ip
    65fe:	08cc      	lsrs	r4, r1, #3
    6600:	e7b8      	b.n	6574 <__aeabi_dsub+0x2f0>
    6602:	4640      	mov	r0, r8
    6604:	4cd3      	ldr	r4, [pc, #844]	; (6954 <__aeabi_dsub+0x6d0>)
    6606:	3001      	adds	r0, #1
    6608:	4220      	tst	r0, r4
    660a:	d000      	beq.n	660e <__aeabi_dsub+0x38a>
    660c:	e0a2      	b.n	6754 <__aeabi_dsub+0x4d0>
    660e:	4640      	mov	r0, r8
    6610:	2800      	cmp	r0, #0
    6612:	d000      	beq.n	6616 <__aeabi_dsub+0x392>
    6614:	e101      	b.n	681a <__aeabi_dsub+0x596>
    6616:	4660      	mov	r0, ip
    6618:	4318      	orrs	r0, r3
    661a:	d100      	bne.n	661e <__aeabi_dsub+0x39a>
    661c:	e15e      	b.n	68dc <__aeabi_dsub+0x658>
    661e:	0008      	movs	r0, r1
    6620:	4338      	orrs	r0, r7
    6622:	d000      	beq.n	6626 <__aeabi_dsub+0x3a2>
    6624:	e15f      	b.n	68e6 <__aeabi_dsub+0x662>
    6626:	4661      	mov	r1, ip
    6628:	08db      	lsrs	r3, r3, #3
    662a:	0749      	lsls	r1, r1, #29
    662c:	430b      	orrs	r3, r1
    662e:	4661      	mov	r1, ip
    6630:	08cc      	lsrs	r4, r1, #3
    6632:	e7a2      	b.n	657a <__aeabi_dsub+0x2f6>
    6634:	4dc8      	ldr	r5, [pc, #800]	; (6958 <__aeabi_dsub+0x6d4>)
    6636:	42a8      	cmp	r0, r5
    6638:	d100      	bne.n	663c <__aeabi_dsub+0x3b8>
    663a:	e0cf      	b.n	67dc <__aeabi_dsub+0x558>
    663c:	2580      	movs	r5, #128	; 0x80
    663e:	4664      	mov	r4, ip
    6640:	042d      	lsls	r5, r5, #16
    6642:	432c      	orrs	r4, r5
    6644:	46a4      	mov	ip, r4
    6646:	2a38      	cmp	r2, #56	; 0x38
    6648:	dc56      	bgt.n	66f8 <__aeabi_dsub+0x474>
    664a:	2a1f      	cmp	r2, #31
    664c:	dd00      	ble.n	6650 <__aeabi_dsub+0x3cc>
    664e:	e0d1      	b.n	67f4 <__aeabi_dsub+0x570>
    6650:	2520      	movs	r5, #32
    6652:	001e      	movs	r6, r3
    6654:	1aad      	subs	r5, r5, r2
    6656:	4664      	mov	r4, ip
    6658:	40ab      	lsls	r3, r5
    665a:	40ac      	lsls	r4, r5
    665c:	40d6      	lsrs	r6, r2
    665e:	1e5d      	subs	r5, r3, #1
    6660:	41ab      	sbcs	r3, r5
    6662:	4334      	orrs	r4, r6
    6664:	4323      	orrs	r3, r4
    6666:	4664      	mov	r4, ip
    6668:	40d4      	lsrs	r4, r2
    666a:	1b09      	subs	r1, r1, r4
    666c:	e049      	b.n	6702 <__aeabi_dsub+0x47e>
    666e:	4660      	mov	r0, ip
    6670:	1bdc      	subs	r4, r3, r7
    6672:	1a46      	subs	r6, r0, r1
    6674:	42a3      	cmp	r3, r4
    6676:	4180      	sbcs	r0, r0
    6678:	4240      	negs	r0, r0
    667a:	4681      	mov	r9, r0
    667c:	0030      	movs	r0, r6
    667e:	464e      	mov	r6, r9
    6680:	1b80      	subs	r0, r0, r6
    6682:	4681      	mov	r9, r0
    6684:	0200      	lsls	r0, r0, #8
    6686:	d476      	bmi.n	6776 <__aeabi_dsub+0x4f2>
    6688:	464b      	mov	r3, r9
    668a:	4323      	orrs	r3, r4
    668c:	d000      	beq.n	6690 <__aeabi_dsub+0x40c>
    668e:	e652      	b.n	6336 <__aeabi_dsub+0xb2>
    6690:	2400      	movs	r4, #0
    6692:	2500      	movs	r5, #0
    6694:	e771      	b.n	657a <__aeabi_dsub+0x2f6>
    6696:	4339      	orrs	r1, r7
    6698:	000c      	movs	r4, r1
    669a:	1e62      	subs	r2, r4, #1
    669c:	4194      	sbcs	r4, r2
    669e:	18e4      	adds	r4, r4, r3
    66a0:	429c      	cmp	r4, r3
    66a2:	419b      	sbcs	r3, r3
    66a4:	425b      	negs	r3, r3
    66a6:	4463      	add	r3, ip
    66a8:	4699      	mov	r9, r3
    66aa:	464b      	mov	r3, r9
    66ac:	021b      	lsls	r3, r3, #8
    66ae:	d400      	bmi.n	66b2 <__aeabi_dsub+0x42e>
    66b0:	e756      	b.n	6560 <__aeabi_dsub+0x2dc>
    66b2:	2301      	movs	r3, #1
    66b4:	469c      	mov	ip, r3
    66b6:	4ba8      	ldr	r3, [pc, #672]	; (6958 <__aeabi_dsub+0x6d4>)
    66b8:	44e0      	add	r8, ip
    66ba:	4598      	cmp	r8, r3
    66bc:	d038      	beq.n	6730 <__aeabi_dsub+0x4ac>
    66be:	464b      	mov	r3, r9
    66c0:	48a6      	ldr	r0, [pc, #664]	; (695c <__aeabi_dsub+0x6d8>)
    66c2:	2201      	movs	r2, #1
    66c4:	4003      	ands	r3, r0
    66c6:	0018      	movs	r0, r3
    66c8:	0863      	lsrs	r3, r4, #1
    66ca:	4014      	ands	r4, r2
    66cc:	431c      	orrs	r4, r3
    66ce:	07c3      	lsls	r3, r0, #31
    66d0:	431c      	orrs	r4, r3
    66d2:	0843      	lsrs	r3, r0, #1
    66d4:	4699      	mov	r9, r3
    66d6:	e657      	b.n	6388 <__aeabi_dsub+0x104>
    66d8:	0010      	movs	r0, r2
    66da:	000e      	movs	r6, r1
    66dc:	3820      	subs	r0, #32
    66de:	40c6      	lsrs	r6, r0
    66e0:	2a20      	cmp	r2, #32
    66e2:	d004      	beq.n	66ee <__aeabi_dsub+0x46a>
    66e4:	2040      	movs	r0, #64	; 0x40
    66e6:	1a82      	subs	r2, r0, r2
    66e8:	4091      	lsls	r1, r2
    66ea:	430f      	orrs	r7, r1
    66ec:	46b9      	mov	r9, r7
    66ee:	464f      	mov	r7, r9
    66f0:	1e7a      	subs	r2, r7, #1
    66f2:	4197      	sbcs	r7, r2
    66f4:	4337      	orrs	r7, r6
    66f6:	e60f      	b.n	6318 <__aeabi_dsub+0x94>
    66f8:	4662      	mov	r2, ip
    66fa:	431a      	orrs	r2, r3
    66fc:	0013      	movs	r3, r2
    66fe:	1e5a      	subs	r2, r3, #1
    6700:	4193      	sbcs	r3, r2
    6702:	1afc      	subs	r4, r7, r3
    6704:	42a7      	cmp	r7, r4
    6706:	41bf      	sbcs	r7, r7
    6708:	427f      	negs	r7, r7
    670a:	1bcb      	subs	r3, r1, r7
    670c:	4699      	mov	r9, r3
    670e:	465d      	mov	r5, fp
    6710:	4680      	mov	r8, r0
    6712:	e608      	b.n	6326 <__aeabi_dsub+0xa2>
    6714:	4666      	mov	r6, ip
    6716:	431e      	orrs	r6, r3
    6718:	d100      	bne.n	671c <__aeabi_dsub+0x498>
    671a:	e0be      	b.n	689a <__aeabi_dsub+0x616>
    671c:	1e56      	subs	r6, r2, #1
    671e:	2a01      	cmp	r2, #1
    6720:	d100      	bne.n	6724 <__aeabi_dsub+0x4a0>
    6722:	e109      	b.n	6938 <__aeabi_dsub+0x6b4>
    6724:	4c8c      	ldr	r4, [pc, #560]	; (6958 <__aeabi_dsub+0x6d4>)
    6726:	42a2      	cmp	r2, r4
    6728:	d100      	bne.n	672c <__aeabi_dsub+0x4a8>
    672a:	e119      	b.n	6960 <__aeabi_dsub+0x6dc>
    672c:	0032      	movs	r2, r6
    672e:	e6c1      	b.n	64b4 <__aeabi_dsub+0x230>
    6730:	4642      	mov	r2, r8
    6732:	2400      	movs	r4, #0
    6734:	2300      	movs	r3, #0
    6736:	e648      	b.n	63ca <__aeabi_dsub+0x146>
    6738:	2020      	movs	r0, #32
    673a:	000c      	movs	r4, r1
    673c:	1a80      	subs	r0, r0, r2
    673e:	003e      	movs	r6, r7
    6740:	4087      	lsls	r7, r0
    6742:	4084      	lsls	r4, r0
    6744:	40d6      	lsrs	r6, r2
    6746:	1e78      	subs	r0, r7, #1
    6748:	4187      	sbcs	r7, r0
    674a:	40d1      	lsrs	r1, r2
    674c:	4334      	orrs	r4, r6
    674e:	433c      	orrs	r4, r7
    6750:	448c      	add	ip, r1
    6752:	e7a4      	b.n	669e <__aeabi_dsub+0x41a>
    6754:	4a80      	ldr	r2, [pc, #512]	; (6958 <__aeabi_dsub+0x6d4>)
    6756:	4290      	cmp	r0, r2
    6758:	d100      	bne.n	675c <__aeabi_dsub+0x4d8>
    675a:	e0e9      	b.n	6930 <__aeabi_dsub+0x6ac>
    675c:	19df      	adds	r7, r3, r7
    675e:	429f      	cmp	r7, r3
    6760:	419b      	sbcs	r3, r3
    6762:	4461      	add	r1, ip
    6764:	425b      	negs	r3, r3
    6766:	18c9      	adds	r1, r1, r3
    6768:	07cc      	lsls	r4, r1, #31
    676a:	087f      	lsrs	r7, r7, #1
    676c:	084b      	lsrs	r3, r1, #1
    676e:	4699      	mov	r9, r3
    6770:	4680      	mov	r8, r0
    6772:	433c      	orrs	r4, r7
    6774:	e6f4      	b.n	6560 <__aeabi_dsub+0x2dc>
    6776:	1afc      	subs	r4, r7, r3
    6778:	42a7      	cmp	r7, r4
    677a:	41bf      	sbcs	r7, r7
    677c:	4663      	mov	r3, ip
    677e:	427f      	negs	r7, r7
    6780:	1ac9      	subs	r1, r1, r3
    6782:	1bcb      	subs	r3, r1, r7
    6784:	4699      	mov	r9, r3
    6786:	465d      	mov	r5, fp
    6788:	e5d5      	b.n	6336 <__aeabi_dsub+0xb2>
    678a:	08ff      	lsrs	r7, r7, #3
    678c:	074b      	lsls	r3, r1, #29
    678e:	465d      	mov	r5, fp
    6790:	433b      	orrs	r3, r7
    6792:	08cc      	lsrs	r4, r1, #3
    6794:	e6ee      	b.n	6574 <__aeabi_dsub+0x2f0>
    6796:	4662      	mov	r2, ip
    6798:	431a      	orrs	r2, r3
    679a:	d000      	beq.n	679e <__aeabi_dsub+0x51a>
    679c:	e082      	b.n	68a4 <__aeabi_dsub+0x620>
    679e:	000b      	movs	r3, r1
    67a0:	433b      	orrs	r3, r7
    67a2:	d11b      	bne.n	67dc <__aeabi_dsub+0x558>
    67a4:	2480      	movs	r4, #128	; 0x80
    67a6:	2500      	movs	r5, #0
    67a8:	0324      	lsls	r4, r4, #12
    67aa:	e6f9      	b.n	65a0 <__aeabi_dsub+0x31c>
    67ac:	19dc      	adds	r4, r3, r7
    67ae:	429c      	cmp	r4, r3
    67b0:	419b      	sbcs	r3, r3
    67b2:	4461      	add	r1, ip
    67b4:	4689      	mov	r9, r1
    67b6:	425b      	negs	r3, r3
    67b8:	4499      	add	r9, r3
    67ba:	464b      	mov	r3, r9
    67bc:	021b      	lsls	r3, r3, #8
    67be:	d444      	bmi.n	684a <__aeabi_dsub+0x5c6>
    67c0:	2301      	movs	r3, #1
    67c2:	4698      	mov	r8, r3
    67c4:	e6cc      	b.n	6560 <__aeabi_dsub+0x2dc>
    67c6:	1bdc      	subs	r4, r3, r7
    67c8:	4662      	mov	r2, ip
    67ca:	42a3      	cmp	r3, r4
    67cc:	419b      	sbcs	r3, r3
    67ce:	1a51      	subs	r1, r2, r1
    67d0:	425b      	negs	r3, r3
    67d2:	1acb      	subs	r3, r1, r3
    67d4:	4699      	mov	r9, r3
    67d6:	2301      	movs	r3, #1
    67d8:	4698      	mov	r8, r3
    67da:	e5a4      	b.n	6326 <__aeabi_dsub+0xa2>
    67dc:	08ff      	lsrs	r7, r7, #3
    67de:	074b      	lsls	r3, r1, #29
    67e0:	465d      	mov	r5, fp
    67e2:	433b      	orrs	r3, r7
    67e4:	08cc      	lsrs	r4, r1, #3
    67e6:	e6d7      	b.n	6598 <__aeabi_dsub+0x314>
    67e8:	4662      	mov	r2, ip
    67ea:	431a      	orrs	r2, r3
    67ec:	0014      	movs	r4, r2
    67ee:	1e63      	subs	r3, r4, #1
    67f0:	419c      	sbcs	r4, r3
    67f2:	e679      	b.n	64e8 <__aeabi_dsub+0x264>
    67f4:	0015      	movs	r5, r2
    67f6:	4664      	mov	r4, ip
    67f8:	3d20      	subs	r5, #32
    67fa:	40ec      	lsrs	r4, r5
    67fc:	46a0      	mov	r8, r4
    67fe:	2a20      	cmp	r2, #32
    6800:	d005      	beq.n	680e <__aeabi_dsub+0x58a>
    6802:	2540      	movs	r5, #64	; 0x40
    6804:	4664      	mov	r4, ip
    6806:	1aaa      	subs	r2, r5, r2
    6808:	4094      	lsls	r4, r2
    680a:	4323      	orrs	r3, r4
    680c:	469a      	mov	sl, r3
    680e:	4654      	mov	r4, sl
    6810:	1e63      	subs	r3, r4, #1
    6812:	419c      	sbcs	r4, r3
    6814:	4643      	mov	r3, r8
    6816:	4323      	orrs	r3, r4
    6818:	e773      	b.n	6702 <__aeabi_dsub+0x47e>
    681a:	4662      	mov	r2, ip
    681c:	431a      	orrs	r2, r3
    681e:	d023      	beq.n	6868 <__aeabi_dsub+0x5e4>
    6820:	000a      	movs	r2, r1
    6822:	433a      	orrs	r2, r7
    6824:	d000      	beq.n	6828 <__aeabi_dsub+0x5a4>
    6826:	e0a0      	b.n	696a <__aeabi_dsub+0x6e6>
    6828:	4662      	mov	r2, ip
    682a:	08db      	lsrs	r3, r3, #3
    682c:	0752      	lsls	r2, r2, #29
    682e:	4313      	orrs	r3, r2
    6830:	4662      	mov	r2, ip
    6832:	08d4      	lsrs	r4, r2, #3
    6834:	e6b0      	b.n	6598 <__aeabi_dsub+0x314>
    6836:	000b      	movs	r3, r1
    6838:	433b      	orrs	r3, r7
    683a:	d100      	bne.n	683e <__aeabi_dsub+0x5ba>
    683c:	e728      	b.n	6690 <__aeabi_dsub+0x40c>
    683e:	08ff      	lsrs	r7, r7, #3
    6840:	074b      	lsls	r3, r1, #29
    6842:	465d      	mov	r5, fp
    6844:	433b      	orrs	r3, r7
    6846:	08cc      	lsrs	r4, r1, #3
    6848:	e697      	b.n	657a <__aeabi_dsub+0x2f6>
    684a:	2302      	movs	r3, #2
    684c:	4698      	mov	r8, r3
    684e:	e736      	b.n	66be <__aeabi_dsub+0x43a>
    6850:	1afc      	subs	r4, r7, r3
    6852:	42a7      	cmp	r7, r4
    6854:	41bf      	sbcs	r7, r7
    6856:	4663      	mov	r3, ip
    6858:	427f      	negs	r7, r7
    685a:	1ac9      	subs	r1, r1, r3
    685c:	1bcb      	subs	r3, r1, r7
    685e:	4699      	mov	r9, r3
    6860:	2301      	movs	r3, #1
    6862:	465d      	mov	r5, fp
    6864:	4698      	mov	r8, r3
    6866:	e55e      	b.n	6326 <__aeabi_dsub+0xa2>
    6868:	074b      	lsls	r3, r1, #29
    686a:	08ff      	lsrs	r7, r7, #3
    686c:	433b      	orrs	r3, r7
    686e:	08cc      	lsrs	r4, r1, #3
    6870:	e692      	b.n	6598 <__aeabi_dsub+0x314>
    6872:	1bdc      	subs	r4, r3, r7
    6874:	4660      	mov	r0, ip
    6876:	42a3      	cmp	r3, r4
    6878:	41b6      	sbcs	r6, r6
    687a:	1a40      	subs	r0, r0, r1
    687c:	4276      	negs	r6, r6
    687e:	1b80      	subs	r0, r0, r6
    6880:	4681      	mov	r9, r0
    6882:	0200      	lsls	r0, r0, #8
    6884:	d560      	bpl.n	6948 <__aeabi_dsub+0x6c4>
    6886:	1afc      	subs	r4, r7, r3
    6888:	42a7      	cmp	r7, r4
    688a:	41bf      	sbcs	r7, r7
    688c:	4663      	mov	r3, ip
    688e:	427f      	negs	r7, r7
    6890:	1ac9      	subs	r1, r1, r3
    6892:	1bcb      	subs	r3, r1, r7
    6894:	4699      	mov	r9, r3
    6896:	465d      	mov	r5, fp
    6898:	e576      	b.n	6388 <__aeabi_dsub+0x104>
    689a:	08ff      	lsrs	r7, r7, #3
    689c:	074b      	lsls	r3, r1, #29
    689e:	433b      	orrs	r3, r7
    68a0:	08cc      	lsrs	r4, r1, #3
    68a2:	e667      	b.n	6574 <__aeabi_dsub+0x2f0>
    68a4:	000a      	movs	r2, r1
    68a6:	08db      	lsrs	r3, r3, #3
    68a8:	433a      	orrs	r2, r7
    68aa:	d100      	bne.n	68ae <__aeabi_dsub+0x62a>
    68ac:	e66f      	b.n	658e <__aeabi_dsub+0x30a>
    68ae:	4662      	mov	r2, ip
    68b0:	0752      	lsls	r2, r2, #29
    68b2:	4313      	orrs	r3, r2
    68b4:	4662      	mov	r2, ip
    68b6:	08d4      	lsrs	r4, r2, #3
    68b8:	2280      	movs	r2, #128	; 0x80
    68ba:	0312      	lsls	r2, r2, #12
    68bc:	4214      	tst	r4, r2
    68be:	d007      	beq.n	68d0 <__aeabi_dsub+0x64c>
    68c0:	08c8      	lsrs	r0, r1, #3
    68c2:	4210      	tst	r0, r2
    68c4:	d104      	bne.n	68d0 <__aeabi_dsub+0x64c>
    68c6:	465d      	mov	r5, fp
    68c8:	0004      	movs	r4, r0
    68ca:	08fb      	lsrs	r3, r7, #3
    68cc:	0749      	lsls	r1, r1, #29
    68ce:	430b      	orrs	r3, r1
    68d0:	0f5a      	lsrs	r2, r3, #29
    68d2:	00db      	lsls	r3, r3, #3
    68d4:	08db      	lsrs	r3, r3, #3
    68d6:	0752      	lsls	r2, r2, #29
    68d8:	4313      	orrs	r3, r2
    68da:	e65d      	b.n	6598 <__aeabi_dsub+0x314>
    68dc:	074b      	lsls	r3, r1, #29
    68de:	08ff      	lsrs	r7, r7, #3
    68e0:	433b      	orrs	r3, r7
    68e2:	08cc      	lsrs	r4, r1, #3
    68e4:	e649      	b.n	657a <__aeabi_dsub+0x2f6>
    68e6:	19dc      	adds	r4, r3, r7
    68e8:	429c      	cmp	r4, r3
    68ea:	419b      	sbcs	r3, r3
    68ec:	4461      	add	r1, ip
    68ee:	4689      	mov	r9, r1
    68f0:	425b      	negs	r3, r3
    68f2:	4499      	add	r9, r3
    68f4:	464b      	mov	r3, r9
    68f6:	021b      	lsls	r3, r3, #8
    68f8:	d400      	bmi.n	68fc <__aeabi_dsub+0x678>
    68fa:	e631      	b.n	6560 <__aeabi_dsub+0x2dc>
    68fc:	464a      	mov	r2, r9
    68fe:	4b17      	ldr	r3, [pc, #92]	; (695c <__aeabi_dsub+0x6d8>)
    6900:	401a      	ands	r2, r3
    6902:	2301      	movs	r3, #1
    6904:	4691      	mov	r9, r2
    6906:	4698      	mov	r8, r3
    6908:	e62a      	b.n	6560 <__aeabi_dsub+0x2dc>
    690a:	0016      	movs	r6, r2
    690c:	4664      	mov	r4, ip
    690e:	3e20      	subs	r6, #32
    6910:	40f4      	lsrs	r4, r6
    6912:	46a0      	mov	r8, r4
    6914:	2a20      	cmp	r2, #32
    6916:	d005      	beq.n	6924 <__aeabi_dsub+0x6a0>
    6918:	2640      	movs	r6, #64	; 0x40
    691a:	4664      	mov	r4, ip
    691c:	1ab2      	subs	r2, r6, r2
    691e:	4094      	lsls	r4, r2
    6920:	4323      	orrs	r3, r4
    6922:	469a      	mov	sl, r3
    6924:	4654      	mov	r4, sl
    6926:	1e63      	subs	r3, r4, #1
    6928:	419c      	sbcs	r4, r3
    692a:	4643      	mov	r3, r8
    692c:	431c      	orrs	r4, r3
    692e:	e5db      	b.n	64e8 <__aeabi_dsub+0x264>
    6930:	0002      	movs	r2, r0
    6932:	2400      	movs	r4, #0
    6934:	2300      	movs	r3, #0
    6936:	e548      	b.n	63ca <__aeabi_dsub+0x146>
    6938:	19dc      	adds	r4, r3, r7
    693a:	42bc      	cmp	r4, r7
    693c:	41bf      	sbcs	r7, r7
    693e:	4461      	add	r1, ip
    6940:	4689      	mov	r9, r1
    6942:	427f      	negs	r7, r7
    6944:	44b9      	add	r9, r7
    6946:	e738      	b.n	67ba <__aeabi_dsub+0x536>
    6948:	464b      	mov	r3, r9
    694a:	4323      	orrs	r3, r4
    694c:	d100      	bne.n	6950 <__aeabi_dsub+0x6cc>
    694e:	e69f      	b.n	6690 <__aeabi_dsub+0x40c>
    6950:	e606      	b.n	6560 <__aeabi_dsub+0x2dc>
    6952:	46c0      	nop			; (mov r8, r8)
    6954:	000007fe 	.word	0x000007fe
    6958:	000007ff 	.word	0x000007ff
    695c:	ff7fffff 	.word	0xff7fffff
    6960:	08ff      	lsrs	r7, r7, #3
    6962:	074b      	lsls	r3, r1, #29
    6964:	433b      	orrs	r3, r7
    6966:	08cc      	lsrs	r4, r1, #3
    6968:	e616      	b.n	6598 <__aeabi_dsub+0x314>
    696a:	4662      	mov	r2, ip
    696c:	08db      	lsrs	r3, r3, #3
    696e:	0752      	lsls	r2, r2, #29
    6970:	4313      	orrs	r3, r2
    6972:	4662      	mov	r2, ip
    6974:	08d4      	lsrs	r4, r2, #3
    6976:	2280      	movs	r2, #128	; 0x80
    6978:	0312      	lsls	r2, r2, #12
    697a:	4214      	tst	r4, r2
    697c:	d007      	beq.n	698e <__aeabi_dsub+0x70a>
    697e:	08c8      	lsrs	r0, r1, #3
    6980:	4210      	tst	r0, r2
    6982:	d104      	bne.n	698e <__aeabi_dsub+0x70a>
    6984:	465d      	mov	r5, fp
    6986:	0004      	movs	r4, r0
    6988:	08fb      	lsrs	r3, r7, #3
    698a:	0749      	lsls	r1, r1, #29
    698c:	430b      	orrs	r3, r1
    698e:	0f5a      	lsrs	r2, r3, #29
    6990:	00db      	lsls	r3, r3, #3
    6992:	0752      	lsls	r2, r2, #29
    6994:	08db      	lsrs	r3, r3, #3
    6996:	4313      	orrs	r3, r2
    6998:	e5fe      	b.n	6598 <__aeabi_dsub+0x314>
    699a:	2300      	movs	r3, #0
    699c:	4a01      	ldr	r2, [pc, #4]	; (69a4 <__aeabi_dsub+0x720>)
    699e:	001c      	movs	r4, r3
    69a0:	e513      	b.n	63ca <__aeabi_dsub+0x146>
    69a2:	46c0      	nop			; (mov r8, r8)
    69a4:	000007ff 	.word	0x000007ff

000069a8 <__aeabi_dcmpun>:
    69a8:	b570      	push	{r4, r5, r6, lr}
    69aa:	0005      	movs	r5, r0
    69ac:	480c      	ldr	r0, [pc, #48]	; (69e0 <__aeabi_dcmpun+0x38>)
    69ae:	031c      	lsls	r4, r3, #12
    69b0:	0016      	movs	r6, r2
    69b2:	005b      	lsls	r3, r3, #1
    69b4:	030a      	lsls	r2, r1, #12
    69b6:	0049      	lsls	r1, r1, #1
    69b8:	0b12      	lsrs	r2, r2, #12
    69ba:	0d49      	lsrs	r1, r1, #21
    69bc:	0b24      	lsrs	r4, r4, #12
    69be:	0d5b      	lsrs	r3, r3, #21
    69c0:	4281      	cmp	r1, r0
    69c2:	d008      	beq.n	69d6 <__aeabi_dcmpun+0x2e>
    69c4:	4a06      	ldr	r2, [pc, #24]	; (69e0 <__aeabi_dcmpun+0x38>)
    69c6:	2000      	movs	r0, #0
    69c8:	4293      	cmp	r3, r2
    69ca:	d103      	bne.n	69d4 <__aeabi_dcmpun+0x2c>
    69cc:	0020      	movs	r0, r4
    69ce:	4330      	orrs	r0, r6
    69d0:	1e43      	subs	r3, r0, #1
    69d2:	4198      	sbcs	r0, r3
    69d4:	bd70      	pop	{r4, r5, r6, pc}
    69d6:	2001      	movs	r0, #1
    69d8:	432a      	orrs	r2, r5
    69da:	d1fb      	bne.n	69d4 <__aeabi_dcmpun+0x2c>
    69dc:	e7f2      	b.n	69c4 <__aeabi_dcmpun+0x1c>
    69de:	46c0      	nop			; (mov r8, r8)
    69e0:	000007ff 	.word	0x000007ff

000069e4 <__aeabi_d2iz>:
    69e4:	000a      	movs	r2, r1
    69e6:	b530      	push	{r4, r5, lr}
    69e8:	4c13      	ldr	r4, [pc, #76]	; (6a38 <__aeabi_d2iz+0x54>)
    69ea:	0053      	lsls	r3, r2, #1
    69ec:	0309      	lsls	r1, r1, #12
    69ee:	0005      	movs	r5, r0
    69f0:	0b09      	lsrs	r1, r1, #12
    69f2:	2000      	movs	r0, #0
    69f4:	0d5b      	lsrs	r3, r3, #21
    69f6:	0fd2      	lsrs	r2, r2, #31
    69f8:	42a3      	cmp	r3, r4
    69fa:	dd04      	ble.n	6a06 <__aeabi_d2iz+0x22>
    69fc:	480f      	ldr	r0, [pc, #60]	; (6a3c <__aeabi_d2iz+0x58>)
    69fe:	4283      	cmp	r3, r0
    6a00:	dd02      	ble.n	6a08 <__aeabi_d2iz+0x24>
    6a02:	4b0f      	ldr	r3, [pc, #60]	; (6a40 <__aeabi_d2iz+0x5c>)
    6a04:	18d0      	adds	r0, r2, r3
    6a06:	bd30      	pop	{r4, r5, pc}
    6a08:	2080      	movs	r0, #128	; 0x80
    6a0a:	0340      	lsls	r0, r0, #13
    6a0c:	4301      	orrs	r1, r0
    6a0e:	480d      	ldr	r0, [pc, #52]	; (6a44 <__aeabi_d2iz+0x60>)
    6a10:	1ac0      	subs	r0, r0, r3
    6a12:	281f      	cmp	r0, #31
    6a14:	dd08      	ble.n	6a28 <__aeabi_d2iz+0x44>
    6a16:	480c      	ldr	r0, [pc, #48]	; (6a48 <__aeabi_d2iz+0x64>)
    6a18:	1ac3      	subs	r3, r0, r3
    6a1a:	40d9      	lsrs	r1, r3
    6a1c:	000b      	movs	r3, r1
    6a1e:	4258      	negs	r0, r3
    6a20:	2a00      	cmp	r2, #0
    6a22:	d1f0      	bne.n	6a06 <__aeabi_d2iz+0x22>
    6a24:	0018      	movs	r0, r3
    6a26:	e7ee      	b.n	6a06 <__aeabi_d2iz+0x22>
    6a28:	4c08      	ldr	r4, [pc, #32]	; (6a4c <__aeabi_d2iz+0x68>)
    6a2a:	40c5      	lsrs	r5, r0
    6a2c:	46a4      	mov	ip, r4
    6a2e:	4463      	add	r3, ip
    6a30:	4099      	lsls	r1, r3
    6a32:	000b      	movs	r3, r1
    6a34:	432b      	orrs	r3, r5
    6a36:	e7f2      	b.n	6a1e <__aeabi_d2iz+0x3a>
    6a38:	000003fe 	.word	0x000003fe
    6a3c:	0000041d 	.word	0x0000041d
    6a40:	7fffffff 	.word	0x7fffffff
    6a44:	00000433 	.word	0x00000433
    6a48:	00000413 	.word	0x00000413
    6a4c:	fffffbed 	.word	0xfffffbed

00006a50 <__aeabi_i2d>:
    6a50:	b570      	push	{r4, r5, r6, lr}
    6a52:	2800      	cmp	r0, #0
    6a54:	d016      	beq.n	6a84 <__aeabi_i2d+0x34>
    6a56:	17c3      	asrs	r3, r0, #31
    6a58:	18c5      	adds	r5, r0, r3
    6a5a:	405d      	eors	r5, r3
    6a5c:	0fc4      	lsrs	r4, r0, #31
    6a5e:	0028      	movs	r0, r5
    6a60:	f001 f89c 	bl	7b9c <__clzsi2>
    6a64:	4a11      	ldr	r2, [pc, #68]	; (6aac <__aeabi_i2d+0x5c>)
    6a66:	1a12      	subs	r2, r2, r0
    6a68:	280a      	cmp	r0, #10
    6a6a:	dc16      	bgt.n	6a9a <__aeabi_i2d+0x4a>
    6a6c:	0003      	movs	r3, r0
    6a6e:	002e      	movs	r6, r5
    6a70:	3315      	adds	r3, #21
    6a72:	409e      	lsls	r6, r3
    6a74:	230b      	movs	r3, #11
    6a76:	1a18      	subs	r0, r3, r0
    6a78:	40c5      	lsrs	r5, r0
    6a7a:	0552      	lsls	r2, r2, #21
    6a7c:	032d      	lsls	r5, r5, #12
    6a7e:	0b2d      	lsrs	r5, r5, #12
    6a80:	0d53      	lsrs	r3, r2, #21
    6a82:	e003      	b.n	6a8c <__aeabi_i2d+0x3c>
    6a84:	2400      	movs	r4, #0
    6a86:	2300      	movs	r3, #0
    6a88:	2500      	movs	r5, #0
    6a8a:	2600      	movs	r6, #0
    6a8c:	051b      	lsls	r3, r3, #20
    6a8e:	432b      	orrs	r3, r5
    6a90:	07e4      	lsls	r4, r4, #31
    6a92:	4323      	orrs	r3, r4
    6a94:	0030      	movs	r0, r6
    6a96:	0019      	movs	r1, r3
    6a98:	bd70      	pop	{r4, r5, r6, pc}
    6a9a:	380b      	subs	r0, #11
    6a9c:	4085      	lsls	r5, r0
    6a9e:	0552      	lsls	r2, r2, #21
    6aa0:	032d      	lsls	r5, r5, #12
    6aa2:	2600      	movs	r6, #0
    6aa4:	0b2d      	lsrs	r5, r5, #12
    6aa6:	0d53      	lsrs	r3, r2, #21
    6aa8:	e7f0      	b.n	6a8c <__aeabi_i2d+0x3c>
    6aaa:	46c0      	nop			; (mov r8, r8)
    6aac:	0000041e 	.word	0x0000041e

00006ab0 <__aeabi_ui2d>:
    6ab0:	b510      	push	{r4, lr}
    6ab2:	1e04      	subs	r4, r0, #0
    6ab4:	d010      	beq.n	6ad8 <__aeabi_ui2d+0x28>
    6ab6:	f001 f871 	bl	7b9c <__clzsi2>
    6aba:	4b0f      	ldr	r3, [pc, #60]	; (6af8 <__aeabi_ui2d+0x48>)
    6abc:	1a1b      	subs	r3, r3, r0
    6abe:	280a      	cmp	r0, #10
    6ac0:	dc11      	bgt.n	6ae6 <__aeabi_ui2d+0x36>
    6ac2:	220b      	movs	r2, #11
    6ac4:	0021      	movs	r1, r4
    6ac6:	1a12      	subs	r2, r2, r0
    6ac8:	40d1      	lsrs	r1, r2
    6aca:	3015      	adds	r0, #21
    6acc:	030a      	lsls	r2, r1, #12
    6ace:	055b      	lsls	r3, r3, #21
    6ad0:	4084      	lsls	r4, r0
    6ad2:	0b12      	lsrs	r2, r2, #12
    6ad4:	0d5b      	lsrs	r3, r3, #21
    6ad6:	e001      	b.n	6adc <__aeabi_ui2d+0x2c>
    6ad8:	2300      	movs	r3, #0
    6ada:	2200      	movs	r2, #0
    6adc:	051b      	lsls	r3, r3, #20
    6ade:	4313      	orrs	r3, r2
    6ae0:	0020      	movs	r0, r4
    6ae2:	0019      	movs	r1, r3
    6ae4:	bd10      	pop	{r4, pc}
    6ae6:	0022      	movs	r2, r4
    6ae8:	380b      	subs	r0, #11
    6aea:	4082      	lsls	r2, r0
    6aec:	055b      	lsls	r3, r3, #21
    6aee:	0312      	lsls	r2, r2, #12
    6af0:	2400      	movs	r4, #0
    6af2:	0b12      	lsrs	r2, r2, #12
    6af4:	0d5b      	lsrs	r3, r3, #21
    6af6:	e7f1      	b.n	6adc <__aeabi_ui2d+0x2c>
    6af8:	0000041e 	.word	0x0000041e

00006afc <__aeabi_f2d>:
    6afc:	b570      	push	{r4, r5, r6, lr}
    6afe:	0043      	lsls	r3, r0, #1
    6b00:	0246      	lsls	r6, r0, #9
    6b02:	0fc4      	lsrs	r4, r0, #31
    6b04:	20fe      	movs	r0, #254	; 0xfe
    6b06:	0e1b      	lsrs	r3, r3, #24
    6b08:	1c59      	adds	r1, r3, #1
    6b0a:	0a75      	lsrs	r5, r6, #9
    6b0c:	4208      	tst	r0, r1
    6b0e:	d00c      	beq.n	6b2a <__aeabi_f2d+0x2e>
    6b10:	22e0      	movs	r2, #224	; 0xe0
    6b12:	0092      	lsls	r2, r2, #2
    6b14:	4694      	mov	ip, r2
    6b16:	076d      	lsls	r5, r5, #29
    6b18:	0b36      	lsrs	r6, r6, #12
    6b1a:	4463      	add	r3, ip
    6b1c:	051b      	lsls	r3, r3, #20
    6b1e:	4333      	orrs	r3, r6
    6b20:	07e4      	lsls	r4, r4, #31
    6b22:	4323      	orrs	r3, r4
    6b24:	0028      	movs	r0, r5
    6b26:	0019      	movs	r1, r3
    6b28:	bd70      	pop	{r4, r5, r6, pc}
    6b2a:	2b00      	cmp	r3, #0
    6b2c:	d114      	bne.n	6b58 <__aeabi_f2d+0x5c>
    6b2e:	2d00      	cmp	r5, #0
    6b30:	d01b      	beq.n	6b6a <__aeabi_f2d+0x6e>
    6b32:	0028      	movs	r0, r5
    6b34:	f001 f832 	bl	7b9c <__clzsi2>
    6b38:	280a      	cmp	r0, #10
    6b3a:	dc1c      	bgt.n	6b76 <__aeabi_f2d+0x7a>
    6b3c:	230b      	movs	r3, #11
    6b3e:	002e      	movs	r6, r5
    6b40:	1a1b      	subs	r3, r3, r0
    6b42:	40de      	lsrs	r6, r3
    6b44:	0003      	movs	r3, r0
    6b46:	3315      	adds	r3, #21
    6b48:	409d      	lsls	r5, r3
    6b4a:	4a0e      	ldr	r2, [pc, #56]	; (6b84 <__aeabi_f2d+0x88>)
    6b4c:	0336      	lsls	r6, r6, #12
    6b4e:	1a12      	subs	r2, r2, r0
    6b50:	0552      	lsls	r2, r2, #21
    6b52:	0b36      	lsrs	r6, r6, #12
    6b54:	0d53      	lsrs	r3, r2, #21
    6b56:	e7e1      	b.n	6b1c <__aeabi_f2d+0x20>
    6b58:	2d00      	cmp	r5, #0
    6b5a:	d009      	beq.n	6b70 <__aeabi_f2d+0x74>
    6b5c:	2280      	movs	r2, #128	; 0x80
    6b5e:	0b36      	lsrs	r6, r6, #12
    6b60:	0312      	lsls	r2, r2, #12
    6b62:	4b09      	ldr	r3, [pc, #36]	; (6b88 <__aeabi_f2d+0x8c>)
    6b64:	076d      	lsls	r5, r5, #29
    6b66:	4316      	orrs	r6, r2
    6b68:	e7d8      	b.n	6b1c <__aeabi_f2d+0x20>
    6b6a:	2300      	movs	r3, #0
    6b6c:	2600      	movs	r6, #0
    6b6e:	e7d5      	b.n	6b1c <__aeabi_f2d+0x20>
    6b70:	2600      	movs	r6, #0
    6b72:	4b05      	ldr	r3, [pc, #20]	; (6b88 <__aeabi_f2d+0x8c>)
    6b74:	e7d2      	b.n	6b1c <__aeabi_f2d+0x20>
    6b76:	0003      	movs	r3, r0
    6b78:	3b0b      	subs	r3, #11
    6b7a:	409d      	lsls	r5, r3
    6b7c:	002e      	movs	r6, r5
    6b7e:	2500      	movs	r5, #0
    6b80:	e7e3      	b.n	6b4a <__aeabi_f2d+0x4e>
    6b82:	46c0      	nop			; (mov r8, r8)
    6b84:	00000389 	.word	0x00000389
    6b88:	000007ff 	.word	0x000007ff

00006b8c <__aeabi_d2f>:
    6b8c:	0002      	movs	r2, r0
    6b8e:	004b      	lsls	r3, r1, #1
    6b90:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b92:	0d5b      	lsrs	r3, r3, #21
    6b94:	030c      	lsls	r4, r1, #12
    6b96:	4e3d      	ldr	r6, [pc, #244]	; (6c8c <__aeabi_d2f+0x100>)
    6b98:	0a64      	lsrs	r4, r4, #9
    6b9a:	0f40      	lsrs	r0, r0, #29
    6b9c:	1c5f      	adds	r7, r3, #1
    6b9e:	0fc9      	lsrs	r1, r1, #31
    6ba0:	4304      	orrs	r4, r0
    6ba2:	00d5      	lsls	r5, r2, #3
    6ba4:	4237      	tst	r7, r6
    6ba6:	d00a      	beq.n	6bbe <__aeabi_d2f+0x32>
    6ba8:	4839      	ldr	r0, [pc, #228]	; (6c90 <__aeabi_d2f+0x104>)
    6baa:	181e      	adds	r6, r3, r0
    6bac:	2efe      	cmp	r6, #254	; 0xfe
    6bae:	dd16      	ble.n	6bde <__aeabi_d2f+0x52>
    6bb0:	20ff      	movs	r0, #255	; 0xff
    6bb2:	2400      	movs	r4, #0
    6bb4:	05c0      	lsls	r0, r0, #23
    6bb6:	4320      	orrs	r0, r4
    6bb8:	07c9      	lsls	r1, r1, #31
    6bba:	4308      	orrs	r0, r1
    6bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d106      	bne.n	6bd0 <__aeabi_d2f+0x44>
    6bc2:	432c      	orrs	r4, r5
    6bc4:	d026      	beq.n	6c14 <__aeabi_d2f+0x88>
    6bc6:	2205      	movs	r2, #5
    6bc8:	0192      	lsls	r2, r2, #6
    6bca:	0a54      	lsrs	r4, r2, #9
    6bcc:	b2d8      	uxtb	r0, r3
    6bce:	e7f1      	b.n	6bb4 <__aeabi_d2f+0x28>
    6bd0:	4325      	orrs	r5, r4
    6bd2:	d0ed      	beq.n	6bb0 <__aeabi_d2f+0x24>
    6bd4:	2080      	movs	r0, #128	; 0x80
    6bd6:	03c0      	lsls	r0, r0, #15
    6bd8:	4304      	orrs	r4, r0
    6bda:	20ff      	movs	r0, #255	; 0xff
    6bdc:	e7ea      	b.n	6bb4 <__aeabi_d2f+0x28>
    6bde:	2e00      	cmp	r6, #0
    6be0:	dd1b      	ble.n	6c1a <__aeabi_d2f+0x8e>
    6be2:	0192      	lsls	r2, r2, #6
    6be4:	1e53      	subs	r3, r2, #1
    6be6:	419a      	sbcs	r2, r3
    6be8:	00e4      	lsls	r4, r4, #3
    6bea:	0f6d      	lsrs	r5, r5, #29
    6bec:	4322      	orrs	r2, r4
    6bee:	432a      	orrs	r2, r5
    6bf0:	0753      	lsls	r3, r2, #29
    6bf2:	d048      	beq.n	6c86 <__aeabi_d2f+0xfa>
    6bf4:	230f      	movs	r3, #15
    6bf6:	4013      	ands	r3, r2
    6bf8:	2b04      	cmp	r3, #4
    6bfa:	d000      	beq.n	6bfe <__aeabi_d2f+0x72>
    6bfc:	3204      	adds	r2, #4
    6bfe:	2380      	movs	r3, #128	; 0x80
    6c00:	04db      	lsls	r3, r3, #19
    6c02:	4013      	ands	r3, r2
    6c04:	d03f      	beq.n	6c86 <__aeabi_d2f+0xfa>
    6c06:	1c70      	adds	r0, r6, #1
    6c08:	2efe      	cmp	r6, #254	; 0xfe
    6c0a:	d0d1      	beq.n	6bb0 <__aeabi_d2f+0x24>
    6c0c:	0192      	lsls	r2, r2, #6
    6c0e:	0a54      	lsrs	r4, r2, #9
    6c10:	b2c0      	uxtb	r0, r0
    6c12:	e7cf      	b.n	6bb4 <__aeabi_d2f+0x28>
    6c14:	2000      	movs	r0, #0
    6c16:	2400      	movs	r4, #0
    6c18:	e7cc      	b.n	6bb4 <__aeabi_d2f+0x28>
    6c1a:	0032      	movs	r2, r6
    6c1c:	3217      	adds	r2, #23
    6c1e:	db22      	blt.n	6c66 <__aeabi_d2f+0xda>
    6c20:	2080      	movs	r0, #128	; 0x80
    6c22:	0400      	lsls	r0, r0, #16
    6c24:	4320      	orrs	r0, r4
    6c26:	241e      	movs	r4, #30
    6c28:	1ba4      	subs	r4, r4, r6
    6c2a:	2c1f      	cmp	r4, #31
    6c2c:	dd1d      	ble.n	6c6a <__aeabi_d2f+0xde>
    6c2e:	2202      	movs	r2, #2
    6c30:	4252      	negs	r2, r2
    6c32:	1b96      	subs	r6, r2, r6
    6c34:	0002      	movs	r2, r0
    6c36:	40f2      	lsrs	r2, r6
    6c38:	0016      	movs	r6, r2
    6c3a:	2c20      	cmp	r4, #32
    6c3c:	d004      	beq.n	6c48 <__aeabi_d2f+0xbc>
    6c3e:	4a15      	ldr	r2, [pc, #84]	; (6c94 <__aeabi_d2f+0x108>)
    6c40:	4694      	mov	ip, r2
    6c42:	4463      	add	r3, ip
    6c44:	4098      	lsls	r0, r3
    6c46:	4305      	orrs	r5, r0
    6c48:	002a      	movs	r2, r5
    6c4a:	1e53      	subs	r3, r2, #1
    6c4c:	419a      	sbcs	r2, r3
    6c4e:	4332      	orrs	r2, r6
    6c50:	2600      	movs	r6, #0
    6c52:	0753      	lsls	r3, r2, #29
    6c54:	d1ce      	bne.n	6bf4 <__aeabi_d2f+0x68>
    6c56:	2480      	movs	r4, #128	; 0x80
    6c58:	0013      	movs	r3, r2
    6c5a:	04e4      	lsls	r4, r4, #19
    6c5c:	2001      	movs	r0, #1
    6c5e:	4023      	ands	r3, r4
    6c60:	4222      	tst	r2, r4
    6c62:	d1d3      	bne.n	6c0c <__aeabi_d2f+0x80>
    6c64:	e7b0      	b.n	6bc8 <__aeabi_d2f+0x3c>
    6c66:	2300      	movs	r3, #0
    6c68:	e7ad      	b.n	6bc6 <__aeabi_d2f+0x3a>
    6c6a:	4a0b      	ldr	r2, [pc, #44]	; (6c98 <__aeabi_d2f+0x10c>)
    6c6c:	4694      	mov	ip, r2
    6c6e:	002a      	movs	r2, r5
    6c70:	40e2      	lsrs	r2, r4
    6c72:	0014      	movs	r4, r2
    6c74:	002a      	movs	r2, r5
    6c76:	4463      	add	r3, ip
    6c78:	409a      	lsls	r2, r3
    6c7a:	4098      	lsls	r0, r3
    6c7c:	1e55      	subs	r5, r2, #1
    6c7e:	41aa      	sbcs	r2, r5
    6c80:	4302      	orrs	r2, r0
    6c82:	4322      	orrs	r2, r4
    6c84:	e7e4      	b.n	6c50 <__aeabi_d2f+0xc4>
    6c86:	0033      	movs	r3, r6
    6c88:	e79e      	b.n	6bc8 <__aeabi_d2f+0x3c>
    6c8a:	46c0      	nop			; (mov r8, r8)
    6c8c:	000007fe 	.word	0x000007fe
    6c90:	fffffc80 	.word	0xfffffc80
    6c94:	fffffca2 	.word	0xfffffca2
    6c98:	fffffc82 	.word	0xfffffc82

00006c9c <selfrel_offset31>:
    6c9c:	6803      	ldr	r3, [r0, #0]
    6c9e:	005a      	lsls	r2, r3, #1
    6ca0:	d504      	bpl.n	6cac <selfrel_offset31+0x10>
    6ca2:	2280      	movs	r2, #128	; 0x80
    6ca4:	0612      	lsls	r2, r2, #24
    6ca6:	4313      	orrs	r3, r2
    6ca8:	18c0      	adds	r0, r0, r3
    6caa:	4770      	bx	lr
    6cac:	005b      	lsls	r3, r3, #1
    6cae:	085b      	lsrs	r3, r3, #1
    6cb0:	e7fa      	b.n	6ca8 <selfrel_offset31+0xc>
    6cb2:	46c0      	nop			; (mov r8, r8)

00006cb4 <search_EIT_table>:
    6cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cb6:	4657      	mov	r7, sl
    6cb8:	4645      	mov	r5, r8
    6cba:	46de      	mov	lr, fp
    6cbc:	464e      	mov	r6, r9
    6cbe:	4690      	mov	r8, r2
    6cc0:	b5e0      	push	{r5, r6, r7, lr}
    6cc2:	0007      	movs	r7, r0
    6cc4:	2900      	cmp	r1, #0
    6cc6:	d024      	beq.n	6d12 <search_EIT_table+0x5e>
    6cc8:	1e4b      	subs	r3, r1, #1
    6cca:	469a      	mov	sl, r3
    6ccc:	4699      	mov	r9, r3
    6cce:	2300      	movs	r3, #0
    6cd0:	469b      	mov	fp, r3
    6cd2:	465b      	mov	r3, fp
    6cd4:	444b      	add	r3, r9
    6cd6:	0fdc      	lsrs	r4, r3, #31
    6cd8:	18e4      	adds	r4, r4, r3
    6cda:	1064      	asrs	r4, r4, #1
    6cdc:	00e5      	lsls	r5, r4, #3
    6cde:	197e      	adds	r6, r7, r5
    6ce0:	0030      	movs	r0, r6
    6ce2:	f7ff ffdb 	bl	6c9c <selfrel_offset31>
    6ce6:	45a2      	cmp	sl, r4
    6ce8:	d00c      	beq.n	6d04 <search_EIT_table+0x50>
    6cea:	4540      	cmp	r0, r8
    6cec:	d80c      	bhi.n	6d08 <search_EIT_table+0x54>
    6cee:	0028      	movs	r0, r5
    6cf0:	3008      	adds	r0, #8
    6cf2:	1838      	adds	r0, r7, r0
    6cf4:	f7ff ffd2 	bl	6c9c <selfrel_offset31>
    6cf8:	3801      	subs	r0, #1
    6cfa:	4540      	cmp	r0, r8
    6cfc:	d20a      	bcs.n	6d14 <search_EIT_table+0x60>
    6cfe:	1c63      	adds	r3, r4, #1
    6d00:	469b      	mov	fp, r3
    6d02:	e7e6      	b.n	6cd2 <search_EIT_table+0x1e>
    6d04:	4540      	cmp	r0, r8
    6d06:	d905      	bls.n	6d14 <search_EIT_table+0x60>
    6d08:	45a3      	cmp	fp, r4
    6d0a:	d002      	beq.n	6d12 <search_EIT_table+0x5e>
    6d0c:	1e63      	subs	r3, r4, #1
    6d0e:	4699      	mov	r9, r3
    6d10:	e7df      	b.n	6cd2 <search_EIT_table+0x1e>
    6d12:	2600      	movs	r6, #0
    6d14:	0030      	movs	r0, r6
    6d16:	bcf0      	pop	{r4, r5, r6, r7}
    6d18:	46bb      	mov	fp, r7
    6d1a:	46b2      	mov	sl, r6
    6d1c:	46a9      	mov	r9, r5
    6d1e:	46a0      	mov	r8, r4
    6d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d22:	46c0      	nop			; (mov r8, r8)

00006d24 <__gnu_unwind_get_pr_addr>:
    6d24:	0003      	movs	r3, r0
    6d26:	2801      	cmp	r0, #1
    6d28:	d005      	beq.n	6d36 <__gnu_unwind_get_pr_addr+0x12>
    6d2a:	2802      	cmp	r0, #2
    6d2c:	d007      	beq.n	6d3e <__gnu_unwind_get_pr_addr+0x1a>
    6d2e:	2000      	movs	r0, #0
    6d30:	2b00      	cmp	r3, #0
    6d32:	d002      	beq.n	6d3a <__gnu_unwind_get_pr_addr+0x16>
    6d34:	4770      	bx	lr
    6d36:	4803      	ldr	r0, [pc, #12]	; (6d44 <__gnu_unwind_get_pr_addr+0x20>)
    6d38:	e7fc      	b.n	6d34 <__gnu_unwind_get_pr_addr+0x10>
    6d3a:	4803      	ldr	r0, [pc, #12]	; (6d48 <__gnu_unwind_get_pr_addr+0x24>)
    6d3c:	e7fa      	b.n	6d34 <__gnu_unwind_get_pr_addr+0x10>
    6d3e:	4803      	ldr	r0, [pc, #12]	; (6d4c <__gnu_unwind_get_pr_addr+0x28>)
    6d40:	e7f8      	b.n	6d34 <__gnu_unwind_get_pr_addr+0x10>
    6d42:	46c0      	nop			; (mov r8, r8)
    6d44:	0000744d 	.word	0x0000744d
    6d48:	00007441 	.word	0x00007441
    6d4c:	00007459 	.word	0x00007459

00006d50 <get_eit_entry>:
    6d50:	b530      	push	{r4, r5, lr}
    6d52:	4b23      	ldr	r3, [pc, #140]	; (6de0 <get_eit_entry+0x90>)
    6d54:	0005      	movs	r5, r0
    6d56:	b083      	sub	sp, #12
    6d58:	1e8c      	subs	r4, r1, #2
    6d5a:	2b00      	cmp	r3, #0
    6d5c:	d026      	beq.n	6dac <get_eit_entry+0x5c>
    6d5e:	0020      	movs	r0, r4
    6d60:	a901      	add	r1, sp, #4
    6d62:	e000      	b.n	6d66 <get_eit_entry+0x16>
    6d64:	bf00      	nop
    6d66:	2800      	cmp	r0, #0
    6d68:	d01c      	beq.n	6da4 <get_eit_entry+0x54>
    6d6a:	9901      	ldr	r1, [sp, #4]
    6d6c:	0022      	movs	r2, r4
    6d6e:	f7ff ffa1 	bl	6cb4 <search_EIT_table>
    6d72:	1e04      	subs	r4, r0, #0
    6d74:	d016      	beq.n	6da4 <get_eit_entry+0x54>
    6d76:	f7ff ff91 	bl	6c9c <selfrel_offset31>
    6d7a:	6863      	ldr	r3, [r4, #4]
    6d7c:	64a8      	str	r0, [r5, #72]	; 0x48
    6d7e:	2b01      	cmp	r3, #1
    6d80:	d02a      	beq.n	6dd8 <get_eit_entry+0x88>
    6d82:	1d20      	adds	r0, r4, #4
    6d84:	2b00      	cmp	r3, #0
    6d86:	db23      	blt.n	6dd0 <get_eit_entry+0x80>
    6d88:	f7ff ff88 	bl	6c9c <selfrel_offset31>
    6d8c:	2300      	movs	r3, #0
    6d8e:	64e8      	str	r0, [r5, #76]	; 0x4c
    6d90:	652b      	str	r3, [r5, #80]	; 0x50
    6d92:	6803      	ldr	r3, [r0, #0]
    6d94:	2b00      	cmp	r3, #0
    6d96:	db0f      	blt.n	6db8 <get_eit_entry+0x68>
    6d98:	f7ff ff80 	bl	6c9c <selfrel_offset31>
    6d9c:	6128      	str	r0, [r5, #16]
    6d9e:	2000      	movs	r0, #0
    6da0:	b003      	add	sp, #12
    6da2:	bd30      	pop	{r4, r5, pc}
    6da4:	2300      	movs	r3, #0
    6da6:	2009      	movs	r0, #9
    6da8:	612b      	str	r3, [r5, #16]
    6daa:	e7f9      	b.n	6da0 <get_eit_entry+0x50>
    6dac:	480d      	ldr	r0, [pc, #52]	; (6de4 <get_eit_entry+0x94>)
    6dae:	490e      	ldr	r1, [pc, #56]	; (6de8 <get_eit_entry+0x98>)
    6db0:	1a09      	subs	r1, r1, r0
    6db2:	10c9      	asrs	r1, r1, #3
    6db4:	9101      	str	r1, [sp, #4]
    6db6:	e7d9      	b.n	6d6c <get_eit_entry+0x1c>
    6db8:	0118      	lsls	r0, r3, #4
    6dba:	0f00      	lsrs	r0, r0, #28
    6dbc:	f7ff ffb2 	bl	6d24 <__gnu_unwind_get_pr_addr>
    6dc0:	6128      	str	r0, [r5, #16]
    6dc2:	1e43      	subs	r3, r0, #1
    6dc4:	4198      	sbcs	r0, r3
    6dc6:	2308      	movs	r3, #8
    6dc8:	4240      	negs	r0, r0
    6dca:	4398      	bics	r0, r3
    6dcc:	3009      	adds	r0, #9
    6dce:	e7e7      	b.n	6da0 <get_eit_entry+0x50>
    6dd0:	2301      	movs	r3, #1
    6dd2:	64e8      	str	r0, [r5, #76]	; 0x4c
    6dd4:	652b      	str	r3, [r5, #80]	; 0x50
    6dd6:	e7dc      	b.n	6d92 <get_eit_entry+0x42>
    6dd8:	2300      	movs	r3, #0
    6dda:	2005      	movs	r0, #5
    6ddc:	612b      	str	r3, [r5, #16]
    6dde:	e7df      	b.n	6da0 <get_eit_entry+0x50>
    6de0:	00000000 	.word	0x00000000
    6de4:	00017934 	.word	0x00017934
    6de8:	00017a04 	.word	0x00017a04

00006dec <restore_non_core_regs>:
    6dec:	6803      	ldr	r3, [r0, #0]
    6dee:	b510      	push	{r4, lr}
    6df0:	0004      	movs	r4, r0
    6df2:	07da      	lsls	r2, r3, #31
    6df4:	d405      	bmi.n	6e02 <restore_non_core_regs+0x16>
    6df6:	079b      	lsls	r3, r3, #30
    6df8:	d50a      	bpl.n	6e10 <restore_non_core_regs+0x24>
    6dfa:	3048      	adds	r0, #72	; 0x48
    6dfc:	f000 fc80 	bl	7700 <__gnu_Unwind_Restore_VFP_D>
    6e00:	6823      	ldr	r3, [r4, #0]
    6e02:	075a      	lsls	r2, r3, #29
    6e04:	d50a      	bpl.n	6e1c <restore_non_core_regs+0x30>
    6e06:	071a      	lsls	r2, r3, #28
    6e08:	d50f      	bpl.n	6e2a <restore_non_core_regs+0x3e>
    6e0a:	06db      	lsls	r3, r3, #27
    6e0c:	d515      	bpl.n	6e3a <restore_non_core_regs+0x4e>
    6e0e:	bd10      	pop	{r4, pc}
    6e10:	3048      	adds	r0, #72	; 0x48
    6e12:	f000 fc71 	bl	76f8 <__gnu_Unwind_Restore_VFP>
    6e16:	6823      	ldr	r3, [r4, #0]
    6e18:	075a      	lsls	r2, r3, #29
    6e1a:	d4f4      	bmi.n	6e06 <restore_non_core_regs+0x1a>
    6e1c:	0020      	movs	r0, r4
    6e1e:	30d0      	adds	r0, #208	; 0xd0
    6e20:	f000 fc72 	bl	7708 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    6e24:	6823      	ldr	r3, [r4, #0]
    6e26:	071a      	lsls	r2, r3, #28
    6e28:	d4ef      	bmi.n	6e0a <restore_non_core_regs+0x1e>
    6e2a:	0020      	movs	r0, r4
    6e2c:	3051      	adds	r0, #81	; 0x51
    6e2e:	30ff      	adds	r0, #255	; 0xff
    6e30:	f000 fc6e 	bl	7710 <__gnu_Unwind_Restore_WMMXD>
    6e34:	6823      	ldr	r3, [r4, #0]
    6e36:	06db      	lsls	r3, r3, #27
    6e38:	d4e9      	bmi.n	6e0e <restore_non_core_regs+0x22>
    6e3a:	0020      	movs	r0, r4
    6e3c:	30d1      	adds	r0, #209	; 0xd1
    6e3e:	30ff      	adds	r0, #255	; 0xff
    6e40:	f000 fc6a 	bl	7718 <__gnu_Unwind_Restore_WMMXC>
    6e44:	e7e3      	b.n	6e0e <restore_non_core_regs+0x22>
    6e46:	46c0      	nop			; (mov r8, r8)

00006e48 <__gnu_unwind_24bit.constprop.0>:
    6e48:	2009      	movs	r0, #9
    6e4a:	4770      	bx	lr

00006e4c <_Unwind_decode_typeinfo_ptr.constprop.0>:
    6e4c:	0003      	movs	r3, r0
    6e4e:	6800      	ldr	r0, [r0, #0]
    6e50:	2800      	cmp	r0, #0
    6e52:	d000      	beq.n	6e56 <_Unwind_decode_typeinfo_ptr.constprop.0+0xa>
    6e54:	18c0      	adds	r0, r0, r3
    6e56:	4770      	bx	lr

00006e58 <_Unwind_DebugHook>:
    6e58:	4770      	bx	lr
    6e5a:	46c0      	nop			; (mov r8, r8)

00006e5c <unwind_phase2>:
    6e5c:	b570      	push	{r4, r5, r6, lr}
    6e5e:	0004      	movs	r4, r0
    6e60:	000d      	movs	r5, r1
    6e62:	0020      	movs	r0, r4
    6e64:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6e66:	f7ff ff73 	bl	6d50 <get_eit_entry>
    6e6a:	2800      	cmp	r0, #0
    6e6c:	d111      	bne.n	6e92 <unwind_phase2+0x36>
    6e6e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    6e70:	002a      	movs	r2, r5
    6e72:	6163      	str	r3, [r4, #20]
    6e74:	0021      	movs	r1, r4
    6e76:	2001      	movs	r0, #1
    6e78:	6923      	ldr	r3, [r4, #16]
    6e7a:	4798      	blx	r3
    6e7c:	2808      	cmp	r0, #8
    6e7e:	d0f0      	beq.n	6e62 <unwind_phase2+0x6>
    6e80:	2807      	cmp	r0, #7
    6e82:	d106      	bne.n	6e92 <unwind_phase2+0x36>
    6e84:	2000      	movs	r0, #0
    6e86:	6c29      	ldr	r1, [r5, #64]	; 0x40
    6e88:	f7ff ffe6 	bl	6e58 <_Unwind_DebugHook>
    6e8c:	1d28      	adds	r0, r5, #4
    6e8e:	f000 fc1d 	bl	76cc <__restore_core_regs>
    6e92:	f006 fef9 	bl	dc88 <abort>
    6e96:	46c0      	nop			; (mov r8, r8)

00006e98 <unwind_phase2_forced>:
    6e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e9a:	46ce      	mov	lr, r9
    6e9c:	4647      	mov	r7, r8
    6e9e:	b580      	push	{r7, lr}
    6ea0:	68c3      	ldr	r3, [r0, #12]
    6ea2:	4c30      	ldr	r4, [pc, #192]	; (6f64 <unwind_phase2_forced+0xcc>)
    6ea4:	4698      	mov	r8, r3
    6ea6:	44a5      	add	sp, r4
    6ea8:	6983      	ldr	r3, [r0, #24]
    6eaa:	0004      	movs	r4, r0
    6eac:	0016      	movs	r6, r2
    6eae:	3104      	adds	r1, #4
    6eb0:	2240      	movs	r2, #64	; 0x40
    6eb2:	a805      	add	r0, sp, #20
    6eb4:	4699      	mov	r9, r3
    6eb6:	f007 fded 	bl	ea94 <memcpy>
    6eba:	2300      	movs	r3, #0
    6ebc:	9304      	str	r3, [sp, #16]
    6ebe:	e025      	b.n	6f0c <unwind_phase2_forced+0x74>
    6ec0:	22f0      	movs	r2, #240	; 0xf0
    6ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6ec4:	0052      	lsls	r2, r2, #1
    6ec6:	6163      	str	r3, [r4, #20]
    6ec8:	a904      	add	r1, sp, #16
    6eca:	a87c      	add	r0, sp, #496	; 0x1f0
    6ecc:	9303      	str	r3, [sp, #12]
    6ece:	f007 fde1 	bl	ea94 <memcpy>
    6ed2:	0021      	movs	r1, r4
    6ed4:	0028      	movs	r0, r5
    6ed6:	6923      	ldr	r3, [r4, #16]
    6ed8:	aa7c      	add	r2, sp, #496	; 0x1f0
    6eda:	4798      	blx	r3
    6edc:	9b8a      	ldr	r3, [sp, #552]	; 0x228
    6ede:	0005      	movs	r5, r0
    6ee0:	9303      	str	r3, [sp, #12]
    6ee2:	9315      	str	r3, [sp, #84]	; 0x54
    6ee4:	464b      	mov	r3, r9
    6ee6:	9301      	str	r3, [sp, #4]
    6ee8:	ab04      	add	r3, sp, #16
    6eea:	9300      	str	r3, [sp, #0]
    6eec:	0022      	movs	r2, r4
    6eee:	0023      	movs	r3, r4
    6ef0:	0031      	movs	r1, r6
    6ef2:	2001      	movs	r0, #1
    6ef4:	47c0      	blx	r8
    6ef6:	2800      	cmp	r0, #0
    6ef8:	d122      	bne.n	6f40 <unwind_phase2_forced+0xa8>
    6efa:	22f0      	movs	r2, #240	; 0xf0
    6efc:	a97c      	add	r1, sp, #496	; 0x1f0
    6efe:	0052      	lsls	r2, r2, #1
    6f00:	a804      	add	r0, sp, #16
    6f02:	f007 fdc7 	bl	ea94 <memcpy>
    6f06:	2600      	movs	r6, #0
    6f08:	2d08      	cmp	r5, #8
    6f0a:	d122      	bne.n	6f52 <unwind_phase2_forced+0xba>
    6f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6f0e:	0020      	movs	r0, r4
    6f10:	0019      	movs	r1, r3
    6f12:	9303      	str	r3, [sp, #12]
    6f14:	f7ff ff1c 	bl	6d50 <get_eit_entry>
    6f18:	3609      	adds	r6, #9
    6f1a:	0007      	movs	r7, r0
    6f1c:	b2f5      	uxtb	r5, r6
    6f1e:	2800      	cmp	r0, #0
    6f20:	d0ce      	beq.n	6ec0 <unwind_phase2_forced+0x28>
    6f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f24:	2110      	movs	r1, #16
    6f26:	9303      	str	r3, [sp, #12]
    6f28:	9315      	str	r3, [sp, #84]	; 0x54
    6f2a:	464b      	mov	r3, r9
    6f2c:	9301      	str	r3, [sp, #4]
    6f2e:	ab04      	add	r3, sp, #16
    6f30:	9300      	str	r3, [sp, #0]
    6f32:	0022      	movs	r2, r4
    6f34:	0023      	movs	r3, r4
    6f36:	2001      	movs	r0, #1
    6f38:	4329      	orrs	r1, r5
    6f3a:	47c0      	blx	r8
    6f3c:	2800      	cmp	r0, #0
    6f3e:	d000      	beq.n	6f42 <unwind_phase2_forced+0xaa>
    6f40:	2709      	movs	r7, #9
    6f42:	0038      	movs	r0, r7
    6f44:	23f5      	movs	r3, #245	; 0xf5
    6f46:	009b      	lsls	r3, r3, #2
    6f48:	449d      	add	sp, r3
    6f4a:	bcc0      	pop	{r6, r7}
    6f4c:	46b9      	mov	r9, r7
    6f4e:	46b0      	mov	r8, r6
    6f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f52:	2d07      	cmp	r5, #7
    6f54:	d1f4      	bne.n	6f40 <unwind_phase2_forced+0xa8>
    6f56:	0030      	movs	r0, r6
    6f58:	9914      	ldr	r1, [sp, #80]	; 0x50
    6f5a:	f7ff ff7d 	bl	6e58 <_Unwind_DebugHook>
    6f5e:	a805      	add	r0, sp, #20
    6f60:	f000 fbb4 	bl	76cc <__restore_core_regs>
    6f64:	fffffc2c 	.word	0xfffffc2c

00006f68 <_Unwind_GetCFA>:
    6f68:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6f6a:	4770      	bx	lr

00006f6c <__gnu_Unwind_RaiseException>:
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6f70:	b0fa      	sub	sp, #488	; 0x1e8
    6f72:	640b      	str	r3, [r1, #64]	; 0x40
    6f74:	0005      	movs	r5, r0
    6f76:	000e      	movs	r6, r1
    6f78:	2240      	movs	r2, #64	; 0x40
    6f7a:	3104      	adds	r1, #4
    6f7c:	a803      	add	r0, sp, #12
    6f7e:	f007 fd89 	bl	ea94 <memcpy>
    6f82:	2301      	movs	r3, #1
    6f84:	425b      	negs	r3, r3
    6f86:	9302      	str	r3, [sp, #8]
    6f88:	e006      	b.n	6f98 <__gnu_Unwind_RaiseException+0x2c>
    6f8a:	0029      	movs	r1, r5
    6f8c:	692b      	ldr	r3, [r5, #16]
    6f8e:	aa02      	add	r2, sp, #8
    6f90:	4798      	blx	r3
    6f92:	0004      	movs	r4, r0
    6f94:	2808      	cmp	r0, #8
    6f96:	d10a      	bne.n	6fae <__gnu_Unwind_RaiseException+0x42>
    6f98:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6f9a:	0028      	movs	r0, r5
    6f9c:	0019      	movs	r1, r3
    6f9e:	9301      	str	r3, [sp, #4]
    6fa0:	f7ff fed6 	bl	6d50 <get_eit_entry>
    6fa4:	2800      	cmp	r0, #0
    6fa6:	d0f0      	beq.n	6f8a <__gnu_Unwind_RaiseException+0x1e>
    6fa8:	2009      	movs	r0, #9
    6faa:	b07a      	add	sp, #488	; 0x1e8
    6fac:	bd70      	pop	{r4, r5, r6, pc}
    6fae:	a802      	add	r0, sp, #8
    6fb0:	f7ff ff1c 	bl	6dec <restore_non_core_regs>
    6fb4:	2c06      	cmp	r4, #6
    6fb6:	d1f7      	bne.n	6fa8 <__gnu_Unwind_RaiseException+0x3c>
    6fb8:	0031      	movs	r1, r6
    6fba:	0028      	movs	r0, r5
    6fbc:	f7ff ff4e 	bl	6e5c <unwind_phase2>

00006fc0 <__gnu_Unwind_ForcedUnwind>:
    6fc0:	b510      	push	{r4, lr}
    6fc2:	6182      	str	r2, [r0, #24]
    6fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    6fc6:	60c1      	str	r1, [r0, #12]
    6fc8:	641a      	str	r2, [r3, #64]	; 0x40
    6fca:	0019      	movs	r1, r3
    6fcc:	2200      	movs	r2, #0
    6fce:	f7ff ff63 	bl	6e98 <unwind_phase2_forced>
    6fd2:	bd10      	pop	{r4, pc}

00006fd4 <__gnu_Unwind_Resume>:
    6fd4:	6943      	ldr	r3, [r0, #20]
    6fd6:	b570      	push	{r4, r5, r6, lr}
    6fd8:	640b      	str	r3, [r1, #64]	; 0x40
    6fda:	68c3      	ldr	r3, [r0, #12]
    6fdc:	0004      	movs	r4, r0
    6fde:	000d      	movs	r5, r1
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d113      	bne.n	700c <__gnu_Unwind_Resume+0x38>
    6fe4:	000a      	movs	r2, r1
    6fe6:	6923      	ldr	r3, [r4, #16]
    6fe8:	0001      	movs	r1, r0
    6fea:	2002      	movs	r0, #2
    6fec:	4798      	blx	r3
    6fee:	2807      	cmp	r0, #7
    6ff0:	d005      	beq.n	6ffe <__gnu_Unwind_Resume+0x2a>
    6ff2:	2808      	cmp	r0, #8
    6ff4:	d10f      	bne.n	7016 <__gnu_Unwind_Resume+0x42>
    6ff6:	0029      	movs	r1, r5
    6ff8:	0020      	movs	r0, r4
    6ffa:	f7ff ff2f 	bl	6e5c <unwind_phase2>
    6ffe:	2000      	movs	r0, #0
    7000:	6c29      	ldr	r1, [r5, #64]	; 0x40
    7002:	f7ff ff29 	bl	6e58 <_Unwind_DebugHook>
    7006:	1d28      	adds	r0, r5, #4
    7008:	f000 fb60 	bl	76cc <__restore_core_regs>
    700c:	2201      	movs	r2, #1
    700e:	f7ff ff43 	bl	6e98 <unwind_phase2_forced>
    7012:	f006 fe39 	bl	dc88 <abort>
    7016:	f006 fe37 	bl	dc88 <abort>
    701a:	46c0      	nop			; (mov r8, r8)

0000701c <__gnu_Unwind_Resume_or_Rethrow>:
    701c:	68c3      	ldr	r3, [r0, #12]
    701e:	b510      	push	{r4, lr}
    7020:	2b00      	cmp	r3, #0
    7022:	d005      	beq.n	7030 <__gnu_Unwind_Resume_or_Rethrow+0x14>
    7024:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7026:	2200      	movs	r2, #0
    7028:	640b      	str	r3, [r1, #64]	; 0x40
    702a:	f7ff ff35 	bl	6e98 <unwind_phase2_forced>
    702e:	bd10      	pop	{r4, pc}
    7030:	f7ff ff9c 	bl	6f6c <__gnu_Unwind_RaiseException>
    7034:	e7fb      	b.n	702e <__gnu_Unwind_Resume_or_Rethrow+0x12>
    7036:	46c0      	nop			; (mov r8, r8)

00007038 <_Unwind_Complete>:
    7038:	4770      	bx	lr
    703a:	46c0      	nop			; (mov r8, r8)

0000703c <_Unwind_DeleteException>:
    703c:	6883      	ldr	r3, [r0, #8]
    703e:	0001      	movs	r1, r0
    7040:	b510      	push	{r4, lr}
    7042:	2b00      	cmp	r3, #0
    7044:	d001      	beq.n	704a <_Unwind_DeleteException+0xe>
    7046:	2001      	movs	r0, #1
    7048:	4798      	blx	r3
    704a:	bd10      	pop	{r4, pc}

0000704c <_Unwind_VRS_Get>:
    704c:	2901      	cmp	r1, #1
    704e:	d015      	beq.n	707c <_Unwind_VRS_Get+0x30>
    7050:	d80a      	bhi.n	7068 <_Unwind_VRS_Get+0x1c>
    7052:	2b00      	cmp	r3, #0
    7054:	d110      	bne.n	7078 <_Unwind_VRS_Get+0x2c>
    7056:	2a0f      	cmp	r2, #15
    7058:	d80e      	bhi.n	7078 <_Unwind_VRS_Get+0x2c>
    705a:	0092      	lsls	r2, r2, #2
    705c:	1882      	adds	r2, r0, r2
    705e:	6852      	ldr	r2, [r2, #4]
    7060:	9b00      	ldr	r3, [sp, #0]
    7062:	2000      	movs	r0, #0
    7064:	601a      	str	r2, [r3, #0]
    7066:	e006      	b.n	7076 <_Unwind_VRS_Get+0x2a>
    7068:	2001      	movs	r0, #1
    706a:	3903      	subs	r1, #3
    706c:	b2c9      	uxtb	r1, r1
    706e:	4288      	cmp	r0, r1
    7070:	4180      	sbcs	r0, r0
    7072:	4240      	negs	r0, r0
    7074:	3001      	adds	r0, #1
    7076:	4770      	bx	lr
    7078:	2002      	movs	r0, #2
    707a:	e7fc      	b.n	7076 <_Unwind_VRS_Get+0x2a>
    707c:	2001      	movs	r0, #1
    707e:	e7fa      	b.n	7076 <_Unwind_VRS_Get+0x2a>

00007080 <_Unwind_GetGR>:
    7080:	b500      	push	{lr}
    7082:	b085      	sub	sp, #20
    7084:	ab03      	add	r3, sp, #12
    7086:	000a      	movs	r2, r1
    7088:	9300      	str	r3, [sp, #0]
    708a:	2100      	movs	r1, #0
    708c:	2300      	movs	r3, #0
    708e:	f7ff ffdd 	bl	704c <_Unwind_VRS_Get>
    7092:	9803      	ldr	r0, [sp, #12]
    7094:	b005      	add	sp, #20
    7096:	bd00      	pop	{pc}

00007098 <_Unwind_VRS_Set>:
    7098:	2901      	cmp	r1, #1
    709a:	d015      	beq.n	70c8 <_Unwind_VRS_Set+0x30>
    709c:	d80a      	bhi.n	70b4 <_Unwind_VRS_Set+0x1c>
    709e:	2b00      	cmp	r3, #0
    70a0:	d110      	bne.n	70c4 <_Unwind_VRS_Set+0x2c>
    70a2:	2a0f      	cmp	r2, #15
    70a4:	d80e      	bhi.n	70c4 <_Unwind_VRS_Set+0x2c>
    70a6:	9b00      	ldr	r3, [sp, #0]
    70a8:	0092      	lsls	r2, r2, #2
    70aa:	681b      	ldr	r3, [r3, #0]
    70ac:	1882      	adds	r2, r0, r2
    70ae:	6053      	str	r3, [r2, #4]
    70b0:	2000      	movs	r0, #0
    70b2:	e006      	b.n	70c2 <_Unwind_VRS_Set+0x2a>
    70b4:	2001      	movs	r0, #1
    70b6:	3903      	subs	r1, #3
    70b8:	b2c9      	uxtb	r1, r1
    70ba:	4288      	cmp	r0, r1
    70bc:	4180      	sbcs	r0, r0
    70be:	4240      	negs	r0, r0
    70c0:	3001      	adds	r0, #1
    70c2:	4770      	bx	lr
    70c4:	2002      	movs	r0, #2
    70c6:	e7fc      	b.n	70c2 <_Unwind_VRS_Set+0x2a>
    70c8:	2001      	movs	r0, #1
    70ca:	e7fa      	b.n	70c2 <_Unwind_VRS_Set+0x2a>

000070cc <_Unwind_SetGR>:
    70cc:	b500      	push	{lr}
    70ce:	b085      	sub	sp, #20
    70d0:	ab03      	add	r3, sp, #12
    70d2:	9203      	str	r2, [sp, #12]
    70d4:	9300      	str	r3, [sp, #0]
    70d6:	000a      	movs	r2, r1
    70d8:	2300      	movs	r3, #0
    70da:	2100      	movs	r1, #0
    70dc:	f7ff ffdc 	bl	7098 <_Unwind_VRS_Set>
    70e0:	b005      	add	sp, #20
    70e2:	bd00      	pop	{pc}

000070e4 <__gnu_Unwind_Backtrace>:
    70e4:	b570      	push	{r4, r5, r6, lr}
    70e6:	4c1a      	ldr	r4, [pc, #104]	; (7150 <__gnu_Unwind_Backtrace+0x6c>)
    70e8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    70ea:	44a5      	add	sp, r4
    70ec:	6413      	str	r3, [r2, #64]	; 0x40
    70ee:	0005      	movs	r5, r0
    70f0:	000c      	movs	r4, r1
    70f2:	a819      	add	r0, sp, #100	; 0x64
    70f4:	1d11      	adds	r1, r2, #4
    70f6:	2240      	movs	r2, #64	; 0x40
    70f8:	f007 fccc 	bl	ea94 <memcpy>
    70fc:	2301      	movs	r3, #1
    70fe:	425b      	negs	r3, r3
    7100:	9318      	str	r3, [sp, #96]	; 0x60
    7102:	e014      	b.n	712e <__gnu_Unwind_Backtrace+0x4a>
    7104:	210c      	movs	r1, #12
    7106:	a818      	add	r0, sp, #96	; 0x60
    7108:	aa02      	add	r2, sp, #8
    710a:	f7ff ffdf 	bl	70cc <_Unwind_SetGR>
    710e:	0021      	movs	r1, r4
    7110:	a818      	add	r0, sp, #96	; 0x60
    7112:	47a8      	blx	r5
    7114:	2800      	cmp	r0, #0
    7116:	d112      	bne.n	713e <__gnu_Unwind_Backtrace+0x5a>
    7118:	9b06      	ldr	r3, [sp, #24]
    711a:	aa18      	add	r2, sp, #96	; 0x60
    711c:	a902      	add	r1, sp, #8
    711e:	3008      	adds	r0, #8
    7120:	9301      	str	r3, [sp, #4]
    7122:	4798      	blx	r3
    7124:	0006      	movs	r6, r0
    7126:	2805      	cmp	r0, #5
    7128:	d00a      	beq.n	7140 <__gnu_Unwind_Backtrace+0x5c>
    712a:	2809      	cmp	r0, #9
    712c:	d007      	beq.n	713e <__gnu_Unwind_Backtrace+0x5a>
    712e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    7130:	a802      	add	r0, sp, #8
    7132:	0019      	movs	r1, r3
    7134:	9301      	str	r3, [sp, #4]
    7136:	f7ff fe0b 	bl	6d50 <get_eit_entry>
    713a:	2800      	cmp	r0, #0
    713c:	d0e2      	beq.n	7104 <__gnu_Unwind_Backtrace+0x20>
    713e:	2609      	movs	r6, #9
    7140:	a818      	add	r0, sp, #96	; 0x60
    7142:	f7ff fe53 	bl	6dec <restore_non_core_regs>
    7146:	0030      	movs	r0, r6
    7148:	2390      	movs	r3, #144	; 0x90
    714a:	009b      	lsls	r3, r3, #2
    714c:	449d      	add	sp, r3
    714e:	bd70      	pop	{r4, r5, r6, pc}
    7150:	fffffdc0 	.word	0xfffffdc0

00007154 <__gnu_unwind_pr_common>:
    7154:	b5f0      	push	{r4, r5, r6, r7, lr}
    7156:	4657      	mov	r7, sl
    7158:	4692      	mov	sl, r2
    715a:	2203      	movs	r2, #3
    715c:	4645      	mov	r5, r8
    715e:	464e      	mov	r6, r9
    7160:	46de      	mov	lr, fp
    7162:	4699      	mov	r9, r3
    7164:	0013      	movs	r3, r2
    7166:	b5e0      	push	{r5, r6, r7, lr}
    7168:	4688      	mov	r8, r1
    716a:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
    716c:	4649      	mov	r1, r9
    716e:	b089      	sub	sp, #36	; 0x24
    7170:	4003      	ands	r3, r0
    7172:	9300      	str	r3, [sp, #0]
    7174:	cd08      	ldmia	r5!, {r3}
    7176:	9506      	str	r5, [sp, #24]
    7178:	2900      	cmp	r1, #0
    717a:	d100      	bne.n	717e <__gnu_unwind_pr_common+0x2a>
    717c:	e080      	b.n	7280 <__gnu_unwind_pr_common+0x12c>
    717e:	0c1a      	lsrs	r2, r3, #16
    7180:	041b      	lsls	r3, r3, #16
    7182:	9305      	str	r3, [sp, #20]
    7184:	2302      	movs	r3, #2
    7186:	a904      	add	r1, sp, #16
    7188:	730b      	strb	r3, [r1, #12]
    718a:	33fd      	adds	r3, #253	; 0xfd
    718c:	4013      	ands	r3, r2
    718e:	009b      	lsls	r3, r3, #2
    7190:	734a      	strb	r2, [r1, #13]
    7192:	18ed      	adds	r5, r5, r3
    7194:	9b00      	ldr	r3, [sp, #0]
    7196:	2b02      	cmp	r3, #2
    7198:	d101      	bne.n	719e <__gnu_unwind_pr_common+0x4a>
    719a:	4643      	mov	r3, r8
    719c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    719e:	4643      	mov	r3, r8
    71a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    71a2:	07db      	lsls	r3, r3, #31
    71a4:	d50f      	bpl.n	71c6 <__gnu_unwind_pr_common+0x72>
    71a6:	4650      	mov	r0, sl
    71a8:	a905      	add	r1, sp, #20
    71aa:	f000 fb5b 	bl	7864 <__gnu_unwind_execute>
    71ae:	2800      	cmp	r0, #0
    71b0:	d101      	bne.n	71b6 <__gnu_unwind_pr_common+0x62>
    71b2:	2008      	movs	r0, #8
    71b4:	e000      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    71b6:	2009      	movs	r0, #9
    71b8:	b009      	add	sp, #36	; 0x24
    71ba:	bcf0      	pop	{r4, r5, r6, r7}
    71bc:	46bb      	mov	fp, r7
    71be:	46b2      	mov	sl, r6
    71c0:	46a9      	mov	r9, r5
    71c2:	46a0      	mov	r8, r4
    71c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71c6:	682f      	ldr	r7, [r5, #0]
    71c8:	2f00      	cmp	r7, #0
    71ca:	d0ec      	beq.n	71a6 <__gnu_unwind_pr_common+0x52>
    71cc:	2308      	movs	r3, #8
    71ce:	4003      	ands	r3, r0
    71d0:	9302      	str	r3, [sp, #8]
    71d2:	2300      	movs	r3, #0
    71d4:	9301      	str	r3, [sp, #4]
    71d6:	3301      	adds	r3, #1
    71d8:	4654      	mov	r4, sl
    71da:	469b      	mov	fp, r3
    71dc:	4646      	mov	r6, r8
    71de:	46ba      	mov	sl, r7
    71e0:	464b      	mov	r3, r9
    71e2:	2b02      	cmp	r3, #2
    71e4:	d049      	beq.n	727a <__gnu_unwind_pr_common+0x126>
    71e6:	882b      	ldrh	r3, [r5, #0]
    71e8:	886f      	ldrh	r7, [r5, #2]
    71ea:	469a      	mov	sl, r3
    71ec:	3504      	adds	r5, #4
    71ee:	465a      	mov	r2, fp
    71f0:	003b      	movs	r3, r7
    71f2:	4393      	bics	r3, r2
    71f4:	6cb2      	ldr	r2, [r6, #72]	; 0x48
    71f6:	210f      	movs	r1, #15
    71f8:	4690      	mov	r8, r2
    71fa:	0020      	movs	r0, r4
    71fc:	4498      	add	r8, r3
    71fe:	f7ff ff3f 	bl	7080 <_Unwind_GetGR>
    7202:	2300      	movs	r3, #0
    7204:	4580      	cmp	r8, r0
    7206:	d806      	bhi.n	7216 <__gnu_unwind_pr_common+0xc2>
    7208:	4653      	mov	r3, sl
    720a:	465a      	mov	r2, fp
    720c:	4393      	bics	r3, r2
    720e:	4443      	add	r3, r8
    7210:	4298      	cmp	r0, r3
    7212:	419b      	sbcs	r3, r3
    7214:	425b      	negs	r3, r3
    7216:	2202      	movs	r2, #2
    7218:	007f      	lsls	r7, r7, #1
    721a:	4017      	ands	r7, r2
    721c:	4659      	mov	r1, fp
    721e:	4652      	mov	r2, sl
    7220:	400a      	ands	r2, r1
    7222:	4317      	orrs	r7, r2
    7224:	2f01      	cmp	r7, #1
    7226:	d030      	beq.n	728a <__gnu_unwind_pr_common+0x136>
    7228:	2f02      	cmp	r7, #2
    722a:	d04c      	beq.n	72c6 <__gnu_unwind_pr_common+0x172>
    722c:	2f00      	cmp	r7, #0
    722e:	d1c2      	bne.n	71b6 <__gnu_unwind_pr_common+0x62>
    7230:	9a00      	ldr	r2, [sp, #0]
    7232:	2a00      	cmp	r2, #0
    7234:	d002      	beq.n	723c <__gnu_unwind_pr_common+0xe8>
    7236:	2b00      	cmp	r3, #0
    7238:	d000      	beq.n	723c <__gnu_unwind_pr_common+0xe8>
    723a:	e09b      	b.n	7374 <__gnu_unwind_pr_common+0x220>
    723c:	3504      	adds	r5, #4
    723e:	682b      	ldr	r3, [r5, #0]
    7240:	469a      	mov	sl, r3
    7242:	2b00      	cmp	r3, #0
    7244:	d1cc      	bne.n	71e0 <__gnu_unwind_pr_common+0x8c>
    7246:	0020      	movs	r0, r4
    7248:	a905      	add	r1, sp, #20
    724a:	46a2      	mov	sl, r4
    724c:	f000 fb0a 	bl	7864 <__gnu_unwind_execute>
    7250:	2800      	cmp	r0, #0
    7252:	d1b0      	bne.n	71b6 <__gnu_unwind_pr_common+0x62>
    7254:	9b01      	ldr	r3, [sp, #4]
    7256:	2b00      	cmp	r3, #0
    7258:	d0ab      	beq.n	71b2 <__gnu_unwind_pr_common+0x5e>
    725a:	210f      	movs	r1, #15
    725c:	4650      	mov	r0, sl
    725e:	f7ff ff0f 	bl	7080 <_Unwind_GetGR>
    7262:	210e      	movs	r1, #14
    7264:	0002      	movs	r2, r0
    7266:	4650      	mov	r0, sl
    7268:	f7ff ff30 	bl	70cc <_Unwind_SetGR>
    726c:	4650      	mov	r0, sl
    726e:	210f      	movs	r1, #15
    7270:	4a72      	ldr	r2, [pc, #456]	; (743c <__gnu_unwind_pr_common+0x2e8>)
    7272:	f7ff ff2b 	bl	70cc <_Unwind_SetGR>
    7276:	2007      	movs	r0, #7
    7278:	e79e      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    727a:	686f      	ldr	r7, [r5, #4]
    727c:	3508      	adds	r5, #8
    727e:	e7b6      	b.n	71ee <__gnu_unwind_pr_common+0x9a>
    7280:	021b      	lsls	r3, r3, #8
    7282:	9305      	str	r3, [sp, #20]
    7284:	ab04      	add	r3, sp, #16
    7286:	819a      	strh	r2, [r3, #12]
    7288:	e784      	b.n	7194 <__gnu_unwind_pr_common+0x40>
    728a:	9a00      	ldr	r2, [sp, #0]
    728c:	2a00      	cmp	r2, #0
    728e:	d149      	bne.n	7324 <__gnu_unwind_pr_common+0x1d0>
    7290:	2b00      	cmp	r3, #0
    7292:	d016      	beq.n	72c2 <__gnu_unwind_pr_common+0x16e>
    7294:	682b      	ldr	r3, [r5, #0]
    7296:	0fdf      	lsrs	r7, r3, #31
    7298:	686b      	ldr	r3, [r5, #4]
    729a:	1c9a      	adds	r2, r3, #2
    729c:	d100      	bne.n	72a0 <__gnu_unwind_pr_common+0x14c>
    729e:	e78a      	b.n	71b6 <__gnu_unwind_pr_common+0x62>
    72a0:	0032      	movs	r2, r6
    72a2:	3258      	adds	r2, #88	; 0x58
    72a4:	9204      	str	r2, [sp, #16]
    72a6:	3301      	adds	r3, #1
    72a8:	d100      	bne.n	72ac <__gnu_unwind_pr_common+0x158>
    72aa:	e0b6      	b.n	741a <__gnu_unwind_pr_common+0x2c6>
    72ac:	1d28      	adds	r0, r5, #4
    72ae:	f7ff fdcd 	bl	6e4c <_Unwind_decode_typeinfo_ptr.constprop.0>
    72b2:	003a      	movs	r2, r7
    72b4:	0001      	movs	r1, r0
    72b6:	ab04      	add	r3, sp, #16
    72b8:	0030      	movs	r0, r6
    72ba:	e000      	b.n	72be <__gnu_unwind_pr_common+0x16a>
    72bc:	bf00      	nop
    72be:	2800      	cmp	r0, #0
    72c0:	d16c      	bne.n	739c <__gnu_unwind_pr_common+0x248>
    72c2:	3508      	adds	r5, #8
    72c4:	e7bb      	b.n	723e <__gnu_unwind_pr_common+0xea>
    72c6:	682a      	ldr	r2, [r5, #0]
    72c8:	9900      	ldr	r1, [sp, #0]
    72ca:	0057      	lsls	r7, r2, #1
    72cc:	087f      	lsrs	r7, r7, #1
    72ce:	2900      	cmp	r1, #0
    72d0:	d10d      	bne.n	72ee <__gnu_unwind_pr_common+0x19a>
    72d2:	2b00      	cmp	r3, #0
    72d4:	d004      	beq.n	72e0 <__gnu_unwind_pr_common+0x18c>
    72d6:	9b02      	ldr	r3, [sp, #8]
    72d8:	2b00      	cmp	r3, #0
    72da:	d072      	beq.n	73c2 <__gnu_unwind_pr_common+0x26e>
    72dc:	2f00      	cmp	r7, #0
    72de:	d03c      	beq.n	735a <__gnu_unwind_pr_common+0x206>
    72e0:	2a00      	cmp	r2, #0
    72e2:	da00      	bge.n	72e6 <__gnu_unwind_pr_common+0x192>
    72e4:	3504      	adds	r5, #4
    72e6:	3701      	adds	r7, #1
    72e8:	00bf      	lsls	r7, r7, #2
    72ea:	19ed      	adds	r5, r5, r7
    72ec:	e7a7      	b.n	723e <__gnu_unwind_pr_common+0xea>
    72ee:	6a33      	ldr	r3, [r6, #32]
    72f0:	210d      	movs	r1, #13
    72f2:	0020      	movs	r0, r4
    72f4:	4698      	mov	r8, r3
    72f6:	f7ff fec3 	bl	7080 <_Unwind_GetGR>
    72fa:	4580      	cmp	r8, r0
    72fc:	d001      	beq.n	7302 <__gnu_unwind_pr_common+0x1ae>
    72fe:	682a      	ldr	r2, [r5, #0]
    7300:	e7ee      	b.n	72e0 <__gnu_unwind_pr_common+0x18c>
    7302:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7304:	429d      	cmp	r5, r3
    7306:	d1fa      	bne.n	72fe <__gnu_unwind_pr_common+0x1aa>
    7308:	2300      	movs	r3, #0
    730a:	62f3      	str	r3, [r6, #44]	; 0x2c
    730c:	3304      	adds	r3, #4
    730e:	6333      	str	r3, [r6, #48]	; 0x30
    7310:	1d2b      	adds	r3, r5, #4
    7312:	62b7      	str	r7, [r6, #40]	; 0x28
    7314:	6373      	str	r3, [r6, #52]	; 0x34
    7316:	682b      	ldr	r3, [r5, #0]
    7318:	2b00      	cmp	r3, #0
    731a:	da00      	bge.n	731e <__gnu_unwind_pr_common+0x1ca>
    731c:	e087      	b.n	742e <__gnu_unwind_pr_common+0x2da>
    731e:	2301      	movs	r3, #1
    7320:	9301      	str	r3, [sp, #4]
    7322:	e7e0      	b.n	72e6 <__gnu_unwind_pr_common+0x192>
    7324:	210d      	movs	r1, #13
    7326:	0020      	movs	r0, r4
    7328:	6a37      	ldr	r7, [r6, #32]
    732a:	f7ff fea9 	bl	7080 <_Unwind_GetGR>
    732e:	4287      	cmp	r7, r0
    7330:	d1c7      	bne.n	72c2 <__gnu_unwind_pr_common+0x16e>
    7332:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7334:	429d      	cmp	r5, r3
    7336:	d1c4      	bne.n	72c2 <__gnu_unwind_pr_common+0x16e>
    7338:	46b0      	mov	r8, r6
    733a:	46a2      	mov	sl, r4
    733c:	0028      	movs	r0, r5
    733e:	f7ff fcad 	bl	6c9c <selfrel_offset31>
    7342:	210f      	movs	r1, #15
    7344:	0002      	movs	r2, r0
    7346:	4650      	mov	r0, sl
    7348:	f7ff fec0 	bl	70cc <_Unwind_SetGR>
    734c:	4650      	mov	r0, sl
    734e:	4642      	mov	r2, r8
    7350:	2100      	movs	r1, #0
    7352:	f7ff febb 	bl	70cc <_Unwind_SetGR>
    7356:	2007      	movs	r0, #7
    7358:	e72e      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    735a:	46b0      	mov	r8, r6
    735c:	46a2      	mov	sl, r4
    735e:	210d      	movs	r1, #13
    7360:	4650      	mov	r0, sl
    7362:	f7ff fe8d 	bl	7080 <_Unwind_GetGR>
    7366:	4643      	mov	r3, r8
    7368:	9a04      	ldr	r2, [sp, #16]
    736a:	6218      	str	r0, [r3, #32]
    736c:	625a      	str	r2, [r3, #36]	; 0x24
    736e:	2006      	movs	r0, #6
    7370:	629d      	str	r5, [r3, #40]	; 0x28
    7372:	e721      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    7374:	0028      	movs	r0, r5
    7376:	f7ff fc91 	bl	6c9c <selfrel_offset31>
    737a:	3504      	adds	r5, #4
    737c:	46a2      	mov	sl, r4
    737e:	63b5      	str	r5, [r6, #56]	; 0x38
    7380:	0004      	movs	r4, r0
    7382:	0030      	movs	r0, r6
    7384:	e000      	b.n	7388 <__gnu_unwind_pr_common+0x234>
    7386:	bf00      	nop
    7388:	2800      	cmp	r0, #0
    738a:	d100      	bne.n	738e <__gnu_unwind_pr_common+0x23a>
    738c:	e713      	b.n	71b6 <__gnu_unwind_pr_common+0x62>
    738e:	4650      	mov	r0, sl
    7390:	0022      	movs	r2, r4
    7392:	210f      	movs	r1, #15
    7394:	f7ff fe9a 	bl	70cc <_Unwind_SetGR>
    7398:	2007      	movs	r0, #7
    739a:	e70d      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    739c:	46a2      	mov	sl, r4
    739e:	210d      	movs	r1, #13
    73a0:	0004      	movs	r4, r0
    73a2:	4650      	mov	r0, sl
    73a4:	f7ff fe6c 	bl	7080 <_Unwind_GetGR>
    73a8:	46b0      	mov	r8, r6
    73aa:	0033      	movs	r3, r6
    73ac:	6230      	str	r0, [r6, #32]
    73ae:	2c02      	cmp	r4, #2
    73b0:	d139      	bne.n	7426 <__gnu_unwind_pr_common+0x2d2>
    73b2:	9a04      	ldr	r2, [sp, #16]
    73b4:	332c      	adds	r3, #44	; 0x2c
    73b6:	62f2      	str	r2, [r6, #44]	; 0x2c
    73b8:	6273      	str	r3, [r6, #36]	; 0x24
    73ba:	4643      	mov	r3, r8
    73bc:	2006      	movs	r0, #6
    73be:	629d      	str	r5, [r3, #40]	; 0x28
    73c0:	e6fa      	b.n	71b8 <__gnu_unwind_pr_common+0x64>
    73c2:	1d2b      	adds	r3, r5, #4
    73c4:	469a      	mov	sl, r3
    73c6:	2300      	movs	r3, #0
    73c8:	4698      	mov	r8, r3
    73ca:	3358      	adds	r3, #88	; 0x58
    73cc:	469c      	mov	ip, r3
    73ce:	0021      	movs	r1, r4
    73d0:	464a      	mov	r2, r9
    73d2:	44b4      	add	ip, r6
    73d4:	4654      	mov	r4, sl
    73d6:	46a9      	mov	r9, r5
    73d8:	468a      	mov	sl, r1
    73da:	003d      	movs	r5, r7
    73dc:	9203      	str	r2, [sp, #12]
    73de:	4647      	mov	r7, r8
    73e0:	46e0      	mov	r8, ip
    73e2:	e00e      	b.n	7402 <__gnu_unwind_pr_common+0x2ae>
    73e4:	4643      	mov	r3, r8
    73e6:	0020      	movs	r0, r4
    73e8:	9304      	str	r3, [sp, #16]
    73ea:	f7ff fd2f 	bl	6e4c <_Unwind_decode_typeinfo_ptr.constprop.0>
    73ee:	2200      	movs	r2, #0
    73f0:	0001      	movs	r1, r0
    73f2:	ab04      	add	r3, sp, #16
    73f4:	0030      	movs	r0, r6
    73f6:	e000      	b.n	73fa <__gnu_unwind_pr_common+0x2a6>
    73f8:	bf00      	nop
    73fa:	3701      	adds	r7, #1
    73fc:	3404      	adds	r4, #4
    73fe:	2800      	cmp	r0, #0
    7400:	d104      	bne.n	740c <__gnu_unwind_pr_common+0x2b8>
    7402:	42af      	cmp	r7, r5
    7404:	d1ee      	bne.n	73e4 <__gnu_unwind_pr_common+0x290>
    7406:	464d      	mov	r5, r9
    7408:	46b0      	mov	r8, r6
    740a:	e7a8      	b.n	735e <__gnu_unwind_pr_common+0x20a>
    740c:	002f      	movs	r7, r5
    740e:	464d      	mov	r5, r9
    7410:	9b03      	ldr	r3, [sp, #12]
    7412:	4654      	mov	r4, sl
    7414:	4699      	mov	r9, r3
    7416:	682a      	ldr	r2, [r5, #0]
    7418:	e762      	b.n	72e0 <__gnu_unwind_pr_common+0x18c>
    741a:	210d      	movs	r1, #13
    741c:	0020      	movs	r0, r4
    741e:	f7ff fe2f 	bl	7080 <_Unwind_GetGR>
    7422:	46b0      	mov	r8, r6
    7424:	6230      	str	r0, [r6, #32]
    7426:	4643      	mov	r3, r8
    7428:	9a04      	ldr	r2, [sp, #16]
    742a:	625a      	str	r2, [r3, #36]	; 0x24
    742c:	e7c5      	b.n	73ba <__gnu_unwind_pr_common+0x266>
    742e:	1c78      	adds	r0, r7, #1
    7430:	0080      	lsls	r0, r0, #2
    7432:	46b0      	mov	r8, r6
    7434:	46a2      	mov	sl, r4
    7436:	1828      	adds	r0, r5, r0
    7438:	e781      	b.n	733e <__gnu_unwind_pr_common+0x1ea>
    743a:	46c0      	nop			; (mov r8, r8)
    743c:	00000000 	.word	0x00000000

00007440 <__aeabi_unwind_cpp_pr0>:
    7440:	b510      	push	{r4, lr}
    7442:	2300      	movs	r3, #0
    7444:	f7ff fe86 	bl	7154 <__gnu_unwind_pr_common>
    7448:	bd10      	pop	{r4, pc}
    744a:	46c0      	nop			; (mov r8, r8)

0000744c <__aeabi_unwind_cpp_pr1>:
    744c:	b510      	push	{r4, lr}
    744e:	2301      	movs	r3, #1
    7450:	f7ff fe80 	bl	7154 <__gnu_unwind_pr_common>
    7454:	bd10      	pop	{r4, pc}
    7456:	46c0      	nop			; (mov r8, r8)

00007458 <__aeabi_unwind_cpp_pr2>:
    7458:	b510      	push	{r4, lr}
    745a:	2302      	movs	r3, #2
    745c:	f7ff fe7a 	bl	7154 <__gnu_unwind_pr_common>
    7460:	bd10      	pop	{r4, pc}
    7462:	46c0      	nop			; (mov r8, r8)

00007464 <_Unwind_VRS_Pop>:
    7464:	b5f0      	push	{r4, r5, r6, r7, lr}
    7466:	46ce      	mov	lr, r9
    7468:	4647      	mov	r7, r8
    746a:	b580      	push	{r7, lr}
    746c:	0005      	movs	r5, r0
    746e:	0014      	movs	r4, r2
    7470:	001e      	movs	r6, r3
    7472:	b0c3      	sub	sp, #268	; 0x10c
    7474:	2903      	cmp	r1, #3
    7476:	d044      	beq.n	7502 <_Unwind_VRS_Pop+0x9e>
    7478:	d820      	bhi.n	74bc <_Unwind_VRS_Pop+0x58>
    747a:	2900      	cmp	r1, #0
    747c:	d049      	beq.n	7512 <_Unwind_VRS_Pop+0xae>
    747e:	2901      	cmp	r1, #1
    7480:	d141      	bne.n	7506 <_Unwind_VRS_Pop+0xa2>
    7482:	0c13      	lsrs	r3, r2, #16
    7484:	0414      	lsls	r4, r2, #16
    7486:	4698      	mov	r8, r3
    7488:	0c23      	lsrs	r3, r4, #16
    748a:	4699      	mov	r9, r3
    748c:	2e01      	cmp	r6, #1
    748e:	d100      	bne.n	7492 <_Unwind_VRS_Pop+0x2e>
    7490:	e07a      	b.n	7588 <_Unwind_VRS_Pop+0x124>
    7492:	2e05      	cmp	r6, #5
    7494:	d137      	bne.n	7506 <_Unwind_VRS_Pop+0xa2>
    7496:	4644      	mov	r4, r8
    7498:	444c      	add	r4, r9
    749a:	2c20      	cmp	r4, #32
    749c:	d833      	bhi.n	7506 <_Unwind_VRS_Pop+0xa2>
    749e:	4643      	mov	r3, r8
    74a0:	2b0f      	cmp	r3, #15
    74a2:	d800      	bhi.n	74a6 <_Unwind_VRS_Pop+0x42>
    74a4:	e0b5      	b.n	7612 <_Unwind_VRS_Pop+0x1ae>
    74a6:	464c      	mov	r4, r9
    74a8:	2c00      	cmp	r4, #0
    74aa:	d000      	beq.n	74ae <_Unwind_VRS_Pop+0x4a>
    74ac:	e0c2      	b.n	7634 <_Unwind_VRS_Pop+0x1d0>
    74ae:	464a      	mov	r2, r9
    74b0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    74b2:	af20      	add	r7, sp, #128	; 0x80
    74b4:	2a00      	cmp	r2, #0
    74b6:	d022      	beq.n	74fe <_Unwind_VRS_Pop+0x9a>
    74b8:	2400      	movs	r4, #0
    74ba:	e07f      	b.n	75bc <_Unwind_VRS_Pop+0x158>
    74bc:	2904      	cmp	r1, #4
    74be:	d122      	bne.n	7506 <_Unwind_VRS_Pop+0xa2>
    74c0:	2b00      	cmp	r3, #0
    74c2:	d120      	bne.n	7506 <_Unwind_VRS_Pop+0xa2>
    74c4:	2a10      	cmp	r2, #16
    74c6:	d81e      	bhi.n	7506 <_Unwind_VRS_Pop+0xa2>
    74c8:	2210      	movs	r2, #16
    74ca:	6803      	ldr	r3, [r0, #0]
    74cc:	421a      	tst	r2, r3
    74ce:	d000      	beq.n	74d2 <_Unwind_VRS_Pop+0x6e>
    74d0:	e0c7      	b.n	7662 <_Unwind_VRS_Pop+0x1fe>
    74d2:	af20      	add	r7, sp, #128	; 0x80
    74d4:	0038      	movs	r0, r7
    74d6:	f000 f921 	bl	771c <__gnu_Unwind_Save_WMMXC>
    74da:	2601      	movs	r6, #1
    74dc:	0039      	movs	r1, r7
    74de:	2300      	movs	r3, #0
    74e0:	6baa      	ldr	r2, [r5, #56]	; 0x38
    74e2:	0030      	movs	r0, r6
    74e4:	4098      	lsls	r0, r3
    74e6:	4204      	tst	r4, r0
    74e8:	d001      	beq.n	74ee <_Unwind_VRS_Pop+0x8a>
    74ea:	ca01      	ldmia	r2!, {r0}
    74ec:	6008      	str	r0, [r1, #0]
    74ee:	3301      	adds	r3, #1
    74f0:	3104      	adds	r1, #4
    74f2:	2b04      	cmp	r3, #4
    74f4:	d1f5      	bne.n	74e2 <_Unwind_VRS_Pop+0x7e>
    74f6:	0038      	movs	r0, r7
    74f8:	63aa      	str	r2, [r5, #56]	; 0x38
    74fa:	f000 f90d 	bl	7718 <__gnu_Unwind_Restore_WMMXC>
    74fe:	2000      	movs	r0, #0
    7500:	e002      	b.n	7508 <_Unwind_VRS_Pop+0xa4>
    7502:	2b03      	cmp	r3, #3
    7504:	d01c      	beq.n	7540 <_Unwind_VRS_Pop+0xdc>
    7506:	2002      	movs	r0, #2
    7508:	b043      	add	sp, #268	; 0x10c
    750a:	bcc0      	pop	{r6, r7}
    750c:	46b9      	mov	r9, r7
    750e:	46b0      	mov	r8, r6
    7510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7512:	2b00      	cmp	r3, #0
    7514:	d1f7      	bne.n	7506 <_Unwind_VRS_Pop+0xa2>
    7516:	2300      	movs	r3, #0
    7518:	2701      	movs	r7, #1
    751a:	0416      	lsls	r6, r2, #16
    751c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    751e:	0c36      	lsrs	r6, r6, #16
    7520:	1d01      	adds	r1, r0, #4
    7522:	0038      	movs	r0, r7
    7524:	4098      	lsls	r0, r3
    7526:	4206      	tst	r6, r0
    7528:	d001      	beq.n	752e <_Unwind_VRS_Pop+0xca>
    752a:	ca01      	ldmia	r2!, {r0}
    752c:	6008      	str	r0, [r1, #0]
    752e:	3301      	adds	r3, #1
    7530:	3104      	adds	r1, #4
    7532:	2b10      	cmp	r3, #16
    7534:	d1f5      	bne.n	7522 <_Unwind_VRS_Pop+0xbe>
    7536:	2000      	movs	r0, #0
    7538:	04a3      	lsls	r3, r4, #18
    753a:	d4e5      	bmi.n	7508 <_Unwind_VRS_Pop+0xa4>
    753c:	63aa      	str	r2, [r5, #56]	; 0x38
    753e:	e7e3      	b.n	7508 <_Unwind_VRS_Pop+0xa4>
    7540:	0414      	lsls	r4, r2, #16
    7542:	0c16      	lsrs	r6, r2, #16
    7544:	0c24      	lsrs	r4, r4, #16
    7546:	1933      	adds	r3, r6, r4
    7548:	2b10      	cmp	r3, #16
    754a:	d8dc      	bhi.n	7506 <_Unwind_VRS_Pop+0xa2>
    754c:	2208      	movs	r2, #8
    754e:	6803      	ldr	r3, [r0, #0]
    7550:	421a      	tst	r2, r3
    7552:	d000      	beq.n	7556 <_Unwind_VRS_Pop+0xf2>
    7554:	e08c      	b.n	7670 <_Unwind_VRS_Pop+0x20c>
    7556:	af20      	add	r7, sp, #128	; 0x80
    7558:	0038      	movs	r0, r7
    755a:	f000 f8db 	bl	7714 <__gnu_Unwind_Save_WMMXD>
    755e:	00f6      	lsls	r6, r6, #3
    7560:	6bab      	ldr	r3, [r5, #56]	; 0x38
    7562:	2c00      	cmp	r4, #0
    7564:	d00a      	beq.n	757c <_Unwind_VRS_Pop+0x118>
    7566:	1af6      	subs	r6, r6, r3
    7568:	00e4      	lsls	r4, r4, #3
    756a:	1f32      	subs	r2, r6, #4
    756c:	191c      	adds	r4, r3, r4
    756e:	18ba      	adds	r2, r7, r2
    7570:	0019      	movs	r1, r3
    7572:	6809      	ldr	r1, [r1, #0]
    7574:	3304      	adds	r3, #4
    7576:	5099      	str	r1, [r3, r2]
    7578:	42a3      	cmp	r3, r4
    757a:	d1f9      	bne.n	7570 <_Unwind_VRS_Pop+0x10c>
    757c:	0038      	movs	r0, r7
    757e:	63ab      	str	r3, [r5, #56]	; 0x38
    7580:	f000 f8c6 	bl	7710 <__gnu_Unwind_Restore_WMMXD>
    7584:	2000      	movs	r0, #0
    7586:	e7bf      	b.n	7508 <_Unwind_VRS_Pop+0xa4>
    7588:	4643      	mov	r3, r8
    758a:	444b      	add	r3, r9
    758c:	2b10      	cmp	r3, #16
    758e:	d8ba      	bhi.n	7506 <_Unwind_VRS_Pop+0xa2>
    7590:	4643      	mov	r3, r8
    7592:	2b0f      	cmp	r3, #15
    7594:	d8b7      	bhi.n	7506 <_Unwind_VRS_Pop+0xa2>
    7596:	682b      	ldr	r3, [r5, #0]
    7598:	421e      	tst	r6, r3
    759a:	d006      	beq.n	75aa <_Unwind_VRS_Pop+0x146>
    759c:	2203      	movs	r2, #3
    759e:	0028      	movs	r0, r5
    75a0:	4393      	bics	r3, r2
    75a2:	602b      	str	r3, [r5, #0]
    75a4:	3048      	adds	r0, #72	; 0x48
    75a6:	f000 f8a9 	bl	76fc <__gnu_Unwind_Save_VFP>
    75aa:	af20      	add	r7, sp, #128	; 0x80
    75ac:	0038      	movs	r0, r7
    75ae:	f000 f8a5 	bl	76fc <__gnu_Unwind_Save_VFP>
    75b2:	464a      	mov	r2, r9
    75b4:	2400      	movs	r4, #0
    75b6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    75b8:	2a00      	cmp	r2, #0
    75ba:	d061      	beq.n	7680 <_Unwind_VRS_Pop+0x21c>
    75bc:	4643      	mov	r3, r8
    75be:	00db      	lsls	r3, r3, #3
    75c0:	18ff      	adds	r7, r7, r3
    75c2:	2300      	movs	r3, #0
    75c4:	00d2      	lsls	r2, r2, #3
    75c6:	58c8      	ldr	r0, [r1, r3]
    75c8:	50f8      	str	r0, [r7, r3]
    75ca:	3304      	adds	r3, #4
    75cc:	429a      	cmp	r2, r3
    75ce:	d1fa      	bne.n	75c6 <_Unwind_VRS_Pop+0x162>
    75d0:	1889      	adds	r1, r1, r2
    75d2:	2c00      	cmp	r4, #0
    75d4:	d00f      	beq.n	75f6 <_Unwind_VRS_Pop+0x192>
    75d6:	466f      	mov	r7, sp
    75d8:	4640      	mov	r0, r8
    75da:	2810      	cmp	r0, #16
    75dc:	d200      	bcs.n	75e0 <_Unwind_VRS_Pop+0x17c>
    75de:	2010      	movs	r0, #16
    75e0:	2300      	movs	r3, #0
    75e2:	3810      	subs	r0, #16
    75e4:	00c0      	lsls	r0, r0, #3
    75e6:	1838      	adds	r0, r7, r0
    75e8:	00e2      	lsls	r2, r4, #3
    75ea:	58cf      	ldr	r7, [r1, r3]
    75ec:	50c7      	str	r7, [r0, r3]
    75ee:	3304      	adds	r3, #4
    75f0:	4293      	cmp	r3, r2
    75f2:	d1fa      	bne.n	75ea <_Unwind_VRS_Pop+0x186>
    75f4:	18c9      	adds	r1, r1, r3
    75f6:	2e01      	cmp	r6, #1
    75f8:	d041      	beq.n	767e <_Unwind_VRS_Pop+0x21a>
    75fa:	4643      	mov	r3, r8
    75fc:	63a9      	str	r1, [r5, #56]	; 0x38
    75fe:	2b0f      	cmp	r3, #15
    7600:	d945      	bls.n	768e <_Unwind_VRS_Pop+0x22a>
    7602:	2c00      	cmp	r4, #0
    7604:	d100      	bne.n	7608 <_Unwind_VRS_Pop+0x1a4>
    7606:	e77a      	b.n	74fe <_Unwind_VRS_Pop+0x9a>
    7608:	4668      	mov	r0, sp
    760a:	f000 f87d 	bl	7708 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    760e:	2000      	movs	r0, #0
    7610:	e77a      	b.n	7508 <_Unwind_VRS_Pop+0xa4>
    7612:	2c10      	cmp	r4, #16
    7614:	d946      	bls.n	76a4 <_Unwind_VRS_Pop+0x240>
    7616:	3c10      	subs	r4, #16
    7618:	2201      	movs	r2, #1
    761a:	682b      	ldr	r3, [r5, #0]
    761c:	421a      	tst	r2, r3
    761e:	d007      	beq.n	7630 <_Unwind_VRS_Pop+0x1cc>
    7620:	4393      	bics	r3, r2
    7622:	2202      	movs	r2, #2
    7624:	0028      	movs	r0, r5
    7626:	4313      	orrs	r3, r2
    7628:	602b      	str	r3, [r5, #0]
    762a:	3048      	adds	r0, #72	; 0x48
    762c:	f000 f86a 	bl	7704 <__gnu_Unwind_Save_VFP_D>
    7630:	2c00      	cmp	r4, #0
    7632:	d039      	beq.n	76a8 <_Unwind_VRS_Pop+0x244>
    7634:	2204      	movs	r2, #4
    7636:	682b      	ldr	r3, [r5, #0]
    7638:	421a      	tst	r2, r3
    763a:	d12c      	bne.n	7696 <_Unwind_VRS_Pop+0x232>
    763c:	4643      	mov	r3, r8
    763e:	2b0f      	cmp	r3, #15
    7640:	d803      	bhi.n	764a <_Unwind_VRS_Pop+0x1e6>
    7642:	af20      	add	r7, sp, #128	; 0x80
    7644:	0038      	movs	r0, r7
    7646:	f000 f85d 	bl	7704 <__gnu_Unwind_Save_VFP_D>
    764a:	466f      	mov	r7, sp
    764c:	0038      	movs	r0, r7
    764e:	f000 f85d 	bl	770c <__gnu_Unwind_Save_VFP_D_16_to_31>
    7652:	2210      	movs	r2, #16
    7654:	4643      	mov	r3, r8
    7656:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    7658:	1ad2      	subs	r2, r2, r3
    765a:	2a00      	cmp	r2, #0
    765c:	ddbc      	ble.n	75d8 <_Unwind_VRS_Pop+0x174>
    765e:	af20      	add	r7, sp, #128	; 0x80
    7660:	e7ac      	b.n	75bc <_Unwind_VRS_Pop+0x158>
    7662:	4393      	bics	r3, r2
    7664:	6003      	str	r3, [r0, #0]
    7666:	30d1      	adds	r0, #209	; 0xd1
    7668:	30ff      	adds	r0, #255	; 0xff
    766a:	f000 f857 	bl	771c <__gnu_Unwind_Save_WMMXC>
    766e:	e730      	b.n	74d2 <_Unwind_VRS_Pop+0x6e>
    7670:	4393      	bics	r3, r2
    7672:	6003      	str	r3, [r0, #0]
    7674:	3051      	adds	r0, #81	; 0x51
    7676:	30ff      	adds	r0, #255	; 0xff
    7678:	f000 f84c 	bl	7714 <__gnu_Unwind_Save_WMMXD>
    767c:	e76b      	b.n	7556 <_Unwind_VRS_Pop+0xf2>
    767e:	af20      	add	r7, sp, #128	; 0x80
    7680:	3104      	adds	r1, #4
    7682:	0038      	movs	r0, r7
    7684:	63a9      	str	r1, [r5, #56]	; 0x38
    7686:	f000 f837 	bl	76f8 <__gnu_Unwind_Restore_VFP>
    768a:	2000      	movs	r0, #0
    768c:	e73c      	b.n	7508 <_Unwind_VRS_Pop+0xa4>
    768e:	a820      	add	r0, sp, #128	; 0x80
    7690:	f000 f836 	bl	7700 <__gnu_Unwind_Restore_VFP_D>
    7694:	e7b5      	b.n	7602 <_Unwind_VRS_Pop+0x19e>
    7696:	0028      	movs	r0, r5
    7698:	4393      	bics	r3, r2
    769a:	602b      	str	r3, [r5, #0]
    769c:	30d0      	adds	r0, #208	; 0xd0
    769e:	f000 f835 	bl	770c <__gnu_Unwind_Save_VFP_D_16_to_31>
    76a2:	e7cb      	b.n	763c <_Unwind_VRS_Pop+0x1d8>
    76a4:	2400      	movs	r4, #0
    76a6:	e7b7      	b.n	7618 <_Unwind_VRS_Pop+0x1b4>
    76a8:	4643      	mov	r3, r8
    76aa:	2b0f      	cmp	r3, #15
    76ac:	d900      	bls.n	76b0 <_Unwind_VRS_Pop+0x24c>
    76ae:	e6fe      	b.n	74ae <_Unwind_VRS_Pop+0x4a>
    76b0:	af20      	add	r7, sp, #128	; 0x80
    76b2:	0038      	movs	r0, r7
    76b4:	f000 f826 	bl	7704 <__gnu_Unwind_Save_VFP_D>
    76b8:	464a      	mov	r2, r9
    76ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    76bc:	2a00      	cmp	r2, #0
    76be:	d000      	beq.n	76c2 <_Unwind_VRS_Pop+0x25e>
    76c0:	e6fa      	b.n	74b8 <_Unwind_VRS_Pop+0x54>
    76c2:	0038      	movs	r0, r7
    76c4:	f000 f81c 	bl	7700 <__gnu_Unwind_Restore_VFP_D>
    76c8:	2000      	movs	r0, #0
    76ca:	e71d      	b.n	7508 <_Unwind_VRS_Pop+0xa4>

000076cc <__restore_core_regs>:
    76cc:	0001      	movs	r1, r0
    76ce:	3134      	adds	r1, #52	; 0x34
    76d0:	c938      	ldmia	r1!, {r3, r4, r5}
    76d2:	3b04      	subs	r3, #4
    76d4:	469c      	mov	ip, r3
    76d6:	601d      	str	r5, [r3, #0]
    76d8:	46a6      	mov	lr, r4
    76da:	0001      	movs	r1, r0
    76dc:	3120      	adds	r1, #32
    76de:	c93c      	ldmia	r1!, {r2, r3, r4, r5}
    76e0:	4690      	mov	r8, r2
    76e2:	4699      	mov	r9, r3
    76e4:	46a2      	mov	sl, r4
    76e6:	46ab      	mov	fp, r5
    76e8:	0001      	movs	r1, r0
    76ea:	3108      	adds	r1, #8
    76ec:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
    76ee:	6841      	ldr	r1, [r0, #4]
    76f0:	6800      	ldr	r0, [r0, #0]
    76f2:	46e5      	mov	sp, ip
    76f4:	bd00      	pop	{pc}
    76f6:	46c0      	nop			; (mov r8, r8)

000076f8 <__gnu_Unwind_Restore_VFP>:
    76f8:	4770      	bx	lr
    76fa:	46c0      	nop			; (mov r8, r8)

000076fc <__gnu_Unwind_Save_VFP>:
    76fc:	4770      	bx	lr
    76fe:	46c0      	nop			; (mov r8, r8)

00007700 <__gnu_Unwind_Restore_VFP_D>:
    7700:	4770      	bx	lr
    7702:	46c0      	nop			; (mov r8, r8)

00007704 <__gnu_Unwind_Save_VFP_D>:
    7704:	4770      	bx	lr
    7706:	46c0      	nop			; (mov r8, r8)

00007708 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    7708:	4770      	bx	lr
    770a:	46c0      	nop			; (mov r8, r8)

0000770c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    770c:	4770      	bx	lr
    770e:	46c0      	nop			; (mov r8, r8)

00007710 <__gnu_Unwind_Restore_WMMXD>:
    7710:	4770      	bx	lr
    7712:	46c0      	nop			; (mov r8, r8)

00007714 <__gnu_Unwind_Save_WMMXD>:
    7714:	4770      	bx	lr
    7716:	46c0      	nop			; (mov r8, r8)

00007718 <__gnu_Unwind_Restore_WMMXC>:
    7718:	4770      	bx	lr
    771a:	46c0      	nop			; (mov r8, r8)

0000771c <__gnu_Unwind_Save_WMMXC>:
    771c:	4770      	bx	lr
    771e:	46c0      	nop			; (mov r8, r8)

00007720 <_Unwind_RaiseException>:
    7720:	b401      	push	{r0}
    7722:	a801      	add	r0, sp, #4
    7724:	b501      	push	{r0, lr}
    7726:	b085      	sub	sp, #20
    7728:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    772a:	a808      	add	r0, sp, #32
    772c:	4641      	mov	r1, r8
    772e:	464a      	mov	r2, r9
    7730:	4653      	mov	r3, sl
    7732:	465c      	mov	r4, fp
    7734:	4665      	mov	r5, ip
    7736:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    7738:	a801      	add	r0, sp, #4
    773a:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    773c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    773e:	9000      	str	r0, [sp, #0]
    7740:	2300      	movs	r3, #0
    7742:	b40c      	push	{r2, r3}
    7744:	a901      	add	r1, sp, #4
    7746:	f7ff fc11 	bl	6f6c <__gnu_Unwind_RaiseException>
    774a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    774c:	b012      	add	sp, #72	; 0x48
    774e:	4718      	bx	r3

00007750 <_Unwind_Resume>:
    7750:	b401      	push	{r0}
    7752:	a801      	add	r0, sp, #4
    7754:	b501      	push	{r0, lr}
    7756:	b085      	sub	sp, #20
    7758:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    775a:	a808      	add	r0, sp, #32
    775c:	4641      	mov	r1, r8
    775e:	464a      	mov	r2, r9
    7760:	4653      	mov	r3, sl
    7762:	465c      	mov	r4, fp
    7764:	4665      	mov	r5, ip
    7766:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    7768:	a801      	add	r0, sp, #4
    776a:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    776c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    776e:	9000      	str	r0, [sp, #0]
    7770:	2300      	movs	r3, #0
    7772:	b40c      	push	{r2, r3}
    7774:	a901      	add	r1, sp, #4
    7776:	f7ff fc2d 	bl	6fd4 <__gnu_Unwind_Resume>
    777a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    777c:	b012      	add	sp, #72	; 0x48
    777e:	4718      	bx	r3

00007780 <_Unwind_Resume_or_Rethrow>:
    7780:	b401      	push	{r0}
    7782:	a801      	add	r0, sp, #4
    7784:	b501      	push	{r0, lr}
    7786:	b085      	sub	sp, #20
    7788:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    778a:	a808      	add	r0, sp, #32
    778c:	4641      	mov	r1, r8
    778e:	464a      	mov	r2, r9
    7790:	4653      	mov	r3, sl
    7792:	465c      	mov	r4, fp
    7794:	4665      	mov	r5, ip
    7796:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    7798:	a801      	add	r0, sp, #4
    779a:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    779c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    779e:	9000      	str	r0, [sp, #0]
    77a0:	2300      	movs	r3, #0
    77a2:	b40c      	push	{r2, r3}
    77a4:	a901      	add	r1, sp, #4
    77a6:	f7ff fc39 	bl	701c <__gnu_Unwind_Resume_or_Rethrow>
    77aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77ac:	b012      	add	sp, #72	; 0x48
    77ae:	4718      	bx	r3

000077b0 <_Unwind_ForcedUnwind>:
    77b0:	b401      	push	{r0}
    77b2:	a801      	add	r0, sp, #4
    77b4:	b501      	push	{r0, lr}
    77b6:	b085      	sub	sp, #20
    77b8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    77ba:	a808      	add	r0, sp, #32
    77bc:	4641      	mov	r1, r8
    77be:	464a      	mov	r2, r9
    77c0:	4653      	mov	r3, sl
    77c2:	465c      	mov	r4, fp
    77c4:	4665      	mov	r5, ip
    77c6:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    77c8:	a801      	add	r0, sp, #4
    77ca:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    77cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    77ce:	9000      	str	r0, [sp, #0]
    77d0:	2300      	movs	r3, #0
    77d2:	b40c      	push	{r2, r3}
    77d4:	ab01      	add	r3, sp, #4
    77d6:	f7ff fbf3 	bl	6fc0 <__gnu_Unwind_ForcedUnwind>
    77da:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77dc:	b012      	add	sp, #72	; 0x48
    77de:	4718      	bx	r3

000077e0 <_Unwind_Backtrace>:
    77e0:	b401      	push	{r0}
    77e2:	a801      	add	r0, sp, #4
    77e4:	b501      	push	{r0, lr}
    77e6:	b085      	sub	sp, #20
    77e8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    77ea:	a808      	add	r0, sp, #32
    77ec:	4641      	mov	r1, r8
    77ee:	464a      	mov	r2, r9
    77f0:	4653      	mov	r3, sl
    77f2:	465c      	mov	r4, fp
    77f4:	4665      	mov	r5, ip
    77f6:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
    77f8:	a801      	add	r0, sp, #4
    77fa:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
    77fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    77fe:	9000      	str	r0, [sp, #0]
    7800:	2300      	movs	r3, #0
    7802:	b40c      	push	{r2, r3}
    7804:	aa01      	add	r2, sp, #4
    7806:	f7ff fc6d 	bl	70e4 <__gnu_Unwind_Backtrace>
    780a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    780c:	b012      	add	sp, #72	; 0x48
    780e:	4718      	bx	r3

00007810 <next_unwind_byte>:
    7810:	7a02      	ldrb	r2, [r0, #8]
    7812:	0003      	movs	r3, r0
    7814:	2a00      	cmp	r2, #0
    7816:	d10b      	bne.n	7830 <next_unwind_byte+0x20>
    7818:	7a42      	ldrb	r2, [r0, #9]
    781a:	2a00      	cmp	r2, #0
    781c:	d00f      	beq.n	783e <next_unwind_byte+0x2e>
    781e:	3a01      	subs	r2, #1
    7820:	7242      	strb	r2, [r0, #9]
    7822:	6842      	ldr	r2, [r0, #4]
    7824:	1d11      	adds	r1, r2, #4
    7826:	6041      	str	r1, [r0, #4]
    7828:	2103      	movs	r1, #3
    782a:	6812      	ldr	r2, [r2, #0]
    782c:	7201      	strb	r1, [r0, #8]
    782e:	e002      	b.n	7836 <next_unwind_byte+0x26>
    7830:	3a01      	subs	r2, #1
    7832:	7202      	strb	r2, [r0, #8]
    7834:	6802      	ldr	r2, [r0, #0]
    7836:	0e10      	lsrs	r0, r2, #24
    7838:	0212      	lsls	r2, r2, #8
    783a:	601a      	str	r2, [r3, #0]
    783c:	4770      	bx	lr
    783e:	20b0      	movs	r0, #176	; 0xb0
    7840:	e7fc      	b.n	783c <next_unwind_byte+0x2c>
    7842:	46c0      	nop			; (mov r8, r8)

00007844 <_Unwind_GetGR.constprop.0>:
    7844:	b500      	push	{lr}
    7846:	b085      	sub	sp, #20
    7848:	ab03      	add	r3, sp, #12
    784a:	9300      	str	r3, [sp, #0]
    784c:	220c      	movs	r2, #12
    784e:	2300      	movs	r3, #0
    7850:	2100      	movs	r1, #0
    7852:	f7ff fbfb 	bl	704c <_Unwind_VRS_Get>
    7856:	9803      	ldr	r0, [sp, #12]
    7858:	b005      	add	sp, #20
    785a:	bd00      	pop	{pc}

0000785c <unwind_UCB_from_context>:
    785c:	b510      	push	{r4, lr}
    785e:	f7ff fff1 	bl	7844 <_Unwind_GetGR.constprop.0>
    7862:	bd10      	pop	{r4, pc}

00007864 <__gnu_unwind_execute>:
    7864:	b5f0      	push	{r4, r5, r6, r7, lr}
    7866:	464e      	mov	r6, r9
    7868:	4645      	mov	r5, r8
    786a:	4657      	mov	r7, sl
    786c:	46de      	mov	lr, fp
    786e:	2300      	movs	r3, #0
    7870:	b5e0      	push	{r5, r6, r7, lr}
    7872:	b087      	sub	sp, #28
    7874:	9303      	str	r3, [sp, #12]
    7876:	330f      	adds	r3, #15
    7878:	4698      	mov	r8, r3
    787a:	3b08      	subs	r3, #8
    787c:	4699      	mov	r9, r3
    787e:	2380      	movs	r3, #128	; 0x80
    7880:	031b      	lsls	r3, r3, #12
    7882:	0005      	movs	r5, r0
    7884:	000e      	movs	r6, r1
    7886:	469a      	mov	sl, r3
    7888:	0030      	movs	r0, r6
    788a:	f7ff ffc1 	bl	7810 <next_unwind_byte>
    788e:	0004      	movs	r4, r0
    7890:	28b0      	cmp	r0, #176	; 0xb0
    7892:	d100      	bne.n	7896 <__gnu_unwind_execute+0x32>
    7894:	e0c1      	b.n	7a1a <__gnu_unwind_execute+0x1b6>
    7896:	0603      	lsls	r3, r0, #24
    7898:	d529      	bpl.n	78ee <__gnu_unwind_execute+0x8a>
    789a:	0003      	movs	r3, r0
    789c:	4642      	mov	r2, r8
    789e:	4393      	bics	r3, r2
    78a0:	b2db      	uxtb	r3, r3
    78a2:	2b80      	cmp	r3, #128	; 0x80
    78a4:	d053      	beq.n	794e <__gnu_unwind_execute+0xea>
    78a6:	2b90      	cmp	r3, #144	; 0x90
    78a8:	d03d      	beq.n	7926 <__gnu_unwind_execute+0xc2>
    78aa:	2ba0      	cmp	r3, #160	; 0xa0
    78ac:	d06b      	beq.n	7986 <__gnu_unwind_execute+0x122>
    78ae:	2bb0      	cmp	r3, #176	; 0xb0
    78b0:	d100      	bne.n	78b4 <__gnu_unwind_execute+0x50>
    78b2:	e07e      	b.n	79b2 <__gnu_unwind_execute+0x14e>
    78b4:	2bc0      	cmp	r3, #192	; 0xc0
    78b6:	d100      	bne.n	78ba <__gnu_unwind_execute+0x56>
    78b8:	e095      	b.n	79e6 <__gnu_unwind_execute+0x182>
    78ba:	0003      	movs	r3, r0
    78bc:	464a      	mov	r2, r9
    78be:	4393      	bics	r3, r2
    78c0:	b2db      	uxtb	r3, r3
    78c2:	2bd0      	cmp	r3, #208	; 0xd0
    78c4:	d10a      	bne.n	78dc <__gnu_unwind_execute+0x78>
    78c6:	4653      	mov	r3, sl
    78c8:	4002      	ands	r2, r0
    78ca:	3201      	adds	r2, #1
    78cc:	431a      	orrs	r2, r3
    78ce:	2305      	movs	r3, #5
    78d0:	2101      	movs	r1, #1
    78d2:	0028      	movs	r0, r5
    78d4:	f7ff fdc6 	bl	7464 <_Unwind_VRS_Pop>
    78d8:	2800      	cmp	r0, #0
    78da:	d0d5      	beq.n	7888 <__gnu_unwind_execute+0x24>
    78dc:	2409      	movs	r4, #9
    78de:	0020      	movs	r0, r4
    78e0:	b007      	add	sp, #28
    78e2:	bcf0      	pop	{r4, r5, r6, r7}
    78e4:	46bb      	mov	fp, r7
    78e6:	46b2      	mov	sl, r6
    78e8:	46a9      	mov	r9, r5
    78ea:	46a0      	mov	r8, r4
    78ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78ee:	23ff      	movs	r3, #255	; 0xff
    78f0:	0082      	lsls	r2, r0, #2
    78f2:	4013      	ands	r3, r2
    78f4:	1d1f      	adds	r7, r3, #4
    78f6:	ab05      	add	r3, sp, #20
    78f8:	469b      	mov	fp, r3
    78fa:	9300      	str	r3, [sp, #0]
    78fc:	220d      	movs	r2, #13
    78fe:	2300      	movs	r3, #0
    7900:	2100      	movs	r1, #0
    7902:	0028      	movs	r0, r5
    7904:	f7ff fba2 	bl	704c <_Unwind_VRS_Get>
    7908:	0663      	lsls	r3, r4, #25
    790a:	d439      	bmi.n	7980 <__gnu_unwind_execute+0x11c>
    790c:	9b05      	ldr	r3, [sp, #20]
    790e:	469c      	mov	ip, r3
    7910:	4467      	add	r7, ip
    7912:	465b      	mov	r3, fp
    7914:	9705      	str	r7, [sp, #20]
    7916:	9300      	str	r3, [sp, #0]
    7918:	2300      	movs	r3, #0
    791a:	220d      	movs	r2, #13
    791c:	2100      	movs	r1, #0
    791e:	0028      	movs	r0, r5
    7920:	f7ff fbba 	bl	7098 <_Unwind_VRS_Set>
    7924:	e7b0      	b.n	7888 <__gnu_unwind_execute+0x24>
    7926:	3b83      	subs	r3, #131	; 0x83
    7928:	4003      	ands	r3, r0
    792a:	2b0d      	cmp	r3, #13
    792c:	d0d6      	beq.n	78dc <__gnu_unwind_execute+0x78>
    792e:	af05      	add	r7, sp, #20
    7930:	4002      	ands	r2, r0
    7932:	2300      	movs	r3, #0
    7934:	2100      	movs	r1, #0
    7936:	0028      	movs	r0, r5
    7938:	9700      	str	r7, [sp, #0]
    793a:	f7ff fb87 	bl	704c <_Unwind_VRS_Get>
    793e:	2300      	movs	r3, #0
    7940:	220d      	movs	r2, #13
    7942:	2100      	movs	r1, #0
    7944:	0028      	movs	r0, r5
    7946:	9700      	str	r7, [sp, #0]
    7948:	f7ff fba6 	bl	7098 <_Unwind_VRS_Set>
    794c:	e79c      	b.n	7888 <__gnu_unwind_execute+0x24>
    794e:	0204      	lsls	r4, r0, #8
    7950:	0030      	movs	r0, r6
    7952:	f7ff ff5d 	bl	7810 <next_unwind_byte>
    7956:	2780      	movs	r7, #128	; 0x80
    7958:	4320      	orrs	r0, r4
    795a:	023f      	lsls	r7, r7, #8
    795c:	42b8      	cmp	r0, r7
    795e:	d0bd      	beq.n	78dc <__gnu_unwind_execute+0x78>
    7960:	0104      	lsls	r4, r0, #4
    7962:	0500      	lsls	r0, r0, #20
    7964:	0c02      	lsrs	r2, r0, #16
    7966:	2300      	movs	r3, #0
    7968:	2100      	movs	r1, #0
    796a:	0028      	movs	r0, r5
    796c:	f7ff fd7a 	bl	7464 <_Unwind_VRS_Pop>
    7970:	2800      	cmp	r0, #0
    7972:	d1b3      	bne.n	78dc <__gnu_unwind_execute+0x78>
    7974:	423c      	tst	r4, r7
    7976:	d100      	bne.n	797a <__gnu_unwind_execute+0x116>
    7978:	e786      	b.n	7888 <__gnu_unwind_execute+0x24>
    797a:	2301      	movs	r3, #1
    797c:	9303      	str	r3, [sp, #12]
    797e:	e783      	b.n	7888 <__gnu_unwind_execute+0x24>
    7980:	9b05      	ldr	r3, [sp, #20]
    7982:	1bdf      	subs	r7, r3, r7
    7984:	e7c5      	b.n	7912 <__gnu_unwind_execute+0xae>
    7986:	23ff      	movs	r3, #255	; 0xff
    7988:	464a      	mov	r2, r9
    798a:	011b      	lsls	r3, r3, #4
    798c:	0019      	movs	r1, r3
    798e:	4382      	bics	r2, r0
    7990:	4111      	asrs	r1, r2
    7992:	000a      	movs	r2, r1
    7994:	401a      	ands	r2, r3
    7996:	0703      	lsls	r3, r0, #28
    7998:	d502      	bpl.n	79a0 <__gnu_unwind_execute+0x13c>
    799a:	2380      	movs	r3, #128	; 0x80
    799c:	01db      	lsls	r3, r3, #7
    799e:	431a      	orrs	r2, r3
    79a0:	2300      	movs	r3, #0
    79a2:	2100      	movs	r1, #0
    79a4:	0028      	movs	r0, r5
    79a6:	f7ff fd5d 	bl	7464 <_Unwind_VRS_Pop>
    79aa:	2800      	cmp	r0, #0
    79ac:	d100      	bne.n	79b0 <__gnu_unwind_execute+0x14c>
    79ae:	e76b      	b.n	7888 <__gnu_unwind_execute+0x24>
    79b0:	e794      	b.n	78dc <__gnu_unwind_execute+0x78>
    79b2:	28b1      	cmp	r0, #177	; 0xb1
    79b4:	d045      	beq.n	7a42 <__gnu_unwind_execute+0x1de>
    79b6:	28b2      	cmp	r0, #178	; 0xb2
    79b8:	d100      	bne.n	79bc <__gnu_unwind_execute+0x158>
    79ba:	e09f      	b.n	7afc <__gnu_unwind_execute+0x298>
    79bc:	28b3      	cmp	r0, #179	; 0xb3
    79be:	d055      	beq.n	7a6c <__gnu_unwind_execute+0x208>
    79c0:	23fc      	movs	r3, #252	; 0xfc
    79c2:	4003      	ands	r3, r0
    79c4:	2bb4      	cmp	r3, #180	; 0xb4
    79c6:	d100      	bne.n	79ca <__gnu_unwind_execute+0x166>
    79c8:	e788      	b.n	78dc <__gnu_unwind_execute+0x78>
    79ca:	464a      	mov	r2, r9
    79cc:	4653      	mov	r3, sl
    79ce:	4002      	ands	r2, r0
    79d0:	3201      	adds	r2, #1
    79d2:	431a      	orrs	r2, r3
    79d4:	2101      	movs	r1, #1
    79d6:	2301      	movs	r3, #1
    79d8:	0028      	movs	r0, r5
    79da:	f7ff fd43 	bl	7464 <_Unwind_VRS_Pop>
    79de:	2800      	cmp	r0, #0
    79e0:	d100      	bne.n	79e4 <__gnu_unwind_execute+0x180>
    79e2:	e751      	b.n	7888 <__gnu_unwind_execute+0x24>
    79e4:	e77a      	b.n	78dc <__gnu_unwind_execute+0x78>
    79e6:	28c6      	cmp	r0, #198	; 0xc6
    79e8:	d04b      	beq.n	7a82 <__gnu_unwind_execute+0x21e>
    79ea:	28c7      	cmp	r0, #199	; 0xc7
    79ec:	d05d      	beq.n	7aaa <__gnu_unwind_execute+0x246>
    79ee:	0003      	movs	r3, r0
    79f0:	464a      	mov	r2, r9
    79f2:	4393      	bics	r3, r2
    79f4:	b2db      	uxtb	r3, r3
    79f6:	2bc0      	cmp	r3, #192	; 0xc0
    79f8:	d06c      	beq.n	7ad4 <__gnu_unwind_execute+0x270>
    79fa:	28c8      	cmp	r0, #200	; 0xc8
    79fc:	d071      	beq.n	7ae2 <__gnu_unwind_execute+0x27e>
    79fe:	28c9      	cmp	r0, #201	; 0xc9
    7a00:	d000      	beq.n	7a04 <__gnu_unwind_execute+0x1a0>
    7a02:	e76b      	b.n	78dc <__gnu_unwind_execute+0x78>
    7a04:	0030      	movs	r0, r6
    7a06:	f7ff ff03 	bl	7810 <next_unwind_byte>
    7a0a:	23f0      	movs	r3, #240	; 0xf0
    7a0c:	0302      	lsls	r2, r0, #12
    7a0e:	031b      	lsls	r3, r3, #12
    7a10:	4013      	ands	r3, r2
    7a12:	4642      	mov	r2, r8
    7a14:	4002      	ands	r2, r0
    7a16:	3201      	adds	r2, #1
    7a18:	e758      	b.n	78cc <__gnu_unwind_execute+0x68>
    7a1a:	9b03      	ldr	r3, [sp, #12]
    7a1c:	2400      	movs	r4, #0
    7a1e:	2b00      	cmp	r3, #0
    7a20:	d000      	beq.n	7a24 <__gnu_unwind_execute+0x1c0>
    7a22:	e75c      	b.n	78de <__gnu_unwind_execute+0x7a>
    7a24:	ae05      	add	r6, sp, #20
    7a26:	220e      	movs	r2, #14
    7a28:	2100      	movs	r1, #0
    7a2a:	0028      	movs	r0, r5
    7a2c:	9600      	str	r6, [sp, #0]
    7a2e:	f7ff fb0d 	bl	704c <_Unwind_VRS_Get>
    7a32:	2300      	movs	r3, #0
    7a34:	220f      	movs	r2, #15
    7a36:	2100      	movs	r1, #0
    7a38:	0028      	movs	r0, r5
    7a3a:	9600      	str	r6, [sp, #0]
    7a3c:	f7ff fb2c 	bl	7098 <_Unwind_VRS_Set>
    7a40:	e74d      	b.n	78de <__gnu_unwind_execute+0x7a>
    7a42:	0030      	movs	r0, r6
    7a44:	f7ff fee4 	bl	7810 <next_unwind_byte>
    7a48:	1e02      	subs	r2, r0, #0
    7a4a:	d100      	bne.n	7a4e <__gnu_unwind_execute+0x1ea>
    7a4c:	e746      	b.n	78dc <__gnu_unwind_execute+0x78>
    7a4e:	0003      	movs	r3, r0
    7a50:	4641      	mov	r1, r8
    7a52:	438b      	bics	r3, r1
    7a54:	b2db      	uxtb	r3, r3
    7a56:	2b00      	cmp	r3, #0
    7a58:	d000      	beq.n	7a5c <__gnu_unwind_execute+0x1f8>
    7a5a:	e73f      	b.n	78dc <__gnu_unwind_execute+0x78>
    7a5c:	2100      	movs	r1, #0
    7a5e:	0028      	movs	r0, r5
    7a60:	f7ff fd00 	bl	7464 <_Unwind_VRS_Pop>
    7a64:	2800      	cmp	r0, #0
    7a66:	d100      	bne.n	7a6a <__gnu_unwind_execute+0x206>
    7a68:	e70e      	b.n	7888 <__gnu_unwind_execute+0x24>
    7a6a:	e737      	b.n	78dc <__gnu_unwind_execute+0x78>
    7a6c:	0030      	movs	r0, r6
    7a6e:	f7ff fecf 	bl	7810 <next_unwind_byte>
    7a72:	23f0      	movs	r3, #240	; 0xf0
    7a74:	0302      	lsls	r2, r0, #12
    7a76:	031b      	lsls	r3, r3, #12
    7a78:	4013      	ands	r3, r2
    7a7a:	4642      	mov	r2, r8
    7a7c:	4002      	ands	r2, r0
    7a7e:	3201      	adds	r2, #1
    7a80:	e7a7      	b.n	79d2 <__gnu_unwind_execute+0x16e>
    7a82:	0030      	movs	r0, r6
    7a84:	f7ff fec4 	bl	7810 <next_unwind_byte>
    7a88:	23f0      	movs	r3, #240	; 0xf0
    7a8a:	0302      	lsls	r2, r0, #12
    7a8c:	031b      	lsls	r3, r3, #12
    7a8e:	4013      	ands	r3, r2
    7a90:	4642      	mov	r2, r8
    7a92:	4002      	ands	r2, r0
    7a94:	3201      	adds	r2, #1
    7a96:	431a      	orrs	r2, r3
    7a98:	2303      	movs	r3, #3
    7a9a:	2103      	movs	r1, #3
    7a9c:	0028      	movs	r0, r5
    7a9e:	f7ff fce1 	bl	7464 <_Unwind_VRS_Pop>
    7aa2:	2800      	cmp	r0, #0
    7aa4:	d100      	bne.n	7aa8 <__gnu_unwind_execute+0x244>
    7aa6:	e6ef      	b.n	7888 <__gnu_unwind_execute+0x24>
    7aa8:	e718      	b.n	78dc <__gnu_unwind_execute+0x78>
    7aaa:	0030      	movs	r0, r6
    7aac:	f7ff feb0 	bl	7810 <next_unwind_byte>
    7ab0:	1e02      	subs	r2, r0, #0
    7ab2:	d100      	bne.n	7ab6 <__gnu_unwind_execute+0x252>
    7ab4:	e712      	b.n	78dc <__gnu_unwind_execute+0x78>
    7ab6:	0003      	movs	r3, r0
    7ab8:	4641      	mov	r1, r8
    7aba:	438b      	bics	r3, r1
    7abc:	b2db      	uxtb	r3, r3
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d000      	beq.n	7ac4 <__gnu_unwind_execute+0x260>
    7ac2:	e70b      	b.n	78dc <__gnu_unwind_execute+0x78>
    7ac4:	2104      	movs	r1, #4
    7ac6:	0028      	movs	r0, r5
    7ac8:	f7ff fccc 	bl	7464 <_Unwind_VRS_Pop>
    7acc:	2800      	cmp	r0, #0
    7ace:	d100      	bne.n	7ad2 <__gnu_unwind_execute+0x26e>
    7ad0:	e6da      	b.n	7888 <__gnu_unwind_execute+0x24>
    7ad2:	e703      	b.n	78dc <__gnu_unwind_execute+0x78>
    7ad4:	4643      	mov	r3, r8
    7ad6:	22a0      	movs	r2, #160	; 0xa0
    7ad8:	401c      	ands	r4, r3
    7ada:	3401      	adds	r4, #1
    7adc:	0312      	lsls	r2, r2, #12
    7ade:	4322      	orrs	r2, r4
    7ae0:	e7da      	b.n	7a98 <__gnu_unwind_execute+0x234>
    7ae2:	0030      	movs	r0, r6
    7ae4:	f7ff fe94 	bl	7810 <next_unwind_byte>
    7ae8:	4643      	mov	r3, r8
    7aea:	0002      	movs	r2, r0
    7aec:	439a      	bics	r2, r3
    7aee:	b2d2      	uxtb	r2, r2
    7af0:	3210      	adds	r2, #16
    7af2:	4018      	ands	r0, r3
    7af4:	0312      	lsls	r2, r2, #12
    7af6:	3001      	adds	r0, #1
    7af8:	4302      	orrs	r2, r0
    7afa:	e6e8      	b.n	78ce <__gnu_unwind_execute+0x6a>
    7afc:	ab05      	add	r3, sp, #20
    7afe:	9300      	str	r3, [sp, #0]
    7b00:	469b      	mov	fp, r3
    7b02:	220d      	movs	r2, #13
    7b04:	2300      	movs	r3, #0
    7b06:	2100      	movs	r1, #0
    7b08:	0028      	movs	r0, r5
    7b0a:	f7ff fa9f 	bl	704c <_Unwind_VRS_Get>
    7b0e:	0030      	movs	r0, r6
    7b10:	f7ff fe7e 	bl	7810 <next_unwind_byte>
    7b14:	0603      	lsls	r3, r0, #24
    7b16:	d51a      	bpl.n	7b4e <__gnu_unwind_execute+0x2ea>
    7b18:	277f      	movs	r7, #127	; 0x7f
    7b1a:	3cb0      	subs	r4, #176	; 0xb0
    7b1c:	9b05      	ldr	r3, [sp, #20]
    7b1e:	4038      	ands	r0, r7
    7b20:	40a0      	lsls	r0, r4
    7b22:	469c      	mov	ip, r3
    7b24:	4460      	add	r0, ip
    7b26:	9005      	str	r0, [sp, #20]
    7b28:	0030      	movs	r0, r6
    7b2a:	3407      	adds	r4, #7
    7b2c:	f7ff fe70 	bl	7810 <next_unwind_byte>
    7b30:	0603      	lsls	r3, r0, #24
    7b32:	d4f3      	bmi.n	7b1c <__gnu_unwind_execute+0x2b8>
    7b34:	2181      	movs	r1, #129	; 0x81
    7b36:	237f      	movs	r3, #127	; 0x7f
    7b38:	0089      	lsls	r1, r1, #2
    7b3a:	468c      	mov	ip, r1
    7b3c:	4003      	ands	r3, r0
    7b3e:	40a3      	lsls	r3, r4
    7b40:	9a05      	ldr	r2, [sp, #20]
    7b42:	4462      	add	r2, ip
    7b44:	189b      	adds	r3, r3, r2
    7b46:	9305      	str	r3, [sp, #20]
    7b48:	465b      	mov	r3, fp
    7b4a:	9300      	str	r3, [sp, #0]
    7b4c:	e6e4      	b.n	7918 <__gnu_unwind_execute+0xb4>
    7b4e:	2402      	movs	r4, #2
    7b50:	e7f0      	b.n	7b34 <__gnu_unwind_execute+0x2d0>
    7b52:	46c0      	nop			; (mov r8, r8)

00007b54 <__gnu_unwind_frame>:
    7b54:	0003      	movs	r3, r0
    7b56:	b500      	push	{lr}
    7b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    7b5a:	b085      	sub	sp, #20
    7b5c:	6853      	ldr	r3, [r2, #4]
    7b5e:	0008      	movs	r0, r1
    7b60:	3208      	adds	r2, #8
    7b62:	0219      	lsls	r1, r3, #8
    7b64:	9101      	str	r1, [sp, #4]
    7b66:	9202      	str	r2, [sp, #8]
    7b68:	4669      	mov	r1, sp
    7b6a:	2203      	movs	r2, #3
    7b6c:	0e1b      	lsrs	r3, r3, #24
    7b6e:	730a      	strb	r2, [r1, #12]
    7b70:	734b      	strb	r3, [r1, #13]
    7b72:	a901      	add	r1, sp, #4
    7b74:	f7ff fe76 	bl	7864 <__gnu_unwind_execute>
    7b78:	b005      	add	sp, #20
    7b7a:	bd00      	pop	{pc}

00007b7c <_Unwind_GetRegionStart>:
    7b7c:	b510      	push	{r4, lr}
    7b7e:	f7ff fe6d 	bl	785c <unwind_UCB_from_context>
    7b82:	6c80      	ldr	r0, [r0, #72]	; 0x48
    7b84:	bd10      	pop	{r4, pc}
    7b86:	46c0      	nop			; (mov r8, r8)

00007b88 <_Unwind_GetLanguageSpecificData>:
    7b88:	b510      	push	{r4, lr}
    7b8a:	f7ff fe67 	bl	785c <unwind_UCB_from_context>
    7b8e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    7b90:	79d0      	ldrb	r0, [r2, #7]
    7b92:	3002      	adds	r0, #2
    7b94:	0080      	lsls	r0, r0, #2
    7b96:	1810      	adds	r0, r2, r0
    7b98:	bd10      	pop	{r4, pc}
    7b9a:	46c0      	nop			; (mov r8, r8)

00007b9c <__clzsi2>:
    7b9c:	211c      	movs	r1, #28
    7b9e:	2301      	movs	r3, #1
    7ba0:	041b      	lsls	r3, r3, #16
    7ba2:	4298      	cmp	r0, r3
    7ba4:	d301      	bcc.n	7baa <__clzsi2+0xe>
    7ba6:	0c00      	lsrs	r0, r0, #16
    7ba8:	3910      	subs	r1, #16
    7baa:	0a1b      	lsrs	r3, r3, #8
    7bac:	4298      	cmp	r0, r3
    7bae:	d301      	bcc.n	7bb4 <__clzsi2+0x18>
    7bb0:	0a00      	lsrs	r0, r0, #8
    7bb2:	3908      	subs	r1, #8
    7bb4:	091b      	lsrs	r3, r3, #4
    7bb6:	4298      	cmp	r0, r3
    7bb8:	d301      	bcc.n	7bbe <__clzsi2+0x22>
    7bba:	0900      	lsrs	r0, r0, #4
    7bbc:	3904      	subs	r1, #4
    7bbe:	a202      	add	r2, pc, #8	; (adr r2, 7bc8 <__clzsi2+0x2c>)
    7bc0:	5c10      	ldrb	r0, [r2, r0]
    7bc2:	1840      	adds	r0, r0, r1
    7bc4:	4770      	bx	lr
    7bc6:	46c0      	nop			; (mov r8, r8)
    7bc8:	02020304 	.word	0x02020304
    7bcc:	01010101 	.word	0x01010101
	...

00007bd8 <__clzdi2>:
    7bd8:	b510      	push	{r4, lr}
    7bda:	2900      	cmp	r1, #0
    7bdc:	d103      	bne.n	7be6 <__clzdi2+0xe>
    7bde:	f7ff ffdd 	bl	7b9c <__clzsi2>
    7be2:	3020      	adds	r0, #32
    7be4:	e002      	b.n	7bec <__clzdi2+0x14>
    7be6:	0008      	movs	r0, r1
    7be8:	f7ff ffd8 	bl	7b9c <__clzsi2>
    7bec:	bd10      	pop	{r4, pc}
    7bee:	46c0      	nop			; (mov r8, r8)

00007bf0 <SystemInit>:
{
#if defined(HAL_ICACHE_MODULE_ENABLED) || defined(HAL_DCACHE_MODULE_ENABLED)
    uint32_t status;

    /* stb enable, stb_entry=7, stb_timeout enable, write back */
    DCACHE->CACHE_CTRL |= DCACHE_CACHE_CTRL_CACHE_EN_MASK |
    7bf0:	4a07      	ldr	r2, [pc, #28]	; (7c10 <SystemInit+0x20>)
    7bf2:	4b08      	ldr	r3, [pc, #32]	; (7c14 <SystemInit+0x24>)
    7bf4:	6811      	ldr	r1, [r2, #0]
    7bf6:	430b      	orrs	r3, r1
    7bf8:	6013      	str	r3, [r2, #0]
                          (7U << DCACHE_CACHE_CTRL_CACHE_ENTRY_THRESH_SHIFT) |
                          DCACHE_CACHE_CTRL_STB_TIMEOUT_EN_MASK;
    DCACHE->STB_TIMEOUT_CTRL = 1;
    7bfa:	2301      	movs	r3, #1

    do {
        status =
    7bfc:	2101      	movs	r1, #1
    DCACHE->STB_TIMEOUT_CTRL = 1;
    7bfe:	60d3      	str	r3, [r2, #12]
            DCACHE->CACHE_STATUS & DCACHE_CACHE_STATUS_CACHE_INIT_FINISH_MASK;
    7c00:	6b13      	ldr	r3, [r2, #48]	; 0x30
    } while (status == 0);
    7c02:	4219      	tst	r1, r3
    7c04:	d0fc      	beq.n	7c00 <SystemInit+0x10>

    DCACHE->CACHE_CTRL &= ~DCACHE_CACHE_CTRL_CACHE_BYPASS_MASK;
    7c06:	2140      	movs	r1, #64	; 0x40
    7c08:	6813      	ldr	r3, [r2, #0]
    7c0a:	438b      	bics	r3, r1
    7c0c:	6013      	str	r3, [r2, #0]
#endif
}
    7c0e:	4770      	bx	lr
    7c10:	f6f10000 	.word	0xf6f10000
    7c14:	00000781 	.word	0x00000781

00007c18 <HAL_Init>:
/**
 * @brief  Init HAL driver basic code.
 * @return HAL_OK.
 */
HAL_Status HAL_Init(void)
{
    7c18:	b510      	push	{r4, lr}
#ifdef __CORTEX_M
#ifdef HAL_NVIC_MODULE_ENABLED
    /* Set Interrupt Group Priority */
    HAL_NVIC_Init();
    7c1a:	f000 f9d9 	bl	7fd0 <HAL_NVIC_Init>

    /* Set Interrupt Group Priority */
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_DEFAULT);
    7c1e:	2002      	movs	r0, #2
    7c20:	f000 f986 	bl	7f30 <HAL_NVIC_SetPriorityGrouping>
#endif
#endif

#if defined(SYS_TIMER) && defined(HAL_TIMER_MODULE_ENABLED)
    HAL_TIMER_SysTimerInit(SYS_TIMER);
    7c24:	4802      	ldr	r0, [pc, #8]	; (7c30 <HAL_Init+0x18>)
    7c26:	f000 fa1d 	bl	8064 <HAL_TIMER_SysTimerInit>
#ifdef HAL_PINCTRL_MODULE_ENABLED
    HAL_PINCTRL_Init();
#endif

    return HAL_OK;
}
    7c2a:	2000      	movs	r0, #0
    7c2c:	bd10      	pop	{r4, pc}
    7c2e:	46c0      	nop			; (mov r8, r8)
    7c30:	fd8f0000 	.word	0xfd8f0000

00007c34 <HAL_IncTick>:
 * @brief  Count plus tickFreq when interrupt occurs.
 * @return HAL_Status: HAL_OK.
 */
HAL_Status HAL_IncTick(void)
{
    uwTick += uwTickFreq;
    7c34:	4a03      	ldr	r2, [pc, #12]	; (7c44 <HAL_IncTick+0x10>)
    7c36:	4b04      	ldr	r3, [pc, #16]	; (7c48 <HAL_IncTick+0x14>)
    7c38:	6811      	ldr	r1, [r2, #0]
    7c3a:	781b      	ldrb	r3, [r3, #0]

    return HAL_OK;
}
    7c3c:	2000      	movs	r0, #0
    uwTick += uwTickFreq;
    7c3e:	185b      	adds	r3, r3, r1
    7c40:	6013      	str	r3, [r2, #0]
}
    7c42:	4770      	bx	lr
    7c44:	00017a34 	.word	0x00017a34
    7c48:	00017220 	.word	0x00017220

00007c4c <HAL_GetSysTimerCount>:
 * @brief  Provides system timer count.
 * @return uint64_t: timer count.
 * @attention this API allow direct use in the HAL layer.
 */
uint64_t HAL_GetSysTimerCount(void)
{
    7c4c:	b510      	push	{r4, lr}
#if defined(SYS_TIMER) && defined(HAL_TIMER_MODULE_ENABLED)
    uint64_t count = HAL_TIMER_GetCount(SYS_TIMER);
    7c4e:	4804      	ldr	r0, [pc, #16]	; (7c60 <HAL_GetSysTimerCount+0x14>)
    7c50:	f000 fa64 	bl	811c <HAL_TIMER_GetCount>
    if (count >> 62) {
    7c54:	0f8b      	lsrs	r3, r1, #30
    7c56:	d001      	beq.n	7c5c <HAL_GetSysTimerCount+0x10>
        count = ~count;
    7c58:	43c0      	mvns	r0, r0
    7c5a:	43c9      	mvns	r1, r1
    return count;
#else

    return 0LLU;
#endif
}
    7c5c:	bd10      	pop	{r4, pc}
    7c5e:	46c0      	nop			; (mov r8, r8)
    7c60:	fd8f0000 	.word	0xfd8f0000

00007c64 <HAL_SetTickFreq>:
  */
HAL_Status HAL_SetTickFreq(eHAL_tickFreq freq)
{
    HAL_ASSERT(IS_TICKFREQ(freq));

    uwTickFreq = freq;
    7c64:	4b01      	ldr	r3, [pc, #4]	; (7c6c <HAL_SetTickFreq+0x8>)
    7c66:	7018      	strb	r0, [r3, #0]

    return HAL_OK;
}
    7c68:	2000      	movs	r0, #0
    7c6a:	4770      	bx	lr
    7c6c:	00017220 	.word	0x00017220

00007c70 <HAL_ICACHE_EnableInt>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7c70:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    7c74:	b672      	cpsid	i
#if defined(CACHE_REVISION) && (CACHE_REVISION == 0x00000100U)
    unsigned long flags;

    flags = HAL_SYS_EnterCriticalSection();

    ICACHE->CACHE_INT_EN |= ICACHE_CACHE_INT_EN_ERR_RECORD_EN_MASK;
    7c76:	2001      	movs	r0, #1
    7c78:	4a03      	ldr	r2, [pc, #12]	; (7c88 <HAL_ICACHE_EnableInt+0x18>)
    7c7a:	6a13      	ldr	r3, [r2, #32]
    7c7c:	4303      	orrs	r3, r0
    7c7e:	6213      	str	r3, [r2, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    7c80:	f381 8810 	msr	PRIMASK, r1
#endif

#endif

    return HAL_OK;
}
    7c84:	2000      	movs	r0, #0
    7c86:	4770      	bx	lr
    7c88:	f6f10000 	.word	0xf6f10000

00007c8c <HAL_DCACHE_EnableInt>:
    7c8c:	f3ef 8110 	mrs	r1, PRIMASK
    7c90:	b672      	cpsid	i
    7c92:	2001      	movs	r0, #1
    7c94:	4a03      	ldr	r2, [pc, #12]	; (7ca4 <HAL_DCACHE_EnableInt+0x18>)
    7c96:	6a13      	ldr	r3, [r2, #32]
    7c98:	4303      	orrs	r3, r0
    7c9a:	6213      	str	r3, [r2, #32]
    7c9c:	f381 8810 	msr	PRIMASK, r1
    7ca0:	2000      	movs	r0, #0
    7ca2:	4770      	bx	lr
    7ca4:	f6f10000 	.word	0xf6f10000

00007ca8 <MBOX_RecvMsg>:
}

static HAL_Status MBOX_RecvMsg(struct MBOX_DEV *mbox, eMBOX_CH chan)
{
    const struct MBOX_CLIENT *cl;
    struct MBOX_CMD_DAT msg = { 0, 0 };
    7ca8:	2300      	movs	r3, #0
{
    7caa:	b500      	push	{lr}
    7cac:	b083      	sub	sp, #12
    struct MBOX_CMD_DAT msg = { 0, 0 };
    7cae:	9300      	str	r3, [sp, #0]
    7cb0:	9301      	str	r3, [sp, #4]
    if (isA2B) {
    7cb2:	7d02      	ldrb	r2, [r0, #20]

    MBOX_ChanRecvMsg(&msg, mbox->pReg, chan, mbox->A2B);
    7cb4:	6803      	ldr	r3, [r0, #0]
    if (isA2B) {
    7cb6:	2a00      	cmp	r2, #0
    7cb8:	d013      	beq.n	7ce2 <MBOX_RecvMsg+0x3a>
        msg->CMD = pReg->B2A[chan].CMD;
    7cba:	00ca      	lsls	r2, r1, #3
    7cbc:	189b      	adds	r3, r3, r2
    7cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7cc0:	9200      	str	r2, [sp, #0]
        msg->DATA = pReg->B2A[chan].DATA;
    7cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7cc4:	9301      	str	r3, [sp, #4]

    cl = mbox->chans[chan].client;
    7cc6:	0089      	lsls	r1, r1, #2
    7cc8:	1841      	adds	r1, r0, r1
    7cca:	684b      	ldr	r3, [r1, #4]
    if (cl && cl->RXCallback) {
    7ccc:	2b00      	cmp	r3, #0
    7cce:	d005      	beq.n	7cdc <MBOX_RecvMsg+0x34>
    7cd0:	695a      	ldr	r2, [r3, #20]
    7cd2:	2a00      	cmp	r2, #0
    7cd4:	d002      	beq.n	7cdc <MBOX_RecvMsg+0x34>
        cl->RXCallback(&msg, cl->callbackData);
    7cd6:	4668      	mov	r0, sp
    7cd8:	6999      	ldr	r1, [r3, #24]
    7cda:	4790      	blx	r2
    }

    return HAL_OK;
}
    7cdc:	2000      	movs	r0, #0
    7cde:	b003      	add	sp, #12
    7ce0:	bd00      	pop	{pc}
        msg->CMD = pReg->A2B[chan].CMD;
    7ce2:	00ca      	lsls	r2, r1, #3
    7ce4:	189b      	adds	r3, r3, r2
    7ce6:	689a      	ldr	r2, [r3, #8]
    7ce8:	9200      	str	r2, [sp, #0]
        msg->DATA = pReg->A2B[chan].DATA;
    7cea:	68db      	ldr	r3, [r3, #12]
    7cec:	9301      	str	r3, [sp, #4]
    7cee:	e7ea      	b.n	7cc6 <MBOX_RecvMsg+0x1e>

00007cf0 <HAL_MBOX_SendMsg2>:
 * @param  isA2B: the direction that message to send
 * @return HAL_Status
 */
HAL_Status HAL_MBOX_SendMsg2(struct MBOX_REG *pReg, eMBOX_CH chan,
                             const struct MBOX_CMD_DAT *msg, uint8_t isA2B)
{
    7cf0:	b510      	push	{r4, lr}
    uint32_t status;

    HAL_ASSERT(IS_MBOX_INSTANCE(pReg) && IS_VALID_CHAN(chan) && msg);

    if (isA2B) {
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d00d      	beq.n	7d12 <HAL_MBOX_SendMsg2+0x22>
    return pReg->A2B_STATUS & 0x0f;
    7cf6:	230f      	movs	r3, #15
    7cf8:	6844      	ldr	r4, [r0, #4]
    7cfa:	4023      	ands	r3, r4
    } else {
        status = MBOX_B2AIntStGet(pReg);
    }

    /* Previous message has not been consumed. */
    if (status & (1UL << chan)) {
    7cfc:	40cb      	lsrs	r3, r1
    7cfe:	07db      	lsls	r3, r3, #31
    7d00:	d415      	bmi.n	7d2e <HAL_MBOX_SendMsg2+0x3e>
        pReg->A2B[chan].CMD = msg->CMD;
    7d02:	6813      	ldr	r3, [r2, #0]
    7d04:	00c9      	lsls	r1, r1, #3
    7d06:	1841      	adds	r1, r0, r1
    7d08:	608b      	str	r3, [r1, #8]
        pReg->A2B[chan].DATA = msg->DATA;
    7d0a:	6853      	ldr	r3, [r2, #4]
        return HAL_BUSY;
    }

    MBOX_ChanSendMsg(pReg, chan, isA2B, msg);

    return HAL_OK;
    7d0c:	2000      	movs	r0, #0
        pReg->A2B[chan].DATA = msg->DATA;
    7d0e:	60cb      	str	r3, [r1, #12]
    7d10:	e00c      	b.n	7d2c <HAL_MBOX_SendMsg2+0x3c>
    return pReg->B2A_STATUS & 0x0f;
    7d12:	230f      	movs	r3, #15
    7d14:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    7d16:	4023      	ands	r3, r4
    if (status & (1UL << chan)) {
    7d18:	40cb      	lsrs	r3, r1
    7d1a:	07db      	lsls	r3, r3, #31
    7d1c:	d407      	bmi.n	7d2e <HAL_MBOX_SendMsg2+0x3e>
        pReg->B2A[chan].CMD = msg->CMD;
    7d1e:	00c9      	lsls	r1, r1, #3
    7d20:	1841      	adds	r1, r0, r1
    return HAL_OK;
    7d22:	2000      	movs	r0, #0
        pReg->B2A[chan].CMD = msg->CMD;
    7d24:	6813      	ldr	r3, [r2, #0]
    7d26:	630b      	str	r3, [r1, #48]	; 0x30
        pReg->B2A[chan].DATA = msg->DATA;
    7d28:	6853      	ldr	r3, [r2, #4]
    7d2a:	634b      	str	r3, [r1, #52]	; 0x34
}
    7d2c:	bd10      	pop	{r4, pc}
        return HAL_BUSY;
    7d2e:	2010      	movs	r0, #16
    7d30:	4240      	negs	r0, r0
    7d32:	e7fb      	b.n	7d2c <HAL_MBOX_SendMsg2+0x3c>

00007d34 <HAL_MBOX_IrqHandler>:
 * @param  pReg: mailbox base addr
 * @return result of the interrupt handling
 * Common interrupt handler is always wrapped by the driver.
 */
HAL_Status HAL_MBOX_IrqHandler(int irq, struct MBOX_REG *pReg)
{
    7d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d36:	46c6      	mov	lr, r8
    7d38:	0006      	movs	r6, r0
    7d3a:	b500      	push	{lr}
    struct MBOX_DEV *pMBox;
    uint32_t chan;
    HAL_Status ret = HAL_OK;

    if (irq < 0 || !IS_MBOX_INSTANCE(pReg)) {
    7d3c:	2800      	cmp	r0, #0
    7d3e:	db48      	blt.n	7dd2 <HAL_MBOX_IrqHandler+0x9e>
    7d40:	4b25      	ldr	r3, [pc, #148]	; (7dd8 <HAL_MBOX_IrqHandler+0xa4>)
    7d42:	4299      	cmp	r1, r3
    7d44:	d145      	bne.n	7dd2 <HAL_MBOX_IrqHandler+0x9e>
        if (pReg == g_MBoxDevs[i].pReg) {
    7d46:	4d25      	ldr	r5, [pc, #148]	; (7ddc <HAL_MBOX_IrqHandler+0xa8>)
    7d48:	682b      	ldr	r3, [r5, #0]
    7d4a:	428b      	cmp	r3, r1
    7d4c:	d007      	beq.n	7d5e <HAL_MBOX_IrqHandler+0x2a>
    7d4e:	69ab      	ldr	r3, [r5, #24]
    7d50:	428b      	cmp	r3, r1
    7d52:	d039      	beq.n	7dc8 <HAL_MBOX_IrqHandler+0x94>
        return HAL_INVAL;
    }

    pMBox = MBOX_FindEntry(pReg);
    if (!pMBox) {
        return HAL_NODEV;
    7d54:	2013      	movs	r0, #19
    7d56:	4240      	negs	r0, r0
            break;
        }
    }

    return ret;
}
    7d58:	bc80      	pop	{r7}
    7d5a:	46b8      	mov	r8, r7
    7d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pReg == g_MBoxDevs[i].pReg) {
    7d5e:	46a8      	mov	r8, r5
    for (i = 0; i < MBOX_CNT; i++) {
    7d60:	2200      	movs	r2, #0
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++) {
    7d62:	0053      	lsls	r3, r2, #1
    7d64:	189b      	adds	r3, r3, r2
    7d66:	00db      	lsls	r3, r3, #3
    7d68:	18ed      	adds	r5, r5, r3
    7d6a:	2400      	movs	r4, #0
        if (!MBOX_ChanIntStGet(pReg, (eMBOX_CH)chan, pMBox->A2B)) {
    7d6c:	002f      	movs	r7, r5
        if (irq != pMBox->chans[chan].client->irq) {
    7d6e:	686b      	ldr	r3, [r5, #4]
    7d70:	691b      	ldr	r3, [r3, #16]
    7d72:	42b3      	cmp	r3, r6
    7d74:	d117      	bne.n	7da6 <HAL_MBOX_IrqHandler+0x72>
    if (isA2B) {
    7d76:	7d3b      	ldrb	r3, [r7, #20]
    7d78:	2b00      	cmp	r3, #0
    7d7a:	d11a      	bne.n	7db2 <HAL_MBOX_IrqHandler+0x7e>
    return pReg->A2B_STATUS & (1UL << chan);
    7d7c:	2201      	movs	r2, #1
    7d7e:	40a2      	lsls	r2, r4
    7d80:	4b15      	ldr	r3, [pc, #84]	; (7dd8 <HAL_MBOX_IrqHandler+0xa4>)
    7d82:	685b      	ldr	r3, [r3, #4]
    7d84:	4013      	ands	r3, r2
        if (!MBOX_ChanIntStGet(pReg, (eMBOX_CH)chan, pMBox->A2B)) {
    7d86:	2b00      	cmp	r3, #0
    7d88:	d00d      	beq.n	7da6 <HAL_MBOX_IrqHandler+0x72>
        ret = MBOX_RecvMsg(pMBox, (eMBOX_CH)chan);
    7d8a:	4640      	mov	r0, r8
    7d8c:	b2e1      	uxtb	r1, r4
    7d8e:	f7ff ff8b 	bl	7ca8 <MBOX_RecvMsg>
    if (isA2B) {
    7d92:	7d3a      	ldrb	r2, [r7, #20]
        ret = MBOX_RecvMsg(pMBox, (eMBOX_CH)chan);
    7d94:	0003      	movs	r3, r0
    if (isA2B) {
    7d96:	2a00      	cmp	r2, #0
    7d98:	d011      	beq.n	7dbe <HAL_MBOX_IrqHandler+0x8a>
        pReg->B2A_STATUS = 1UL << chan;
    7d9a:	2201      	movs	r2, #1
    7d9c:	40a2      	lsls	r2, r4
    7d9e:	490e      	ldr	r1, [pc, #56]	; (7dd8 <HAL_MBOX_IrqHandler+0xa4>)
    7da0:	62ca      	str	r2, [r1, #44]	; 0x2c
        if (ret) {
    7da2:	2b00      	cmp	r3, #0
    7da4:	d1d8      	bne.n	7d58 <HAL_MBOX_IrqHandler+0x24>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++) {
    7da6:	3401      	adds	r4, #1
    7da8:	3504      	adds	r5, #4
    7daa:	2c04      	cmp	r4, #4
    7dac:	d1df      	bne.n	7d6e <HAL_MBOX_IrqHandler+0x3a>
    7dae:	2000      	movs	r0, #0
    7db0:	e7d2      	b.n	7d58 <HAL_MBOX_IrqHandler+0x24>
        return pReg->B2A_STATUS & (1UL << chan);
    7db2:	2201      	movs	r2, #1
    7db4:	40a2      	lsls	r2, r4
    7db6:	4b08      	ldr	r3, [pc, #32]	; (7dd8 <HAL_MBOX_IrqHandler+0xa4>)
    7db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7dba:	4013      	ands	r3, r2
    7dbc:	e7e3      	b.n	7d86 <HAL_MBOX_IrqHandler+0x52>
        pReg->A2B_STATUS = 1UL << chan;
    7dbe:	2201      	movs	r2, #1
    7dc0:	40a2      	lsls	r2, r4
    7dc2:	4905      	ldr	r1, [pc, #20]	; (7dd8 <HAL_MBOX_IrqHandler+0xa4>)
    7dc4:	604a      	str	r2, [r1, #4]
    7dc6:	e7ec      	b.n	7da2 <HAL_MBOX_IrqHandler+0x6e>
        if (pReg == g_MBoxDevs[i].pReg) {
    7dc8:	2318      	movs	r3, #24
    7dca:	4698      	mov	r8, r3
    for (i = 0; i < MBOX_CNT; i++) {
    7dcc:	2201      	movs	r2, #1
        if (pReg == g_MBoxDevs[i].pReg) {
    7dce:	44a8      	add	r8, r5
    7dd0:	e7c7      	b.n	7d62 <HAL_MBOX_IrqHandler+0x2e>
        return HAL_INVAL;
    7dd2:	2016      	movs	r0, #22
    7dd4:	4240      	negs	r0, r0
    7dd6:	e7bf      	b.n	7d58 <HAL_MBOX_IrqHandler+0x24>
    7dd8:	fec60000 	.word	0xfec60000
    7ddc:	00017a38 	.word	0x00017a38

00007de0 <HAL_MBOX_Init>:
    int i;

    HAL_ASSERT(IS_MBOX_INSTANCE(pReg));

    for (i = 0; i < MBOX_CNT; i++) {
        if (!g_MBoxDevs[i].pReg) {
    7de0:	4b0d      	ldr	r3, [pc, #52]	; (7e18 <HAL_MBOX_Init+0x38>)
{
    7de2:	b510      	push	{r4, lr}
        if (!g_MBoxDevs[i].pReg) {
    7de4:	681a      	ldr	r2, [r3, #0]
    7de6:	2a00      	cmp	r2, #0
    7de8:	d005      	beq.n	7df6 <HAL_MBOX_Init+0x16>
    7dea:	699a      	ldr	r2, [r3, #24]
    7dec:	2a00      	cmp	r2, #0
    7dee:	d010      	beq.n	7e12 <HAL_MBOX_Init+0x32>
            break;
        }
    }

    if (!pMBox) {
        return HAL_INVAL;
    7df0:	2016      	movs	r0, #22
    7df2:	4240      	negs	r0, r0
    for (chan = 0; chan < MBOX_CH_MAX; chan++) {
        pMBox->chans[chan].client = NULL;
    }

    return HAL_OK;
}
    7df4:	bd10      	pop	{r4, pc}
    for (i = 0; i < MBOX_CNT; i++) {
    7df6:	2400      	movs	r4, #0
    pMBox->pReg = pReg;
    7df8:	0062      	lsls	r2, r4, #1
    7dfa:	1912      	adds	r2, r2, r4
    7dfc:	00d2      	lsls	r2, r2, #3
    7dfe:	5098      	str	r0, [r3, r2]
    pMBox->A2B = isA2B;
    7e00:	189b      	adds	r3, r3, r2
        pMBox->chans[chan].client = NULL;
    7e02:	2200      	movs	r2, #0
    return HAL_OK;
    7e04:	2000      	movs	r0, #0
    pMBox->A2B = isA2B;
    7e06:	7519      	strb	r1, [r3, #20]
        pMBox->chans[chan].client = NULL;
    7e08:	605a      	str	r2, [r3, #4]
    7e0a:	609a      	str	r2, [r3, #8]
    7e0c:	60da      	str	r2, [r3, #12]
    7e0e:	611a      	str	r2, [r3, #16]
    for (chan = 0; chan < MBOX_CH_MAX; chan++) {
    7e10:	e7f0      	b.n	7df4 <HAL_MBOX_Init+0x14>
    for (i = 0; i < MBOX_CNT; i++) {
    7e12:	2401      	movs	r4, #1
    7e14:	e7f0      	b.n	7df8 <HAL_MBOX_Init+0x18>
    7e16:	46c0      	nop			; (mov r8, r8)
    7e18:	00017a38 	.word	0x00017a38

00007e1c <HAL_MBOX_DeInit>:
        if (pReg == g_MBoxDevs[i].pReg) {
    7e1c:	4b0c      	ldr	r3, [pc, #48]	; (7e50 <HAL_MBOX_DeInit+0x34>)
    7e1e:	681a      	ldr	r2, [r3, #0]
    7e20:	4290      	cmp	r0, r2
    7e22:	d005      	beq.n	7e30 <HAL_MBOX_DeInit+0x14>
    7e24:	699a      	ldr	r2, [r3, #24]
    7e26:	4290      	cmp	r0, r2
    7e28:	d00f      	beq.n	7e4a <HAL_MBOX_DeInit+0x2e>
    uint32_t chan;

    HAL_ASSERT(IS_MBOX_INSTANCE(pReg));
    pMBox = MBOX_FindEntry(pReg);
    if (!pMBox) {
        return HAL_NODEV;
    7e2a:	2013      	movs	r0, #19
    7e2c:	4240      	negs	r0, r0
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++) {
        pMBox->chans[chan].client = NULL;
    }

    return HAL_OK;
}
    7e2e:	4770      	bx	lr
    for (i = 0; i < MBOX_CNT; i++) {
    7e30:	2100      	movs	r1, #0
    pMBox->pReg = NULL;
    7e32:	004a      	lsls	r2, r1, #1
    7e34:	1852      	adds	r2, r2, r1
    7e36:	2100      	movs	r1, #0
    7e38:	00d2      	lsls	r2, r2, #3
    7e3a:	5099      	str	r1, [r3, r2]
        pMBox->chans[chan].client = NULL;
    7e3c:	189b      	adds	r3, r3, r2
    return HAL_OK;
    7e3e:	2000      	movs	r0, #0
        pMBox->chans[chan].client = NULL;
    7e40:	6059      	str	r1, [r3, #4]
    7e42:	6099      	str	r1, [r3, #8]
    7e44:	60d9      	str	r1, [r3, #12]
    7e46:	6119      	str	r1, [r3, #16]
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++) {
    7e48:	e7f1      	b.n	7e2e <HAL_MBOX_DeInit+0x12>
    for (i = 0; i < MBOX_CNT; i++) {
    7e4a:	2101      	movs	r1, #1
    7e4c:	e7f1      	b.n	7e32 <HAL_MBOX_DeInit+0x16>
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	00017a38 	.word	0x00017a38

00007e54 <HAL_MBOX_RegisterClient>:
 * @param  cl: mailbox client wanna register
 * @return HAL_Status
 */
HAL_Status HAL_MBOX_RegisterClient(struct MBOX_REG *pReg, eMBOX_CH chan,
                                   const struct MBOX_CLIENT *cl)
{
    7e54:	b570      	push	{r4, r5, r6, lr}
        if (pReg == g_MBoxDevs[i].pReg) {
    7e56:	4d17      	ldr	r5, [pc, #92]	; (7eb4 <HAL_MBOX_RegisterClient+0x60>)
    7e58:	682b      	ldr	r3, [r5, #0]
    7e5a:	4298      	cmp	r0, r3
    7e5c:	d005      	beq.n	7e6a <HAL_MBOX_RegisterClient+0x16>
    7e5e:	69ab      	ldr	r3, [r5, #24]
    7e60:	4298      	cmp	r0, r3
    7e62:	d022      	beq.n	7eaa <HAL_MBOX_RegisterClient+0x56>

    HAL_ASSERT(IS_MBOX_INSTANCE(pReg) && IS_VALID_CHAN(chan) && cl);

    pMBox = MBOX_FindEntry(pReg);
    if (!pMBox) {
        return HAL_NODEV;
    7e64:	2013      	movs	r0, #19
    7e66:	4240      	negs	r0, r0

    pMBox->chans[chan].client = cl;
    MBOX_ChanEnable(pReg, chan, pMBox->A2B);

    return HAL_OK;
}
    7e68:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < MBOX_CNT; i++) {
    7e6a:	2300      	movs	r3, #0
    if (pMBox->chans[chan].client) {
    7e6c:	005c      	lsls	r4, r3, #1
    7e6e:	18e4      	adds	r4, r4, r3
    7e70:	0063      	lsls	r3, r4, #1
    7e72:	185b      	adds	r3, r3, r1
    7e74:	009b      	lsls	r3, r3, #2
    7e76:	18eb      	adds	r3, r5, r3
    7e78:	685e      	ldr	r6, [r3, #4]
    7e7a:	2e00      	cmp	r6, #0
    7e7c:	d117      	bne.n	7eae <HAL_MBOX_RegisterClient+0x5a>
    MBOX_ChanEnable(pReg, chan, pMBox->A2B);
    7e7e:	00e4      	lsls	r4, r4, #3
    pMBox->chans[chan].client = cl;
    7e80:	605a      	str	r2, [r3, #4]
    MBOX_ChanEnable(pReg, chan, pMBox->A2B);
    7e82:	192c      	adds	r4, r5, r4
    if (isA2B) {
    7e84:	7d23      	ldrb	r3, [r4, #20]
    7e86:	2b00      	cmp	r3, #0
    7e88:	d007      	beq.n	7e9a <HAL_MBOX_RegisterClient+0x46>
        pReg->B2A_STATUS = 1UL << chan;
    7e8a:	2301      	movs	r3, #1
    7e8c:	408b      	lsls	r3, r1
    7e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
        pReg->B2A_INTEN |= 1UL << chan;
    7e90:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7e92:	4313      	orrs	r3, r2
    7e94:	6283      	str	r3, [r0, #40]	; 0x28
    return HAL_OK;
    7e96:	2000      	movs	r0, #0
}
    7e98:	e7e6      	b.n	7e68 <HAL_MBOX_RegisterClient+0x14>
        pReg->A2B_STATUS = 1UL << chan;
    7e9a:	2301      	movs	r3, #1
    7e9c:	408b      	lsls	r3, r1
    7e9e:	6043      	str	r3, [r0, #4]
        pReg->A2B_INTEN |= 1UL << chan;
    7ea0:	6802      	ldr	r2, [r0, #0]
    7ea2:	4313      	orrs	r3, r2
    7ea4:	6003      	str	r3, [r0, #0]
    return HAL_OK;
    7ea6:	2000      	movs	r0, #0
    7ea8:	e7de      	b.n	7e68 <HAL_MBOX_RegisterClient+0x14>
    for (i = 0; i < MBOX_CNT; i++) {
    7eaa:	2301      	movs	r3, #1
    7eac:	e7de      	b.n	7e6c <HAL_MBOX_RegisterClient+0x18>
        return HAL_BUSY;
    7eae:	2010      	movs	r0, #16
    7eb0:	4240      	negs	r0, r0
    7eb2:	e7d9      	b.n	7e68 <HAL_MBOX_RegisterClient+0x14>
    7eb4:	00017a38 	.word	0x00017a38

00007eb8 <HAL_MBOX_UnregisterClient>:
 * @param  cl: mailbox client wanna register
 * @return HAL_Status
 */
HAL_Status HAL_MBOX_UnregisterClient(struct MBOX_REG *pReg, eMBOX_CH chan,
                                     const struct MBOX_CLIENT *cl)
{
    7eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (pReg == g_MBoxDevs[i].pReg) {
    7eba:	4e1a      	ldr	r6, [pc, #104]	; (7f24 <HAL_MBOX_UnregisterClient+0x6c>)
    7ebc:	6833      	ldr	r3, [r6, #0]
    7ebe:	4298      	cmp	r0, r3
    7ec0:	d005      	beq.n	7ece <HAL_MBOX_UnregisterClient+0x16>
    7ec2:	69b3      	ldr	r3, [r6, #24]
    7ec4:	4298      	cmp	r0, r3
    7ec6:	d027      	beq.n	7f18 <HAL_MBOX_UnregisterClient+0x60>

    HAL_ASSERT(IS_MBOX_INSTANCE(pReg) && IS_VALID_CHAN(chan) && cl);

    pMBox = MBOX_FindEntry(pReg);
    if (!pMBox) {
        return HAL_NODEV;
    7ec8:	2013      	movs	r0, #19
    7eca:	4240      	negs	r0, r0

    MBOX_ChanDisable(pReg, chan, pMBox->A2B);
    pMBox->chans[chan].client = NULL;

    return HAL_OK;
}
    7ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (i = 0; i < MBOX_CNT; i++) {
    7ece:	2700      	movs	r7, #0
    if (cl != pMBox->chans[chan].client) {
    7ed0:	007b      	lsls	r3, r7, #1
    7ed2:	19dd      	adds	r5, r3, r7
    7ed4:	006c      	lsls	r4, r5, #1
    7ed6:	1864      	adds	r4, r4, r1
    7ed8:	00a4      	lsls	r4, r4, #2
    7eda:	1934      	adds	r4, r6, r4
    7edc:	6864      	ldr	r4, [r4, #4]
    7ede:	4294      	cmp	r4, r2
    7ee0:	d11c      	bne.n	7f1c <HAL_MBOX_UnregisterClient+0x64>
    MBOX_ChanDisable(pReg, chan, pMBox->A2B);
    7ee2:	00ed      	lsls	r5, r5, #3
    7ee4:	1975      	adds	r5, r6, r5
    if (isA2B) {
    7ee6:	7d2a      	ldrb	r2, [r5, #20]
    7ee8:	2a00      	cmp	r2, #0
    7eea:	d00e      	beq.n	7f0a <HAL_MBOX_UnregisterClient+0x52>
        pReg->B2A_INTEN &= ~(1UL << chan);
    7eec:	2201      	movs	r2, #1
    7eee:	408a      	lsls	r2, r1
    7ef0:	6a84      	ldr	r4, [r0, #40]	; 0x28
    7ef2:	4394      	bics	r4, r2
    7ef4:	6284      	str	r4, [r0, #40]	; 0x28
        pReg->B2A_STATUS = 1UL << chan;
    7ef6:	62c2      	str	r2, [r0, #44]	; 0x2c
    pMBox->chans[chan].client = NULL;
    7ef8:	2200      	movs	r2, #0
    7efa:	19db      	adds	r3, r3, r7
    7efc:	005b      	lsls	r3, r3, #1
    7efe:	185b      	adds	r3, r3, r1
    7f00:	009b      	lsls	r3, r3, #2
    7f02:	18f3      	adds	r3, r6, r3
    return HAL_OK;
    7f04:	2000      	movs	r0, #0
    pMBox->chans[chan].client = NULL;
    7f06:	605a      	str	r2, [r3, #4]
    return HAL_OK;
    7f08:	e7e0      	b.n	7ecc <HAL_MBOX_UnregisterClient+0x14>
        pReg->A2B_INTEN &= ~(1UL << chan);
    7f0a:	2201      	movs	r2, #1
    7f0c:	408a      	lsls	r2, r1
    7f0e:	6804      	ldr	r4, [r0, #0]
    7f10:	4394      	bics	r4, r2
    7f12:	6004      	str	r4, [r0, #0]
        pReg->A2B_STATUS = 1UL << chan;
    7f14:	6042      	str	r2, [r0, #4]
    7f16:	e7ef      	b.n	7ef8 <HAL_MBOX_UnregisterClient+0x40>
    for (i = 0; i < MBOX_CNT; i++) {
    7f18:	2701      	movs	r7, #1
    7f1a:	e7d9      	b.n	7ed0 <HAL_MBOX_UnregisterClient+0x18>
        return HAL_ERROR;
    7f1c:	2001      	movs	r0, #1
    7f1e:	4240      	negs	r0, r0
    7f20:	e7d4      	b.n	7ecc <HAL_MBOX_UnregisterClient+0x14>
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	00017a38 	.word	0x00017a38

00007f28 <HAL_NVIC_SetIRQHandler>:
#else
    /* cortex m0 has no vtor, the vector table alway based 0x0*/
    uint32_t *vectors = (uint32_t *)0x0U;
#endif

    vectors[IRQn + NVIC_PERIPH_IRQ_OFFSET] = (uint32_t)handler;
    7f28:	0080      	lsls	r0, r0, #2
    7f2a:	6401      	str	r1, [r0, #64]	; 0x40

    return HAL_OK;
}
    7f2c:	2000      	movs	r0, #0
    7f2e:	4770      	bx	lr

00007f30 <HAL_NVIC_SetPriorityGrouping>:
HAL_Status HAL_NVIC_SetPriorityGrouping(eNVIC_PriorityGroup priorityGroup)
{
    NVIC_SetPriorityGrouping(priorityGroup);

    return HAL_OK;
}
    7f30:	2000      	movs	r0, #0
    7f32:	4770      	bx	lr

00007f34 <HAL_NVIC_SetPriority>:

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
    7f34:	2303      	movs	r3, #3
 * @param  preemptPriority: preemt priority.
 * @param  subPriority: sub priority.
 * @return HAL_OK.
 */
HAL_Status HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t preemptPriority, uint32_t subPriority)
{
    7f36:	b530      	push	{r4, r5, lr}
    7f38:	4019      	ands	r1, r3
  if ((int32_t)(IRQn) >= 0)
    7f3a:	2800      	cmp	r0, #0
    7f3c:	db12      	blt.n	7f64 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f3e:	4a13      	ldr	r2, [pc, #76]	; (7f8c <HAL_NVIC_SetPriority+0x58>)
    7f40:	25c0      	movs	r5, #192	; 0xc0
    7f42:	4694      	mov	ip, r2
    7f44:	0884      	lsrs	r4, r0, #2
    7f46:	4018      	ands	r0, r3
    7f48:	00c0      	lsls	r0, r0, #3
    7f4a:	33fc      	adds	r3, #252	; 0xfc
    7f4c:	4083      	lsls	r3, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f4e:	0189      	lsls	r1, r1, #6
    7f50:	4081      	lsls	r1, r0
    7f52:	00a4      	lsls	r4, r4, #2
    7f54:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f56:	00ad      	lsls	r5, r5, #2
    7f58:	5962      	ldr	r2, [r4, r5]
    7f5a:	439a      	bics	r2, r3
    7f5c:	4311      	orrs	r1, r2
    7f5e:	5161      	str	r1, [r4, r5]
    prioritygroup = NVIC_GetPriorityGrouping();

    NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, preemptPriority, subPriority));

    return HAL_OK;
}
    7f60:	2000      	movs	r0, #0
    7f62:	bd30      	pop	{r4, r5, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f64:	220f      	movs	r2, #15
    7f66:	4002      	ands	r2, r0
    7f68:	4018      	ands	r0, r3
    7f6a:	23ff      	movs	r3, #255	; 0xff
    7f6c:	4c08      	ldr	r4, [pc, #32]	; (7f90 <HAL_NVIC_SetPriority+0x5c>)
    7f6e:	00c0      	lsls	r0, r0, #3
    7f70:	46a4      	mov	ip, r4
    7f72:	4083      	lsls	r3, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    7f74:	0189      	lsls	r1, r1, #6
    7f76:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7f78:	3a08      	subs	r2, #8
    7f7a:	0892      	lsrs	r2, r2, #2
    7f7c:	0092      	lsls	r2, r2, #2
    7f7e:	4462      	add	r2, ip
    7f80:	69d4      	ldr	r4, [r2, #28]
    7f82:	439c      	bics	r4, r3
    7f84:	4321      	orrs	r1, r4
    7f86:	61d1      	str	r1, [r2, #28]
    7f88:	e7ea      	b.n	7f60 <HAL_NVIC_SetPriority+0x2c>
    7f8a:	46c0      	nop			; (mov r8, r8)
    7f8c:	e000e100 	.word	0xe000e100
    7f90:	e000ed00 	.word	0xe000ed00

00007f94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    7f94:	2800      	cmp	r0, #0
    7f96:	db05      	blt.n	7fa4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f98:	231f      	movs	r3, #31
    7f9a:	4018      	ands	r0, r3
    7f9c:	3b1e      	subs	r3, #30
    7f9e:	4083      	lsls	r3, r0
    7fa0:	4a01      	ldr	r2, [pc, #4]	; (7fa8 <HAL_NVIC_EnableIRQ+0x14>)
    7fa2:	6013      	str	r3, [r2, #0]
HAL_Status HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
    NVIC_EnableIRQ(IRQn);

    return HAL_OK;
}
    7fa4:	2000      	movs	r0, #0
    7fa6:	4770      	bx	lr
    7fa8:	e000e100 	.word	0xe000e100

00007fac <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    7fac:	2800      	cmp	r0, #0
    7fae:	db0a      	blt.n	7fc6 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7fb0:	231f      	movs	r3, #31
    7fb2:	4018      	ands	r0, r3
    7fb4:	3b1e      	subs	r3, #30
    7fb6:	4083      	lsls	r3, r0
    7fb8:	2280      	movs	r2, #128	; 0x80
    7fba:	4904      	ldr	r1, [pc, #16]	; (7fcc <HAL_NVIC_DisableIRQ+0x20>)
    7fbc:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7fbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7fc2:	f3bf 8f6f 	isb	sy
HAL_Status HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
    NVIC_DisableIRQ(IRQn);

    return HAL_OK;
}
    7fc6:	2000      	movs	r0, #0
    7fc8:	4770      	bx	lr
    7fca:	46c0      	nop			; (mov r8, r8)
    7fcc:	e000e100 	.word	0xe000e100

00007fd0 <HAL_NVIC_Init>:
HAL_Status HAL_NVIC_Init(void)
{
    /* Use HardFault */

    return HAL_OK;
}
    7fd0:	2000      	movs	r0, #0
    7fd2:	4770      	bx	lr

00007fd4 <HAL_SYSTICK_Config>:
 * @param  ticksNumb: SysTick reload value.
 * @return HAL_Status.
 */
HAL_Status HAL_SYSTICK_Config(uint32_t ticksNumb)
{
    if ((ticksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk) {
    7fd4:	2380      	movs	r3, #128	; 0x80
    7fd6:	3801      	subs	r0, #1
    7fd8:	045b      	lsls	r3, r3, #17
    7fda:	4298      	cmp	r0, r3
    7fdc:	d20d      	bcs.n	7ffa <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    7fde:	22c0      	movs	r2, #192	; 0xc0
        return HAL_INVAL;                                             /* Reload value impossible */
    }

    SysTick->LOAD = (uint32_t)(ticksNumb - 1UL);                      /* set reload register */
    7fe0:	4907      	ldr	r1, [pc, #28]	; (8000 <HAL_SYSTICK_Config+0x2c>)
    7fe2:	0612      	lsls	r2, r2, #24
    7fe4:	6048      	str	r0, [r1, #4]
    7fe6:	4807      	ldr	r0, [pc, #28]	; (8004 <HAL_SYSTICK_Config+0x30>)
    7fe8:	6a03      	ldr	r3, [r0, #32]
    7fea:	021b      	lsls	r3, r3, #8
    7fec:	0a1b      	lsrs	r3, r3, #8
    7fee:	4313      	orrs	r3, r2
    7ff0:	6203      	str	r3, [r0, #32]
    NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL);  /* set Priority for SysTick Interrupt */
    SysTick->VAL = 0UL;                                               /* Load the SysTick Counter Value */
    7ff2:	2300      	movs	r3, #0

    return HAL_OK;
    7ff4:	2000      	movs	r0, #0
    SysTick->VAL = 0UL;                                               /* Load the SysTick Counter Value */
    7ff6:	608b      	str	r3, [r1, #8]
}
    7ff8:	4770      	bx	lr
        return HAL_INVAL;                                             /* Reload value impossible */
    7ffa:	2016      	movs	r0, #22
    7ffc:	4240      	negs	r0, r0
    7ffe:	e7fb      	b.n	7ff8 <HAL_SYSTICK_Config+0x24>
    8000:	e000e010 	.word	0xe000e010
    8004:	e000ed00 	.word	0xe000ed00

00008008 <HAL_SYSTICK_CLKSourceConfig>:
 *                    HAL_SYSTICK_CLKSRC_EXT clock source is from external reference
 * @return HAL_OK if successful, HAL_INVAL if soc not support.
 */
HAL_Status HAL_SYSTICK_CLKSourceConfig(eHAL_systickClkSource clkSource)
{
    if (clkSource == HAL_SYSTICK_CLKSRC_CORE) {
    8008:	2800      	cmp	r0, #0
    800a:	d105      	bne.n	8018 <HAL_SYSTICK_CLKSourceConfig+0x10>
        SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
    800c:	2104      	movs	r1, #4
    800e:	4a09      	ldr	r2, [pc, #36]	; (8034 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
    8010:	6813      	ldr	r3, [r2, #0]
    8012:	430b      	orrs	r3, r1
    8014:	6013      	str	r3, [r2, #0]
            SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
        }
    }

    return HAL_OK;
}
    8016:	4770      	bx	lr
        if (SysTick->CALIB & SysTick_CALIB_NOREF_Msk) {
    8018:	4b06      	ldr	r3, [pc, #24]	; (8034 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
    801a:	68da      	ldr	r2, [r3, #12]
    801c:	2a00      	cmp	r2, #0
    801e:	db05      	blt.n	802c <HAL_SYSTICK_CLKSourceConfig+0x24>
            SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
    8020:	2104      	movs	r1, #4
    8022:	681a      	ldr	r2, [r3, #0]
    8024:	2000      	movs	r0, #0
    8026:	438a      	bics	r2, r1
    8028:	601a      	str	r2, [r3, #0]
    802a:	e7f4      	b.n	8016 <HAL_SYSTICK_CLKSourceConfig+0xe>
            return HAL_INVAL;
    802c:	2016      	movs	r0, #22
    802e:	4240      	negs	r0, r0
    8030:	e7f1      	b.n	8016 <HAL_SYSTICK_CLKSourceConfig+0xe>
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	e000e010 	.word	0xe000e010

00008038 <HAL_SYSTICK_Enable>:
 * @brief  Enable SysTick.
 * @return HAL_Status.
 */
HAL_Status HAL_SYSTICK_Enable(void)
{
    SysTick->CTRL |= (SysTick_CTRL_TICKINT_Msk |
    8038:	2103      	movs	r1, #3
    803a:	4a03      	ldr	r2, [pc, #12]	; (8048 <HAL_SYSTICK_Enable+0x10>)
                      SysTick_CTRL_ENABLE_Msk);                       /* Enable SysTick IRQ and SysTick Timer */

    return HAL_OK;
}
    803c:	2000      	movs	r0, #0
    SysTick->CTRL |= (SysTick_CTRL_TICKINT_Msk |
    803e:	6813      	ldr	r3, [r2, #0]
    8040:	430b      	orrs	r3, r1
    8042:	6013      	str	r3, [r2, #0]
}
    8044:	4770      	bx	lr
    8046:	46c0      	nop			; (mov r8, r8)
    8048:	e000e010 	.word	0xe000e010

0000804c <HAL_TIMER_Init>:
 */
HAL_Status HAL_TIMER_Init(struct TIMER_REG *pReg, eTIMER_MODE mode)
{
    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));
#ifdef SYS_TIMER
    if (pReg == SYS_TIMER) {
    804c:	4b04      	ldr	r3, [pc, #16]	; (8060 <HAL_TIMER_Init+0x14>)
    804e:	4298      	cmp	r0, r3
    8050:	d003      	beq.n	805a <HAL_TIMER_Init+0xe>
        return HAL_BUSY;
    }
#endif

    WRITE_REG(pReg->CONTROLREG, mode << TIMER_CONTROLREG_TIMER_MODE_SHIFT);
    8052:	0049      	lsls	r1, r1, #1
    8054:	6101      	str	r1, [r0, #16]

    return HAL_OK;
    8056:	2000      	movs	r0, #0
}
    8058:	4770      	bx	lr
        return HAL_BUSY;
    805a:	2010      	movs	r0, #16
    805c:	4240      	negs	r0, r0
    805e:	e7fb      	b.n	8058 <HAL_TIMER_Init+0xc>
    8060:	fd8f0000 	.word	0xfd8f0000

00008064 <HAL_TIMER_SysTimerInit>:
 */
HAL_Status HAL_TIMER_SysTimerInit(struct TIMER_REG *pReg)
{
    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));

    if (READ_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_ENABLE_MASK)) {
    8064:	2301      	movs	r3, #1
    8066:	0019      	movs	r1, r3
    8068:	6902      	ldr	r2, [r0, #16]
    806a:	4011      	ands	r1, r2
    806c:	4213      	tst	r3, r2
    806e:	d10b      	bne.n	8088 <HAL_TIMER_SysTimerInit+0x24>
        return HAL_OK;
    }

    WRITE_REG(pReg->CONTROLREG, TIMER_FREE_RUNNING);
    pReg->LOAD_COUNT[0] = 0xFFFFFFFFU;
    8070:	2201      	movs	r2, #1
    WRITE_REG(pReg->CONTROLREG, TIMER_FREE_RUNNING);
    8072:	6101      	str	r1, [r0, #16]
    pReg->LOAD_COUNT[1] = 0xFFFFFFFFU;
    CLEAR_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_INT_MASK_MASK);
    8074:	2104      	movs	r1, #4
    pReg->LOAD_COUNT[0] = 0xFFFFFFFFU;
    8076:	4252      	negs	r2, r2
    8078:	6002      	str	r2, [r0, #0]
    pReg->LOAD_COUNT[1] = 0xFFFFFFFFU;
    807a:	6042      	str	r2, [r0, #4]
    CLEAR_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_INT_MASK_MASK);
    807c:	6902      	ldr	r2, [r0, #16]
    807e:	438a      	bics	r2, r1
    8080:	6102      	str	r2, [r0, #16]
    SET_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_ENABLE_MASK);
    8082:	6902      	ldr	r2, [r0, #16]
    8084:	4313      	orrs	r3, r2
    8086:	6103      	str	r3, [r0, #16]

    return HAL_OK;
}
    8088:	2000      	movs	r0, #0
    808a:	4770      	bx	lr

0000808c <HAL_TIMER_Start>:
 */
HAL_Status HAL_TIMER_Start(struct TIMER_REG *pReg)
{
    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));
#ifdef SYS_TIMER
    if (pReg == SYS_TIMER) {
    808c:	4b07      	ldr	r3, [pc, #28]	; (80ac <HAL_TIMER_Start+0x20>)
    808e:	4298      	cmp	r0, r3
    8090:	d009      	beq.n	80a6 <HAL_TIMER_Start+0x1a>
        return HAL_BUSY;
    }
#endif

    CLEAR_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_INT_MASK_MASK);
    8092:	2204      	movs	r2, #4
    8094:	6903      	ldr	r3, [r0, #16]
    8096:	4393      	bics	r3, r2
    8098:	6103      	str	r3, [r0, #16]
    SET_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_ENABLE_MASK);
    809a:	6903      	ldr	r3, [r0, #16]
    809c:	3a03      	subs	r2, #3
    809e:	4313      	orrs	r3, r2
    80a0:	6103      	str	r3, [r0, #16]

    return HAL_OK;
    80a2:	2000      	movs	r0, #0
}
    80a4:	4770      	bx	lr
        return HAL_BUSY;
    80a6:	2010      	movs	r0, #16
    80a8:	4240      	negs	r0, r0
    80aa:	e7fb      	b.n	80a4 <HAL_TIMER_Start+0x18>
    80ac:	fd8f0000 	.word	0xfd8f0000

000080b0 <HAL_TIMER_Stop>:
 */
HAL_Status HAL_TIMER_Stop(struct TIMER_REG *pReg)
{
    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));
#ifdef SYS_TIMER
    if (pReg == SYS_TIMER) {
    80b0:	4b05      	ldr	r3, [pc, #20]	; (80c8 <HAL_TIMER_Stop+0x18>)
    80b2:	4298      	cmp	r0, r3
    80b4:	d005      	beq.n	80c2 <HAL_TIMER_Stop+0x12>
        return HAL_BUSY;
    }
#endif

    CLEAR_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_ENABLE_MASK);
    80b6:	2201      	movs	r2, #1
    80b8:	6903      	ldr	r3, [r0, #16]
    80ba:	4393      	bics	r3, r2
    80bc:	6103      	str	r3, [r0, #16]

    return HAL_OK;
    80be:	2000      	movs	r0, #0
}
    80c0:	4770      	bx	lr
        return HAL_BUSY;
    80c2:	2010      	movs	r0, #16
    80c4:	4240      	negs	r0, r0
    80c6:	e7fb      	b.n	80c0 <HAL_TIMER_Stop+0x10>
    80c8:	fd8f0000 	.word	0xfd8f0000

000080cc <HAL_TIMER_Start_IT>:
 */
HAL_Status HAL_TIMER_Start_IT(struct TIMER_REG *pReg)
{
    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));
#ifdef SYS_TIMER
    if (pReg == SYS_TIMER) {
    80cc:	4b05      	ldr	r3, [pc, #20]	; (80e4 <HAL_TIMER_Start_IT+0x18>)
    80ce:	4298      	cmp	r0, r3
    80d0:	d005      	beq.n	80de <HAL_TIMER_Start_IT+0x12>
        return HAL_BUSY;
    }
#endif

    SET_BIT(pReg->CONTROLREG, TIMER_CONTROLREG_TIMER_ENABLE_ENABLED | TIMER_CONTROLREG_TIMER_INT_MASK_UNMASK);
    80d2:	2205      	movs	r2, #5
    80d4:	6903      	ldr	r3, [r0, #16]
    80d6:	4313      	orrs	r3, r2
    80d8:	6103      	str	r3, [r0, #16]

    return HAL_OK;
    80da:	2000      	movs	r0, #0
}
    80dc:	4770      	bx	lr
        return HAL_BUSY;
    80de:	2010      	movs	r0, #16
    80e0:	4240      	negs	r0, r0
    80e2:	e7fb      	b.n	80dc <HAL_TIMER_Start_IT+0x10>
    80e4:	fd8f0000 	.word	0xfd8f0000

000080e8 <HAL_TIMER_Stop_IT>:
    80e8:	4b05      	ldr	r3, [pc, #20]	; (8100 <HAL_TIMER_Stop_IT+0x18>)
    80ea:	4298      	cmp	r0, r3
    80ec:	d005      	beq.n	80fa <HAL_TIMER_Stop_IT+0x12>
    80ee:	2201      	movs	r2, #1
    80f0:	6903      	ldr	r3, [r0, #16]
    80f2:	4393      	bics	r3, r2
    80f4:	6103      	str	r3, [r0, #16]
    80f6:	2000      	movs	r0, #0
    80f8:	4770      	bx	lr
    80fa:	2010      	movs	r0, #16
    80fc:	4240      	negs	r0, r0
    80fe:	e7fb      	b.n	80f8 <HAL_TIMER_Stop_IT+0x10>
    8100:	fd8f0000 	.word	0xfd8f0000

00008104 <HAL_TIMER_SetCount>:
{
    uint64_t loadCount = 0;

    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));
#ifdef SYS_TIMER
    if (pReg == SYS_TIMER) {
    8104:	4904      	ldr	r1, [pc, #16]	; (8118 <HAL_TIMER_SetCount+0x14>)
    8106:	4288      	cmp	r0, r1
    8108:	d003      	beq.n	8112 <HAL_TIMER_SetCount+0xe>
        return HAL_BUSY;
    }
#endif

    loadCount = timerCount;
    pReg->LOAD_COUNT[0] = (loadCount & 0xffffffff);
    810a:	6002      	str	r2, [r0, #0]
    pReg->LOAD_COUNT[1] = ((loadCount >> 32) & 0xffffffff);
    810c:	6043      	str	r3, [r0, #4]

    return HAL_OK;
    810e:	2000      	movs	r0, #0
}
    8110:	4770      	bx	lr
        return HAL_BUSY;
    8112:	2010      	movs	r0, #16
    8114:	4240      	negs	r0, r0
    8116:	e7fb      	b.n	8110 <HAL_TIMER_SetCount+0xc>
    8118:	fd8f0000 	.word	0xfd8f0000

0000811c <HAL_TIMER_GetCount>:
 * @param  pReg: Choose TIMER.
 * @return uint64_t: Current conut number.
 */
HAL_SECTION_SRAM_CODE
uint64_t HAL_TIMER_GetCount(struct TIMER_REG *pReg)
{
    811c:	0003      	movs	r3, r0
    uint32_t high, low, temp;

    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));

    do {
        high = pReg->CURRENT_VALUE[1];
    811e:	68d9      	ldr	r1, [r3, #12]
        low = pReg->CURRENT_VALUE[0];
    8120:	6898      	ldr	r0, [r3, #8]
        temp = pReg->CURRENT_VALUE[1];
    8122:	68da      	ldr	r2, [r3, #12]
    } while (high != temp);
    8124:	4291      	cmp	r1, r2
    8126:	d1fa      	bne.n	811e <HAL_TIMER_GetCount+0x2>

    return ((uint64_t)high << 32) | low;
}
    8128:	4770      	bx	lr
    812a:	46c0      	nop			; (mov r8, r8)

0000812c <HAL_TIMER_ClrInt>:
{
    uint32_t timeOut = 1000;

    HAL_ASSERT(IS_TIMER_INSTANCE(pReg));

    pReg->INTSTATUS = 0x1;
    812c:	2301      	movs	r3, #1
    812e:	6183      	str	r3, [r0, #24]
    while (pReg->INTSTATUS && timeOut) {
    8130:	6983      	ldr	r3, [r0, #24]
    8132:	2b00      	cmp	r3, #0
    8134:	d012      	beq.n	815c <HAL_TIMER_ClrInt+0x30>
    uint32_t timeOut = 1000;
    8136:	23fa      	movs	r3, #250	; 0xfa
    8138:	009b      	lsls	r3, r3, #2
    813a:	e001      	b.n	8140 <HAL_TIMER_ClrInt+0x14>
    while (pReg->INTSTATUS && timeOut) {
    813c:	2b00      	cmp	r3, #0
    813e:	d00a      	beq.n	8156 <HAL_TIMER_ClrInt+0x2a>
    8140:	6982      	ldr	r2, [r0, #24]
        timeOut--;
    8142:	3b01      	subs	r3, #1
    while (pReg->INTSTATUS && timeOut) {
    8144:	2a00      	cmp	r2, #0
    8146:	d1f9      	bne.n	813c <HAL_TIMER_ClrInt+0x10>
    }

    if (timeOut == 0) {
        return HAL_TIMEOUT;
    8148:	1e5a      	subs	r2, r3, #1
    814a:	4193      	sbcs	r3, r2
    814c:	4258      	negs	r0, r3
    814e:	236e      	movs	r3, #110	; 0x6e
    8150:	4018      	ands	r0, r3
    8152:	386e      	subs	r0, #110	; 0x6e
    } else {
        return HAL_OK;
    }
}
    8154:	4770      	bx	lr
        return HAL_TIMEOUT;
    8156:	206e      	movs	r0, #110	; 0x6e
    8158:	4240      	negs	r0, r0
    815a:	e7fb      	b.n	8154 <HAL_TIMER_ClrInt+0x28>
        return HAL_OK;
    815c:	2000      	movs	r0, #0
    815e:	e7f9      	b.n	8154 <HAL_TIMER_ClrInt+0x28>

00008160 <HAL_UART_GetIrqID>:
  */
uint32_t HAL_UART_GetIrqID(struct UART_REG *pReg)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));

    return (pReg->IIR & UART_IIR_MASK);
    8160:	6883      	ldr	r3, [r0, #8]
    8162:	200f      	movs	r0, #15
    8164:	4018      	ands	r0, r3
}
    8166:	4770      	bx	lr

00008168 <HAL_UART_SerialOutChar>:
  */
void HAL_UART_SerialOutChar(struct UART_REG *pReg, char c)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));

    while (!(pReg->USR & UART_USR_TX_FIFO_NOT_FULL)) {
    8168:	2202      	movs	r2, #2
    816a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    816c:	421a      	tst	r2, r3
    816e:	d0fc      	beq.n	816a <HAL_UART_SerialOutChar+0x2>
        ;
    }
    pReg->THR = (uint32_t)c;
    8170:	6001      	str	r1, [r0, #0]
}
    8172:	4770      	bx	lr

00008174 <HAL_UART_SerialIn>:
  * @param  pdata: characters buffer
  * @param  cnt: the number of characters
  * @return dwRealSize the number has been received
  */
int HAL_UART_SerialIn(struct UART_REG *pReg, uint8_t *pdata, uint32_t cnt)
{
    8174:	0003      	movs	r3, r0
    8176:	b530      	push	{r4, r5, lr}
    int dwRealSize = 0;
    8178:	2000      	movs	r0, #0

    HAL_ASSERT(IS_UART_INSTANCE(pReg));

    while (cnt--) {
    817a:	2a00      	cmp	r2, #0
    817c:	d009      	beq.n	8192 <HAL_UART_SerialIn+0x1e>
        if (!(pReg->USR & UART_USR_RX_FIFO_NOT_EMPTY)) {
    817e:	2508      	movs	r5, #8
    8180:	e004      	b.n	818c <HAL_UART_SerialIn+0x18>
            break;
        }

        *pdata++ = (uint8_t)pReg->RBR;
    8182:	681c      	ldr	r4, [r3, #0]
    8184:	540c      	strb	r4, [r1, r0]
        dwRealSize++;
    8186:	3001      	adds	r0, #1
    while (cnt--) {
    8188:	4282      	cmp	r2, r0
    818a:	d002      	beq.n	8192 <HAL_UART_SerialIn+0x1e>
        if (!(pReg->USR & UART_USR_RX_FIFO_NOT_EMPTY)) {
    818c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
    818e:	4225      	tst	r5, r4
    8190:	d1f7      	bne.n	8182 <HAL_UART_SerialIn+0xe>
    }

    return dwRealSize;
}
    8192:	bd30      	pop	{r4, r5, pc}

00008194 <HAL_UART_Reset>:
  * @param  pReg: uart reg base
  */
void HAL_UART_Reset(struct UART_REG *pReg)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));
    pReg->SRR = UART_SRR_UR | UART_SRR_RFR | UART_SRR_XFR;
    8194:	2388      	movs	r3, #136	; 0x88
    8196:	2207      	movs	r2, #7
    8198:	50c2      	str	r2, [r0, r3]
    pReg->IER = 0;
    819a:	2300      	movs	r3, #0
    pReg->DMASA = 1;
    819c:	3a06      	subs	r2, #6
    pReg->IER = 0;
    819e:	6043      	str	r3, [r0, #4]
    pReg->DMASA = 1;
    81a0:	33a8      	adds	r3, #168	; 0xa8
    81a2:	50c2      	str	r2, [r0, r3]
}
    81a4:	4770      	bx	lr
    81a6:	46c0      	nop			; (mov r8, r8)

000081a8 <HAL_UART_Init>:
    newRate = PLL_INPUT_OSC_RATE;
#else
    newRate = 24000000;
#endif

    pReg->FCR =
    81a8:	23a1      	movs	r3, #161	; 0xa1
{
    81aa:	b570      	push	{r4, r5, r6, lr}
    pReg = dev->pReg;
    81ac:	6804      	ldr	r4, [r0, #0]
    pReg->FCR =
    81ae:	60a3      	str	r3, [r4, #8]
        UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_10 | UART_FCR_T_TRIG_10;
    UART_SetLcrReg(pReg, config->dataBit, config->parity, config->stopBit);
    81b0:	790a      	ldrb	r2, [r1, #4]
    81b2:	2300      	movs	r3, #0
    81b4:	3a05      	subs	r2, #5
    81b6:	b2d6      	uxtb	r6, r2
    81b8:	7988      	ldrb	r0, [r1, #6]
    81ba:	794d      	ldrb	r5, [r1, #5]
    switch (byteSize) {
    81bc:	2e03      	cmp	r6, #3
    81be:	d800      	bhi.n	81c2 <HAL_UART_Init+0x1a>
    81c0:	0013      	movs	r3, r2
    switch (parity) {
    81c2:	2801      	cmp	r0, #1
    81c4:	d803      	bhi.n	81ce <HAL_UART_Init+0x26>
        lcr |= ((parity) << 4);
    81c6:	2208      	movs	r2, #8
    81c8:	0100      	lsls	r0, r0, #4
    81ca:	4303      	orrs	r3, r0
    81cc:	4313      	orrs	r3, r2
    if (stopBits == UART_ONE_AND_HALF_OR_TWO_STOPBIT) {
    81ce:	2d01      	cmp	r5, #1
    81d0:	d101      	bne.n	81d6 <HAL_UART_Init+0x2e>
        lcr |= UART_LCR_STOP;
    81d2:	2204      	movs	r2, #4
    81d4:	4313      	orrs	r3, r2
    DivLatch = clkRate / MODE_X_DIV / baudRate;
    81d6:	6809      	ldr	r1, [r1, #0]
    pReg->LCR = lcr;
    81d8:	60e3      	str	r3, [r4, #12]
    DivLatch = clkRate / MODE_X_DIV / baudRate;
    81da:	480d      	ldr	r0, [pc, #52]	; (8210 <HAL_UART_Init+0x68>)
    81dc:	f7fc f838 	bl	4250 <__udivsi3>
    pReg->MCR |= UART_MCR_LOOP;
    81e0:	2210      	movs	r2, #16
    pReg->LCR |= UART_LCR_DLAB;
    81e2:	2180      	movs	r1, #128	; 0x80
    pReg->MCR |= UART_MCR_LOOP;
    81e4:	6923      	ldr	r3, [r4, #16]
    81e6:	4313      	orrs	r3, r2
    81e8:	6123      	str	r3, [r4, #16]
    pReg->LCR |= UART_LCR_DLAB;
    81ea:	68e3      	ldr	r3, [r4, #12]
    81ec:	430b      	orrs	r3, r1
    81ee:	60e3      	str	r3, [r4, #12]
    pReg->DLL = DivLatch & 0xff;
    81f0:	23ff      	movs	r3, #255	; 0xff
    81f2:	001d      	movs	r5, r3
    81f4:	4005      	ands	r5, r0
    pReg->DLH = (DivLatch >> 8) & 0xff;
    81f6:	0a00      	lsrs	r0, r0, #8
    81f8:	4018      	ands	r0, r3
    pReg->DLL = DivLatch & 0xff;
    81fa:	6025      	str	r5, [r4, #0]
    pReg->DLH = (DivLatch >> 8) & 0xff;
    81fc:	6060      	str	r0, [r4, #4]
    pReg->LCR &= ~(UART_LCR_DLAB);
    81fe:	68e3      	ldr	r3, [r4, #12]
    UART_SetBaudRate(pReg, newRate, config->baudRate);

    return HAL_OK;
}
    8200:	2000      	movs	r0, #0
    pReg->LCR &= ~(UART_LCR_DLAB);
    8202:	438b      	bics	r3, r1
    8204:	60e3      	str	r3, [r4, #12]
    pReg->MCR &= ~(UART_MCR_LOOP);
    8206:	6923      	ldr	r3, [r4, #16]
    8208:	4393      	bics	r3, r2
    820a:	6123      	str	r3, [r4, #16]
}
    820c:	bd70      	pop	{r4, r5, r6, pc}
    820e:	46c0      	nop			; (mov r8, r8)
    8210:	0016e360 	.word	0x0016e360

00008214 <HAL_UART_EnableIrq>:
  * @param  uartIntNumb: uart irq num, such as UART_IER_RDI
  */
void HAL_UART_EnableIrq(struct UART_REG *pReg, uint32_t uartIntNumb)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));
    pReg->IER |= uartIntNumb;
    8214:	6843      	ldr	r3, [r0, #4]
    8216:	430b      	orrs	r3, r1
    8218:	6043      	str	r3, [r0, #4]
}
    821a:	4770      	bx	lr

0000821c <HAL_UART_DisableIrq>:
  * @param  uartIntNumb: uart irq num, such as UART_IER_RDI
  */
void HAL_UART_DisableIrq(struct UART_REG *pReg, uint32_t uartIntNumb)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));
    pReg->IER &= ~uartIntNumb;
    821c:	6843      	ldr	r3, [r0, #4]
    821e:	438b      	bics	r3, r1
    8220:	6043      	str	r3, [r0, #4]
}
    8222:	4770      	bx	lr

00008224 <HAL_UART_EnableAutoFlowControl>:
  * @param  pReg: uart reg base
  */
void HAL_UART_EnableAutoFlowControl(struct UART_REG *pReg)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));
    pReg->MCR = UART_MCR_AFE | 0X02;
    8224:	2322      	movs	r3, #34	; 0x22
    8226:	6103      	str	r3, [r0, #16]
}
    8228:	4770      	bx	lr
    822a:	46c0      	nop			; (mov r8, r8)

0000822c <HAL_UART_DisableAutoFlowControl>:
  * @param  pReg: uart reg base
  */
void HAL_UART_DisableAutoFlowControl(struct UART_REG *pReg)
{
    HAL_ASSERT(IS_UART_INSTANCE(pReg));
    pReg->MCR &= ~UART_MCR_AFE;
    822c:	2220      	movs	r2, #32
    822e:	6903      	ldr	r3, [r0, #16]
    8230:	4393      	bics	r3, r2
    8232:	6103      	str	r3, [r0, #16]
}
    8234:	4770      	bx	lr
    8236:	46c0      	nop			; (mov r8, r8)

00008238 <HAL_UART_HandleIrq>:
    return (pReg->IIR & UART_IIR_MASK);
    8238:	230f      	movs	r3, #15
    823a:	6882      	ldr	r2, [r0, #8]
    823c:	4013      	ands	r3, r2
    HAL_ASSERT(IS_UART_INSTANCE(pReg));

    iir = HAL_UART_GetIrqID(pReg);

    /* Handle the three sub interrupts, so the upper irq handler needn't handle those */
    switch (iir) {
    823e:	2b06      	cmp	r3, #6
    8240:	d005      	beq.n	824e <HAL_UART_HandleIrq+0x16>
    8242:	2b07      	cmp	r3, #7
    8244:	d005      	beq.n	8252 <HAL_UART_HandleIrq+0x1a>
    8246:	2b00      	cmp	r3, #0
    8248:	d001      	beq.n	824e <HAL_UART_HandleIrq+0x16>
    case UART_IIR_NO_INT:
        break;
    }

    return HAL_OK;
}
    824a:	2000      	movs	r0, #0
    824c:	4770      	bx	lr
    return pReg->MSR;
    824e:	6983      	ldr	r3, [r0, #24]
    8250:	e7fb      	b.n	824a <HAL_UART_HandleIrq+0x12>
    return pReg->USR;
    8252:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
    8254:	e7f9      	b.n	824a <HAL_UART_HandleIrq+0x12>
    8256:	46c0      	nop			; (mov r8, r8)

00008258 <BSP_Init>:
};
#endif

void BSP_Init(void)
{
}
    8258:	4770      	bx	lr
    825a:	46c0      	nop			; (mov r8, r8)

0000825c <intc_irq_dispatch>:
    &rk_intc1_group3,
#endif
};

static void intc_irq_dispatch(uint32_t ID, uint32_t GROUP)
{
    825c:	b5f0      	push	{r4, r5, r6, r7, lr}
    825e:	4657      	mov	r7, sl
    8260:	46de      	mov	lr, fp
    8262:	4645      	mov	r5, r8
    8264:	464e      	mov	r6, r9
    uint32_t i, j, irq_no;
    struct INTMUX_REG *intc_base = rk_intc_table[ID * 4 + GROUP]->intc_base;
    8266:	0080      	lsls	r0, r0, #2
    8268:	1840      	adds	r0, r0, r1
    826a:	4b1d      	ldr	r3, [pc, #116]	; (82e0 <intc_irq_dispatch+0x84>)
    826c:	0082      	lsls	r2, r0, #2
    826e:	58d3      	ldr	r3, [r2, r3]
{
    8270:	b5e0      	push	{r5, r6, r7, lr}
    struct INTMUX_REG *intc_base = rk_intc_table[ID * 4 + GROUP]->intc_base;
    8272:	681b      	ldr	r3, [r3, #0]

    for (i = 0; i < NUM_INT_PER_GROUP >> 3; i++)
    {
        for (j = 0; j < 8; j++)
        {
            if (intc_base->INT_FLAG_GROUP[(GROUP << 3) + i] & (0x1 << j))
    8274:	2701      	movs	r7, #1
    struct INTMUX_REG *intc_base = rk_intc_table[ID * 4 + GROUP]->intc_base;
    8276:	4698      	mov	r8, r3
            if (intc_base->INT_FLAG_GROUP[(GROUP << 3) + i] & (0x1 << j))
    8278:	00cb      	lsls	r3, r1, #3
    827a:	469b      	mov	fp, r3
    827c:	0183      	lsls	r3, r0, #6
    827e:	469a      	mov	sl, r3
    8280:	2308      	movs	r3, #8
{
    8282:	b083      	sub	sp, #12
    8284:	445b      	add	r3, fp
    8286:	9301      	str	r3, [sp, #4]
        for (j = 0; j < 8; j++)
    8288:	4653      	mov	r3, sl
    828a:	009d      	lsls	r5, r3, #2
    828c:	4b15      	ldr	r3, [pc, #84]	; (82e4 <intc_irq_dispatch+0x88>)
    828e:	465e      	mov	r6, fp
    8290:	469c      	mov	ip, r3
            {
                irq_no = ID * NUM_INT_PER_CON + GROUP * NUM_INT_PER_GROUP + i * 8 + j;
                ext_vector[irq_no](NUM_INTERRUPTS + irq_no, NULL);
    8292:	231b      	movs	r3, #27
    8294:	4453      	add	r3, sl
        for (j = 0; j < 8; j++)
    8296:	2400      	movs	r4, #0
                ext_vector[irq_no](NUM_INTERRUPTS + irq_no, NULL);
    8298:	4699      	mov	r9, r3
    829a:	3620      	adds	r6, #32
    829c:	4465      	add	r5, ip
            if (intc_base->INT_FLAG_GROUP[(GROUP << 3) + i] & (0x1 << j))
    829e:	00b6      	lsls	r6, r6, #2
    82a0:	4643      	mov	r3, r8
    82a2:	58f2      	ldr	r2, [r6, r3]
    82a4:	003b      	movs	r3, r7
    82a6:	40a3      	lsls	r3, r4
    82a8:	421a      	tst	r2, r3
    82aa:	d004      	beq.n	82b6 <intc_irq_dispatch+0x5a>
                ext_vector[irq_no](NUM_INTERRUPTS + irq_no, NULL);
    82ac:	464b      	mov	r3, r9
    82ae:	2100      	movs	r1, #0
    82b0:	1918      	adds	r0, r3, r4
    82b2:	682b      	ldr	r3, [r5, #0]
    82b4:	4798      	blx	r3
        for (j = 0; j < 8; j++)
    82b6:	3401      	adds	r4, #1
    82b8:	3504      	adds	r5, #4
    82ba:	2c08      	cmp	r4, #8
    82bc:	d1f0      	bne.n	82a0 <intc_irq_dispatch+0x44>
    for (i = 0; i < NUM_INT_PER_GROUP >> 3; i++)
    82be:	2308      	movs	r3, #8
    82c0:	469c      	mov	ip, r3
    82c2:	3b07      	subs	r3, #7
    82c4:	44e2      	add	sl, ip
    82c6:	469c      	mov	ip, r3
    82c8:	9b01      	ldr	r3, [sp, #4]
    82ca:	44e3      	add	fp, ip
    82cc:	459b      	cmp	fp, r3
    82ce:	d1db      	bne.n	8288 <intc_irq_dispatch+0x2c>
            }
        }
    }
}
    82d0:	b003      	add	sp, #12
    82d2:	bcf0      	pop	{r4, r5, r6, r7}
    82d4:	46bb      	mov	fp, r7
    82d6:	46b2      	mov	sl, r6
    82d8:	46a9      	mov	r9, r5
    82da:	46a0      	mov	r8, r4
    82dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    82de:	46c0      	nop			; (mov r8, r8)
    82e0:	000143dc 	.word	0x000143dc
    82e4:	00017a68 	.word	0x00017a68

000082e8 <rk_intc1_group3_irq_dispatch>:
DEFINE_RK_INTC_IRQ(1, 3);
    82e8:	b510      	push	{r4, lr}
    82ea:	2103      	movs	r1, #3
    82ec:	2001      	movs	r0, #1
    82ee:	f7ff ffb5 	bl	825c <intc_irq_dispatch>
    82f2:	bd10      	pop	{r4, pc}

000082f4 <rk_intc1_group2_irq_dispatch>:
DEFINE_RK_INTC_IRQ(1, 2);
    82f4:	b510      	push	{r4, lr}
    82f6:	2102      	movs	r1, #2
    82f8:	2001      	movs	r0, #1
    82fa:	f7ff ffaf 	bl	825c <intc_irq_dispatch>
    82fe:	bd10      	pop	{r4, pc}

00008300 <rk_intc1_group1_irq_dispatch>:
DEFINE_RK_INTC_IRQ(1, 1);
    8300:	b510      	push	{r4, lr}
    8302:	2101      	movs	r1, #1
    8304:	2001      	movs	r0, #1
    8306:	f7ff ffa9 	bl	825c <intc_irq_dispatch>
    830a:	bd10      	pop	{r4, pc}

0000830c <rk_intc1_group0_irq_dispatch>:
DEFINE_RK_INTC_IRQ(1, 0);
    830c:	b510      	push	{r4, lr}
    830e:	2100      	movs	r1, #0
    8310:	2001      	movs	r0, #1
    8312:	f7ff ffa3 	bl	825c <intc_irq_dispatch>
    8316:	bd10      	pop	{r4, pc}

00008318 <rk_intc0_group3_irq_dispatch>:
DEFINE_RK_INTC_IRQ(0, 3);
    8318:	b510      	push	{r4, lr}
    831a:	2103      	movs	r1, #3
    831c:	2000      	movs	r0, #0
    831e:	f7ff ff9d 	bl	825c <intc_irq_dispatch>
    8322:	bd10      	pop	{r4, pc}

00008324 <rk_intc0_group2_irq_dispatch>:
DEFINE_RK_INTC_IRQ(0, 2);
    8324:	b510      	push	{r4, lr}
    8326:	2102      	movs	r1, #2
    8328:	2000      	movs	r0, #0
    832a:	f7ff ff97 	bl	825c <intc_irq_dispatch>
    832e:	bd10      	pop	{r4, pc}

00008330 <rk_intc0_group1_irq_dispatch>:
DEFINE_RK_INTC_IRQ(0, 1);
    8330:	b510      	push	{r4, lr}
    8332:	2101      	movs	r1, #1
    8334:	2000      	movs	r0, #0
    8336:	f7ff ff91 	bl	825c <intc_irq_dispatch>
    833a:	bd10      	pop	{r4, pc}

0000833c <rk_intc0_group0_irq_dispatch>:
DEFINE_RK_INTC_IRQ(0, 0);
    833c:	b510      	push	{r4, lr}
    833e:	2100      	movs	r1, #0
    8340:	2000      	movs	r0, #0
    8342:	f7ff ff8b 	bl	825c <intc_irq_dispatch>
    8346:	bd10      	pop	{r4, pc}

00008348 <rt_hw_interrupt_init>:
    }
}


void rt_hw_interrupt_init(void)
{
    8348:	b570      	push	{r4, r5, r6, lr}
    uint32_t i;

    for (i = 0; i < NUM_INTERRUPTS; i++)
    834a:	2400      	movs	r4, #0
    {
        HAL_NVIC_SetPriority(i, NVIC_PERIPH_PRIO_DEFAULT, NVIC_PERIPH_SUB_PRIO_DEFAULT);
    834c:	b220      	sxth	r0, r4
    834e:	22ff      	movs	r2, #255	; 0xff
    8350:	2102      	movs	r1, #2
    for (i = 0; i < NUM_INTERRUPTS; i++)
    8352:	3401      	adds	r4, #1
        HAL_NVIC_SetPriority(i, NVIC_PERIPH_PRIO_DEFAULT, NVIC_PERIPH_SUB_PRIO_DEFAULT);
    8354:	f7ff fdee 	bl	7f34 <HAL_NVIC_SetPriority>
    for (i = 0; i < NUM_INTERRUPTS; i++)
    8358:	2c1b      	cmp	r4, #27
    835a:	d1f7      	bne.n	834c <rt_hw_interrupt_init+0x4>
    memset(ext_vector, 0, sizeof(ext_vector));
    835c:	2280      	movs	r2, #128	; 0x80
    835e:	2100      	movs	r1, #0
    8360:	480b      	ldr	r0, [pc, #44]	; (8390 <rt_hw_interrupt_init+0x48>)
    8362:	0112      	lsls	r2, r2, #4
    8364:	f006 fc3e 	bl	ebe4 <memset>
    8368:	3c0b      	subs	r4, #11
    836a:	4e0a      	ldr	r6, [pc, #40]	; (8394 <rt_hw_interrupt_init+0x4c>)
    836c:	4b0a      	ldr	r3, [pc, #40]	; (8398 <rt_hw_interrupt_init+0x50>)
    836e:	e002      	b.n	8376 <rt_hw_interrupt_init+0x2e>
    8370:	3401      	adds	r4, #1
        HAL_NVIC_SetIRQHandler(INTMUX_OUT_START_IRQn + i, (NVIC_IRQHandler)rk_intc_table[i]->irq_handler);
    8372:	6833      	ldr	r3, [r6, #0]
    8374:	b2a4      	uxth	r4, r4
    8376:	b225      	sxth	r5, r4
    8378:	6859      	ldr	r1, [r3, #4]
    837a:	0028      	movs	r0, r5
    837c:	f7ff fdd4 	bl	7f28 <HAL_NVIC_SetIRQHandler>
        HAL_NVIC_EnableIRQ(INTMUX_OUT_START_IRQn + i);
    8380:	0028      	movs	r0, r5
    8382:	f7ff fe07 	bl	7f94 <HAL_NVIC_EnableIRQ>
    for (i = 0; i < HAL_ARRAY_SIZE(rk_intc_table); i++)
    8386:	3604      	adds	r6, #4
    8388:	2c17      	cmp	r4, #23
    838a:	d1f1      	bne.n	8370 <rt_hw_interrupt_init+0x28>
    }

    rk_intc_init();
}
    838c:	bd70      	pop	{r4, r5, r6, pc}
    838e:	46c0      	nop			; (mov r8, r8)
    8390:	00017a68 	.word	0x00017a68
    8394:	000143dc 	.word	0x000143dc
    8398:	00017224 	.word	0x00017224

0000839c <rt_hw_interrupt_mask>:
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    839c:	4b0f      	ldr	r3, [pc, #60]	; (83dc <rt_hw_interrupt_mask+0x40>)

void rt_hw_interrupt_mask(int vector)
{
    839e:	b510      	push	{r4, lr}
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    83a0:	4298      	cmp	r0, r3
    83a2:	d816      	bhi.n	83d2 <rt_hw_interrupt_mask+0x36>
    83a4:	0003      	movs	r3, r0
    83a6:	3b10      	subs	r3, #16
    83a8:	2b07      	cmp	r3, #7
    83aa:	d912      	bls.n	83d2 <rt_hw_interrupt_mask+0x36>
    if (vector < NUM_INTERRUPTS)
    83ac:	281a      	cmp	r0, #26
    83ae:	d911      	bls.n	83d4 <rt_hw_interrupt_mask+0x38>
        offset = irq % 8;
    83b0:	2107      	movs	r1, #7
        intc = (vector - NUM_INTERRUPTS) / NUM_INT_PER_GROUP;
    83b2:	381b      	subs	r0, #27
    83b4:	0983      	lsrs	r3, r0, #6
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] &= ~(0x1 << offset);
    83b6:	4a0a      	ldr	r2, [pc, #40]	; (83e0 <rt_hw_interrupt_mask+0x44>)
    83b8:	009b      	lsls	r3, r3, #2
    83ba:	589a      	ldr	r2, [r3, r2]
        group = irq >> 3;
    83bc:	0603      	lsls	r3, r0, #24
        offset = irq % 8;
    83be:	4008      	ands	r0, r1
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] &= ~(0x1 << offset);
    83c0:	3906      	subs	r1, #6
    83c2:	4081      	lsls	r1, r0
    83c4:	6812      	ldr	r2, [r2, #0]
        group = irq >> 3;
    83c6:	0edb      	lsrs	r3, r3, #27
    83c8:	009b      	lsls	r3, r3, #2
    83ca:	18d3      	adds	r3, r2, r3
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] &= ~(0x1 << offset);
    83cc:	681a      	ldr	r2, [r3, #0]
    83ce:	438a      	bics	r2, r1
    83d0:	601a      	str	r2, [r3, #0]
    rk_intc_mask(vector);
}
    83d2:	bd10      	pop	{r4, pc}
        HAL_NVIC_DisableIRQ(vector);
    83d4:	b200      	sxth	r0, r0
    83d6:	f7ff fde9 	bl	7fac <HAL_NVIC_DisableIRQ>
    83da:	e7fa      	b.n	83d2 <rt_hw_interrupt_mask+0x36>
    83dc:	0000021a 	.word	0x0000021a
    83e0:	000143dc 	.word	0x000143dc

000083e4 <rt_hw_interrupt_umask>:
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    83e4:	4b0f      	ldr	r3, [pc, #60]	; (8424 <rt_hw_interrupt_umask+0x40>)

void rt_hw_interrupt_umask(int vector)
{
    83e6:	b510      	push	{r4, lr}
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    83e8:	4298      	cmp	r0, r3
    83ea:	d816      	bhi.n	841a <rt_hw_interrupt_umask+0x36>
    83ec:	0003      	movs	r3, r0
    83ee:	3b10      	subs	r3, #16
    83f0:	2b07      	cmp	r3, #7
    83f2:	d912      	bls.n	841a <rt_hw_interrupt_umask+0x36>
    if (vector < NUM_INTERRUPTS)
    83f4:	281a      	cmp	r0, #26
    83f6:	d911      	bls.n	841c <rt_hw_interrupt_umask+0x38>
        intc = (vector - NUM_INTERRUPTS) / NUM_INT_PER_GROUP;
    83f8:	381b      	subs	r0, #27
    83fa:	0983      	lsrs	r3, r0, #6
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] |= 0x1 << offset;
    83fc:	4a0a      	ldr	r2, [pc, #40]	; (8428 <rt_hw_interrupt_umask+0x44>)
    83fe:	009b      	lsls	r3, r3, #2
    8400:	589a      	ldr	r2, [r3, r2]
        group = irq >> 3;
    8402:	0603      	lsls	r3, r0, #24
    8404:	6812      	ldr	r2, [r2, #0]
    8406:	0edb      	lsrs	r3, r3, #27
    8408:	009b      	lsls	r3, r3, #2
        offset = irq % 8;
    840a:	2107      	movs	r1, #7
    840c:	18d2      	adds	r2, r2, r3
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] |= 0x1 << offset;
    840e:	2301      	movs	r3, #1
        offset = irq % 8;
    8410:	4008      	ands	r0, r1
        rk_intc_table[intc]->intc_base->INT_ENABLE_GROUP[group] |= 0x1 << offset;
    8412:	4083      	lsls	r3, r0
    8414:	6814      	ldr	r4, [r2, #0]
    8416:	4323      	orrs	r3, r4
    8418:	6013      	str	r3, [r2, #0]
    rk_intc_unmask(vector);
}
    841a:	bd10      	pop	{r4, pc}
        HAL_NVIC_EnableIRQ(vector);
    841c:	b200      	sxth	r0, r0
    841e:	f7ff fdb9 	bl	7f94 <HAL_NVIC_EnableIRQ>
    8422:	e7fa      	b.n	841a <rt_hw_interrupt_umask+0x36>
    8424:	0000021a 	.word	0x0000021a
    8428:	000143dc 	.word	0x000143dc

0000842c <rt_hw_interrupt_install>:
rt_isr_handler_t rt_hw_interrupt_install(int              vector,
        rt_isr_handler_t handler,
        void            *param,
        const char      *name)
{
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    842c:	4b0b      	ldr	r3, [pc, #44]	; (845c <rt_hw_interrupt_install+0x30>)
{
    842e:	b510      	push	{r4, lr}
    8430:	000c      	movs	r4, r1
    if (vector >= TOTAL_INTERRUPTS || (vector >= INTMUX_OUT_START_IRQn && vector <= INTMUX_OUT_END_IRQn))
    8432:	4298      	cmp	r0, r3
    8434:	dc10      	bgt.n	8458 <rt_hw_interrupt_install+0x2c>
    8436:	0003      	movs	r3, r0
    8438:	3b10      	subs	r3, #16
    843a:	2b07      	cmp	r3, #7
    843c:	d90c      	bls.n	8458 <rt_hw_interrupt_install+0x2c>
        return NULL;

    if (vector < NUM_INTERRUPTS)
    843e:	281a      	cmp	r0, #26
    8440:	dd05      	ble.n	844e <rt_hw_interrupt_install+0x22>
        HAL_NVIC_SetIRQHandler(vector, (NVIC_IRQHandler)handler);
    else
        ext_vector[vector - NUM_INTERRUPTS] = handler;
    8442:	4a07      	ldr	r2, [pc, #28]	; (8460 <rt_hw_interrupt_install+0x34>)
    8444:	381b      	subs	r0, #27
    8446:	0080      	lsls	r0, r0, #2
    8448:	5081      	str	r1, [r0, r2]

    return handler;
    844a:	0008      	movs	r0, r1
}
    844c:	bd10      	pop	{r4, pc}
        HAL_NVIC_SetIRQHandler(vector, (NVIC_IRQHandler)handler);
    844e:	b200      	sxth	r0, r0
    8450:	f7ff fd6a 	bl	7f28 <HAL_NVIC_SetIRQHandler>
    return handler;
    8454:	0020      	movs	r0, r4
    8456:	e7f9      	b.n	844c <rt_hw_interrupt_install+0x20>
        return NULL;
    8458:	2000      	movs	r0, #0
    845a:	e7f7      	b.n	844c <rt_hw_interrupt_install+0x20>
    845c:	0000021a 	.word	0x0000021a
    8460:	00017a68 	.word	0x00017a68

00008464 <timer_isr>:
    rt_thread_delay(10 * RT_TICK_PER_SECOND);
    rt_kprintf("finish 10s test\n");
}

void timer_isr(int vector, void *param)
{
    8464:	b5f0      	push	{r4, r5, r6, r7, lr}
    8466:	46de      	mov	lr, fp
    8468:	464e      	mov	r6, r9
    846a:	4645      	mov	r5, r8
    846c:	4657      	mov	r7, sl
    846e:	b5e0      	push	{r5, r6, r7, lr}
    uint32_t count;
    float latency;
    char szBuf[64];

    count = (uint32_t)HAL_TIMER_GetCount(timer);
    8470:	4e3c      	ldr	r6, [pc, #240]	; (8564 <timer_isr+0x100>)
{
    8472:	b095      	sub	sp, #84	; 0x54
    count = (uint32_t)HAL_TIMER_GetCount(timer);
    8474:	6830      	ldr	r0, [r6, #0]
    8476:	f7ff fe51 	bl	811c <HAL_TIMER_GetCount>
    if (desc_timer)
    847a:	4b3b      	ldr	r3, [pc, #236]	; (8568 <timer_isr+0x104>)
    count = (uint32_t)HAL_TIMER_GetCount(timer);
    847c:	0005      	movs	r5, r0
    if (desc_timer)
    847e:	781b      	ldrb	r3, [r3, #0]
    8480:	2b00      	cmp	r3, #0
    8482:	d001      	beq.n	8488 <timer_isr+0x24>
        count = 24000000 - count;
    8484:	4b39      	ldr	r3, [pc, #228]	; (856c <timer_isr+0x108>)
    8486:	1a1d      	subs	r5, r3, r0
    if (count > fixed_spend)
    8488:	4b39      	ldr	r3, [pc, #228]	; (8570 <timer_isr+0x10c>)
    848a:	681b      	ldr	r3, [r3, #0]
    848c:	42ab      	cmp	r3, r5
    848e:	d200      	bcs.n	8492 <timer_isr+0x2e>
        count -= fixed_spend;
    8490:	1aed      	subs	r5, r5, r3
    latency = count * 1000000000.0 / 24000000;
    8492:	0028      	movs	r0, r5
    8494:	f7fe fb0c 	bl	6ab0 <__aeabi_ui2d>
    8498:	2200      	movs	r2, #0
    849a:	4b36      	ldr	r3, [pc, #216]	; (8574 <timer_isr+0x110>)
    849c:	f7fd fc84 	bl	5da8 <__aeabi_dmul>
    84a0:	2200      	movs	r2, #0
    84a2:	4b35      	ldr	r3, [pc, #212]	; (8578 <timer_isr+0x114>)
    84a4:	f7fd f87e 	bl	55a4 <__aeabi_ddiv>
    84a8:	f7fe fb70 	bl	6b8c <__aeabi_d2f>
    84ac:	1c04      	adds	r4, r0, #0
    sprintf(szBuf, "latency=%fns(count=%d)\n", latency, count);
    84ae:	f7fe fb25 	bl	6afc <__aeabi_f2d>
    84b2:	9500      	str	r5, [sp, #0]
    84b4:	0002      	movs	r2, r0
    84b6:	000b      	movs	r3, r1
    84b8:	a804      	add	r0, sp, #16
    84ba:	4930      	ldr	r1, [pc, #192]	; (857c <timer_isr+0x118>)
    84bc:	f006 ffee 	bl	f49c <sprintf>
    rt_kprintf("%s", szBuf);
    84c0:	4b2f      	ldr	r3, [pc, #188]	; (8580 <timer_isr+0x11c>)
    84c2:	a904      	add	r1, sp, #16
    84c4:	0018      	movs	r0, r3
    84c6:	469b      	mov	fp, r3
    84c8:	f001 feb8 	bl	a23c <rt_kprintf>
    timer_int_count++;
    84cc:	4b2d      	ldr	r3, [pc, #180]	; (8584 <timer_isr+0x120>)
    latency_sum += latency;
    84ce:	1c20      	adds	r0, r4, #0
    timer_int_count++;
    84d0:	4699      	mov	r9, r3
    84d2:	681b      	ldr	r3, [r3, #0]
    84d4:	1c5d      	adds	r5, r3, #1
    84d6:	464b      	mov	r3, r9
    84d8:	601d      	str	r5, [r3, #0]
    latency_sum += latency;
    84da:	4b2b      	ldr	r3, [pc, #172]	; (8588 <timer_isr+0x124>)
    84dc:	4698      	mov	r8, r3
    84de:	6819      	ldr	r1, [r3, #0]
    84e0:	f7fc f9be 	bl	4860 <__aeabi_fadd>
    84e4:	4643      	mov	r3, r8
    latency_max = latency_max > latency ? latency_max : latency;
    84e6:	4f29      	ldr	r7, [pc, #164]	; (858c <timer_isr+0x128>)
    latency_sum += latency;
    84e8:	6018      	str	r0, [r3, #0]
    latency_max = latency_max > latency ? latency_max : latency;
    84ea:	683b      	ldr	r3, [r7, #0]
    latency_sum += latency;
    84ec:	9002      	str	r0, [sp, #8]
    latency_max = latency_max > latency ? latency_max : latency;
    84ee:	1c21      	adds	r1, r4, #0
    84f0:	1c18      	adds	r0, r3, #0
    84f2:	469a      	mov	sl, r3
    84f4:	f7fc f886 	bl	4604 <__aeabi_fcmpgt>
    84f8:	2800      	cmp	r0, #0
    84fa:	d000      	beq.n	84fe <timer_isr+0x9a>
    84fc:	4654      	mov	r4, sl
    84fe:	603c      	str	r4, [r7, #0]
    if (timer_int_count == 100)
    8500:	2d64      	cmp	r5, #100	; 0x64
    8502:	d009      	beq.n	8518 <timer_isr+0xb4>
        latency_max = 0.0;
        HAL_TIMER_ClrInt(timer);
        HAL_TIMER_Stop_IT(timer);
    }

    HAL_TIMER_ClrInt(timer);
    8504:	6830      	ldr	r0, [r6, #0]
    8506:	f7ff fe11 	bl	812c <HAL_TIMER_ClrInt>
}
    850a:	b015      	add	sp, #84	; 0x54
    850c:	bcf0      	pop	{r4, r5, r6, r7}
    850e:	46bb      	mov	fp, r7
    8510:	46b2      	mov	sl, r6
    8512:	46a9      	mov	r9, r5
    8514:	46a0      	mov	r8, r4
    8516:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sprintf(szBuf, "latency avg=%f,max=%f\n", latency_sum / timer_int_count, latency_max);
    8518:	9802      	ldr	r0, [sp, #8]
    851a:	491d      	ldr	r1, [pc, #116]	; (8590 <timer_isr+0x12c>)
    851c:	f7fc fb3e 	bl	4b9c <__aeabi_fdiv>
    8520:	f7fe faec 	bl	6afc <__aeabi_f2d>
    8524:	9002      	str	r0, [sp, #8]
    8526:	9103      	str	r1, [sp, #12]
    8528:	1c20      	adds	r0, r4, #0
    852a:	f7fe fae7 	bl	6afc <__aeabi_f2d>
    852e:	9a02      	ldr	r2, [sp, #8]
    8530:	9b03      	ldr	r3, [sp, #12]
    8532:	9000      	str	r0, [sp, #0]
    8534:	9101      	str	r1, [sp, #4]
    8536:	4917      	ldr	r1, [pc, #92]	; (8594 <timer_isr+0x130>)
    8538:	a804      	add	r0, sp, #16
    853a:	f006 ffaf 	bl	f49c <sprintf>
        rt_kprintf("%s", szBuf);
    853e:	4658      	mov	r0, fp
    8540:	a904      	add	r1, sp, #16
    8542:	f001 fe7b 	bl	a23c <rt_kprintf>
        timer_int_count = 0;
    8546:	464a      	mov	r2, r9
    8548:	2300      	movs	r3, #0
    854a:	6013      	str	r3, [r2, #0]
        latency_sum = 0.0;
    854c:	2300      	movs	r3, #0
    854e:	4642      	mov	r2, r8
        HAL_TIMER_ClrInt(timer);
    8550:	6830      	ldr	r0, [r6, #0]
        latency_sum = 0.0;
    8552:	6013      	str	r3, [r2, #0]
        latency_max = 0.0;
    8554:	603b      	str	r3, [r7, #0]
        HAL_TIMER_ClrInt(timer);
    8556:	f7ff fde9 	bl	812c <HAL_TIMER_ClrInt>
        HAL_TIMER_Stop_IT(timer);
    855a:	6830      	ldr	r0, [r6, #0]
    855c:	f7ff fdc4 	bl	80e8 <HAL_TIMER_Stop_IT>
    8560:	e7d0      	b.n	8504 <timer_isr+0xa0>
    8562:	46c0      	nop			; (mov r8, r8)
    8564:	00018274 	.word	0x00018274
    8568:	00017264 	.word	0x00017264
    856c:	016e3600 	.word	0x016e3600
    8570:	00018268 	.word	0x00018268
    8574:	41cdcd65 	.word	0x41cdcd65
    8578:	4176e360 	.word	0x4176e360
    857c:	000143fc 	.word	0x000143fc
    8580:	00014414 	.word	0x00014414
    8584:	00018278 	.word	0x00018278
    8588:	00018270 	.word	0x00018270
    858c:	0001826c 	.word	0x0001826c
    8590:	42c80000 	.word	0x42c80000
    8594:	00014418 	.word	0x00014418

00008598 <invalid_test>:
void invalid_test(int argc, char **argv)
{
    //uint32_t status = 0;
    rt_base_t level;

    write_reg(0x90000, 0x55555555);
    8598:	2090      	movs	r0, #144	; 0x90
{
    859a:	b510      	push	{r4, lr}
    write_reg(0x90000, 0x55555555);
    859c:	4903      	ldr	r1, [pc, #12]	; (85ac <invalid_test+0x14>)
    859e:	0300      	lsls	r0, r0, #12
    85a0:	f000 f8fc 	bl	879c <write_reg>
    level = rt_hw_interrupt_disable();
    85a4:	f7fb fd84 	bl	40b0 <rt_hw_interrupt_disable>
    while (1);
    85a8:	e7fe      	b.n	85a8 <invalid_test+0x10>
    85aa:	46c0      	nop			; (mov r8, r8)
    85ac:	55555555 	.word	0x55555555

000085b0 <timer_test>:
{
    85b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85b2:	46ce      	mov	lr, r9
    85b4:	4647      	mov	r7, r8
    85b6:	b580      	push	{r7, lr}
    85b8:	b085      	sub	sp, #20
    start = HAL_GetSysTimerCount();
    85ba:	f7ff fb47 	bl	7c4c <HAL_GetSysTimerCount>
    85be:	0004      	movs	r4, r0
    rt_thread_delay(RT_TICK_PER_SECOND);
    85c0:	2064      	movs	r0, #100	; 0x64
    start = HAL_GetSysTimerCount();
    85c2:	000e      	movs	r6, r1
    rt_thread_delay(RT_TICK_PER_SECOND);
    85c4:	f002 fe36 	bl	b234 <rt_thread_delay>
    end = HAL_GetSysTimerCount();
    85c8:	f7ff fb40 	bl	7c4c <HAL_GetSysTimerCount>
    85cc:	0005      	movs	r5, r0
    85ce:	000b      	movs	r3, r1
    rt_kprintf("systimer 1s count: %ld(%lld, %lld)\n", count, start, end);
    85d0:	0022      	movs	r2, r4
    count = (uint32_t)(end - start);
    85d2:	1b01      	subs	r1, r0, r4
    rt_kprintf("systimer 1s count: %ld(%lld, %lld)\n", count, start, end);
    85d4:	9301      	str	r3, [sp, #4]
    85d6:	4852      	ldr	r0, [pc, #328]	; (8720 <timer_test+0x170>)
    85d8:	0033      	movs	r3, r6
    85da:	9500      	str	r5, [sp, #0]
    85dc:	f001 fe2e 	bl	a23c <rt_kprintf>
    RT_ASSERT(PLL_INPUT_OSC_RATE - count < 1000000);
    85e0:	4b50      	ldr	r3, [pc, #320]	; (8724 <timer_test+0x174>)
    85e2:	469c      	mov	ip, r3
    85e4:	4b50      	ldr	r3, [pc, #320]	; (8728 <timer_test+0x178>)
    85e6:	4464      	add	r4, ip
    85e8:	1b64      	subs	r4, r4, r5
    85ea:	429c      	cmp	r4, r3
    85ec:	d900      	bls.n	85f0 <timer_test+0x40>
    85ee:	e090      	b.n	8712 <timer_test+0x162>
    rt_kprintf("test external irq\n");
    85f0:	484e      	ldr	r0, [pc, #312]	; (872c <timer_test+0x17c>)
    85f2:	f001 fe23 	bl	a23c <rt_kprintf>
    desc_timer = true;
    85f6:	4b4e      	ldr	r3, [pc, #312]	; (8730 <timer_test+0x180>)
    timer = TIMER_EXT_1;
    85f8:	4c4e      	ldr	r4, [pc, #312]	; (8734 <timer_test+0x184>)
    desc_timer = true;
    85fa:	4698      	mov	r8, r3
    85fc:	2301      	movs	r3, #1
    85fe:	4642      	mov	r2, r8
    timer = TIMER_EXT_1;
    8600:	484d      	ldr	r0, [pc, #308]	; (8738 <timer_test+0x188>)
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    8602:	2100      	movs	r1, #0
    desc_timer = true;
    8604:	7013      	strb	r3, [r2, #0]
    timer = TIMER_EXT_1;
    8606:	6020      	str	r0, [r4, #0]
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    8608:	f7ff fd20 	bl	804c <HAL_TIMER_Init>
    HAL_TIMER_SetCount(timer, 2000000000);
    860c:	2300      	movs	r3, #0
    860e:	4a4b      	ldr	r2, [pc, #300]	; (873c <timer_test+0x18c>)
    8610:	6820      	ldr	r0, [r4, #0]
    8612:	f7ff fd77 	bl	8104 <HAL_TIMER_SetCount>
    HAL_TIMER_Start(timer);
    8616:	6820      	ldr	r0, [r4, #0]
    8618:	f7ff fd38 	bl	808c <HAL_TIMER_Start>
    start = HAL_TIMER_GetCount(timer);
    861c:	6820      	ldr	r0, [r4, #0]
    861e:	f7ff fd7d 	bl	811c <HAL_TIMER_GetCount>
    8622:	0005      	movs	r5, r0
    rt_thread_delay(RT_TICK_PER_SECOND);
    8624:	2064      	movs	r0, #100	; 0x64
    start = HAL_TIMER_GetCount(timer);
    8626:	000f      	movs	r7, r1
    rt_thread_delay(RT_TICK_PER_SECOND);
    8628:	f002 fe04 	bl	b234 <rt_thread_delay>
    end = HAL_TIMER_GetCount(timer);
    862c:	6820      	ldr	r0, [r4, #0]
    862e:	f7ff fd75 	bl	811c <HAL_TIMER_GetCount>
    8632:	000b      	movs	r3, r1
    fixed_spend = 2000000000 - start;
    8634:	4a41      	ldr	r2, [pc, #260]	; (873c <timer_test+0x18c>)
    8636:	4e42      	ldr	r6, [pc, #264]	; (8740 <timer_test+0x190>)
    8638:	1b52      	subs	r2, r2, r5
    863a:	6032      	str	r2, [r6, #0]
    count = (uint32_t)(start - end);
    863c:	1a29      	subs	r1, r5, r0
    rt_kprintf("external timer 1s count: %ld(%lld, %lld), fixed_spend=%d\n",
    863e:	9202      	str	r2, [sp, #8]
    8640:	9000      	str	r0, [sp, #0]
    8642:	002a      	movs	r2, r5
    8644:	9301      	str	r3, [sp, #4]
    8646:	483f      	ldr	r0, [pc, #252]	; (8744 <timer_test+0x194>)
    8648:	003b      	movs	r3, r7
    864a:	f001 fdf7 	bl	a23c <rt_kprintf>
    rt_hw_interrupt_install(TIMER_EXT_1_IRQ, timer_isr, NULL, "timer");
    864e:	205e      	movs	r0, #94	; 0x5e
    8650:	4f3d      	ldr	r7, [pc, #244]	; (8748 <timer_test+0x198>)
    8652:	4b3e      	ldr	r3, [pc, #248]	; (874c <timer_test+0x19c>)
    8654:	2200      	movs	r2, #0
    8656:	0039      	movs	r1, r7
    8658:	30ff      	adds	r0, #255	; 0xff
    865a:	4699      	mov	r9, r3
    865c:	f7ff fee6 	bl	842c <rt_hw_interrupt_install>
    rt_hw_interrupt_umask(TIMER_EXT_1_IRQ);
    8660:	205e      	movs	r0, #94	; 0x5e
    8662:	30ff      	adds	r0, #255	; 0xff
    8664:	f7ff febe 	bl	83e4 <rt_hw_interrupt_umask>
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    8668:	2100      	movs	r1, #0
    866a:	6820      	ldr	r0, [r4, #0]
    866c:	f7ff fcee 	bl	804c <HAL_TIMER_Init>
    HAL_TIMER_SetCount(timer, 24000000);
    8670:	2300      	movs	r3, #0
    8672:	4a2c      	ldr	r2, [pc, #176]	; (8724 <timer_test+0x174>)
    8674:	6820      	ldr	r0, [r4, #0]
    8676:	f7ff fd45 	bl	8104 <HAL_TIMER_SetCount>
    HAL_TIMER_Start_IT(timer);
    867a:	6820      	ldr	r0, [r4, #0]
    867c:	f7ff fd26 	bl	80cc <HAL_TIMER_Start_IT>
    rt_thread_delay(150 * RT_TICK_PER_SECOND);
    8680:	4833      	ldr	r0, [pc, #204]	; (8750 <timer_test+0x1a0>)
    8682:	f002 fdd7 	bl	b234 <rt_thread_delay>
    rt_kprintf("\n\ntest internal irq\n");
    8686:	4833      	ldr	r0, [pc, #204]	; (8754 <timer_test+0x1a4>)
    8688:	f001 fdd8 	bl	a23c <rt_kprintf>
    desc_timer = false;
    868c:	4642      	mov	r2, r8
    868e:	2300      	movs	r3, #0
    timer = TIMER1;
    8690:	4831      	ldr	r0, [pc, #196]	; (8758 <timer_test+0x1a8>)
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    8692:	2100      	movs	r1, #0
    desc_timer = false;
    8694:	7013      	strb	r3, [r2, #0]
    timer = TIMER1;
    8696:	6020      	str	r0, [r4, #0]
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    8698:	f7ff fcd8 	bl	804c <HAL_TIMER_Init>
    HAL_TIMER_SetCount(timer, 2000000000);
    869c:	2300      	movs	r3, #0
    869e:	4a27      	ldr	r2, [pc, #156]	; (873c <timer_test+0x18c>)
    86a0:	6820      	ldr	r0, [r4, #0]
    86a2:	f7ff fd2f 	bl	8104 <HAL_TIMER_SetCount>
    HAL_TIMER_Start(timer);
    86a6:	6820      	ldr	r0, [r4, #0]
    86a8:	f7ff fcf0 	bl	808c <HAL_TIMER_Start>
    start = HAL_TIMER_GetCount(timer);
    86ac:	6820      	ldr	r0, [r4, #0]
    86ae:	f7ff fd35 	bl	811c <HAL_TIMER_GetCount>
    86b2:	0005      	movs	r5, r0
    rt_thread_delay(RT_TICK_PER_SECOND);
    86b4:	2064      	movs	r0, #100	; 0x64
    start = HAL_TIMER_GetCount(timer);
    86b6:	4688      	mov	r8, r1
    rt_thread_delay(RT_TICK_PER_SECOND);
    86b8:	f002 fdbc 	bl	b234 <rt_thread_delay>
    end = HAL_TIMER_GetCount(timer);
    86bc:	6820      	ldr	r0, [r4, #0]
    86be:	f7ff fd2d 	bl	811c <HAL_TIMER_GetCount>
    86c2:	000b      	movs	r3, r1
    fixed_spend = start;
    86c4:	6035      	str	r5, [r6, #0]
    count = (uint32_t)(end - start);
    86c6:	1b41      	subs	r1, r0, r5
    rt_kprintf("internal timer 1s count: %ld(%lld, %lld), fixed_spend=%d\n",
    86c8:	002a      	movs	r2, r5
    86ca:	9000      	str	r0, [sp, #0]
    86cc:	9301      	str	r3, [sp, #4]
    86ce:	4823      	ldr	r0, [pc, #140]	; (875c <timer_test+0x1ac>)
    86d0:	4643      	mov	r3, r8
    86d2:	9502      	str	r5, [sp, #8]
    86d4:	f001 fdb2 	bl	a23c <rt_kprintf>
    HAL_TIMER_Stop(timer);
    86d8:	6820      	ldr	r0, [r4, #0]
    86da:	f7ff fce9 	bl	80b0 <HAL_TIMER_Stop>
    rt_hw_interrupt_install(TIMER1_IRQn, timer_isr, NULL, "timer");
    86de:	464b      	mov	r3, r9
    86e0:	2200      	movs	r2, #0
    86e2:	0039      	movs	r1, r7
    86e4:	200d      	movs	r0, #13
    86e6:	f7ff fea1 	bl	842c <rt_hw_interrupt_install>
    rt_hw_interrupt_umask(TIMER1_IRQn);
    86ea:	200d      	movs	r0, #13
    86ec:	f7ff fe7a 	bl	83e4 <rt_hw_interrupt_umask>
    HAL_TIMER_Init(timer, TIMER_FREE_RUNNING);
    86f0:	2100      	movs	r1, #0
    86f2:	6820      	ldr	r0, [r4, #0]
    86f4:	f7ff fcaa 	bl	804c <HAL_TIMER_Init>
    HAL_TIMER_SetCount(timer, 24000000);
    86f8:	2300      	movs	r3, #0
    86fa:	4a0a      	ldr	r2, [pc, #40]	; (8724 <timer_test+0x174>)
    86fc:	6820      	ldr	r0, [r4, #0]
    86fe:	f7ff fd01 	bl	8104 <HAL_TIMER_SetCount>
    HAL_TIMER_Start_IT(timer);
    8702:	6820      	ldr	r0, [r4, #0]
    8704:	f7ff fce2 	bl	80cc <HAL_TIMER_Start_IT>
}
    8708:	b005      	add	sp, #20
    870a:	bcc0      	pop	{r6, r7}
    870c:	46b9      	mov	r9, r7
    870e:	46b0      	mov	r8, r6
    8710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RT_ASSERT(PLL_INPUT_OSC_RATE - count < 1000000);
    8712:	227f      	movs	r2, #127	; 0x7f
    8714:	4912      	ldr	r1, [pc, #72]	; (8760 <timer_test+0x1b0>)
    8716:	4813      	ldr	r0, [pc, #76]	; (8764 <timer_test+0x1b4>)
    8718:	f001 fe0e 	bl	a338 <rt_assert_handler>
    871c:	e768      	b.n	85f0 <timer_test+0x40>
    871e:	46c0      	nop			; (mov r8, r8)
    8720:	00014430 	.word	0x00014430
    8724:	016e3600 	.word	0x016e3600
    8728:	000f423f 	.word	0x000f423f
    872c:	0001447c 	.word	0x0001447c
    8730:	00017264 	.word	0x00017264
    8734:	00018274 	.word	0x00018274
    8738:	feae0020 	.word	0xfeae0020
    873c:	77359400 	.word	0x77359400
    8740:	00018268 	.word	0x00018268
    8744:	00014490 	.word	0x00014490
    8748:	00008465 	.word	0x00008465
    874c:	000144cc 	.word	0x000144cc
    8750:	00003a98 	.word	0x00003a98
    8754:	000144d4 	.word	0x000144d4
    8758:	fd8f0020 	.word	0xfd8f0020
    875c:	000144ec 	.word	0x000144ec
    8760:	00014528 	.word	0x00014528
    8764:	00014454 	.word	0x00014454

00008768 <main>:
extern void benchmark(void);

//SECTION(".tcm.bss") static uint8_t bench_thread_stack[2048];
extern void test_dcache();
int main(void)
{
    8768:	b510      	push	{r4, lr}
    //irq_test();
    //benchmark();

    //rt_thread_init(&tcb, "bench", benchmark, NULL, bench_thread_stack, 2048, 10, 1000000);
    //rt_thread_startup(&tcb);
    timer_test();
    876a:	f7ff ff21 	bl	85b0 <timer_test>
    //test_dcache();
    //mbox_test(0, NULL);
    return 0;
}
    876e:	2000      	movs	r0, #0
    8770:	bd10      	pop	{r4, pc}
    8772:	46c0      	nop			; (mov r8, r8)

00008774 <rt_idle_wfi>:

static void rt_idle_wfi(void)
{
    rt_ubase_t level;

    asm volatile("MRS     %0, PRIMASK\n"
    8774:	f3ef 8310 	mrs	r3, PRIMASK
    8778:	b672      	cpsid	i
                 "CPSID   I"
                 : "=r"(level) : : "memory", "cc");

    asm volatile("dsb");
    877a:	f3bf 8f4f 	dsb	sy
    asm volatile("wfi");
    877e:	bf30      	wfi

    asm volatile("MSR     PRIMASK, %0"
    8780:	f383 8810 	msr	PRIMASK, r3
                 : : "r"(level) : "memory", "cc");
}
    8784:	4770      	bx	lr
    8786:	46c0      	nop			; (mov r8, r8)

00008788 <tick_isr>:
{
    8788:	b510      	push	{r4, lr}
    rt_interrupt_enter();
    878a:	f001 f92b 	bl	99e4 <rt_interrupt_enter>
    HAL_IncTick();
    878e:	f7ff fa51 	bl	7c34 <HAL_IncTick>
    rt_tick_increase();
    8792:	f000 fd47 	bl	9224 <rt_tick_increase>
    rt_interrupt_leave();
    8796:	f001 f93b 	bl	9a10 <rt_interrupt_leave>
}
    879a:	bd10      	pop	{r4, pc}

0000879c <write_reg>:
    *pVal = val;
    879c:	6001      	str	r1, [r0, #0]
}
    879e:	4770      	bx	lr

000087a0 <rt_hw_board_init>:

int rt_hw_board_init(void)
{
    87a0:	b510      	push	{r4, lr}
    /* interrupt priority init */
    interrupt_prio_init();

    /* tick init */
    HAL_SetTickFreq(1000 / RT_TICK_PER_SECOND);
    rt_hw_interrupt_install(SysTick_IRQn, tick_isr, RT_NULL, "tick");
    87a2:	2401      	movs	r4, #1
    HAL_Init();
    87a4:	f7ff fa38 	bl	7c18 <HAL_Init>
    rt_hw_interrupt_install(SysTick_IRQn, tick_isr, RT_NULL, "tick");
    87a8:	4264      	negs	r4, r4
    BSP_Init();
    87aa:	f7ff fd55 	bl	8258 <BSP_Init>
    rt_hw_interrupt_init();
    87ae:	f7ff fdcb 	bl	8348 <rt_hw_interrupt_init>
    HAL_SetTickFreq(1000 / RT_TICK_PER_SECOND);
    87b2:	200a      	movs	r0, #10
    87b4:	f7ff fa56 	bl	7c64 <HAL_SetTickFreq>
    rt_hw_interrupt_install(SysTick_IRQn, tick_isr, RT_NULL, "tick");
    87b8:	4b17      	ldr	r3, [pc, #92]	; (8818 <rt_hw_board_init+0x78>)
    87ba:	2200      	movs	r2, #0
    87bc:	4917      	ldr	r1, [pc, #92]	; (881c <rt_hw_board_init+0x7c>)
    87be:	0020      	movs	r0, r4
    87c0:	f7ff fe34 	bl	842c <rt_hw_interrupt_install>
    rt_hw_interrupt_umask(SysTick_IRQn);
    87c4:	0020      	movs	r0, r4
    87c6:	f7ff fe0d 	bl	83e4 <rt_hw_interrupt_umask>
    HAL_NVIC_SetPriority(SysTick_IRQn, NVIC_PERIPH_PRIO_LOWEST, NVIC_PERIPH_SUB_PRIO_LOWEST);
    87ca:	22ff      	movs	r2, #255	; 0xff
    87cc:	21ff      	movs	r1, #255	; 0xff
    87ce:	0020      	movs	r0, r4
    87d0:	f7ff fbb0 	bl	7f34 <HAL_NVIC_SetPriority>
    HAL_SYSTICK_CLKSourceConfig(HAL_SYSTICK_CLKSRC_EXT);
    87d4:	2001      	movs	r0, #1
    87d6:	f7ff fc17 	bl	8008 <HAL_SYSTICK_CLKSourceConfig>
    HAL_SYSTICK_Config((SYSTICK_EXT_SRC / RT_TICK_PER_SECOND) - 1);
    87da:	20a3      	movs	r0, #163	; 0xa3
    87dc:	0040      	lsls	r0, r0, #1
    87de:	f7ff fbf9 	bl	7fd4 <HAL_SYSTICK_Config>
    HAL_SYSTICK_Enable();
    87e2:	f7ff fc29 	bl	8038 <HAL_SYSTICK_Enable>

#ifdef RT_USING_CACHE
    rt_hw_cpu_cache_init();
    87e6:	f000 f82b 	bl	8840 <rt_hw_cpu_cache_init>
    *pVal = val;
    87ea:	4b0d      	ldr	r3, [pc, #52]	; (8820 <rt_hw_board_init+0x80>)
    87ec:	4a0d      	ldr	r2, [pc, #52]	; (8824 <rt_hw_board_init+0x84>)
#ifdef RT_USING_CRU
    clk_init(clk_inits, false);
    clk_disable_unused(clks_unused);
#endif

    rt_system_heap_init((void *)__sram_heap_start__, (void *)__sram_heap_end__);
    87ee:	490e      	ldr	r1, [pc, #56]	; (8828 <rt_hw_board_init+0x88>)
    *pVal = val;
    87f0:	601a      	str	r2, [r3, #0]
    87f2:	4b0e      	ldr	r3, [pc, #56]	; (882c <rt_hw_board_init+0x8c>)
    87f4:	4a0e      	ldr	r2, [pc, #56]	; (8830 <rt_hw_board_init+0x90>)
    rt_system_heap_init((void *)__sram_heap_start__, (void *)__sram_heap_end__);
    87f6:	480f      	ldr	r0, [pc, #60]	; (8834 <rt_hw_board_init+0x94>)
    *pVal = val;
    87f8:	601a      	str	r2, [r3, #0]
    rt_system_heap_init((void *)__sram_heap_start__, (void *)__sram_heap_end__);
    87fa:	f001 fedf 	bl	a5bc <rt_system_heap_init>

#ifdef RT_USING_UART
    rt_hw_usart_init();
    87fe:	f000 f93b 	bl	8a78 <rt_hw_usart_init>
#endif
#ifdef RT_USING_CONSOLE
    rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
    8802:	480d      	ldr	r0, [pc, #52]	; (8838 <rt_hw_board_init+0x98>)
    8804:	f001 fce0 	bl	a1c8 <rt_console_set_device>
#endif

    rt_thread_idle_sethook(rt_idle_wfi);
    8808:	480c      	ldr	r0, [pc, #48]	; (883c <rt_hw_board_init+0x9c>)
    880a:	f000 ff13 	bl	9634 <rt_thread_idle_sethook>

    rt_components_board_init();
    880e:	f000 fd41 	bl	9294 <rt_components_board_init>

    return 0;
}
    8812:	2000      	movs	r0, #0
    8814:	bd10      	pop	{r4, pc}
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	00014554 	.word	0x00014554
    881c:	00008789 	.word	0x00008789
    8820:	fd5f4000 	.word	0xfd5f4000
    8824:	ffff8888 	.word	0xffff8888
    8828:	0007fc00 	.word	0x0007fc00
    882c:	fd5f800c 	.word	0xfd5f800c
    8830:	0ff00aa0 	.word	0x0ff00aa0
    8834:	00018778 	.word	0x00018778
    8838:	0001455c 	.word	0x0001455c
    883c:	00008775 	.word	0x00008775

00008840 <rt_hw_cpu_cache_init>:
/**
 * @brief  Enable cache interrupt and register the handler, it called by board initialization.
 * @return RT_EOK
 */
int rt_hw_cpu_cache_init(void)
{
    8840:	b510      	push	{r4, lr}
#if defined(ICACHE) || defined(DCACHE)
    HAL_ICACHE_EnableInt();
    8842:	f7ff fa15 	bl	7c70 <HAL_ICACHE_EnableInt>
    HAL_DCACHE_EnableInt();
    8846:	f7ff fa21 	bl	7c8c <HAL_DCACHE_EnableInt>
    rt_hw_interrupt_umask(CACHE0_I_IRQn);
    rt_hw_interrupt_umask(CACHE0_D_IRQn);
#endif
#endif
    return RT_EOK;
}
    884a:	2000      	movs	r0, #0
    884c:	bd10      	pop	{r4, pc}
    884e:	46c0      	nop			; (mov r8, r8)

00008850 <rockchip_uart_putc>:
    &serial9,
#endif
};

static int rockchip_uart_putc(rt_serial_t *serial, char c)
{
    8850:	b570      	push	{r4, r5, r6, lr}
    8852:	0004      	movs	r4, r0
    8854:	000d      	movs	r5, r1
    struct rockchip_uart *uart = RT_NULL;

    RT_ASSERT(serial != RT_NULL);
    8856:	2800      	cmp	r0, #0
    8858:	d007      	beq.n	886a <rockchip_uart_putc+0x1a>
    uart = (struct rockchip_uart *)serial->parent.user_data;

    HAL_UART_SerialOutChar(uart->dev->pReg, c);
    885a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    885c:	0029      	movs	r1, r5
    885e:	685b      	ldr	r3, [r3, #4]
    8860:	6818      	ldr	r0, [r3, #0]
    8862:	f7ff fc81 	bl	8168 <HAL_UART_SerialOutChar>
    return 1;
}
    8866:	2001      	movs	r0, #1
    8868:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(serial != RT_NULL);
    886a:	22a9      	movs	r2, #169	; 0xa9
    886c:	4902      	ldr	r1, [pc, #8]	; (8878 <rockchip_uart_putc+0x28>)
    886e:	4803      	ldr	r0, [pc, #12]	; (887c <rockchip_uart_putc+0x2c>)
    8870:	f001 fd62 	bl	a338 <rt_assert_handler>
    8874:	e7f1      	b.n	885a <rockchip_uart_putc+0xa>
    8876:	46c0      	nop			; (mov r8, r8)
    8878:	000145f0 	.word	0x000145f0
    887c:	0001457c 	.word	0x0001457c

00008880 <rockchip_uart_getc>:

static int rockchip_uart_getc(rt_serial_t *serial)
{
    8880:	b510      	push	{r4, lr}
    8882:	b082      	sub	sp, #8
    rt_uint8_t c = 0;
    8884:	2300      	movs	r3, #0
    8886:	466a      	mov	r2, sp
{
    8888:	1e04      	subs	r4, r0, #0
    rt_uint8_t c = 0;
    888a:	71d3      	strb	r3, [r2, #7]
    int ret = -1;

    struct rockchip_uart *uart = RT_NULL;

    RT_ASSERT(serial != RT_NULL);
    888c:	d00d      	beq.n	88aa <rockchip_uart_getc+0x2a>
    uart = (struct rockchip_uart *)serial->parent.user_data;

    ret = HAL_UART_SerialIn(uart->dev->pReg, &c, 1);
    888e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    8890:	2201      	movs	r2, #1
    8892:	685b      	ldr	r3, [r3, #4]
    8894:	6818      	ldr	r0, [r3, #0]
    8896:	466b      	mov	r3, sp
    8898:	1dd9      	adds	r1, r3, #7
    889a:	f7ff fc6b 	bl	8174 <HAL_UART_SerialIn>

    if (ret <= 0)
    889e:	2800      	cmp	r0, #0
    88a0:	dd09      	ble.n	88b6 <rockchip_uart_getc+0x36>
    {
        return -1;
    }
    else
    {
        ret = c;
    88a2:	466b      	mov	r3, sp
    88a4:	79d8      	ldrb	r0, [r3, #7]
        return ret;
    }
}
    88a6:	b002      	add	sp, #8
    88a8:	bd10      	pop	{r4, pc}
    RT_ASSERT(serial != RT_NULL);
    88aa:	22b7      	movs	r2, #183	; 0xb7
    88ac:	4903      	ldr	r1, [pc, #12]	; (88bc <rockchip_uart_getc+0x3c>)
    88ae:	4804      	ldr	r0, [pc, #16]	; (88c0 <rockchip_uart_getc+0x40>)
    88b0:	f001 fd42 	bl	a338 <rt_assert_handler>
    88b4:	e7eb      	b.n	888e <rockchip_uart_getc+0xe>
        return -1;
    88b6:	2001      	movs	r0, #1
    88b8:	4240      	negs	r0, r0
    88ba:	e7f4      	b.n	88a6 <rockchip_uart_getc+0x26>
    88bc:	00014604 	.word	0x00014604
    88c0:	0001457c 	.word	0x0001457c

000088c4 <rockchip_uart_control>:

    return RT_EOK;
}

static rt_err_t rockchip_uart_control(rt_serial_t *serial, int cmd, void *arg)
{
    88c4:	b570      	push	{r4, r5, r6, lr}
    88c6:	0005      	movs	r5, r0
    88c8:	000c      	movs	r4, r1
    88ca:	0016      	movs	r6, r2
    struct rockchip_uart *uart = RT_NULL;
    struct UART_REG *hw_base = RT_NULL;
    const struct HAL_UART_DEV *dev;
    rt_uint32_t flag = (rt_uint32_t)arg;

    RT_ASSERT(serial != RT_NULL);
    88cc:	2800      	cmp	r0, #0
    88ce:	d02a      	beq.n	8926 <rockchip_uart_control+0x62>
    uart = (struct rockchip_uart *)serial->parent.user_data;
    hw_base = uart->dev->pReg;
    88d0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    88d2:	685b      	ldr	r3, [r3, #4]
    88d4:	6818      	ldr	r0, [r3, #0]
    dev = uart->dev;

    switch (cmd)
    88d6:	2c10      	cmp	r4, #16
    88d8:	d005      	beq.n	88e6 <rockchip_uart_control+0x22>
    88da:	2c11      	cmp	r4, #17
    88dc:	d017      	beq.n	890e <rockchip_uart_control+0x4a>
    88de:	2c03      	cmp	r4, #3
    88e0:	d00d      	beq.n	88fe <rockchip_uart_control+0x3a>
        clk_disable_by_id(dev->sclkGateID);
        break;
    }

    return RT_EOK;
}
    88e2:	2000      	movs	r0, #0
    88e4:	bd70      	pop	{r4, r5, r6, pc}
        if (flag == RT_DEVICE_FLAG_INT_RX)
    88e6:	2380      	movs	r3, #128	; 0x80
    88e8:	005b      	lsls	r3, r3, #1
    88ea:	429e      	cmp	r6, r3
    88ec:	d00b      	beq.n	8906 <rockchip_uart_control+0x42>
        else if (flag == RT_DEVICE_FLAG_INT_TX)
    88ee:	2380      	movs	r3, #128	; 0x80
    88f0:	00db      	lsls	r3, r3, #3
    88f2:	429e      	cmp	r6, r3
    88f4:	d1f5      	bne.n	88e2 <rockchip_uart_control+0x1e>
            HAL_UART_EnableIrq(hw_base, UART_IER_THRI);
    88f6:	2102      	movs	r1, #2
    88f8:	f7ff fc8c 	bl	8214 <HAL_UART_EnableIrq>
    88fc:	e7f1      	b.n	88e2 <rockchip_uart_control+0x1e>
        if (flag == RT_DEVICE_FLAG_DMA_RX)
    88fe:	2380      	movs	r3, #128	; 0x80
    8900:	009b      	lsls	r3, r3, #2
    8902:	429e      	cmp	r6, r3
    8904:	d1ed      	bne.n	88e2 <rockchip_uart_control+0x1e>
            HAL_UART_EnableIrq(hw_base, UART_IER_RDI);
    8906:	2101      	movs	r1, #1
    8908:	f7ff fc84 	bl	8214 <HAL_UART_EnableIrq>
    890c:	e7e9      	b.n	88e2 <rockchip_uart_control+0x1e>
        if (flag == RT_DEVICE_FLAG_INT_RX)
    890e:	2380      	movs	r3, #128	; 0x80
    8910:	005b      	lsls	r3, r3, #1
    8912:	429e      	cmp	r6, r3
    8914:	d00e      	beq.n	8934 <rockchip_uart_control+0x70>
        else if (flag == RT_DEVICE_FLAG_INT_TX)
    8916:	2380      	movs	r3, #128	; 0x80
    8918:	00db      	lsls	r3, r3, #3
    891a:	429e      	cmp	r6, r3
    891c:	d1e1      	bne.n	88e2 <rockchip_uart_control+0x1e>
            HAL_UART_DisableIrq(hw_base, UART_IER_THRI);
    891e:	2102      	movs	r1, #2
    8920:	f7ff fc7c 	bl	821c <HAL_UART_DisableIrq>
    8924:	e7dd      	b.n	88e2 <rockchip_uart_control+0x1e>
    RT_ASSERT(serial != RT_NULL);
    8926:	2262      	movs	r2, #98	; 0x62
    8928:	4904      	ldr	r1, [pc, #16]	; (893c <rockchip_uart_control+0x78>)
    892a:	4805      	ldr	r0, [pc, #20]	; (8940 <rockchip_uart_control+0x7c>)
    892c:	32ff      	adds	r2, #255	; 0xff
    892e:	f001 fd03 	bl	a338 <rt_assert_handler>
    8932:	e7cd      	b.n	88d0 <rockchip_uart_control+0xc>
            HAL_UART_DisableIrq(hw_base, UART_IER_RDI);
    8934:	2101      	movs	r1, #1
    8936:	f7ff fc71 	bl	821c <HAL_UART_DisableIrq>
    893a:	e7d2      	b.n	88e2 <rockchip_uart_control+0x1e>
    893c:	000145d8 	.word	0x000145d8
    8940:	0001457c 	.word	0x0001457c

00008944 <rockchip_uart_configure>:
{
    8944:	b530      	push	{r4, r5, lr}
    8946:	0005      	movs	r5, r0
    8948:	000c      	movs	r4, r1
    894a:	b083      	sub	sp, #12
    RT_ASSERT(serial != RT_NULL);
    894c:	2800      	cmp	r0, #0
    894e:	d046      	beq.n	89de <rockchip_uart_configure+0x9a>
    if (cfg->stop_bits == STOP_BITS_1)
    8950:	2230      	movs	r2, #48	; 0x30
    8952:	0010      	movs	r0, r2
    dev = uart->dev;
    8954:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8956:	685d      	ldr	r5, [r3, #4]
    if (cfg->stop_bits == STOP_BITS_1)
    8958:	7923      	ldrb	r3, [r4, #4]
    895a:	4018      	ands	r0, r3
    895c:	421a      	tst	r2, r3
    895e:	d126      	bne.n	89ae <rockchip_uart_configure+0x6a>
        hal_uart_config.stopBit = UART_ONE_STOPBIT;
    8960:	4669      	mov	r1, sp
    8962:	7148      	strb	r0, [r1, #5]
    if (cfg->parity == PARITY_ODD)
    8964:	223f      	movs	r2, #63	; 0x3f
    8966:	0018      	movs	r0, r3
    8968:	4390      	bics	r0, r2
    896a:	0002      	movs	r2, r0
    896c:	2840      	cmp	r0, #64	; 0x40
    896e:	d029      	beq.n	89c4 <rockchip_uart_configure+0x80>
    else if (cfg->parity == PARITY_EVEN)
    8970:	2880      	cmp	r0, #128	; 0x80
    8972:	d019      	beq.n	89a8 <rockchip_uart_configure+0x64>
        hal_uart_config.parity = UART_PARITY_DISABLE;
    8974:	2202      	movs	r2, #2
    8976:	718a      	strb	r2, [r1, #6]
    hal_uart_config.baudRate = cfg->baud_rate;
    8978:	6822      	ldr	r2, [r4, #0]
    hal_uart_config.dataBit = cfg->data_bits;
    897a:	071b      	lsls	r3, r3, #28
    897c:	0f1b      	lsrs	r3, r3, #28
    HAL_UART_Init(dev, &hal_uart_config);
    897e:	0028      	movs	r0, r5
    hal_uart_config.dataBit = cfg->data_bits;
    8980:	710b      	strb	r3, [r1, #4]
    hal_uart_config.baudRate = cfg->baud_rate;
    8982:	9200      	str	r2, [sp, #0]
    HAL_UART_Init(dev, &hal_uart_config);
    8984:	f7ff fc10 	bl	81a8 <HAL_UART_Init>
    if (dev->isAutoFlow && (cfg->flow_ctrl == RT_SERIAL_AUTO_FLOW_ENABLE))
    8988:	7cab      	ldrb	r3, [r5, #18]
    898a:	2b00      	cmp	r3, #0
    898c:	d002      	beq.n	8994 <rockchip_uart_configure+0x50>
    898e:	79e3      	ldrb	r3, [r4, #7]
    8990:	075b      	lsls	r3, r3, #29
    8992:	d420      	bmi.n	89d6 <rockchip_uart_configure+0x92>
        HAL_UART_DisableAutoFlowControl(dev->pReg);
    8994:	6828      	ldr	r0, [r5, #0]
    8996:	f7ff fc49 	bl	822c <HAL_UART_DisableAutoFlowControl>
    rt_hw_interrupt_umask(dev->irqNum);
    899a:	2310      	movs	r3, #16
    899c:	5ee8      	ldrsh	r0, [r5, r3]
    899e:	f7ff fd21 	bl	83e4 <rt_hw_interrupt_umask>
}
    89a2:	2000      	movs	r0, #0
    89a4:	b003      	add	sp, #12
    89a6:	bd30      	pop	{r4, r5, pc}
        hal_uart_config.parity = UART_EVEN_PARITY;
    89a8:	3a7f      	subs	r2, #127	; 0x7f
    89aa:	718a      	strb	r2, [r1, #6]
    89ac:	e7e4      	b.n	8978 <rockchip_uart_configure+0x34>
    else if (cfg->stop_bits == STOP_BITS_2)
    89ae:	2810      	cmp	r0, #16
    89b0:	d10b      	bne.n	89ca <rockchip_uart_configure+0x86>
        hal_uart_config.stopBit = UART_ONE_AND_HALF_OR_TWO_STOPBIT;
    89b2:	2201      	movs	r2, #1
    89b4:	4669      	mov	r1, sp
    if (cfg->parity == PARITY_ODD)
    89b6:	0018      	movs	r0, r3
        hal_uart_config.stopBit = UART_ONE_AND_HALF_OR_TWO_STOPBIT;
    89b8:	714a      	strb	r2, [r1, #5]
    if (cfg->parity == PARITY_ODD)
    89ba:	223f      	movs	r2, #63	; 0x3f
    89bc:	4390      	bics	r0, r2
    89be:	0002      	movs	r2, r0
    89c0:	2840      	cmp	r0, #64	; 0x40
    89c2:	d1d5      	bne.n	8970 <rockchip_uart_configure+0x2c>
        hal_uart_config.parity = UART_ODD_PARITY;
    89c4:	2200      	movs	r2, #0
    89c6:	718a      	strb	r2, [r1, #6]
    89c8:	e7d6      	b.n	8978 <rockchip_uart_configure+0x34>
        rt_kprintf("STOP_BITS_3 and STOP_BITS_4 are not supported\n");
    89ca:	4808      	ldr	r0, [pc, #32]	; (89ec <rockchip_uart_configure+0xa8>)
    89cc:	f001 fc36 	bl	a23c <rt_kprintf>
    89d0:	4669      	mov	r1, sp
    if (cfg->parity == PARITY_ODD)
    89d2:	7923      	ldrb	r3, [r4, #4]
    89d4:	e7c6      	b.n	8964 <rockchip_uart_configure+0x20>
        HAL_UART_EnableAutoFlowControl(dev->pReg);
    89d6:	6828      	ldr	r0, [r5, #0]
    89d8:	f7ff fc24 	bl	8224 <HAL_UART_EnableAutoFlowControl>
    89dc:	e7dd      	b.n	899a <rockchip_uart_configure+0x56>
    RT_ASSERT(serial != RT_NULL);
    89de:	223a      	movs	r2, #58	; 0x3a
    89e0:	4903      	ldr	r1, [pc, #12]	; (89f0 <rockchip_uart_configure+0xac>)
    89e2:	4804      	ldr	r0, [pc, #16]	; (89f4 <rockchip_uart_configure+0xb0>)
    89e4:	32ff      	adds	r2, #255	; 0xff
    89e6:	f001 fca7 	bl	a338 <rt_assert_handler>
    89ea:	e7b1      	b.n	8950 <rockchip_uart_configure+0xc>
    89ec:	00014590 	.word	0x00014590
    89f0:	000145c0 	.word	0x000145c0
    89f4:	0001457c 	.word	0x0001457c

000089f8 <rockchip_uart2_irq>:
DEFINE_ROCKCHIP_UART(2);
    89f8:	b570      	push	{r4, r5, r6, lr}
    rt_uint32_t iir = 0;
    struct rockchip_uart *uart = RT_NULL;
    struct UART_REG *hw_base = RT_NULL;

    RT_ASSERT(serial != RT_NULL);
    uart = (struct rockchip_uart *)serial->parent.user_data;
    89fa:	4c10      	ldr	r4, [pc, #64]	; (8a3c <rockchip_uart2_irq+0x44>)
    hw_base = uart->dev->pReg;
    89fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    89fe:	685b      	ldr	r3, [r3, #4]
    8a00:	681d      	ldr	r5, [r3, #0]

    rt_interrupt_enter();
    8a02:	f000 ffef 	bl	99e4 <rt_interrupt_enter>

    iir = HAL_UART_GetIrqID(hw_base);
    8a06:	0028      	movs	r0, r5
    8a08:	f7ff fbaa 	bl	8160 <HAL_UART_GetIrqID>

    switch (iir)
    8a0c:	2308      	movs	r3, #8
    8a0e:	0002      	movs	r2, r0
    8a10:	439a      	bics	r2, r3
    8a12:	2a04      	cmp	r2, #4
    8a14:	d007      	beq.n	8a26 <rockchip_uart2_irq+0x2e>
    8a16:	2802      	cmp	r0, #2
    8a18:	d00a      	beq.n	8a30 <rockchip_uart2_irq+0x38>
    case UART_IIR_THRI:
        rt_hw_serial_isr(serial, RT_SERIAL_EVENT_TX_DONE);
        break;

    default:
        HAL_UART_HandleIrq(hw_base);
    8a1a:	0028      	movs	r0, r5
    8a1c:	f7ff fc0c 	bl	8238 <HAL_UART_HandleIrq>
        break;
    }

    rt_interrupt_leave();
    8a20:	f000 fff6 	bl	9a10 <rt_interrupt_leave>
DEFINE_ROCKCHIP_UART(2);
    8a24:	bd70      	pop	{r4, r5, r6, pc}
        rt_hw_serial_isr(serial, RT_SERIAL_EVENT_RX_IND);
    8a26:	2101      	movs	r1, #1
    8a28:	0020      	movs	r0, r4
    8a2a:	f004 ffc5 	bl	d9b8 <rt_hw_serial_isr>
        break;
    8a2e:	e7f7      	b.n	8a20 <rockchip_uart2_irq+0x28>
        rt_hw_serial_isr(serial, RT_SERIAL_EVENT_TX_DONE);
    8a30:	2102      	movs	r1, #2
    8a32:	0020      	movs	r0, r4
    8a34:	f004 ffc0 	bl	d9b8 <rt_hw_serial_isr>
        break;
    8a38:	e7f2      	b.n	8a20 <rockchip_uart2_irq+0x28>
    8a3a:	46c0      	nop			; (mov r8, r8)
    8a3c:	0001827c 	.word	0x0001827c

00008a40 <rt_hw_console_output>:
{
    8a40:	b570      	push	{r4, r5, r6, lr}
    while (*str)
    8a42:	7803      	ldrb	r3, [r0, #0]
{
    8a44:	0004      	movs	r4, r0
    while (*str)
    8a46:	2b00      	cmp	r3, #0
    8a48:	d012      	beq.n	8a70 <rt_hw_console_output+0x30>
    8a4a:	4d0a      	ldr	r5, [pc, #40]	; (8a74 <rt_hw_console_output+0x34>)
    8a4c:	e008      	b.n	8a60 <rt_hw_console_output+0x20>
        HAL_UART_SerialOutChar(uart->dev->pReg, *str);
    8a4e:	686b      	ldr	r3, [r5, #4]
    8a50:	7821      	ldrb	r1, [r4, #0]
    8a52:	6818      	ldr	r0, [r3, #0]
        str++;
    8a54:	3401      	adds	r4, #1
        HAL_UART_SerialOutChar(uart->dev->pReg, *str);
    8a56:	f7ff fb87 	bl	8168 <HAL_UART_SerialOutChar>
    while (*str)
    8a5a:	7823      	ldrb	r3, [r4, #0]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d007      	beq.n	8a70 <rt_hw_console_output+0x30>
        if (*str == '\n')
    8a60:	2b0a      	cmp	r3, #10
    8a62:	d1f4      	bne.n	8a4e <rt_hw_console_output+0xe>
            HAL_UART_SerialOutChar(uart->dev->pReg, '\r');
    8a64:	686b      	ldr	r3, [r5, #4]
    8a66:	210d      	movs	r1, #13
    8a68:	6818      	ldr	r0, [r3, #0]
    8a6a:	f7ff fb7d 	bl	8168 <HAL_UART_SerialOutChar>
    8a6e:	e7ee      	b.n	8a4e <rt_hw_console_output+0xe>
}
    8a70:	bd70      	pop	{r4, r5, r6, pc}
    8a72:	46c0      	nop			; (mov r8, r8)
    8a74:	00017268 	.word	0x00017268

00008a78 <rt_hw_usart_init>:
INIT_PREV_EXPORT(rockchip_rt_hw_uart_pm_register);

#endif

void rt_hw_usart_init(void)
{
    8a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a7a:	464f      	mov	r7, r9
    8a7c:	46d6      	mov	lr, sl
    8a7e:	4646      	mov	r6, r8
    8a80:	b5c0      	push	{r6, r7, lr}
    8a82:	b082      	sub	sp, #8
    int i = 0;
    struct rockchip_uart *uart;
    struct serial_configure config = RT_SERIAL_CONFIG_DEFAULT;
    8a84:	2300      	movs	r3, #0
    8a86:	466d      	mov	r5, sp
    8a88:	606b      	str	r3, [r5, #4]
        uart = rk_uart_table[i];
        if (uart)
        {
            rt_bool_t is_console;     /* uart is used for console */

            dev = uart->dev;
    8a8a:	4b2e      	ldr	r3, [pc, #184]	; (8b44 <rt_hw_usart_init+0xcc>)
    8a8c:	4699      	mov	r9, r3
    8a8e:	685b      	ldr	r3, [r3, #4]
    8a90:	4698      	mov	r8, r3
            uart_board = uart->uart_board;
    8a92:	464b      	mov	r3, r9
    8a94:	681f      	ldr	r7, [r3, #0]

            if (uart_board->baud_rate)
    8a96:	683b      	ldr	r3, [r7, #0]
    8a98:	469a      	mov	sl, r3
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d102      	bne.n	8aa4 <rt_hw_usart_init+0x2c>
    struct serial_configure config = RT_SERIAL_CONFIG_DEFAULT;
    8a9e:	23e1      	movs	r3, #225	; 0xe1
    8aa0:	025b      	lsls	r3, r3, #9
    8aa2:	469a      	mov	sl, r3
            {
                config.baud_rate = uart_board->baud_rate;
            }

#ifdef RT_CONSOLE_DEVICE_NAME
            if (!strcmp(RT_CONSOLE_DEVICE_NAME, uart_board->name))
    8aa4:	003c      	movs	r4, r7
    8aa6:	3410      	adds	r4, #16
    8aa8:	0021      	movs	r1, r4
    8aaa:	4827      	ldr	r0, [pc, #156]	; (8b48 <rt_hw_usart_init+0xd0>)
    8aac:	f7fb fb8c 	bl	41c8 <strcmp>
    8ab0:	2800      	cmp	r0, #0
    8ab2:	d031      	beq.n	8b18 <rt_hw_usart_init+0xa0>
            is_console = false;
#endif

            config.bufsz = uart_board->bufer_size;
            serial = rt_serial_table[i];
            serial->ops = &rockchip_uart_ops;
    8ab4:	4e25      	ldr	r6, [pc, #148]	; (8b4c <rt_hw_usart_init+0xd4>)
    8ab6:	4a26      	ldr	r2, [pc, #152]	; (8b50 <rt_hw_usart_init+0xd8>)
            config.bufsz = uart_board->bufer_size;
    8ab8:	68bb      	ldr	r3, [r7, #8]
            serial->ops = &rockchip_uart_ops;
    8aba:	6432      	str	r2, [r6, #64]	; 0x40
            serial->config = config;
    8abc:	4652      	mov	r2, sl
    8abe:	9200      	str	r2, [sp, #0]
    8ac0:	4a24      	ldr	r2, [pc, #144]	; (8b54 <rt_hw_usart_init+0xdc>)
    8ac2:	029b      	lsls	r3, r3, #10
    8ac4:	4013      	ands	r3, r2
    8ac6:	2208      	movs	r2, #8
    8ac8:	9901      	ldr	r1, [sp, #4]
    8aca:	4313      	orrs	r3, r2
    8acc:	4a22      	ldr	r2, [pc, #136]	; (8b58 <rt_hw_usart_init+0xe0>)
    8ace:	400a      	ands	r2, r1
    8ad0:	4313      	orrs	r3, r2
    8ad2:	9301      	str	r3, [sp, #4]
    8ad4:	0033      	movs	r3, r6
    8ad6:	3344      	adds	r3, #68	; 0x44
    8ad8:	cd06      	ldmia	r5!, {r1, r2}
    8ada:	c306      	stmia	r3!, {r1, r2}
            /* enable uart clk here */
            clk_enable_by_id(dev->pclkGateID);
            clk_enable_by_id(dev->sclkGateID);

            if (!is_console)
                HAL_UART_Reset(dev->pReg);
    8adc:	4643      	mov	r3, r8
    8ade:	6818      	ldr	r0, [r3, #0]
    8ae0:	f7ff fb58 	bl	8194 <HAL_UART_Reset>

            /* register UARTx device */
            rt_hw_serial_register(serial, uart_board->name,
    8ae4:	464b      	mov	r3, r9
    8ae6:	0021      	movs	r1, r4
    8ae8:	687a      	ldr	r2, [r7, #4]
    8aea:	0030      	movs	r0, r6
    8aec:	f004 ff2e 	bl	d94c <rt_hw_serial_register>
                                  uart_board->dev_flag, (void *)uart);

            /* enable interrupt */
            rt_hw_interrupt_install(dev->irqNum, uart->irq_handler,
    8af0:	464b      	mov	r3, r9
    8af2:	6899      	ldr	r1, [r3, #8]
    8af4:	4643      	mov	r3, r8
    8af6:	2200      	movs	r2, #0
    8af8:	2010      	movs	r0, #16
    8afa:	5e18      	ldrsh	r0, [r3, r0]
    8afc:	0023      	movs	r3, r4
    8afe:	f7ff fc95 	bl	842c <rt_hw_interrupt_install>
                                    RT_NULL, uart_board->name);
            rt_hw_interrupt_mask(dev->irqNum);
    8b02:	4643      	mov	r3, r8
    8b04:	2010      	movs	r0, #16
    8b06:	5e18      	ldrsh	r0, [r3, r0]
    8b08:	f7ff fc48 	bl	839c <rt_hw_interrupt_mask>
        }
    }
}
    8b0c:	b002      	add	sp, #8
    8b0e:	bce0      	pop	{r5, r6, r7}
    8b10:	46ba      	mov	sl, r7
    8b12:	46b1      	mov	r9, r6
    8b14:	46a8      	mov	r8, r5
    8b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
            serial->ops = &rockchip_uart_ops;
    8b18:	4e0c      	ldr	r6, [pc, #48]	; (8b4c <rt_hw_usart_init+0xd4>)
    8b1a:	4a0d      	ldr	r2, [pc, #52]	; (8b50 <rt_hw_usart_init+0xd8>)
            config.bufsz = uart_board->bufer_size;
    8b1c:	68bb      	ldr	r3, [r7, #8]
            serial->ops = &rockchip_uart_ops;
    8b1e:	6432      	str	r2, [r6, #64]	; 0x40
            serial->config = config;
    8b20:	4652      	mov	r2, sl
    8b22:	9200      	str	r2, [sp, #0]
    8b24:	4a0b      	ldr	r2, [pc, #44]	; (8b54 <rt_hw_usart_init+0xdc>)
    8b26:	029b      	lsls	r3, r3, #10
    8b28:	4013      	ands	r3, r2
    8b2a:	2208      	movs	r2, #8
    8b2c:	9901      	ldr	r1, [sp, #4]
    8b2e:	4313      	orrs	r3, r2
    8b30:	4a09      	ldr	r2, [pc, #36]	; (8b58 <rt_hw_usart_init+0xe0>)
    8b32:	400a      	ands	r2, r1
    8b34:	4313      	orrs	r3, r2
    8b36:	9301      	str	r3, [sp, #4]
    8b38:	0033      	movs	r3, r6
    8b3a:	3344      	adds	r3, #68	; 0x44
    8b3c:	cd06      	ldmia	r5!, {r1, r2}
    8b3e:	c306      	stmia	r3!, {r1, r2}
            if (!is_console)
    8b40:	e7d0      	b.n	8ae4 <rt_hw_usart_init+0x6c>
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	00017268 	.word	0x00017268
    8b48:	0001455c 	.word	0x0001455c
    8b4c:	0001827c 	.word	0x0001827c
    8b50:	00014618 	.word	0x00014618
    8b54:	03fffc00 	.word	0x03fffc00
    8b58:	fc0003f0 	.word	0xfc0003f0

00008b5c <usage>:
#include <unistd.h>

#include "hal_base.h"

static void usage(void)
{
    8b5c:	b510      	push	{r4, lr}
    rt_kprintf("Raw memory i/o utility - $Revision: 1.5 $\n\n");
    8b5e:	4815      	ldr	r0, [pc, #84]	; (8bb4 <usage+0x58>)
    8b60:	f001 fb6c 	bl	a23c <rt_kprintf>
    rt_kprintf("io -v -1|2|4 -r|w [-l <len>] <addr> [<value>]\n\n");
    8b64:	4814      	ldr	r0, [pc, #80]	; (8bb8 <usage+0x5c>)
    8b66:	f001 fb69 	bl	a23c <rt_kprintf>
    rt_kprintf("    -v         Verbose, asks for confirmation\n");
    8b6a:	4814      	ldr	r0, [pc, #80]	; (8bbc <usage+0x60>)
    8b6c:	f001 fb66 	bl	a23c <rt_kprintf>
    rt_kprintf("    -1|2|4     Sets memory access size in bytes (default byte)\n");
    8b70:	4813      	ldr	r0, [pc, #76]	; (8bc0 <usage+0x64>)
    8b72:	f001 fb63 	bl	a23c <rt_kprintf>
    rt_kprintf("    -l <len>   Length in bytes of area to access (defaults to\n");
    8b76:	4813      	ldr	r0, [pc, #76]	; (8bc4 <usage+0x68>)
    8b78:	f001 fb60 	bl	a23c <rt_kprintf>
    rt_kprintf("               one access, or whole file length)\n");
    8b7c:	4812      	ldr	r0, [pc, #72]	; (8bc8 <usage+0x6c>)
    8b7e:	f001 fb5d 	bl	a23c <rt_kprintf>
    rt_kprintf("    -r|w       Read from or Write to memory (default read)\n");
    8b82:	4812      	ldr	r0, [pc, #72]	; (8bcc <usage+0x70>)
    8b84:	f001 fb5a 	bl	a23c <rt_kprintf>
    rt_kprintf("    <addr>     The memory address to access\n");
    8b88:	4811      	ldr	r0, [pc, #68]	; (8bd0 <usage+0x74>)
    8b8a:	f001 fb57 	bl	a23c <rt_kprintf>
    rt_kprintf("    <val>      The value to write (implies -w)\n\n");
    8b8e:	4811      	ldr	r0, [pc, #68]	; (8bd4 <usage+0x78>)
    8b90:	f001 fb54 	bl	a23c <rt_kprintf>
    rt_kprintf("Examples:\n");
    8b94:	4810      	ldr	r0, [pc, #64]	; (8bd8 <usage+0x7c>)
    8b96:	f001 fb51 	bl	a23c <rt_kprintf>
    rt_kprintf("    io 0x1000                  Reads one byte from 0x1000\n");
    8b9a:	4810      	ldr	r0, [pc, #64]	; (8bdc <usage+0x80>)
    8b9c:	f001 fb4e 	bl	a23c <rt_kprintf>
    rt_kprintf("    io 0x1000 0x12             Writes 0x12 to location 0x1000\n");
    8ba0:	480f      	ldr	r0, [pc, #60]	; (8be0 <usage+0x84>)
    8ba2:	f001 fb4b 	bl	a23c <rt_kprintf>
    rt_kprintf("    io -2 -l 8 0x1000          Reads 8 words from 0x1000\n\n");
    8ba6:	480f      	ldr	r0, [pc, #60]	; (8be4 <usage+0x88>)
    8ba8:	f001 fb48 	bl	a23c <rt_kprintf>
    rt_kprintf("Note access size (-1|2|4) does not apply to file based accesses.\n\n");
    8bac:	480e      	ldr	r0, [pc, #56]	; (8be8 <usage+0x8c>)
    8bae:	f001 fb45 	bl	a23c <rt_kprintf>
}
    8bb2:	bd10      	pop	{r4, pc}
    8bb4:	0001462c 	.word	0x0001462c
    8bb8:	00014658 	.word	0x00014658
    8bbc:	00014688 	.word	0x00014688
    8bc0:	000146b8 	.word	0x000146b8
    8bc4:	000146f8 	.word	0x000146f8
    8bc8:	00014738 	.word	0x00014738
    8bcc:	0001476c 	.word	0x0001476c
    8bd0:	000147a8 	.word	0x000147a8
    8bd4:	000147d8 	.word	0x000147d8
    8bd8:	0001480c 	.word	0x0001480c
    8bdc:	00014818 	.word	0x00014818
    8be0:	00014854 	.word	0x00014854
    8be4:	00014894 	.word	0x00014894
    8be8:	000148d0 	.word	0x000148d0

00008bec <io_mem>:
        break;
    }
}

int io_mem(int argc, char **argv)
{
    8bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bee:	4657      	mov	r7, sl
    8bf0:	464e      	mov	r6, r9
    8bf2:	46de      	mov	lr, fp
    8bf4:	4645      	mov	r5, r8
    char *endptr;
    int memread = 1;
    int iosize = 1;
    int verbose = 0;

    opterr = 0;
    8bf6:	2300      	movs	r3, #0
{
    8bf8:	b5e0      	push	{r5, r6, r7, lr}
    opterr = 0;
    8bfa:	4aac      	ldr	r2, [pc, #688]	; (8eac <io_mem+0x2c0>)
{
    8bfc:	0006      	movs	r6, r0
    opterr = 0;
    8bfe:	6013      	str	r3, [r2, #0]
    optind = 0;
    8c00:	4aab      	ldr	r2, [pc, #684]	; (8eb0 <io_mem+0x2c4>)
{
    8c02:	000f      	movs	r7, r1
    optind = 0;
    8c04:	4692      	mov	sl, r2
{
    8c06:	b087      	sub	sp, #28
    optind = 0;
    8c08:	6013      	str	r3, [r2, #0]

    if (argc == 1)
    8c0a:	2801      	cmp	r0, #1
    8c0c:	d100      	bne.n	8c10 <io_mem+0x24>
    8c0e:	e0e9      	b.n	8de4 <io_mem+0x1f8>
    int verbose = 0;
    8c10:	2300      	movs	r3, #0
    8c12:	9303      	str	r3, [sp, #12]
    int memread = 1;
    8c14:	3301      	adds	r3, #1
    8c16:	9302      	str	r3, [sp, #8]
    8c18:	4ba6      	ldr	r3, [pc, #664]	; (8eb4 <io_mem+0x2c8>)
    int iosize = 1;
    8c1a:	2401      	movs	r4, #1
    8c1c:	4698      	mov	r8, r3
    8c1e:	4ba6      	ldr	r3, [pc, #664]	; (8eb8 <io_mem+0x2cc>)
    int req_len = 0, opt;
    8c20:	2500      	movs	r5, #0
    8c22:	4699      	mov	r9, r3
            break;
        case 'w':
            memread = 0;
            break;
        case 'l':
            req_len = strtoul(optarg, &endptr, 0);
    8c24:	4ba5      	ldr	r3, [pc, #660]	; (8ebc <io_mem+0x2d0>)
    8c26:	469b      	mov	fp, r3
    while ((opt = getopt(argc, argv, "hv124rwl:f:")) > 0)
    8c28:	4642      	mov	r2, r8
    8c2a:	0039      	movs	r1, r7
    8c2c:	0030      	movs	r0, r6
    8c2e:	f005 fe45 	bl	e8bc <getopt>
    8c32:	2800      	cmp	r0, #0
    8c34:	dd1a      	ble.n	8c6c <io_mem+0x80>
        switch (opt)
    8c36:	2877      	cmp	r0, #119	; 0x77
    8c38:	dc0b      	bgt.n	8c52 <io_mem+0x66>
    8c3a:	2867      	cmp	r0, #103	; 0x67
    8c3c:	dd6b      	ble.n	8d16 <io_mem+0x12a>
    8c3e:	0003      	movs	r3, r0
    8c40:	3b68      	subs	r3, #104	; 0x68
    8c42:	2b0f      	cmp	r3, #15
    8c44:	d805      	bhi.n	8c52 <io_mem+0x66>
    8c46:	464a      	mov	r2, r9
    8c48:	009b      	lsls	r3, r3, #2
    8c4a:	58d3      	ldr	r3, [r2, r3]
    8c4c:	469f      	mov	pc, r3
    8c4e:	2834      	cmp	r0, #52	; 0x34
    8c50:	d065      	beq.n	8d1e <io_mem+0x132>
                rt_kprintf("Bad <size> value '%s'\n", optarg);
                return 0;
            }
            break;
        default:
            rt_kprintf("Unknown option: %c\n", opt);
    8c52:	0001      	movs	r1, r0
    8c54:	489a      	ldr	r0, [pc, #616]	; (8ec0 <io_mem+0x2d4>)
    8c56:	f001 faf1 	bl	a23c <rt_kprintf>
            usage();
    8c5a:	f7ff ff7f 	bl	8b5c <usage>
    while ((opt = getopt(argc, argv, "hv124rwl:f:")) > 0)
    8c5e:	4642      	mov	r2, r8
    8c60:	0039      	movs	r1, r7
    8c62:	0030      	movs	r0, r6
    8c64:	f005 fe2a 	bl	e8bc <getopt>
    8c68:	2800      	cmp	r0, #0
    8c6a:	dce4      	bgt.n	8c36 <io_mem+0x4a>
        }
    }

    if (optind == argc)
    8c6c:	4653      	mov	r3, sl
    8c6e:	681b      	ldr	r3, [r3, #0]
    8c70:	429e      	cmp	r6, r3
    8c72:	d100      	bne.n	8c76 <io_mem+0x8a>
    8c74:	e0b2      	b.n	8ddc <io_mem+0x1f0>
    {
        rt_kprintf("No address given\n");
        return 0;
    }
    req_addr = strtoul(argv[optind], &endptr, 0);
    8c76:	009b      	lsls	r3, r3, #2
    8c78:	59d8      	ldr	r0, [r3, r7]
    8c7a:	2200      	movs	r2, #0
    8c7c:	a905      	add	r1, sp, #20
    8c7e:	f006 ffaf 	bl	fbe0 <strtoul>
    if (*endptr)
    8c82:	9b05      	ldr	r3, [sp, #20]
    req_addr = strtoul(argv[optind], &endptr, 0);
    8c84:	4680      	mov	r8, r0
    if (*endptr)
    8c86:	781b      	ldrb	r3, [r3, #0]
    8c88:	2b00      	cmp	r3, #0
    8c8a:	d000      	beq.n	8c8e <io_mem+0xa2>
    8c8c:	e090      	b.n	8db0 <io_mem+0x1c4>
    {
        rt_kprintf("Bad <addr> value '%s'\n", argv[optind]);
        return 0;
    }
    optind++;
    8c8e:	4653      	mov	r3, sl
    8c90:	4652      	mov	r2, sl
    8c92:	681b      	ldr	r3, [r3, #0]
    8c94:	3301      	adds	r3, #1
    8c96:	6013      	str	r3, [r2, #0]

    if (optind < argc)
    8c98:	429e      	cmp	r6, r3
    8c9a:	dd43      	ble.n	8d24 <io_mem+0x138>
        rt_kprintf("No value given for WRITE\n");
        return 0;
    }
    if (!memread)
    {
        req_value = strtoul(argv[optind], &endptr, 0);
    8c9c:	009b      	lsls	r3, r3, #2
    8c9e:	59d8      	ldr	r0, [r3, r7]
    8ca0:	2200      	movs	r2, #0
    8ca2:	a905      	add	r1, sp, #20
    8ca4:	f006 ff9c 	bl	fbe0 <strtoul>
        if (*endptr)
    8ca8:	9b05      	ldr	r3, [sp, #20]
        req_value = strtoul(argv[optind], &endptr, 0);
    8caa:	4681      	mov	r9, r0
        if (*endptr)
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d000      	beq.n	8cb4 <io_mem+0xc8>
    8cb2:	e0df      	b.n	8e74 <io_mem+0x288>
        {
            rt_kprintf("Bad <value> value '%s'\n", argv[optind]);
            return 0;
        }
        if ((iosize == 1 && (req_value & 0xffffff00)) ||
    8cb4:	2c01      	cmp	r4, #1
    8cb6:	d100      	bne.n	8cba <io_mem+0xce>
    8cb8:	e0e4      	b.n	8e84 <io_mem+0x298>
    8cba:	2c02      	cmp	r4, #2
    8cbc:	d100      	bne.n	8cc0 <io_mem+0xd4>
    8cbe:	e0d2      	b.n	8e66 <io_mem+0x27a>
                (iosize == 2 && (req_value & 0xffff0000)))
        {
            rt_kprintf("<value> too large\n");
            return 0;
        }
        optind++;
    8cc0:	4653      	mov	r3, sl
    8cc2:	4652      	mov	r2, sl
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	3301      	adds	r3, #1
    8cc8:	6013      	str	r3, [r2, #0]
    }

    if (optind < argc)
    8cca:	2200      	movs	r2, #0
    8ccc:	9202      	str	r2, [sp, #8]
    8cce:	429e      	cmp	r6, r3
    8cd0:	dd2d      	ble.n	8d2e <io_mem+0x142>
    {
        rt_kprintf("Too many arguments '%s'...\n", argv[optind]);
    8cd2:	009b      	lsls	r3, r3, #2
    8cd4:	59d9      	ldr	r1, [r3, r7]
    8cd6:	487b      	ldr	r0, [pc, #492]	; (8ec4 <io_mem+0x2d8>)
    8cd8:	f001 fab0 	bl	a23c <rt_kprintf>
        return 0;
    8cdc:	e06f      	b.n	8dbe <io_mem+0x1d2>
            usage();
    8cde:	f7ff ff3d 	bl	8b5c <usage>
            verbose = 1;
    8ce2:	2301      	movs	r3, #1
    8ce4:	9303      	str	r3, [sp, #12]
    8ce6:	e79f      	b.n	8c28 <io_mem+0x3c>
            memread = 0;
    8ce8:	2300      	movs	r3, #0
    8cea:	9302      	str	r3, [sp, #8]
            break;
    8cec:	e79c      	b.n	8c28 <io_mem+0x3c>
            req_len = strtoul(optarg, &endptr, 0);
    8cee:	465b      	mov	r3, fp
    8cf0:	2200      	movs	r2, #0
    8cf2:	6818      	ldr	r0, [r3, #0]
    8cf4:	a905      	add	r1, sp, #20
    8cf6:	f006 ff73 	bl	fbe0 <strtoul>
            if (*endptr)
    8cfa:	9b05      	ldr	r3, [sp, #20]
            req_len = strtoul(optarg, &endptr, 0);
    8cfc:	0005      	movs	r5, r0
            if (*endptr)
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	2b00      	cmp	r3, #0
    8d02:	d091      	beq.n	8c28 <io_mem+0x3c>
                rt_kprintf("Bad <size> value '%s'\n", optarg);
    8d04:	465b      	mov	r3, fp
    8d06:	4870      	ldr	r0, [pc, #448]	; (8ec8 <io_mem+0x2dc>)
    8d08:	6819      	ldr	r1, [r3, #0]
    8d0a:	f001 fa97 	bl	a23c <rt_kprintf>
                return 0;
    8d0e:	e056      	b.n	8dbe <io_mem+0x1d2>
            memread = 1;
    8d10:	2301      	movs	r3, #1
    8d12:	9302      	str	r3, [sp, #8]
    8d14:	e788      	b.n	8c28 <io_mem+0x3c>
        switch (opt)
    8d16:	2832      	cmp	r0, #50	; 0x32
    8d18:	dc99      	bgt.n	8c4e <io_mem+0x62>
    8d1a:	2830      	cmp	r0, #48	; 0x30
    8d1c:	dd99      	ble.n	8c52 <io_mem+0x66>
            iosize = opt - '0';
    8d1e:	3830      	subs	r0, #48	; 0x30
    8d20:	0004      	movs	r4, r0
            break;
    8d22:	e781      	b.n	8c28 <io_mem+0x3c>
    if (!memread && optind == argc)
    8d24:	9a02      	ldr	r2, [sp, #8]
    8d26:	2a00      	cmp	r2, #0
    8d28:	d051      	beq.n	8dce <io_mem+0x1e2>
    unsigned long req_addr, req_value = 0;
    8d2a:	2300      	movs	r3, #0
    8d2c:	4699      	mov	r9, r3
    }

    if (!req_len)
    8d2e:	2d00      	cmp	r5, #0
    8d30:	d100      	bne.n	8d34 <io_mem+0x148>
    8d32:	0025      	movs	r5, r4
        req_len = iosize;

    if ((iosize == 2 && (req_addr & 1)) ||
    8d34:	2c02      	cmp	r4, #2
    8d36:	d058      	beq.n	8dea <io_mem+0x1fe>
    8d38:	2c04      	cmp	r4, #4
    8d3a:	d100      	bne.n	8d3e <io_mem+0x152>
    8d3c:	e07b      	b.n	8e36 <io_mem+0x24a>
    {
        rt_kprintf("Badly aligned <size> for access size\n");
        return 0;
    }

    if (!verbose)
    8d3e:	9b03      	ldr	r3, [sp, #12]
    8d40:	2b00      	cmp	r3, #0
    8d42:	d05c      	beq.n	8dfe <io_mem+0x212>
        /* Nothing */;
    else if (memread)
    8d44:	9b02      	ldr	r3, [sp, #8]
    8d46:	2b00      	cmp	r3, #0
    8d48:	d100      	bne.n	8d4c <io_mem+0x160>
    8d4a:	e080      	b.n	8e4e <io_mem+0x262>
        rt_kprintf("Request to memread 0x%x bytes from address 0x%08lx\n"
    8d4c:	0023      	movs	r3, r4
    8d4e:	4642      	mov	r2, r8
    8d50:	0029      	movs	r1, r5
    8d52:	485e      	ldr	r0, [pc, #376]	; (8ecc <io_mem+0x2e0>)
    8d54:	f001 fa72 	bl	a23c <rt_kprintf>
    else
        rt_kprintf("Request to write 0x%x bytes to address 0x%08lx\n"
                   "\tusing %d byte accesses of value 0x%0*lx\n",
                   req_len, req_addr, iosize, iosize * 2, req_value);

    real_io = (uint8_t *)req_addr;
    8d58:	4647      	mov	r7, r8
                rt_kprintf(" %04x", *(uint16_t *)addr);
    8d5a:	4b5d      	ldr	r3, [pc, #372]	; (8ed0 <io_mem+0x2e4>)
    8d5c:	469b      	mov	fp, r3
                rt_kprintf(" %08lx", *(uint32_t *)addr);
    8d5e:	4b5d      	ldr	r3, [pc, #372]	; (8ed4 <io_mem+0x2e8>)
    8d60:	469a      	mov	sl, r3
                rt_kprintf(" %02x", *(uint8_t *)addr);
    8d62:	4b5d      	ldr	r3, [pc, #372]	; (8ed8 <io_mem+0x2ec>)
    8d64:	4699      	mov	r9, r3
        rt_kprintf("%08lx: ", phys_addr);
    8d66:	4641      	mov	r1, r8
    8d68:	485c      	ldr	r0, [pc, #368]	; (8edc <io_mem+0x2f0>)
    8d6a:	f001 fa67 	bl	a23c <rt_kprintf>
        i = 0;
    8d6e:	2600      	movs	r6, #0
    8d70:	e008      	b.n	8d84 <io_mem+0x198>
            switch (iosize)
    8d72:	2c01      	cmp	r4, #1
    8d74:	d05a      	beq.n	8e2c <io_mem+0x240>
            i += iosize;
    8d76:	1936      	adds	r6, r6, r4
            addr += iosize;
    8d78:	193f      	adds	r7, r7, r4
            len -= iosize;
    8d7a:	1b2d      	subs	r5, r5, r4
        while (i < 16 && len)
    8d7c:	2e0f      	cmp	r6, #15
    8d7e:	dc0e      	bgt.n	8d9e <io_mem+0x1b2>
    8d80:	2d00      	cmp	r5, #0
    8d82:	d060      	beq.n	8e46 <io_mem+0x25a>
            switch (iosize)
    8d84:	2c02      	cmp	r4, #2
    8d86:	d04c      	beq.n	8e22 <io_mem+0x236>
    8d88:	2c04      	cmp	r4, #4
    8d8a:	d1f2      	bne.n	8d72 <io_mem+0x186>
                rt_kprintf(" %08lx", *(uint32_t *)addr);
    8d8c:	6839      	ldr	r1, [r7, #0]
    8d8e:	4650      	mov	r0, sl
            i += iosize;
    8d90:	1936      	adds	r6, r6, r4
                rt_kprintf(" %08lx", *(uint32_t *)addr);
    8d92:	f001 fa53 	bl	a23c <rt_kprintf>
            addr += iosize;
    8d96:	193f      	adds	r7, r7, r4
            len -= iosize;
    8d98:	1b2d      	subs	r5, r5, r4
        while (i < 16 && len)
    8d9a:	2e0f      	cmp	r6, #15
    8d9c:	ddf0      	ble.n	8d80 <io_mem+0x194>
        phys_addr += 16;
    8d9e:	2310      	movs	r3, #16
    8da0:	469c      	mov	ip, r3
        rt_kprintf("\n");
    8da2:	484f      	ldr	r0, [pc, #316]	; (8ee0 <io_mem+0x2f4>)
        phys_addr += 16;
    8da4:	44e0      	add	r8, ip
        rt_kprintf("\n");
    8da6:	f001 fa49 	bl	a23c <rt_kprintf>
    while (len)
    8daa:	2d00      	cmp	r5, #0
    8dac:	d1db      	bne.n	8d66 <io_mem+0x17a>
    8dae:	e006      	b.n	8dbe <io_mem+0x1d2>
        rt_kprintf("Bad <addr> value '%s'\n", argv[optind]);
    8db0:	4653      	mov	r3, sl
    8db2:	681b      	ldr	r3, [r3, #0]
    8db4:	484b      	ldr	r0, [pc, #300]	; (8ee4 <io_mem+0x2f8>)
    8db6:	009b      	lsls	r3, r3, #2
    8db8:	59d9      	ldr	r1, [r3, r7]
    8dba:	f001 fa3f 	bl	a23c <rt_kprintf>
        read_memory(req_addr, real_io, req_len, iosize);
    else
        write_memory(real_io, req_len, iosize, req_value);

    return 0;
}
    8dbe:	2000      	movs	r0, #0
    8dc0:	b007      	add	sp, #28
    8dc2:	bcf0      	pop	{r4, r5, r6, r7}
    8dc4:	46bb      	mov	fp, r7
    8dc6:	46b2      	mov	sl, r6
    8dc8:	46a9      	mov	r9, r5
    8dca:	46a0      	mov	r8, r4
    8dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!memread && optind == argc)
    8dce:	429e      	cmp	r6, r3
    8dd0:	d000      	beq.n	8dd4 <io_mem+0x1e8>
    8dd2:	e763      	b.n	8c9c <io_mem+0xb0>
        rt_kprintf("No value given for WRITE\n");
    8dd4:	4844      	ldr	r0, [pc, #272]	; (8ee8 <io_mem+0x2fc>)
    8dd6:	f001 fa31 	bl	a23c <rt_kprintf>
        return 0;
    8dda:	e7f0      	b.n	8dbe <io_mem+0x1d2>
        rt_kprintf("No address given\n");
    8ddc:	4843      	ldr	r0, [pc, #268]	; (8eec <io_mem+0x300>)
    8dde:	f001 fa2d 	bl	a23c <rt_kprintf>
        return 0;
    8de2:	e7ec      	b.n	8dbe <io_mem+0x1d2>
        usage();
    8de4:	f7ff feba 	bl	8b5c <usage>
        return 0;
    8de8:	e7e9      	b.n	8dbe <io_mem+0x1d2>
    if ((iosize == 2 && (req_addr & 1)) ||
    8dea:	2301      	movs	r3, #1
    8dec:	4642      	mov	r2, r8
    8dee:	4213      	tst	r3, r2
    8df0:	d125      	bne.n	8e3e <io_mem+0x252>
            (iosize == 4 && (req_len & 3)))
    8df2:	422b      	tst	r3, r5
    8df4:	d0a3      	beq.n	8d3e <io_mem+0x152>
        rt_kprintf("Badly aligned <size> for access size\n");
    8df6:	483e      	ldr	r0, [pc, #248]	; (8ef0 <io_mem+0x304>)
    8df8:	f001 fa20 	bl	a23c <rt_kprintf>
        return 0;
    8dfc:	e7df      	b.n	8dbe <io_mem+0x1d2>
    if (memread)
    8dfe:	9b02      	ldr	r3, [sp, #8]
    real_io = (uint8_t *)req_addr;
    8e00:	4647      	mov	r7, r8
    if (memread)
    8e02:	2b00      	cmp	r3, #0
    8e04:	d1a9      	bne.n	8d5a <io_mem+0x16e>
    switch (iosize)
    8e06:	2c02      	cmp	r4, #2
    8e08:	d048      	beq.n	8e9c <io_mem+0x2b0>
    8e0a:	2c04      	cmp	r4, #4
    8e0c:	d040      	beq.n	8e90 <io_mem+0x2a4>
    8e0e:	2c01      	cmp	r4, #1
    8e10:	d1d5      	bne.n	8dbe <io_mem+0x1d2>
            *(uint8_t *)addr = value;
    8e12:	464b      	mov	r3, r9
    8e14:	21ff      	movs	r1, #255	; 0xff
    8e16:	002a      	movs	r2, r5
    8e18:	4640      	mov	r0, r8
    8e1a:	4019      	ands	r1, r3
    8e1c:	f005 fee2 	bl	ebe4 <memset>
    8e20:	e7cd      	b.n	8dbe <io_mem+0x1d2>
                rt_kprintf(" %04x", *(uint16_t *)addr);
    8e22:	4658      	mov	r0, fp
    8e24:	8839      	ldrh	r1, [r7, #0]
    8e26:	f001 fa09 	bl	a23c <rt_kprintf>
                break;
    8e2a:	e7a4      	b.n	8d76 <io_mem+0x18a>
                rt_kprintf(" %02x", *(uint8_t *)addr);
    8e2c:	4648      	mov	r0, r9
    8e2e:	7839      	ldrb	r1, [r7, #0]
    8e30:	f001 fa04 	bl	a23c <rt_kprintf>
                break;
    8e34:	e79f      	b.n	8d76 <io_mem+0x18a>
            (iosize == 4 && (req_addr & 3)))
    8e36:	2303      	movs	r3, #3
    8e38:	4642      	mov	r2, r8
    8e3a:	4213      	tst	r3, r2
    8e3c:	d0d9      	beq.n	8df2 <io_mem+0x206>
        rt_kprintf("Badly aligned <addr> for access size\n");
    8e3e:	482d      	ldr	r0, [pc, #180]	; (8ef4 <io_mem+0x308>)
    8e40:	f001 f9fc 	bl	a23c <rt_kprintf>
        return 0;
    8e44:	e7bb      	b.n	8dbe <io_mem+0x1d2>
        rt_kprintf("\n");
    8e46:	4826      	ldr	r0, [pc, #152]	; (8ee0 <io_mem+0x2f4>)
    8e48:	f001 f9f8 	bl	a23c <rt_kprintf>
    while (len)
    8e4c:	e7b7      	b.n	8dbe <io_mem+0x1d2>
        rt_kprintf("Request to write 0x%x bytes to address 0x%08lx\n"
    8e4e:	464b      	mov	r3, r9
    8e50:	9301      	str	r3, [sp, #4]
    8e52:	0063      	lsls	r3, r4, #1
    8e54:	9300      	str	r3, [sp, #0]
    8e56:	4642      	mov	r2, r8
    8e58:	0023      	movs	r3, r4
    8e5a:	0029      	movs	r1, r5
    8e5c:	4826      	ldr	r0, [pc, #152]	; (8ef8 <io_mem+0x30c>)
    8e5e:	f001 f9ed 	bl	a23c <rt_kprintf>
    real_io = (uint8_t *)req_addr;
    8e62:	4647      	mov	r7, r8
    if (memread)
    8e64:	e7cf      	b.n	8e06 <io_mem+0x21a>
                (iosize == 2 && (req_value & 0xffff0000)))
    8e66:	0c03      	lsrs	r3, r0, #16
    8e68:	d100      	bne.n	8e6c <io_mem+0x280>
    8e6a:	e729      	b.n	8cc0 <io_mem+0xd4>
            rt_kprintf("<value> too large\n");
    8e6c:	4823      	ldr	r0, [pc, #140]	; (8efc <io_mem+0x310>)
    8e6e:	f001 f9e5 	bl	a23c <rt_kprintf>
            return 0;
    8e72:	e7a4      	b.n	8dbe <io_mem+0x1d2>
            rt_kprintf("Bad <value> value '%s'\n", argv[optind]);
    8e74:	4653      	mov	r3, sl
    8e76:	681b      	ldr	r3, [r3, #0]
    8e78:	4821      	ldr	r0, [pc, #132]	; (8f00 <io_mem+0x314>)
    8e7a:	009b      	lsls	r3, r3, #2
    8e7c:	59d9      	ldr	r1, [r3, r7]
    8e7e:	f001 f9dd 	bl	a23c <rt_kprintf>
            return 0;
    8e82:	e79c      	b.n	8dbe <io_mem+0x1d2>
        if ((iosize == 1 && (req_value & 0xffffff00)) ||
    8e84:	23ff      	movs	r3, #255	; 0xff
    8e86:	0002      	movs	r2, r0
    8e88:	439a      	bics	r2, r3
    8e8a:	d100      	bne.n	8e8e <io_mem+0x2a2>
    8e8c:	e718      	b.n	8cc0 <io_mem+0xd4>
    8e8e:	e7ed      	b.n	8e6c <io_mem+0x280>
    8e90:	464b      	mov	r3, r9
    8e92:	4445      	add	r5, r8
            *(uint32_t *)addr = value;
    8e94:	c708      	stmia	r7!, {r3}
        while (len)
    8e96:	42af      	cmp	r7, r5
    8e98:	d1fc      	bne.n	8e94 <io_mem+0x2a8>
    8e9a:	e790      	b.n	8dbe <io_mem+0x1d2>
            *(uint16_t *)addr = value;
    8e9c:	464b      	mov	r3, r9
    8e9e:	4445      	add	r5, r8
    8ea0:	b299      	uxth	r1, r3
    8ea2:	8039      	strh	r1, [r7, #0]
            addr += iosize;
    8ea4:	3702      	adds	r7, #2
        while (len)
    8ea6:	42af      	cmp	r7, r5
    8ea8:	d1fb      	bne.n	8ea2 <io_mem+0x2b6>
    8eaa:	e788      	b.n	8dbe <io_mem+0x1d2>
    8eac:	00017374 	.word	0x00017374
    8eb0:	0001875c 	.word	0x0001875c
    8eb4:	00014940 	.word	0x00014940
    8eb8:	00014af4 	.word	0x00014af4
    8ebc:	00018758 	.word	0x00018758
    8ec0:	0001492c 	.word	0x0001492c
    8ec4:	000149c0 	.word	0x000149c0
    8ec8:	00014914 	.word	0x00014914
    8ecc:	00014a2c 	.word	0x00014a2c
    8ed0:	00014ae4 	.word	0x00014ae4
    8ed4:	00014aec 	.word	0x00014aec
    8ed8:	00014adc 	.word	0x00014adc
    8edc:	00014ad4 	.word	0x00014ad4
    8ee0:	00015c60 	.word	0x00015c60
    8ee4:	00014960 	.word	0x00014960
    8ee8:	00014978 	.word	0x00014978
    8eec:	0001494c 	.word	0x0001494c
    8ef0:	00014a04 	.word	0x00014a04
    8ef4:	000149dc 	.word	0x000149dc
    8ef8:	00014a78 	.word	0x00014a78
    8efc:	000149ac 	.word	0x000149ac
    8f00:	00014994 	.word	0x00014994

00008f04 <demo_test>:

#include <rthw.h>
#include <rtthread.h>

void demo_test(void)
{
    8f04:	b510      	push	{r4, lr}
    rt_kprintf("this is demo_test\n");
    8f06:	4802      	ldr	r0, [pc, #8]	; (8f10 <demo_test+0xc>)
    8f08:	f001 f998 	bl	a23c <rt_kprintf>
}
    8f0c:	bd10      	pop	{r4, pc}
    8f0e:	46c0      	nop			; (mov r8, r8)
    8f10:	00014b5c 	.word	0x00014b5c

00008f14 <mbox_test_callback>:
    rt_kprintf("mbox send direction: 1 means A2B, 0 means B2A\n");
}

static void mbox_test_callback(struct MBOX_CMD_DAT *msg, void *arg)
{
    rt_kprintf("RX: cmd=0x%x data=0x%x from chan %d\n", msg->CMD, msg->DATA, (eMBOX_CH)arg);
    8f14:	23ff      	movs	r3, #255	; 0xff
{
    8f16:	b510      	push	{r4, lr}
    rt_kprintf("RX: cmd=0x%x data=0x%x from chan %d\n", msg->CMD, msg->DATA, (eMBOX_CH)arg);
    8f18:	6804      	ldr	r4, [r0, #0]
    8f1a:	400b      	ands	r3, r1
    8f1c:	6842      	ldr	r2, [r0, #4]
    8f1e:	0021      	movs	r1, r4
    8f20:	4801      	ldr	r0, [pc, #4]	; (8f28 <mbox_test_callback+0x14>)
    8f22:	f001 f98b 	bl	a23c <rt_kprintf>
}
    8f26:	bd10      	pop	{r4, pc}
    8f28:	00014b98 	.word	0x00014b98

00008f2c <mbox_test_isr3>:
MBOX_TEST_ISR_DEFINE(3)
    8f2c:	b510      	push	{r4, lr}
    8f2e:	f000 fd59 	bl	99e4 <rt_interrupt_enter>
    8f32:	4c07      	ldr	r4, [pc, #28]	; (8f50 <mbox_test_isr3+0x24>)
    8f34:	4807      	ldr	r0, [pc, #28]	; (8f54 <mbox_test_isr3+0x28>)
    8f36:	6923      	ldr	r3, [r4, #16]
    8f38:	6919      	ldr	r1, [r3, #16]
    8f3a:	f001 f97f 	bl	a23c <rt_kprintf>
    8f3e:	6923      	ldr	r3, [r4, #16]
    8f40:	6821      	ldr	r1, [r4, #0]
    8f42:	6918      	ldr	r0, [r3, #16]
    8f44:	f7fe fef6 	bl	7d34 <HAL_MBOX_IrqHandler>
    8f48:	f000 fd62 	bl	9a10 <rt_interrupt_leave>
    8f4c:	bd10      	pop	{r4, pc}
    8f4e:	46c0      	nop			; (mov r8, r8)
    8f50:	000182d0 	.word	0x000182d0
    8f54:	00014bc0 	.word	0x00014bc0

00008f58 <mbox_test_isr2>:
MBOX_TEST_ISR_DEFINE(2)
    8f58:	b510      	push	{r4, lr}
    8f5a:	f000 fd43 	bl	99e4 <rt_interrupt_enter>
    8f5e:	4c07      	ldr	r4, [pc, #28]	; (8f7c <mbox_test_isr2+0x24>)
    8f60:	4807      	ldr	r0, [pc, #28]	; (8f80 <mbox_test_isr2+0x28>)
    8f62:	68e3      	ldr	r3, [r4, #12]
    8f64:	6919      	ldr	r1, [r3, #16]
    8f66:	f001 f969 	bl	a23c <rt_kprintf>
    8f6a:	68e3      	ldr	r3, [r4, #12]
    8f6c:	6821      	ldr	r1, [r4, #0]
    8f6e:	6918      	ldr	r0, [r3, #16]
    8f70:	f7fe fee0 	bl	7d34 <HAL_MBOX_IrqHandler>
    8f74:	f000 fd4c 	bl	9a10 <rt_interrupt_leave>
    8f78:	bd10      	pop	{r4, pc}
    8f7a:	46c0      	nop			; (mov r8, r8)
    8f7c:	000182d0 	.word	0x000182d0
    8f80:	00014bc0 	.word	0x00014bc0

00008f84 <mbox_test_isr1>:
MBOX_TEST_ISR_DEFINE(1)
    8f84:	b510      	push	{r4, lr}
    8f86:	f000 fd2d 	bl	99e4 <rt_interrupt_enter>
    8f8a:	4c07      	ldr	r4, [pc, #28]	; (8fa8 <mbox_test_isr1+0x24>)
    8f8c:	4807      	ldr	r0, [pc, #28]	; (8fac <mbox_test_isr1+0x28>)
    8f8e:	68a3      	ldr	r3, [r4, #8]
    8f90:	6919      	ldr	r1, [r3, #16]
    8f92:	f001 f953 	bl	a23c <rt_kprintf>
    8f96:	68a3      	ldr	r3, [r4, #8]
    8f98:	6821      	ldr	r1, [r4, #0]
    8f9a:	6918      	ldr	r0, [r3, #16]
    8f9c:	f7fe feca 	bl	7d34 <HAL_MBOX_IrqHandler>
    8fa0:	f000 fd36 	bl	9a10 <rt_interrupt_leave>
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	46c0      	nop			; (mov r8, r8)
    8fa8:	000182d0 	.word	0x000182d0
    8fac:	00014bc0 	.word	0x00014bc0

00008fb0 <mbox_test_isr0>:
MBOX_TEST_ISR_DEFINE(0)
    8fb0:	b510      	push	{r4, lr}
    8fb2:	f000 fd17 	bl	99e4 <rt_interrupt_enter>
    8fb6:	4c06      	ldr	r4, [pc, #24]	; (8fd0 <mbox_test_isr0+0x20>)
    8fb8:	4806      	ldr	r0, [pc, #24]	; (8fd4 <mbox_test_isr0+0x24>)
    8fba:	6863      	ldr	r3, [r4, #4]
    8fbc:	6919      	ldr	r1, [r3, #16]
    8fbe:	f001 f93d 	bl	a23c <rt_kprintf>
    8fc2:	cc0a      	ldmia	r4!, {r1, r3}
    8fc4:	6918      	ldr	r0, [r3, #16]
    8fc6:	f7fe feb5 	bl	7d34 <HAL_MBOX_IrqHandler>
    8fca:	f000 fd21 	bl	9a10 <rt_interrupt_leave>
    8fce:	bd10      	pop	{r4, pc}
    8fd0:	000182d0 	.word	0x000182d0
    8fd4:	00014bc0 	.word	0x00014bc0

00008fd8 <mbox_test>:
    mbox_test_show_usage();
    return -EINVAL;
}

static void mbox_test(int argc, char **argv)
{
    8fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fda:	46ce      	mov	lr, r9
    8fdc:	4647      	mov	r7, r8
    8fde:	b580      	push	{r7, lr}
    8fe0:	4689      	mov	r9, r1
    8fe2:	b083      	sub	sp, #12
    if (argc < MBOX_TEST_ARGC)
    8fe4:	2804      	cmp	r0, #4
    8fe6:	d800      	bhi.n	8fea <mbox_test+0x12>
    8fe8:	e0c2      	b.n	9170 <mbox_test+0x198>
    reg_addr = (uint32_t)strtoll(argv[1], NULL, 16);
    8fea:	464b      	mov	r3, r9
    8fec:	2210      	movs	r2, #16
    8fee:	6858      	ldr	r0, [r3, #4]
    8ff0:	2100      	movs	r1, #0
    8ff2:	f006 fd45 	bl	fa80 <strtoll>
    if (!reg_addr || !IS_MBOX_INSTANCE((struct MBOX_REG *)reg_addr))
    8ff6:	4b70      	ldr	r3, [pc, #448]	; (91b8 <mbox_test+0x1e0>)
    8ff8:	4298      	cmp	r0, r3
    8ffa:	d000      	beq.n	8ffe <mbox_test+0x26>
    8ffc:	e0b8      	b.n	9170 <mbox_test+0x198>
    irqn = strtol(argv[2], NULL, 10);
    8ffe:	464b      	mov	r3, r9
    mbox->reg = (struct MBOX_REG *)reg_addr;
    9000:	4d6e      	ldr	r5, [pc, #440]	; (91bc <mbox_test+0x1e4>)
    irqn = strtol(argv[2], NULL, 10);
    9002:	220a      	movs	r2, #10
    mbox->reg = (struct MBOX_REG *)reg_addr;
    9004:	6028      	str	r0, [r5, #0]
    irqn = strtol(argv[2], NULL, 10);
    9006:	2100      	movs	r1, #0
    9008:	6898      	ldr	r0, [r3, #8]
    900a:	f006 fc57 	bl	f8bc <strtol>
    900e:	0007      	movs	r7, r0
    9010:	0004      	movs	r4, r0
    if (irqn < 0 || irqn > NUM_INTERRUPTS)
    9012:	281b      	cmp	r0, #27
    9014:	d900      	bls.n	9018 <mbox_test+0x40>
    9016:	e0ab      	b.n	9170 <mbox_test+0x198>
    single_irq = strtol(argv[3], NULL, 10);
    9018:	464b      	mov	r3, r9
    901a:	220a      	movs	r2, #10
    901c:	2100      	movs	r1, #0
    901e:	68d8      	ldr	r0, [r3, #12]
    9020:	f006 fc4c 	bl	f8bc <strtol>
    9024:	b2c0      	uxtb	r0, r0
    if (!IS_BOOL_VALUE(single_irq))
    9026:	2801      	cmp	r0, #1
    9028:	d900      	bls.n	902c <mbox_test+0x54>
    902a:	e0a1      	b.n	9170 <mbox_test+0x198>
    mbox->single_irq = single_irq;
    902c:	46a8      	mov	r8, r5
    902e:	002a      	movs	r2, r5
    9030:	4b63      	ldr	r3, [pc, #396]	; (91c0 <mbox_test+0x1e8>)
    9032:	7528      	strb	r0, [r5, #20]
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    9034:	1d39      	adds	r1, r7, #4
        mbox->clt[chan] = &mbox_client[chan];
    9036:	003e      	movs	r6, r7
    9038:	6053      	str	r3, [r2, #4]
        if (single_irq)
    903a:	2800      	cmp	r0, #0
    903c:	d100      	bne.n	9040 <mbox_test+0x68>
        mbox_client[chan].irq = irqn + chan;
    903e:	0026      	movs	r6, r4
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    9040:	3401      	adds	r4, #1
    9042:	611e      	str	r6, [r3, #16]
    9044:	3204      	adds	r2, #4
    9046:	331c      	adds	r3, #28
    9048:	428c      	cmp	r4, r1
    904a:	d1f4      	bne.n	9036 <mbox_test+0x5e>
    is_a2b = strtol(argv[4], NULL, 10);
    904c:	464b      	mov	r3, r9
    904e:	2100      	movs	r1, #0
    9050:	220a      	movs	r2, #10
    9052:	6918      	ldr	r0, [r3, #16]
    9054:	f006 fc32 	bl	f8bc <strtol>
    9058:	b2c1      	uxtb	r1, r0
    if (!IS_BOOL_VALUE(is_a2b))
    905a:	2901      	cmp	r1, #1
    905c:	d900      	bls.n	9060 <mbox_test+0x88>
    905e:	e087      	b.n	9170 <mbox_test+0x198>
    mbox->a2b = !is_a2b; /* loopback test */
    9060:	2001      	movs	r0, #1
    9062:	4041      	eors	r1, r0
    HAL_MBOX_Init(mbox->reg, mbox->a2b);
    9064:	6828      	ldr	r0, [r5, #0]
    mbox->a2b = !is_a2b; /* loopback test */
    9066:	7569      	strb	r1, [r5, #21]
    HAL_MBOX_Init(mbox->reg, mbox->a2b);
    9068:	002f      	movs	r7, r5
    906a:	f7fe feb9 	bl	7de0 <HAL_MBOX_Init>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    906e:	2600      	movs	r6, #0
        ret = HAL_MBOX_RegisterClient(mbox->reg, chan,
    9070:	687a      	ldr	r2, [r7, #4]
    9072:	6828      	ldr	r0, [r5, #0]
    9074:	b2f1      	uxtb	r1, r6
    9076:	f7fe feed 	bl	7e54 <HAL_MBOX_RegisterClient>
    907a:	1e04      	subs	r4, r0, #0
        if (ret)
    907c:	d000      	beq.n	9080 <mbox_test+0xa8>
    907e:	e08d      	b.n	919c <mbox_test+0x1c4>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    9080:	3601      	adds	r6, #1
    9082:	3704      	adds	r7, #4
    9084:	2e04      	cmp	r6, #4
    9086:	d1f3      	bne.n	9070 <mbox_test+0x98>
    MBOX_TEST_ISR_INSTALL(0);
    9088:	686b      	ldr	r3, [r5, #4]
    908a:	2200      	movs	r2, #0
    908c:	6918      	ldr	r0, [r3, #16]
    908e:	494d      	ldr	r1, [pc, #308]	; (91c4 <mbox_test+0x1ec>)
    9090:	2300      	movs	r3, #0
    9092:	f7ff f9cb 	bl	842c <rt_hw_interrupt_install>
    9096:	686b      	ldr	r3, [r5, #4]
    9098:	6918      	ldr	r0, [r3, #16]
    909a:	f7ff f9a3 	bl	83e4 <rt_hw_interrupt_umask>
    if (!mbox->single_irq)
    909e:	7d2b      	ldrb	r3, [r5, #20]
    90a0:	2b00      	cmp	r3, #0
    90a2:	d043      	beq.n	912c <mbox_test+0x154>
    rt_kprintf("mbox test start, direction: %s\n", !mbox->a2b ? "A2B" : "B2A");
    90a4:	7d6b      	ldrb	r3, [r5, #21]
    90a6:	2b00      	cmp	r3, #0
    90a8:	d03e      	beq.n	9128 <mbox_test+0x150>
    90aa:	4947      	ldr	r1, [pc, #284]	; (91c8 <mbox_test+0x1f0>)
    90ac:	4847      	ldr	r0, [pc, #284]	; (91cc <mbox_test+0x1f4>)
    90ae:	f001 f8c5 	bl	a23c <rt_kprintf>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    90b2:	4f47      	ldr	r7, [pc, #284]	; (91d0 <mbox_test+0x1f8>)
        cmd  = MBOX_TEST_CMD + chan;
    90b4:	4b47      	ldr	r3, [pc, #284]	; (91d4 <mbox_test+0x1fc>)
        rt_kprintf("TX: cmd=0x%x data=0x%x to chan %d\n", cmd, data, chan);
    90b6:	0038      	movs	r0, r7
        cmd  = MBOX_TEST_CMD + chan;
    90b8:	4699      	mov	r9, r3
        data = MBOX_TEST_DATA + chan;
    90ba:	4b47      	ldr	r3, [pc, #284]	; (91d8 <mbox_test+0x200>)
        cmd  = MBOX_TEST_CMD + chan;
    90bc:	44a1      	add	r9, r4
        data = MBOX_TEST_DATA + chan;
    90be:	18e6      	adds	r6, r4, r3
        rt_kprintf("TX: cmd=0x%x data=0x%x to chan %d\n", cmd, data, chan);
    90c0:	0032      	movs	r2, r6
    90c2:	0023      	movs	r3, r4
    90c4:	4649      	mov	r1, r9
    90c6:	f001 f8b9 	bl	a23c <rt_kprintf>
    cmdData.CMD  = cmd;
    90ca:	464b      	mov	r3, r9
    90cc:	9300      	str	r3, [sp, #0]
    cmdData.DATA = data;
    90ce:	9601      	str	r6, [sp, #4]
    return HAL_MBOX_SendMsg2(mbox->reg, chan, &cmdData, !mbox->a2b);
    90d0:	7d6b      	ldrb	r3, [r5, #21]
    90d2:	b2e1      	uxtb	r1, r4
    90d4:	425a      	negs	r2, r3
    90d6:	4153      	adcs	r3, r2
    90d8:	6828      	ldr	r0, [r5, #0]
    90da:	466a      	mov	r2, sp
    90dc:	b2db      	uxtb	r3, r3
    90de:	f7fe fe07 	bl	7cf0 <HAL_MBOX_SendMsg2>
        rt_thread_delay(MBOX_TEST_DELAY);
    90e2:	2096      	movs	r0, #150	; 0x96
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    90e4:	3401      	adds	r4, #1
        rt_thread_delay(MBOX_TEST_DELAY);
    90e6:	0040      	lsls	r0, r0, #1
    90e8:	f002 f8a4 	bl	b234 <rt_thread_delay>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    90ec:	2c04      	cmp	r4, #4
    90ee:	d1e1      	bne.n	90b4 <mbox_test+0xdc>
    rt_kprintf("mbox test end\n");
    90f0:	483a      	ldr	r0, [pc, #232]	; (91dc <mbox_test+0x204>)
    90f2:	f001 f8a3 	bl	a23c <rt_kprintf>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    90f6:	2400      	movs	r4, #0
        ret = HAL_MBOX_UnregisterClient(mbox->reg, chan,
    90f8:	4643      	mov	r3, r8
    90fa:	6828      	ldr	r0, [r5, #0]
    90fc:	685a      	ldr	r2, [r3, #4]
    90fe:	b2e1      	uxtb	r1, r4
    9100:	f7fe feda 	bl	7eb8 <HAL_MBOX_UnregisterClient>
        if (ret)
    9104:	2800      	cmp	r0, #0
    9106:	d152      	bne.n	91ae <mbox_test+0x1d6>
    for (chan = 0; chan < MBOX_CHAN_CNT; chan++)
    9108:	2304      	movs	r3, #4
    910a:	469c      	mov	ip, r3
    910c:	3401      	adds	r4, #1
    910e:	44e0      	add	r8, ip
    9110:	2c04      	cmp	r4, #4
    9112:	d1f1      	bne.n	90f8 <mbox_test+0x120>
    ret = HAL_MBOX_DeInit(mbox->reg);
    9114:	6828      	ldr	r0, [r5, #0]
    9116:	f7fe fe81 	bl	7e1c <HAL_MBOX_DeInit>
    911a:	1e01      	subs	r1, r0, #0
    if (ret)
    911c:	d143      	bne.n	91a6 <mbox_test+0x1ce>

    mbox_test_deinit(&g_mbox_tdev);

out:
    return;
}
    911e:	b003      	add	sp, #12
    9120:	bcc0      	pop	{r6, r7}
    9122:	46b9      	mov	r9, r7
    9124:	46b0      	mov	r8, r6
    9126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("mbox test start, direction: %s\n", !mbox->a2b ? "A2B" : "B2A");
    9128:	492d      	ldr	r1, [pc, #180]	; (91e0 <mbox_test+0x208>)
    912a:	e7bf      	b.n	90ac <mbox_test+0xd4>
        MBOX_TEST_ISR_INSTALL(1);
    912c:	68ab      	ldr	r3, [r5, #8]
    912e:	2200      	movs	r2, #0
    9130:	492c      	ldr	r1, [pc, #176]	; (91e4 <mbox_test+0x20c>)
    9132:	6918      	ldr	r0, [r3, #16]
    9134:	2300      	movs	r3, #0
    9136:	f7ff f979 	bl	842c <rt_hw_interrupt_install>
    913a:	68ab      	ldr	r3, [r5, #8]
    913c:	6918      	ldr	r0, [r3, #16]
    913e:	f7ff f951 	bl	83e4 <rt_hw_interrupt_umask>
        MBOX_TEST_ISR_INSTALL(2);
    9142:	68eb      	ldr	r3, [r5, #12]
    9144:	2200      	movs	r2, #0
    9146:	4928      	ldr	r1, [pc, #160]	; (91e8 <mbox_test+0x210>)
    9148:	6918      	ldr	r0, [r3, #16]
    914a:	2300      	movs	r3, #0
    914c:	f7ff f96e 	bl	842c <rt_hw_interrupt_install>
    9150:	68eb      	ldr	r3, [r5, #12]
    9152:	6918      	ldr	r0, [r3, #16]
    9154:	f7ff f946 	bl	83e4 <rt_hw_interrupt_umask>
        MBOX_TEST_ISR_INSTALL(3);
    9158:	692b      	ldr	r3, [r5, #16]
    915a:	2200      	movs	r2, #0
    915c:	6918      	ldr	r0, [r3, #16]
    915e:	4923      	ldr	r1, [pc, #140]	; (91ec <mbox_test+0x214>)
    9160:	2300      	movs	r3, #0
    9162:	f7ff f963 	bl	842c <rt_hw_interrupt_install>
    9166:	692b      	ldr	r3, [r5, #16]
    9168:	6918      	ldr	r0, [r3, #16]
    916a:	f7ff f93b 	bl	83e4 <rt_hw_interrupt_umask>
    if (ret)
    916e:	e799      	b.n	90a4 <mbox_test+0xcc>
    rt_kprintf("Usage: \n");
    9170:	481f      	ldr	r0, [pc, #124]	; (91f0 <mbox_test+0x218>)
    9172:	f001 f863 	bl	a23c <rt_kprintf>
    rt_kprintf("mbox_test 0x44050000 10, 1, 1\n");
    9176:	481f      	ldr	r0, [pc, #124]	; (91f4 <mbox_test+0x21c>)
    9178:	f001 f860 	bl	a23c <rt_kprintf>
    rt_kprintf("means: \n");
    917c:	481e      	ldr	r0, [pc, #120]	; (91f8 <mbox_test+0x220>)
    917e:	f001 f85d 	bl	a23c <rt_kprintf>
    rt_kprintf("mbox ip address: 0x44050000\n");
    9182:	481e      	ldr	r0, [pc, #120]	; (91fc <mbox_test+0x224>)
    9184:	f001 f85a 	bl	a23c <rt_kprintf>
    rt_kprintf("mbox channel irq number start: 10\n");
    9188:	481d      	ldr	r0, [pc, #116]	; (9200 <mbox_test+0x228>)
    918a:	f001 f857 	bl	a23c <rt_kprintf>
    rt_kprintf("mbox channel single irq flag: 1 means single, 0 means multi\n");
    918e:	481d      	ldr	r0, [pc, #116]	; (9204 <mbox_test+0x22c>)
    9190:	f001 f854 	bl	a23c <rt_kprintf>
    rt_kprintf("mbox send direction: 1 means A2B, 0 means B2A\n");
    9194:	481c      	ldr	r0, [pc, #112]	; (9208 <mbox_test+0x230>)
    9196:	f001 f851 	bl	a23c <rt_kprintf>
    if (ret)
    919a:	e7c0      	b.n	911e <mbox_test+0x146>
            rt_kprintf("Mbox client register failed, ret=%d\n", ret);
    919c:	0001      	movs	r1, r0
    919e:	481b      	ldr	r0, [pc, #108]	; (920c <mbox_test+0x234>)
    91a0:	f001 f84c 	bl	a23c <rt_kprintf>
    if (ret)
    91a4:	e7bb      	b.n	911e <mbox_test+0x146>
        rt_kprintf("Mbox deinit failed, ret=%d\n", ret);
    91a6:	481a      	ldr	r0, [pc, #104]	; (9210 <mbox_test+0x238>)
    91a8:	f001 f848 	bl	a23c <rt_kprintf>
    return;
    91ac:	e7b7      	b.n	911e <mbox_test+0x146>
            rt_kprintf("Mbox client unregister failed, ret=%d\n", ret);
    91ae:	0001      	movs	r1, r0
    91b0:	4818      	ldr	r0, [pc, #96]	; (9214 <mbox_test+0x23c>)
    91b2:	f001 f843 	bl	a23c <rt_kprintf>
            goto out;
    91b6:	e7b2      	b.n	911e <mbox_test+0x146>
    91b8:	fec60000 	.word	0xfec60000
    91bc:	000182d0 	.word	0x000182d0
    91c0:	00017274 	.word	0x00017274
    91c4:	00008fb1 	.word	0x00008fb1
    91c8:	00014bd0 	.word	0x00014bd0
    91cc:	00014ce8 	.word	0x00014ce8
    91d0:	00014d08 	.word	0x00014d08
    91d4:	94949490 	.word	0x94949490
    91d8:	a5a5a5a0 	.word	0xa5a5a5a0
    91dc:	00014d2c 	.word	0x00014d2c
    91e0:	00014bcc 	.word	0x00014bcc
    91e4:	00008f85 	.word	0x00008f85
    91e8:	00008f59 	.word	0x00008f59
    91ec:	00008f2d 	.word	0x00008f2d
    91f0:	00014bd4 	.word	0x00014bd4
    91f4:	00014be0 	.word	0x00014be0
    91f8:	00014c00 	.word	0x00014c00
    91fc:	00014c0c 	.word	0x00014c0c
    9200:	00014c2c 	.word	0x00014c2c
    9204:	00014c50 	.word	0x00014c50
    9208:	00014c90 	.word	0x00014c90
    920c:	00014cc0 	.word	0x00014cc0
    9210:	00014d64 	.word	0x00014d64
    9214:	00014d3c 	.word	0x00014d3c

00009218 <rt_tick_get>:
 * @return current tick
 */
rt_tick_t rt_tick_get(void)
{
    /* return the global tick */
    return rt_tick;
    9218:	4b01      	ldr	r3, [pc, #4]	; (9220 <rt_tick_get+0x8>)
    921a:	6818      	ldr	r0, [r3, #0]
}
    921c:	4770      	bx	lr
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	000182e8 	.word	0x000182e8

00009224 <rt_tick_increase>:
void rt_tick_increase(void)
{
    struct rt_thread *thread;

    /* increase the global tick */
    ++ rt_tick;
    9224:	4a09      	ldr	r2, [pc, #36]	; (924c <rt_tick_increase+0x28>)
{
    9226:	b510      	push	{r4, lr}
    ++ rt_tick;
    9228:	6813      	ldr	r3, [r2, #0]
    922a:	3301      	adds	r3, #1
    922c:	6013      	str	r3, [r2, #0]

    /* check time slice */
    thread = rt_thread_self();
    922e:	f001 ff21 	bl	b074 <rt_thread_self>

    -- thread->remaining_tick;
    9232:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9234:	3b01      	subs	r3, #1
    9236:	6483      	str	r3, [r0, #72]	; 0x48
    if (thread->remaining_tick == 0)
    9238:	2b00      	cmp	r3, #0
    923a:	d002      	beq.n	9242 <rt_tick_increase+0x1e>
        /* yield */
        rt_thread_yield();
    }

    /* check timer */
    rt_timer_check();
    923c:	f002 f9da 	bl	b5f4 <rt_timer_check>
}
    9240:	bd10      	pop	{r4, pc}
        thread->remaining_tick = thread->init_tick;
    9242:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9244:	6483      	str	r3, [r0, #72]	; 0x48
        rt_thread_yield();
    9246:	f001 ff45 	bl	b0d4 <rt_thread_yield>
    924a:	e7f7      	b.n	923c <rt_tick_increase+0x18>
    924c:	000182e8 	.word	0x000182e8

00009250 <rti_start>:
 * etc.
 */
static int rti_start(void)
{
    return 0;
}
    9250:	2000      	movs	r0, #0
    9252:	4770      	bx	lr

00009254 <main_thread_entry>:
struct rt_thread main_thread;
#endif

/* the system main thread */
void main_thread_entry(void *parameter)
{
    9254:	b570      	push	{r4, r5, r6, lr}
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
    9256:	4b09      	ldr	r3, [pc, #36]	; (927c <main_thread_entry+0x28>)
    9258:	4d09      	ldr	r5, [pc, #36]	; (9280 <main_thread_entry+0x2c>)
    925a:	429d      	cmp	r5, r3
    925c:	d20b      	bcs.n	9276 <main_thread_entry+0x22>
    925e:	3b01      	subs	r3, #1
    9260:	1d2c      	adds	r4, r5, #4
    9262:	1b5d      	subs	r5, r3, r5
    9264:	2303      	movs	r3, #3
    9266:	439d      	bics	r5, r3
    9268:	192d      	adds	r5, r5, r4
    926a:	4b06      	ldr	r3, [pc, #24]	; (9284 <main_thread_entry+0x30>)
    926c:	e000      	b.n	9270 <main_thread_entry+0x1c>
        (*fn_ptr)();
    926e:	cc08      	ldmia	r4!, {r3}
    9270:	4798      	blx	r3
    for (fn_ptr = &__rt_init_rti_board_end; fn_ptr < &__rt_init_rti_end; fn_ptr ++)
    9272:	42ac      	cmp	r4, r5
    9274:	d1fb      	bne.n	926e <main_thread_entry+0x1a>

    /* invoke system main function */
#if defined(__CC_ARM) || defined(__CLANG_ARM)
    $Super$$main(); /* for ARMCC. */
#elif defined(__ICCARM__) || defined(__GNUC__)
    main();
    9276:	f7ff fa77 	bl	8768 <main>
#endif
}
    927a:	bd70      	pop	{r4, r5, r6, pc}
    927c:	00017204 	.word	0x00017204
    9280:	000171f8 	.word	0x000171f8
    9284:	00009291 	.word	0x00009291

00009288 <rti_end>:
    9288:	2000      	movs	r0, #0
    928a:	4770      	bx	lr

0000928c <rti_board_start>:
    928c:	2000      	movs	r0, #0
    928e:	4770      	bx	lr

00009290 <rti_board_end>:
    9290:	2000      	movs	r0, #0
    9292:	4770      	bx	lr

00009294 <rt_components_board_init>:
{
    9294:	b570      	push	{r4, r5, r6, lr}
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
    9296:	4b08      	ldr	r3, [pc, #32]	; (92b8 <rt_components_board_init+0x24>)
    9298:	4d08      	ldr	r5, [pc, #32]	; (92bc <rt_components_board_init+0x28>)
    929a:	429d      	cmp	r5, r3
    929c:	d20b      	bcs.n	92b6 <rt_components_board_init+0x22>
    929e:	3b01      	subs	r3, #1
    92a0:	1d2c      	adds	r4, r5, #4
    92a2:	1b5d      	subs	r5, r3, r5
    92a4:	2303      	movs	r3, #3
    92a6:	439d      	bics	r5, r3
    92a8:	192d      	adds	r5, r5, r4
    92aa:	4b05      	ldr	r3, [pc, #20]	; (92c0 <rt_components_board_init+0x2c>)
    92ac:	e000      	b.n	92b0 <rt_components_board_init+0x1c>
        (*fn_ptr)();
    92ae:	cc08      	ldmia	r4!, {r3}
    92b0:	4798      	blx	r3
    for (fn_ptr = &__rt_init_rti_board_start; fn_ptr < &__rt_init_rti_board_end; fn_ptr++)
    92b2:	42ac      	cmp	r4, r5
    92b4:	d1fb      	bne.n	92ae <rt_components_board_init+0x1a>
}
    92b6:	bd70      	pop	{r4, r5, r6, pc}
    92b8:	000171f8 	.word	0x000171f8
    92bc:	000171f4 	.word	0x000171f4
    92c0:	0000928d 	.word	0x0000928d

000092c4 <rt_application_init>:
void rt_application_init(void)
{
    rt_thread_t tid;

#ifdef RT_USING_HEAP
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
    92c4:	2314      	movs	r3, #20
{
    92c6:	b510      	push	{r4, lr}
    92c8:	b082      	sub	sp, #8
    tid = rt_thread_create("main", main_thread_entry, RT_NULL,
    92ca:	9301      	str	r3, [sp, #4]
    92cc:	3b0a      	subs	r3, #10
    92ce:	9300      	str	r3, [sp, #0]
    92d0:	2380      	movs	r3, #128	; 0x80
    92d2:	2200      	movs	r2, #0
    92d4:	4908      	ldr	r1, [pc, #32]	; (92f8 <rt_application_init+0x34>)
    92d6:	4809      	ldr	r0, [pc, #36]	; (92fc <rt_application_init+0x38>)
    92d8:	011b      	lsls	r3, r3, #4
    92da:	f001 fed1 	bl	b080 <rt_thread_create>
    92de:	1e04      	subs	r4, r0, #0
                           RT_MAIN_THREAD_STACK_SIZE, RT_MAIN_THREAD_PRIORITY, 20);
    RT_ASSERT(tid != RT_NULL);
    92e0:	d004      	beq.n	92ec <rt_application_init+0x28>
	
    /* if not define RT_USING_HEAP, using to eliminate the warning */
    (void)result;
#endif

    rt_thread_startup(tid);
    92e2:	0020      	movs	r0, r4
    92e4:	f001 fff2 	bl	b2cc <rt_thread_startup>
}
    92e8:	b002      	add	sp, #8
    92ea:	bd10      	pop	{r4, pc}
    RT_ASSERT(tid != RT_NULL);
    92ec:	22c6      	movs	r2, #198	; 0xc6
    92ee:	4904      	ldr	r1, [pc, #16]	; (9300 <rt_application_init+0x3c>)
    92f0:	4804      	ldr	r0, [pc, #16]	; (9304 <rt_application_init+0x40>)
    92f2:	f001 f821 	bl	a338 <rt_assert_handler>
    92f6:	e7f4      	b.n	92e2 <rt_application_init+0x1e>
    92f8:	00009255 	.word	0x00009255
    92fc:	00014da0 	.word	0x00014da0
    9300:	00014db8 	.word	0x00014db8
    9304:	00014da8 	.word	0x00014da8

00009308 <entry>:
{
    9308:	b510      	push	{r4, lr}
    rt_hw_interrupt_disable();
    930a:	f7fa fed1 	bl	40b0 <rt_hw_interrupt_disable>

int rtthread_startup(void)
{
    rt_hw_interrupt_disable();
    930e:	f7fa fecf 	bl	40b0 <rt_hw_interrupt_disable>

    /* board level initialization
     * NOTE: please initialize heap inside board initialization.
     */
    rt_hw_board_init();
    9312:	f7ff fa45 	bl	87a0 <rt_hw_board_init>

    /* show RT-Thread version */
    rt_show_version();
    9316:	f000 ffc7 	bl	a2a8 <rt_show_version>

    /* timer system initialization */
    rt_system_timer_init();
    931a:	f002 f9d3 	bl	b6c4 <rt_system_timer_init>

    /* scheduler system initialization */
    rt_system_scheduler_init();
    931e:	f001 fc93 	bl	ac48 <rt_system_scheduler_init>
    /* signal system initialization */
    rt_system_signal_init();
#endif

    /* create init_thread */
    rt_application_init();
    9322:	f7ff ffcf 	bl	92c4 <rt_application_init>

    /* timer thread initialization */
    rt_system_timer_thread_init();
    9326:	f002 f9d3 	bl	b6d0 <rt_system_timer_thread_init>

    /* idle thread initialization */
    rt_thread_idle_init();
    932a:	f000 fa11 	bl	9750 <rt_thread_idle_init>

    /* start scheduler */
    rt_system_scheduler_start();
    932e:	f001 fcaf 	bl	ac90 <rt_system_scheduler_start>
}
    9332:	2000      	movs	r0, #0
    9334:	bd10      	pop	{r4, pc}
    9336:	46c0      	nop			; (mov r8, r8)

00009338 <rt_device_find>:
 * @param name the device driver's name
 *
 * @return the registered device driver on successful, or RT_NULL on failure.
 */
rt_device_t rt_device_find(const char *name)
{
    9338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    933a:	0007      	movs	r7, r0
    struct rt_object *object;
    struct rt_list_node *node;
    struct rt_object_information *information;

    /* enter critical */
    if (rt_thread_self() != RT_NULL)
    933c:	f001 fe9a 	bl	b074 <rt_thread_self>
    9340:	2800      	cmp	r0, #0
    9342:	d001      	beq.n	9348 <rt_device_find+0x10>
        rt_enter_critical();
    9344:	f001 fd7e 	bl	ae44 <rt_enter_critical>

    /* try to find device object */
    information = rt_object_get_information(RT_Object_Class_Device);
    9348:	2008      	movs	r0, #8
    934a:	f001 fb43 	bl	a9d4 <rt_object_get_information>
    934e:	1e06      	subs	r6, r0, #0
    RT_ASSERT(information != RT_NULL);
    9350:	d020      	beq.n	9394 <rt_device_find+0x5c>
    for (node  = information->object_list.next;
    9352:	6874      	ldr	r4, [r6, #4]
         node != &(information->object_list);
    9354:	3604      	adds	r6, #4
    for (node  = information->object_list.next;
    9356:	42b4      	cmp	r4, r6
    9358:	d103      	bne.n	9362 <rt_device_find+0x2a>
    935a:	e013      	b.n	9384 <rt_device_find+0x4c>
         node  = node->next)
    935c:	6824      	ldr	r4, [r4, #0]
    for (node  = information->object_list.next;
    935e:	42b4      	cmp	r4, r6
    9360:	d010      	beq.n	9384 <rt_device_find+0x4c>
    {
        object = rt_list_entry(node, struct rt_object, list);
    9362:	0025      	movs	r5, r4
    9364:	3d0c      	subs	r5, #12
        if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
    9366:	2208      	movs	r2, #8
    9368:	0039      	movs	r1, r7
    936a:	0028      	movs	r0, r5
    936c:	f000 fd4a 	bl	9e04 <rt_strncmp>
    9370:	2800      	cmp	r0, #0
    9372:	d1f3      	bne.n	935c <rt_device_find+0x24>
        {
            /* leave critical */
            if (rt_thread_self() != RT_NULL)
    9374:	f001 fe7e 	bl	b074 <rt_thread_self>
    9378:	2800      	cmp	r0, #0
    937a:	d001      	beq.n	9380 <rt_device_find+0x48>
                rt_exit_critical();
    937c:	f001 fd6e 	bl	ae5c <rt_exit_critical>
    if (rt_thread_self() != RT_NULL)
        rt_exit_critical();

    /* not found */
    return RT_NULL;
}
    9380:	0028      	movs	r0, r5
    9382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (rt_thread_self() != RT_NULL)
    9384:	f001 fe76 	bl	b074 <rt_thread_self>
    9388:	1e05      	subs	r5, r0, #0
    938a:	d0f9      	beq.n	9380 <rt_device_find+0x48>
        rt_exit_critical();
    938c:	f001 fd66 	bl	ae5c <rt_exit_critical>
    return RT_NULL;
    9390:	2500      	movs	r5, #0
    9392:	e7f5      	b.n	9380 <rt_device_find+0x48>
    RT_ASSERT(information != RT_NULL);
    9394:	227c      	movs	r2, #124	; 0x7c
    9396:	4902      	ldr	r1, [pc, #8]	; (93a0 <rt_device_find+0x68>)
    9398:	4802      	ldr	r0, [pc, #8]	; (93a4 <rt_device_find+0x6c>)
    939a:	f000 ffcd 	bl	a338 <rt_assert_handler>
    939e:	e7d8      	b.n	9352 <rt_device_find+0x1a>
    93a0:	00014f00 	.word	0x00014f00
    93a4:	00014e40 	.word	0x00014e40

000093a8 <rt_device_register>:
{
    93a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93aa:	0004      	movs	r4, r0
    93ac:	000e      	movs	r6, r1
    93ae:	0017      	movs	r7, r2
    if (dev == RT_NULL)
    93b0:	2800      	cmp	r0, #0
    93b2:	d00e      	beq.n	93d2 <rt_device_register+0x2a>
    if (rt_device_find(name) != RT_NULL)
    93b4:	0008      	movs	r0, r1
    93b6:	f7ff ffbf 	bl	9338 <rt_device_find>
    93ba:	1e05      	subs	r5, r0, #0
    93bc:	d109      	bne.n	93d2 <rt_device_register+0x2a>
    rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
    93be:	0020      	movs	r0, r4
    93c0:	0032      	movs	r2, r6
    93c2:	2108      	movs	r1, #8
    93c4:	f001 fb18 	bl	a9f8 <rt_object_init>
    return RT_EOK;
    93c8:	2000      	movs	r0, #0
    dev->flag = flags;
    93ca:	82e7      	strh	r7, [r4, #22]
    dev->ref_count = 0;
    93cc:	76a5      	strb	r5, [r4, #26]
    dev->open_flag = 0;
    93ce:	8325      	strh	r5, [r4, #24]
}
    93d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -RT_ERROR;
    93d2:	2001      	movs	r0, #1
    93d4:	4240      	negs	r0, r0
    93d6:	e7fb      	b.n	93d0 <rt_device_register+0x28>

000093d8 <rt_device_open>:
 * @param oflag the flags for device open
 *
 * @return the result
 */
rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
    93d8:	b570      	push	{r4, r5, r6, lr}
    93da:	0004      	movs	r4, r0
    93dc:	000d      	movs	r5, r1
    rt_err_t result = RT_EOK;

    RT_ASSERT(dev != RT_NULL);
    93de:	2800      	cmp	r0, #0
    93e0:	d041      	beq.n	9466 <rt_device_open+0x8e>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    93e2:	0020      	movs	r0, r4
    93e4:	f001 fc1e 	bl	ac24 <rt_object_get_type>
    93e8:	2808      	cmp	r0, #8
    93ea:	d004      	beq.n	93f6 <rt_device_open+0x1e>
    93ec:	22f5      	movs	r2, #245	; 0xf5
    93ee:	4924      	ldr	r1, [pc, #144]	; (9480 <rt_device_open+0xa8>)
    93f0:	4824      	ldr	r0, [pc, #144]	; (9484 <rt_device_open+0xac>)
    93f2:	f000 ffa1 	bl	a338 <rt_assert_handler>

    /* if device is not initialized, initialize it. */
    if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
    93f6:	8ae3      	ldrh	r3, [r4, #22]
    93f8:	06da      	lsls	r2, r3, #27
    93fa:	d40a      	bmi.n	9412 <rt_device_open+0x3a>
    {
        if (device_init != RT_NULL)
    93fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    93fe:	2a00      	cmp	r2, #0
    9400:	d004      	beq.n	940c <rt_device_open+0x34>
        {
            result = device_init(dev);
    9402:	0020      	movs	r0, r4
    9404:	4790      	blx	r2
    9406:	1e06      	subs	r6, r0, #0
            if (result != RT_EOK)
    9408:	d133      	bne.n	9472 <rt_device_open+0x9a>

                return result;
            }
        }

        dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
    940a:	8ae3      	ldrh	r3, [r4, #22]
    940c:	2210      	movs	r2, #16
    940e:	4313      	orrs	r3, r2
    9410:	82e3      	strh	r3, [r4, #22]
    }

    /* device is a stand alone device and opened */
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
    9412:	2208      	movs	r2, #8
    9414:	421a      	tst	r2, r3
    9416:	d10b      	bne.n	9430 <rt_device_open+0x58>
    {
        return -RT_EBUSY;
    }

    /* call device open interface */
    if (device_open != RT_NULL)
    9418:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    941a:	2b00      	cmp	r3, #0
    941c:	d01f      	beq.n	945e <rt_device_open+0x86>
    {
        result = device_open(dev, oflag);
    941e:	0029      	movs	r1, r5
    9420:	0020      	movs	r0, r4
    9422:	4798      	blx	r3
    9424:	1e06      	subs	r6, r0, #0
        /* set open flag */
        dev->open_flag = (oflag & RT_DEVICE_OFLAG_MASK);
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
    9426:	d009      	beq.n	943c <rt_device_open+0x64>
    9428:	1d83      	adds	r3, r0, #6
    942a:	d007      	beq.n	943c <rt_device_open+0x64>
         * please set the ref_count to a bigger type. */
        RT_ASSERT(dev->ref_count != 0);
    }

    return result;
}
    942c:	0030      	movs	r0, r6
    942e:	bd70      	pop	{r4, r5, r6, pc}
    if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
    9430:	8b23      	ldrh	r3, [r4, #24]
    9432:	421a      	tst	r2, r3
    9434:	d0f0      	beq.n	9418 <rt_device_open+0x40>
        return -RT_EBUSY;
    9436:	2607      	movs	r6, #7
    9438:	4276      	negs	r6, r6
    943a:	e7f7      	b.n	942c <rt_device_open+0x54>
        dev->open_flag |= RT_DEVICE_OFLAG_OPEN;
    943c:	8b21      	ldrh	r1, [r4, #24]
    943e:	2308      	movs	r3, #8
    9440:	4319      	orrs	r1, r3
        dev->ref_count++;
    9442:	7ea3      	ldrb	r3, [r4, #26]
        dev->open_flag |= RT_DEVICE_OFLAG_OPEN;
    9444:	8321      	strh	r1, [r4, #24]
        dev->ref_count++;
    9446:	3301      	adds	r3, #1
    9448:	b2db      	uxtb	r3, r3
    944a:	76a3      	strb	r3, [r4, #26]
        RT_ASSERT(dev->ref_count != 0);
    944c:	2b00      	cmp	r3, #0
    944e:	d1ed      	bne.n	942c <rt_device_open+0x54>
    9450:	2224      	movs	r2, #36	; 0x24
    9452:	490b      	ldr	r1, [pc, #44]	; (9480 <rt_device_open+0xa8>)
    9454:	480c      	ldr	r0, [pc, #48]	; (9488 <rt_device_open+0xb0>)
    9456:	32ff      	adds	r2, #255	; 0xff
    9458:	f000 ff6e 	bl	a338 <rt_assert_handler>
    945c:	e7e6      	b.n	942c <rt_device_open+0x54>
        dev->open_flag = (oflag & RT_DEVICE_OFLAG_MASK);
    945e:	490b      	ldr	r1, [pc, #44]	; (948c <rt_device_open+0xb4>)
    9460:	2600      	movs	r6, #0
    9462:	4029      	ands	r1, r5
    if (result == RT_EOK || result == -RT_ENOSYS)
    9464:	e7eb      	b.n	943e <rt_device_open+0x66>
    RT_ASSERT(dev != RT_NULL);
    9466:	22f4      	movs	r2, #244	; 0xf4
    9468:	4905      	ldr	r1, [pc, #20]	; (9480 <rt_device_open+0xa8>)
    946a:	4809      	ldr	r0, [pc, #36]	; (9490 <rt_device_open+0xb8>)
    946c:	f000 ff64 	bl	a338 <rt_assert_handler>
    9470:	e7b7      	b.n	93e2 <rt_device_open+0xa>
                rt_kprintf("To initialize device:%s failed. The error code is %d\n",
    9472:	0002      	movs	r2, r0
    9474:	0021      	movs	r1, r4
    9476:	4807      	ldr	r0, [pc, #28]	; (9494 <rt_device_open+0xbc>)
    9478:	f000 fee0 	bl	a23c <rt_kprintf>
                return result;
    947c:	e7d6      	b.n	942c <rt_device_open+0x54>
    947e:	46c0      	nop			; (mov r8, r8)
    9480:	00014ef0 	.word	0x00014ef0
    9484:	00014ddc 	.word	0x00014ddc
    9488:	00014e90 	.word	0x00014e90
    948c:	00000f0f 	.word	0x00000f0f
    9490:	00014dcc 	.word	0x00014dcc
    9494:	00014e58 	.word	0x00014e58

00009498 <rt_device_close>:
 * @param dev the pointer of device driver structure
 *
 * @return the result
 */
rt_err_t rt_device_close(rt_device_t dev)
{
    9498:	b510      	push	{r4, lr}
    949a:	1e04      	subs	r4, r0, #0
    rt_err_t result = RT_EOK;

    RT_ASSERT(dev != RT_NULL);
    949c:	d022      	beq.n	94e4 <rt_device_close+0x4c>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    949e:	0020      	movs	r0, r4
    94a0:	f001 fbc0 	bl	ac24 <rt_object_get_type>
    94a4:	2808      	cmp	r0, #8
    94a6:	d005      	beq.n	94b4 <rt_device_close+0x1c>
    94a8:	229b      	movs	r2, #155	; 0x9b
    94aa:	4913      	ldr	r1, [pc, #76]	; (94f8 <rt_device_close+0x60>)
    94ac:	4813      	ldr	r0, [pc, #76]	; (94fc <rt_device_close+0x64>)
    94ae:	0052      	lsls	r2, r2, #1
    94b0:	f000 ff42 	bl	a338 <rt_assert_handler>

    if (dev->ref_count == 0)
    94b4:	7ea3      	ldrb	r3, [r4, #26]
    94b6:	2b00      	cmp	r3, #0
    94b8:	d01b      	beq.n	94f2 <rt_device_close+0x5a>
        return -RT_ERROR;

    dev->ref_count--;
    94ba:	3b01      	subs	r3, #1
    94bc:	b2db      	uxtb	r3, r3
    94be:	76a3      	strb	r3, [r4, #26]

    if (dev->ref_count != 0)
    94c0:	2b00      	cmp	r3, #0
    94c2:	d10d      	bne.n	94e0 <rt_device_close+0x48>
        return RT_EOK;

    /* call device close interface */
    if (device_close != RT_NULL)
    94c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    94c6:	2b00      	cmp	r3, #0
    94c8:	d006      	beq.n	94d8 <rt_device_close+0x40>
    {
        result = device_close(dev);
    94ca:	0020      	movs	r0, r4
    94cc:	4798      	blx	r3
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
    94ce:	2800      	cmp	r0, #0
    94d0:	d002      	beq.n	94d8 <rt_device_close+0x40>
    94d2:	1d83      	adds	r3, r0, #6
    94d4:	d103      	bne.n	94de <rt_device_close+0x46>
    94d6:	e000      	b.n	94da <rt_device_close+0x42>
    rt_err_t result = RT_EOK;
    94d8:	2000      	movs	r0, #0
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
    94da:	2300      	movs	r3, #0
    94dc:	8323      	strh	r3, [r4, #24]

    return result;
}
    94de:	bd10      	pop	{r4, pc}
        return RT_EOK;
    94e0:	2000      	movs	r0, #0
    94e2:	e7fc      	b.n	94de <rt_device_close+0x46>
    RT_ASSERT(dev != RT_NULL);
    94e4:	2236      	movs	r2, #54	; 0x36
    94e6:	4904      	ldr	r1, [pc, #16]	; (94f8 <rt_device_close+0x60>)
    94e8:	4805      	ldr	r0, [pc, #20]	; (9500 <rt_device_close+0x68>)
    94ea:	32ff      	adds	r2, #255	; 0xff
    94ec:	f000 ff24 	bl	a338 <rt_assert_handler>
    94f0:	e7d5      	b.n	949e <rt_device_close+0x6>
        return -RT_ERROR;
    94f2:	2001      	movs	r0, #1
    94f4:	4240      	negs	r0, r0
    94f6:	e7f2      	b.n	94de <rt_device_close+0x46>
    94f8:	00014ee0 	.word	0x00014ee0
    94fc:	00014ddc 	.word	0x00014ddc
    9500:	00014dcc 	.word	0x00014dcc

00009504 <rt_device_read>:
 */
rt_size_t rt_device_read(rt_device_t dev,
                         rt_off_t    pos,
                         void       *buffer,
                         rt_size_t   size)
{
    9504:	b5f0      	push	{r4, r5, r6, r7, lr}
    9506:	46c6      	mov	lr, r8
    9508:	0004      	movs	r4, r0
    950a:	000d      	movs	r5, r1
    950c:	0016      	movs	r6, r2
    950e:	001f      	movs	r7, r3
    9510:	b500      	push	{lr}
    RT_ASSERT(dev != RT_NULL);
    9512:	2800      	cmp	r0, #0
    9514:	d025      	beq.n	9562 <rt_device_read+0x5e>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    9516:	0020      	movs	r0, r4
    9518:	f001 fb84 	bl	ac24 <rt_object_get_type>
    951c:	2808      	cmp	r0, #8
    951e:	d005      	beq.n	952c <rt_device_read+0x28>
    9520:	22b0      	movs	r2, #176	; 0xb0
    9522:	4913      	ldr	r1, [pc, #76]	; (9570 <rt_device_read+0x6c>)
    9524:	4813      	ldr	r0, [pc, #76]	; (9574 <rt_device_read+0x70>)
    9526:	0052      	lsls	r2, r2, #1
    9528:	f000 ff06 	bl	a338 <rt_assert_handler>

    if (dev->ref_count == 0)
    952c:	7ea3      	ldrb	r3, [r4, #26]
    952e:	2b00      	cmp	r3, #0
    9530:	d011      	beq.n	9556 <rt_device_read+0x52>
        rt_set_errno(-RT_ERROR);
        return 0;
    }

    /* call device read interface */
    if (device_read != RT_NULL)
    9532:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9534:	4698      	mov	r8, r3
    9536:	2b00      	cmp	r3, #0
    9538:	d007      	beq.n	954a <rt_device_read+0x46>
    {
        return device_read(dev, pos, buffer, size);
    953a:	003b      	movs	r3, r7
    953c:	0032      	movs	r2, r6
    953e:	0029      	movs	r1, r5
    9540:	0020      	movs	r0, r4
    9542:	47c0      	blx	r8

    /* set error code */
    rt_set_errno(-RT_ENOSYS);

    return 0;
}
    9544:	bc80      	pop	{r7}
    9546:	46b8      	mov	r8, r7
    9548:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_set_errno(-RT_ENOSYS);
    954a:	2006      	movs	r0, #6
    954c:	4240      	negs	r0, r0
    954e:	f000 fb7d 	bl	9c4c <rt_set_errno>
    return 0;
    9552:	2000      	movs	r0, #0
    9554:	e7f6      	b.n	9544 <rt_device_read+0x40>
        rt_set_errno(-RT_ERROR);
    9556:	2001      	movs	r0, #1
    9558:	4240      	negs	r0, r0
    955a:	f000 fb77 	bl	9c4c <rt_set_errno>
        return 0;
    955e:	2000      	movs	r0, #0
    9560:	e7f0      	b.n	9544 <rt_device_read+0x40>
    RT_ASSERT(dev != RT_NULL);
    9562:	2260      	movs	r2, #96	; 0x60
    9564:	4902      	ldr	r1, [pc, #8]	; (9570 <rt_device_read+0x6c>)
    9566:	4804      	ldr	r0, [pc, #16]	; (9578 <rt_device_read+0x74>)
    9568:	32ff      	adds	r2, #255	; 0xff
    956a:	f000 fee5 	bl	a338 <rt_assert_handler>
    956e:	e7d2      	b.n	9516 <rt_device_read+0x12>
    9570:	00014ed0 	.word	0x00014ed0
    9574:	00014ddc 	.word	0x00014ddc
    9578:	00014dcc 	.word	0x00014dcc

0000957c <rt_device_write>:
 */
rt_size_t rt_device_write(rt_device_t dev,
                          rt_off_t    pos,
                          const void *buffer,
                          rt_size_t   size)
{
    957c:	b5f0      	push	{r4, r5, r6, r7, lr}
    957e:	46c6      	mov	lr, r8
    9580:	0004      	movs	r4, r0
    9582:	000d      	movs	r5, r1
    9584:	0016      	movs	r6, r2
    9586:	001f      	movs	r7, r3
    9588:	b500      	push	{lr}
    RT_ASSERT(dev != RT_NULL);
    958a:	2800      	cmp	r0, #0
    958c:	d025      	beq.n	95da <rt_device_write+0x5e>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    958e:	0020      	movs	r0, r4
    9590:	f001 fb48 	bl	ac24 <rt_object_get_type>
    9594:	2808      	cmp	r0, #8
    9596:	d005      	beq.n	95a4 <rt_device_write+0x28>
    9598:	2288      	movs	r2, #136	; 0x88
    959a:	4913      	ldr	r1, [pc, #76]	; (95e8 <rt_device_write+0x6c>)
    959c:	4813      	ldr	r0, [pc, #76]	; (95ec <rt_device_write+0x70>)
    959e:	32ff      	adds	r2, #255	; 0xff
    95a0:	f000 feca 	bl	a338 <rt_assert_handler>

    if (dev->ref_count == 0)
    95a4:	7ea3      	ldrb	r3, [r4, #26]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d011      	beq.n	95ce <rt_device_write+0x52>
        rt_set_errno(-RT_ERROR);
        return 0;
    }

    /* call device write interface */
    if (device_write != RT_NULL)
    95aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    95ac:	4698      	mov	r8, r3
    95ae:	2b00      	cmp	r3, #0
    95b0:	d007      	beq.n	95c2 <rt_device_write+0x46>
    {
        return device_write(dev, pos, buffer, size);
    95b2:	003b      	movs	r3, r7
    95b4:	0032      	movs	r2, r6
    95b6:	0029      	movs	r1, r5
    95b8:	0020      	movs	r0, r4
    95ba:	47c0      	blx	r8

    /* set error code */
    rt_set_errno(-RT_ENOSYS);

    return 0;
}
    95bc:	bc80      	pop	{r7}
    95be:	46b8      	mov	r8, r7
    95c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_set_errno(-RT_ENOSYS);
    95c2:	2006      	movs	r0, #6
    95c4:	4240      	negs	r0, r0
    95c6:	f000 fb41 	bl	9c4c <rt_set_errno>
    return 0;
    95ca:	2000      	movs	r0, #0
    95cc:	e7f6      	b.n	95bc <rt_device_write+0x40>
        rt_set_errno(-RT_ERROR);
    95ce:	2001      	movs	r0, #1
    95d0:	4240      	negs	r0, r0
    95d2:	f000 fb3b 	bl	9c4c <rt_set_errno>
        return 0;
    95d6:	2000      	movs	r0, #0
    95d8:	e7f0      	b.n	95bc <rt_device_write+0x40>
    RT_ASSERT(dev != RT_NULL);
    95da:	22c3      	movs	r2, #195	; 0xc3
    95dc:	4902      	ldr	r1, [pc, #8]	; (95e8 <rt_device_write+0x6c>)
    95de:	4804      	ldr	r0, [pc, #16]	; (95f0 <rt_device_write+0x74>)
    95e0:	0052      	lsls	r2, r2, #1
    95e2:	f000 fea9 	bl	a338 <rt_assert_handler>
    95e6:	e7d2      	b.n	958e <rt_device_write+0x12>
    95e8:	00014ec0 	.word	0x00014ec0
    95ec:	00014ddc 	.word	0x00014ddc
    95f0:	00014dcc 	.word	0x00014dcc

000095f4 <rt_device_set_rx_indicate>:
 * @return RT_EOK
 */
rt_err_t
rt_device_set_rx_indicate(rt_device_t dev,
                          rt_err_t (*rx_ind)(rt_device_t dev, rt_size_t size))
{
    95f4:	b570      	push	{r4, r5, r6, lr}
    95f6:	0004      	movs	r4, r0
    95f8:	000d      	movs	r5, r1
    RT_ASSERT(dev != RT_NULL);
    95fa:	2800      	cmp	r0, #0
    95fc:	d00d      	beq.n	961a <rt_device_set_rx_indicate+0x26>
    RT_ASSERT(rt_object_get_type(&dev->parent) == RT_Object_Class_Device);
    95fe:	0020      	movs	r0, r4
    9600:	f001 fb10 	bl	ac24 <rt_object_get_type>
    9604:	2808      	cmp	r0, #8
    9606:	d005      	beq.n	9614 <rt_device_set_rx_indicate+0x20>
    9608:	22e1      	movs	r2, #225	; 0xe1
    960a:	4907      	ldr	r1, [pc, #28]	; (9628 <rt_device_set_rx_indicate+0x34>)
    960c:	4807      	ldr	r0, [pc, #28]	; (962c <rt_device_set_rx_indicate+0x38>)
    960e:	0052      	lsls	r2, r2, #1
    9610:	f000 fe92 	bl	a338 <rt_assert_handler>

    dev->rx_indicate = rx_ind;

    return RT_EOK;
}
    9614:	2000      	movs	r0, #0
    dev->rx_indicate = rx_ind;
    9616:	61e5      	str	r5, [r4, #28]
}
    9618:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(dev != RT_NULL);
    961a:	22c2      	movs	r2, #194	; 0xc2
    961c:	4902      	ldr	r1, [pc, #8]	; (9628 <rt_device_set_rx_indicate+0x34>)
    961e:	4804      	ldr	r0, [pc, #16]	; (9630 <rt_device_set_rx_indicate+0x3c>)
    9620:	32ff      	adds	r2, #255	; 0xff
    9622:	f000 fe89 	bl	a338 <rt_assert_handler>
    9626:	e7ea      	b.n	95fe <rt_device_set_rx_indicate+0xa>
    9628:	00014ea4 	.word	0x00014ea4
    962c:	00014ddc 	.word	0x00014ddc
    9630:	00014dcc 	.word	0x00014dcc

00009634 <rt_thread_idle_sethook>:
 *         -RT_EFULL: hook list is full
 *
 * @note the hook function must be simple and never be blocked or suspend.
 */
rt_err_t rt_thread_idle_sethook(void (*hook)(void))
{
    9634:	b570      	push	{r4, r5, r6, lr}
    9636:	0004      	movs	r4, r0
    rt_size_t i;
    rt_base_t level;
    rt_err_t ret = -RT_EFULL;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    9638:	f7fa fd3a 	bl	40b0 <rt_hw_interrupt_disable>

    for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
    963c:	4909      	ldr	r1, [pc, #36]	; (9664 <rt_thread_idle_sethook+0x30>)
    963e:	2300      	movs	r3, #0
    9640:	000a      	movs	r2, r1
    {
        if (idle_hook_list[i] == RT_NULL)
    9642:	6815      	ldr	r5, [r2, #0]
    9644:	2d00      	cmp	r5, #0
    9646:	d009      	beq.n	965c <rt_thread_idle_sethook+0x28>
    for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
    9648:	3301      	adds	r3, #1
    964a:	3204      	adds	r2, #4
    964c:	2b04      	cmp	r3, #4
    964e:	d1f8      	bne.n	9642 <rt_thread_idle_sethook+0xe>
    rt_err_t ret = -RT_EFULL;
    9650:	2403      	movs	r4, #3
    9652:	4264      	negs	r4, r4
            ret = RT_EOK;
            break;
        }
    }
    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    9654:	f7fa fd30 	bl	40b8 <rt_hw_interrupt_enable>

    return ret;
}
    9658:	0020      	movs	r0, r4
    965a:	bd70      	pop	{r4, r5, r6, pc}
            idle_hook_list[i] = hook;
    965c:	009b      	lsls	r3, r3, #2
    965e:	50cc      	str	r4, [r1, r3]
            ret = RT_EOK;
    9660:	2400      	movs	r4, #0
            break;
    9662:	e7f7      	b.n	9654 <rt_thread_idle_sethook+0x20>
    9664:	0001836c 	.word	0x0001836c

00009668 <rt_thread_idle_excute>:
 * @ingroup Thread
 *
 * This function will perform system background job when system idle.
 */
void rt_thread_idle_excute(void)
{
    9668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    966a:	46ce      	mov	lr, r9
    966c:	4647      	mov	r7, r8
    return l->next != l;
    966e:	4d2b      	ldr	r5, [pc, #172]	; (971c <rt_thread_idle_excute+0xb4>)
{
    9670:	b580      	push	{r7, lr}
    return l->next != l;
    9672:	682b      	ldr	r3, [r5, #0]
    /* Loop until there is no dead thread. So one call to rt_thread_idle_excute
     * will do all the cleanups. */
    while (_has_defunct_thread())
    9674:	42ab      	cmp	r3, r5
    9676:	d044      	beq.n	9702 <rt_thread_idle_excute+0x9a>
        rt_base_t lock;
        rt_thread_t thread;
#ifdef RT_USING_MODULE
        struct rt_dlmodule *module = RT_NULL;
#endif
        RT_DEBUG_NOT_IN_INTERRUPT;
    9678:	4b29      	ldr	r3, [pc, #164]	; (9720 <rt_thread_idle_excute+0xb8>)
    967a:	4f2a      	ldr	r7, [pc, #168]	; (9724 <rt_thread_idle_excute+0xbc>)
    967c:	4699      	mov	r9, r3
    967e:	4b2a      	ldr	r3, [pc, #168]	; (9728 <rt_thread_idle_excute+0xc0>)
    9680:	4698      	mov	r8, r3
    9682:	e02b      	b.n	96dc <rt_thread_idle_excute+0x74>
    9684:	0020      	movs	r0, r4
    9686:	f7fa fd17 	bl	40b8 <rt_hw_interrupt_enable>

        /* disable interrupt */
        lock = rt_hw_interrupt_disable();
    968a:	f7fa fd11 	bl	40b0 <rt_hw_interrupt_disable>
    return l->next != l;
    968e:	682b      	ldr	r3, [r5, #0]
        lock = rt_hw_interrupt_disable();
    9690:	0006      	movs	r6, r0

        /* re-check whether list is empty */
        if (_has_defunct_thread())
    9692:	42ab      	cmp	r3, r5
    9694:	d033      	beq.n	96fe <rt_thread_idle_excute+0x96>
        {
            /* get defunct thread */
            thread = rt_list_entry(rt_thread_defunct.next,
    9696:	682b      	ldr	r3, [r5, #0]
    9698:	001c      	movs	r4, r3
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
    n->next->prev = n->prev;
    969a:	6819      	ldr	r1, [r3, #0]
    969c:	685a      	ldr	r2, [r3, #4]
    969e:	3c14      	subs	r4, #20
    96a0:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    96a2:	6011      	str	r1, [r2, #0]

    n->next = n->prev = n;
    96a4:	605b      	str	r3, [r3, #4]
    96a6:	601b      	str	r3, [r3, #0]
#endif
            /* remove defunct thread */
            rt_list_remove(&(thread->tlist));

            /* lock scheduler to prevent scheduling in cleanup function. */
            rt_enter_critical();
    96a8:	f001 fbcc 	bl	ae44 <rt_enter_critical>

            /* invoke thread cleanup */
            if (thread->cleanup != RT_NULL)
    96ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    96ae:	2b00      	cmp	r3, #0
    96b0:	d001      	beq.n	96b6 <rt_thread_idle_excute+0x4e>
                thread->cleanup(thread);
    96b2:	0020      	movs	r0, r4
    96b4:	4798      	blx	r3
#ifdef RT_USING_SIGNALS
            rt_thread_free_sig(thread);
#endif

            /* if it's a system object, not delete it */
            if (rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE)
    96b6:	0020      	movs	r0, r4
    96b8:	f001 faa2 	bl	ac00 <rt_object_is_systemobject>
    96bc:	2801      	cmp	r0, #1
    96be:	d024      	beq.n	970a <rt_thread_idle_excute+0xa2>

                return;
            }

            /* unlock scheduler */
            rt_exit_critical();
    96c0:	f001 fbcc 	bl	ae5c <rt_exit_critical>
            /* may the defunct thread list is removed by others, just return */
            return;
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(lock);
    96c4:	0030      	movs	r0, r6
    96c6:	f7fa fcf7 	bl	40b8 <rt_hw_interrupt_enable>

#ifdef RT_USING_HEAP
        /* release thread's stack */
        RT_KERNEL_FREE(thread->stack_addr);
    96ca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    96cc:	f001 f97c 	bl	a9c8 <rt_free>
        /* delete thread object */
        rt_object_delete((rt_object_t)thread);
    96d0:	0020      	movs	r0, r4
    96d2:	f001 fa61 	bl	ab98 <rt_object_delete>
    return l->next != l;
    96d6:	682b      	ldr	r3, [r5, #0]
    while (_has_defunct_thread())
    96d8:	42ab      	cmp	r3, r5
    96da:	d012      	beq.n	9702 <rt_thread_idle_excute+0x9a>
        RT_DEBUG_NOT_IN_INTERRUPT;
    96dc:	f7fa fce8 	bl	40b0 <rt_hw_interrupt_disable>
    96e0:	0004      	movs	r4, r0
    96e2:	f000 f9ab 	bl	9a3c <rt_interrupt_get_nest>
    96e6:	2800      	cmp	r0, #0
    96e8:	d0cc      	beq.n	9684 <rt_thread_idle_excute+0x1c>
    96ea:	0039      	movs	r1, r7
    96ec:	4648      	mov	r0, r9
    96ee:	f000 fda5 	bl	a23c <rt_kprintf>
    96f2:	2299      	movs	r2, #153	; 0x99
    96f4:	0039      	movs	r1, r7
    96f6:	4640      	mov	r0, r8
    96f8:	f000 fe1e 	bl	a338 <rt_assert_handler>
    96fc:	e7c2      	b.n	9684 <rt_thread_idle_excute+0x1c>
            rt_hw_interrupt_enable(lock);
    96fe:	f7fa fcdb 	bl	40b8 <rt_hw_interrupt_enable>
#endif
    }
}
    9702:	bcc0      	pop	{r6, r7}
    9704:	46b9      	mov	r9, r7
    9706:	46b0      	mov	r8, r6
    9708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                rt_object_detach((rt_object_t)thread);
    970a:	0020      	movs	r0, r4
    970c:	f001 f9b4 	bl	aa78 <rt_object_detach>
                rt_exit_critical();
    9710:	f001 fba4 	bl	ae5c <rt_exit_critical>
                rt_hw_interrupt_enable(lock);
    9714:	0030      	movs	r0, r6
    9716:	f7fa fccf 	bl	40b8 <rt_hw_interrupt_enable>
                return;
    971a:	e7f2      	b.n	9702 <rt_thread_idle_excute+0x9a>
    971c:	0001857c 	.word	0x0001857c
    9720:	00014f10 	.word	0x00014f10
    9724:	00014f40 	.word	0x00014f40
    9728:	00015530 	.word	0x00015530

0000972c <rt_thread_idle_entry>:

static void rt_thread_idle_entry(void *parameter)
{
    972c:	b570      	push	{r4, r5, r6, lr}
    972e:	4e07      	ldr	r6, [pc, #28]	; (974c <rt_thread_idle_entry+0x20>)
    9730:	0035      	movs	r5, r6
    9732:	3510      	adds	r5, #16
    {

#ifdef RT_USING_IDLE_HOOK
        rt_size_t i;

        for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
    9734:	0034      	movs	r4, r6
        {
            if (idle_hook_list[i] != RT_NULL)
    9736:	6823      	ldr	r3, [r4, #0]
    9738:	2b00      	cmp	r3, #0
    973a:	d000      	beq.n	973e <rt_thread_idle_entry+0x12>
            {
                idle_hook_list[i]();
    973c:	4798      	blx	r3
        for (i = 0; i < RT_IDEL_HOOK_LIST_SIZE; i++)
    973e:	3404      	adds	r4, #4
    9740:	42ac      	cmp	r4, r5
    9742:	d1f8      	bne.n	9736 <rt_thread_idle_entry+0xa>
            }
        }
#endif

        rt_thread_idle_excute();
    9744:	f7ff ff90 	bl	9668 <rt_thread_idle_excute>
    {
    9748:	e7f4      	b.n	9734 <rt_thread_idle_entry+0x8>
    974a:	46c0      	nop			; (mov r8, r8)
    974c:	0001836c 	.word	0x0001836c

00009750 <rt_thread_idle_init>:
 * @note this function must be invoked when system init.
 */
void rt_thread_idle_init(void)
{
    /* initialize thread */
    rt_thread_init(&idle,
    9750:	2320      	movs	r3, #32
{
    9752:	b510      	push	{r4, lr}
    9754:	b084      	sub	sp, #16
    rt_thread_init(&idle,
    9756:	9303      	str	r3, [sp, #12]
    9758:	3b01      	subs	r3, #1
    975a:	9302      	str	r3, [sp, #8]
    975c:	33e1      	adds	r3, #225	; 0xe1
    975e:	4c07      	ldr	r4, [pc, #28]	; (977c <rt_thread_idle_init+0x2c>)
    9760:	9301      	str	r3, [sp, #4]
    9762:	4b07      	ldr	r3, [pc, #28]	; (9780 <rt_thread_idle_init+0x30>)
    9764:	4a07      	ldr	r2, [pc, #28]	; (9784 <rt_thread_idle_init+0x34>)
    9766:	4908      	ldr	r1, [pc, #32]	; (9788 <rt_thread_idle_init+0x38>)
    9768:	9300      	str	r3, [sp, #0]
    976a:	0020      	movs	r0, r4
    976c:	2300      	movs	r3, #0
    976e:	f001 fc47 	bl	b000 <rt_thread_init>
                   sizeof(rt_thread_stack),
                   RT_THREAD_PRIORITY_MAX - 1,
                   32);

    /* startup */
    rt_thread_startup(&idle);
    9772:	0020      	movs	r0, r4
    9774:	f001 fdaa 	bl	b2cc <rt_thread_startup>
}
    9778:	b004      	add	sp, #16
    977a:	bd10      	pop	{r4, pc}
    977c:	000182ec 	.word	0x000182ec
    9780:	0001837c 	.word	0x0001837c
    9784:	0000972d 	.word	0x0000972d
    9788:	00014f38 	.word	0x00014f38

0000978c <rt_sem_init>:
 */
rt_err_t rt_sem_init(rt_sem_t    sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
    978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    978e:	0004      	movs	r4, r0
    9790:	000f      	movs	r7, r1
    9792:	0016      	movs	r6, r2
    9794:	001d      	movs	r5, r3
    RT_ASSERT(sem != RT_NULL);
    9796:	2800      	cmp	r0, #0
    9798:	d00c      	beq.n	97b4 <rt_sem_init+0x28>

    /* init object */
    rt_object_init(&(sem->parent.parent), RT_Object_Class_Semaphore, name);
    979a:	003a      	movs	r2, r7
    979c:	0020      	movs	r0, r4
    979e:	2101      	movs	r1, #1
    97a0:	f001 f92a 	bl	a9f8 <rt_object_init>
    rt_list_init(&(ipc->suspend_thread));
    97a4:	0023      	movs	r3, r4
    97a6:	3314      	adds	r3, #20

    /* set parent */
    sem->parent.parent.flag = flag;

    return RT_EOK;
}
    97a8:	2000      	movs	r0, #0
    sem->value = value;
    97aa:	83a6      	strh	r6, [r4, #28]
    sem->parent.parent.flag = flag;
    97ac:	7265      	strb	r5, [r4, #9]
    l->next = l->prev = l;
    97ae:	61a3      	str	r3, [r4, #24]
    97b0:	6163      	str	r3, [r4, #20]
}
    97b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(sem != RT_NULL);
    97b4:	22ca      	movs	r2, #202	; 0xca
    97b6:	4902      	ldr	r1, [pc, #8]	; (97c0 <rt_sem_init+0x34>)
    97b8:	4802      	ldr	r0, [pc, #8]	; (97c4 <rt_sem_init+0x38>)
    97ba:	f000 fdbd 	bl	a338 <rt_assert_handler>
    97be:	e7ec      	b.n	979a <rt_sem_init+0xe>
    97c0:	00015034 	.word	0x00015034
    97c4:	00014f58 	.word	0x00014f58

000097c8 <rt_sem_take>:
 * @param time the waiting time
 *
 * @return the error code
 */
rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
    97c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ca:	46c6      	mov	lr, r8
    97cc:	b500      	push	{lr}
    97ce:	b082      	sub	sp, #8
    97d0:	1e04      	subs	r4, r0, #0
    97d2:	9101      	str	r1, [sp, #4]
    register rt_base_t temp;
    struct rt_thread *thread;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    97d4:	d100      	bne.n	97d8 <rt_sem_take+0x10>
    97d6:	e0a1      	b.n	991c <rt_sem_take+0x154>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
    97d8:	0020      	movs	r0, r4
    97da:	f001 fa23 	bl	ac24 <rt_object_get_type>
    97de:	2801      	cmp	r0, #1
    97e0:	d005      	beq.n	97ee <rt_sem_take+0x26>
    97e2:	2248      	movs	r2, #72	; 0x48
    97e4:	4959      	ldr	r1, [pc, #356]	; (994c <rt_sem_take+0x184>)
    97e6:	485a      	ldr	r0, [pc, #360]	; (9950 <rt_sem_take+0x188>)
    97e8:	32ff      	adds	r2, #255	; 0xff
    97ea:	f000 fda5 	bl	a338 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_trytake_hook, (&(sem->parent.parent)));
    97ee:	4b59      	ldr	r3, [pc, #356]	; (9954 <rt_sem_take+0x18c>)
    97f0:	681b      	ldr	r3, [r3, #0]
    97f2:	2b00      	cmp	r3, #0
    97f4:	d001      	beq.n	97fa <rt_sem_take+0x32>
    97f6:	0020      	movs	r0, r4
    97f8:	4798      	blx	r3

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    97fa:	f7fa fc59 	bl	40b0 <rt_hw_interrupt_disable>
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s take sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (sem->value > 0)
    97fe:	8ba3      	ldrh	r3, [r4, #28]
    temp = rt_hw_interrupt_disable();
    9800:	0006      	movs	r6, r0
    if (sem->value > 0)
    9802:	2b00      	cmp	r3, #0
    9804:	d000      	beq.n	9808 <rt_sem_take+0x40>
    9806:	e07f      	b.n	9908 <rt_sem_take+0x140>
        rt_hw_interrupt_enable(temp);
    }
    else
    {
        /* no waiting, return with timeout */
        if (time == 0)
    9808:	9b01      	ldr	r3, [sp, #4]
    980a:	2b00      	cmp	r3, #0
    980c:	d100      	bne.n	9810 <rt_sem_take+0x48>
    980e:	e098      	b.n	9942 <rt_sem_take+0x17a>
            return -RT_ETIMEOUT;
        }
        else
        {
            /* current context checking */
            RT_DEBUG_IN_THREAD_CONTEXT;
    9810:	f7fa fc4e 	bl	40b0 <rt_hw_interrupt_disable>
    9814:	0005      	movs	r5, r0
    9816:	f001 fc2d 	bl	b074 <rt_thread_self>
    981a:	2800      	cmp	r0, #0
    981c:	d100      	bne.n	9820 <rt_sem_take+0x58>
    981e:	e084      	b.n	992a <rt_sem_take+0x162>
    9820:	f7fa fc46 	bl	40b0 <rt_hw_interrupt_disable>
    9824:	0007      	movs	r7, r0
    9826:	f000 f909 	bl	9a3c <rt_interrupt_get_nest>
    982a:	2800      	cmp	r0, #0
    982c:	d15f      	bne.n	98ee <rt_sem_take+0x126>
    982e:	0038      	movs	r0, r7
    9830:	f7fa fc42 	bl	40b8 <rt_hw_interrupt_enable>
    9834:	0028      	movs	r0, r5
    9836:	f7fa fc3f 	bl	40b8 <rt_hw_interrupt_enable>

            /* semaphore is unavailable, push to suspend list */
            /* get current thread */
            thread = rt_thread_self();
    983a:	f001 fc1b 	bl	b074 <rt_thread_self>

            /* reset thread error number */
            thread->error = RT_EOK;
    983e:	2300      	movs	r3, #0
    9840:	6303      	str	r3, [r0, #48]	; 0x30

            RT_DEBUG_LOG(RT_DEBUG_IPC, ("sem take: suspend thread - %s\n",
                                        thread->name));

            /* suspend thread */
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
    9842:	7a63      	ldrb	r3, [r4, #9]
            thread = rt_thread_self();
    9844:	0005      	movs	r5, r0
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
    9846:	4698      	mov	r8, r3
    9848:	0027      	movs	r7, r4
    rt_thread_suspend(thread);
    984a:	f001 fc6f 	bl	b12c <rt_thread_suspend>
    switch (flag)
    984e:	4643      	mov	r3, r8
            rt_ipc_list_suspend(&(sem->parent.suspend_thread),
    9850:	3714      	adds	r7, #20
    switch (flag)
    9852:	2b00      	cmp	r3, #0
    9854:	d040      	beq.n	98d8 <rt_sem_take+0x110>
    9856:	2b01      	cmp	r3, #1
    9858:	d115      	bne.n	9886 <rt_sem_take+0xbe>
            for (n = list->next; n != list; n = n->next)
    985a:	6963      	ldr	r3, [r4, #20]
    985c:	429f      	cmp	r7, r3
    985e:	d03b      	beq.n	98d8 <rt_sem_take+0x110>
                if (thread->current_priority < sthread->current_priority)
    9860:	2235      	movs	r2, #53	; 0x35
    9862:	2135      	movs	r1, #53	; 0x35
    9864:	5ca8      	ldrb	r0, [r5, r2]
    9866:	e002      	b.n	986e <rt_sem_take+0xa6>
            for (n = list->next; n != list; n = n->next)
    9868:	681b      	ldr	r3, [r3, #0]
    986a:	429f      	cmp	r7, r3
    986c:	d034      	beq.n	98d8 <rt_sem_take+0x110>
                if (thread->current_priority < sthread->current_priority)
    986e:	001a      	movs	r2, r3
    9870:	3a14      	subs	r2, #20
    9872:	5c52      	ldrb	r2, [r2, r1]
    9874:	4282      	cmp	r2, r0
    9876:	d9f7      	bls.n	9868 <rt_sem_take+0xa0>
    l->prev->next = n;
    9878:	002a      	movs	r2, r5
    987a:	6859      	ldr	r1, [r3, #4]
    987c:	3214      	adds	r2, #20
    987e:	600a      	str	r2, [r1, #0]
    n->prev = l->prev;
    9880:	61a9      	str	r1, [r5, #24]
    l->prev = n;
    9882:	605a      	str	r2, [r3, #4]
    n->next = l;
    9884:	616b      	str	r3, [r5, #20]
                                thread,
                                sem->parent.parent.flag);

            /* has waiting time, start thread timer */
            if (time > 0)
    9886:	9b01      	ldr	r3, [sp, #4]
    9888:	2b00      	cmp	r3, #0
    988a:	dc12      	bgt.n	98b2 <rt_sem_take+0xea>
                                 &time);
                rt_timer_start(&(thread->thread_timer));
            }

            /* enable interrupt */
            rt_hw_interrupt_enable(temp);
    988c:	0030      	movs	r0, r6
    988e:	f7fa fc13 	bl	40b8 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
    9892:	f001 fa15 	bl	acc0 <rt_schedule>

            if (thread->error != RT_EOK)
    9896:	6b28      	ldr	r0, [r5, #48]	; 0x30
    9898:	2800      	cmp	r0, #0
    989a:	d106      	bne.n	98aa <rt_sem_take+0xe2>
                return thread->error;
            }
        }
    }

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
    989c:	4b2e      	ldr	r3, [pc, #184]	; (9958 <rt_sem_take+0x190>)
    989e:	681b      	ldr	r3, [r3, #0]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d039      	beq.n	9918 <rt_sem_take+0x150>
    98a4:	0020      	movs	r0, r4
    98a6:	4798      	blx	r3

    return RT_EOK;
    98a8:	2000      	movs	r0, #0
}
    98aa:	b002      	add	sp, #8
    98ac:	bc80      	pop	{r7}
    98ae:	46b8      	mov	r8, r7
    98b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rt_timer_control(&(thread->thread_timer),
    98b2:	002f      	movs	r7, r5
    98b4:	374c      	adds	r7, #76	; 0x4c
    98b6:	2100      	movs	r1, #0
    98b8:	aa01      	add	r2, sp, #4
    98ba:	0038      	movs	r0, r7
    98bc:	f001 fe62 	bl	b584 <rt_timer_control>
                rt_timer_start(&(thread->thread_timer));
    98c0:	0038      	movs	r0, r7
    98c2:	f001 fdad 	bl	b420 <rt_timer_start>
            rt_hw_interrupt_enable(temp);
    98c6:	0030      	movs	r0, r6
    98c8:	f7fa fbf6 	bl	40b8 <rt_hw_interrupt_enable>
            rt_schedule();
    98cc:	f001 f9f8 	bl	acc0 <rt_schedule>
            if (thread->error != RT_EOK)
    98d0:	6b28      	ldr	r0, [r5, #48]	; 0x30
    98d2:	2800      	cmp	r0, #0
    98d4:	d0e2      	beq.n	989c <rt_sem_take+0xd4>
    98d6:	e7e8      	b.n	98aa <rt_sem_take+0xe2>
    l->prev->next = n;
    98d8:	002b      	movs	r3, r5
    98da:	69a2      	ldr	r2, [r4, #24]
    98dc:	3314      	adds	r3, #20
    98de:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
    98e0:	61aa      	str	r2, [r5, #24]
    l->prev = n;
    98e2:	61a3      	str	r3, [r4, #24]
            if (time > 0)
    98e4:	9b01      	ldr	r3, [sp, #4]
    n->next = l;
    98e6:	616f      	str	r7, [r5, #20]
    98e8:	2b00      	cmp	r3, #0
    98ea:	ddcf      	ble.n	988c <rt_sem_take+0xc4>
    98ec:	e7e1      	b.n	98b2 <rt_sem_take+0xea>
            RT_DEBUG_IN_THREAD_CONTEXT;
    98ee:	4b17      	ldr	r3, [pc, #92]	; (994c <rt_sem_take+0x184>)
    98f0:	481a      	ldr	r0, [pc, #104]	; (995c <rt_sem_take+0x194>)
    98f2:	0019      	movs	r1, r3
    98f4:	4698      	mov	r8, r3
    98f6:	f000 fca1 	bl	a23c <rt_kprintf>
    98fa:	2268      	movs	r2, #104	; 0x68
    98fc:	4641      	mov	r1, r8
    98fe:	4818      	ldr	r0, [pc, #96]	; (9960 <rt_sem_take+0x198>)
    9900:	32ff      	adds	r2, #255	; 0xff
    9902:	f000 fd19 	bl	a338 <rt_assert_handler>
    9906:	e792      	b.n	982e <rt_sem_take+0x66>
        sem->value --;
    9908:	3b01      	subs	r3, #1
    990a:	83a3      	strh	r3, [r4, #28]
        rt_hw_interrupt_enable(temp);
    990c:	f7fa fbd4 	bl	40b8 <rt_hw_interrupt_enable>
    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(sem->parent.parent)));
    9910:	4b11      	ldr	r3, [pc, #68]	; (9958 <rt_sem_take+0x190>)
    9912:	681b      	ldr	r3, [r3, #0]
    9914:	2b00      	cmp	r3, #0
    9916:	d1c5      	bne.n	98a4 <rt_sem_take+0xdc>
    return RT_EOK;
    9918:	2000      	movs	r0, #0
    991a:	e7c6      	b.n	98aa <rt_sem_take+0xe2>
    RT_ASSERT(sem != RT_NULL);
    991c:	22a3      	movs	r2, #163	; 0xa3
    991e:	490b      	ldr	r1, [pc, #44]	; (994c <rt_sem_take+0x184>)
    9920:	4810      	ldr	r0, [pc, #64]	; (9964 <rt_sem_take+0x19c>)
    9922:	0052      	lsls	r2, r2, #1
    9924:	f000 fd08 	bl	a338 <rt_assert_handler>
    9928:	e756      	b.n	97d8 <rt_sem_take+0x10>
            RT_DEBUG_IN_THREAD_CONTEXT;
    992a:	4f08      	ldr	r7, [pc, #32]	; (994c <rt_sem_take+0x184>)
    992c:	480e      	ldr	r0, [pc, #56]	; (9968 <rt_sem_take+0x1a0>)
    992e:	0039      	movs	r1, r7
    9930:	f000 fc84 	bl	a23c <rt_kprintf>
    9934:	2268      	movs	r2, #104	; 0x68
    9936:	0039      	movs	r1, r7
    9938:	4809      	ldr	r0, [pc, #36]	; (9960 <rt_sem_take+0x198>)
    993a:	32ff      	adds	r2, #255	; 0xff
    993c:	f000 fcfc 	bl	a338 <rt_assert_handler>
    9940:	e76e      	b.n	9820 <rt_sem_take+0x58>
            rt_hw_interrupt_enable(temp);
    9942:	f7fa fbb9 	bl	40b8 <rt_hw_interrupt_enable>
            return -RT_ETIMEOUT;
    9946:	2002      	movs	r0, #2
    9948:	4240      	negs	r0, r0
    994a:	e7ae      	b.n	98aa <rt_sem_take+0xe2>
    994c:	00015028 	.word	0x00015028
    9950:	00014f68 	.word	0x00014f68
    9954:	00018568 	.word	0x00018568
    9958:	00018564 	.word	0x00018564
    995c:	00014f10 	.word	0x00014f10
    9960:	00015530 	.word	0x00015530
    9964:	00014f58 	.word	0x00014f58
    9968:	00014fe0 	.word	0x00014fe0

0000996c <rt_sem_release>:
 * @param sem the semaphore object
 *
 * @return the error code
 */
rt_err_t rt_sem_release(rt_sem_t sem)
{
    996c:	b570      	push	{r4, r5, r6, lr}
    996e:	1e04      	subs	r4, r0, #0
    register rt_base_t temp;
    register rt_bool_t need_schedule;

    /* parameter check */
    RT_ASSERT(sem != RT_NULL);
    9970:	d029      	beq.n	99c6 <rt_sem_release+0x5a>
    RT_ASSERT(rt_object_get_type(&sem->parent.parent) == RT_Object_Class_Semaphore);
    9972:	0020      	movs	r0, r4
    9974:	f001 f956 	bl	ac24 <rt_object_get_type>
    9978:	2801      	cmp	r0, #1
    997a:	d005      	beq.n	9988 <rt_sem_release+0x1c>
    997c:	22da      	movs	r2, #218	; 0xda
    997e:	4915      	ldr	r1, [pc, #84]	; (99d4 <rt_sem_release+0x68>)
    9980:	4815      	ldr	r0, [pc, #84]	; (99d8 <rt_sem_release+0x6c>)
    9982:	0052      	lsls	r2, r2, #1
    9984:	f000 fcd8 	bl	a338 <rt_assert_handler>

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(sem->parent.parent)));
    9988:	4b14      	ldr	r3, [pc, #80]	; (99dc <rt_sem_release+0x70>)
    998a:	681b      	ldr	r3, [r3, #0]
    998c:	2b00      	cmp	r3, #0
    998e:	d001      	beq.n	9994 <rt_sem_release+0x28>
    9990:	0020      	movs	r0, r4
    9992:	4798      	blx	r3

    need_schedule = RT_FALSE;

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    9994:	f7fa fb8c 	bl	40b0 <rt_hw_interrupt_disable>
    RT_DEBUG_LOG(RT_DEBUG_IPC, ("thread %s releases sem:%s, which value is: %d\n",
                                rt_thread_self()->name,
                                ((struct rt_object *)sem)->name,
                                sem->value));

    if (!rt_list_isempty(&sem->parent.suspend_thread))
    9998:	0023      	movs	r3, r4
    temp = rt_hw_interrupt_disable();
    999a:	0005      	movs	r5, r0
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
    return l->next == l;
    999c:	6960      	ldr	r0, [r4, #20]
    if (!rt_list_isempty(&sem->parent.suspend_thread))
    999e:	3314      	adds	r3, #20
    99a0:	4298      	cmp	r0, r3
    99a2:	d009      	beq.n	99b8 <rt_sem_release+0x4c>
    thread = rt_list_entry(list->next, struct rt_thread, tlist);
    99a4:	3814      	subs	r0, #20
    rt_thread_resume(thread);
    99a6:	f001 fc49 	bl	b23c <rt_thread_resume>
    }
    else
        sem->value ++; /* increase value */

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    99aa:	0028      	movs	r0, r5
    99ac:	f7fa fb84 	bl	40b8 <rt_hw_interrupt_enable>

    /* resume a thread, re-schedule */
    if (need_schedule == RT_TRUE)
        rt_schedule();
    99b0:	f001 f986 	bl	acc0 <rt_schedule>

    return RT_EOK;
}
    99b4:	2000      	movs	r0, #0
    99b6:	bd70      	pop	{r4, r5, r6, pc}
        sem->value ++; /* increase value */
    99b8:	8ba3      	ldrh	r3, [r4, #28]
    rt_hw_interrupt_enable(temp);
    99ba:	0028      	movs	r0, r5
        sem->value ++; /* increase value */
    99bc:	3301      	adds	r3, #1
    99be:	83a3      	strh	r3, [r4, #28]
    rt_hw_interrupt_enable(temp);
    99c0:	f7fa fb7a 	bl	40b8 <rt_hw_interrupt_enable>
    if (need_schedule == RT_TRUE)
    99c4:	e7f6      	b.n	99b4 <rt_sem_release+0x48>
    RT_ASSERT(sem != RT_NULL);
    99c6:	22b4      	movs	r2, #180	; 0xb4
    99c8:	4902      	ldr	r1, [pc, #8]	; (99d4 <rt_sem_release+0x68>)
    99ca:	4805      	ldr	r0, [pc, #20]	; (99e0 <rt_sem_release+0x74>)
    99cc:	32ff      	adds	r2, #255	; 0xff
    99ce:	f000 fcb3 	bl	a338 <rt_assert_handler>
    99d2:	e7ce      	b.n	9972 <rt_sem_release+0x6>
    99d4:	00015018 	.word	0x00015018
    99d8:	00014f68 	.word	0x00014f68
    99dc:	00018560 	.word	0x00018560
    99e0:	00014f58 	.word	0x00014f58

000099e4 <rt_interrupt_enter>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_leave
 */
void rt_interrupt_enter(void)
{
    99e4:	b510      	push	{r4, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
    99e6:	f7fa fb63 	bl	40b0 <rt_hw_interrupt_disable>
    rt_interrupt_nest ++;
    99ea:	4a07      	ldr	r2, [pc, #28]	; (9a08 <rt_interrupt_enter+0x24>)
    level = rt_hw_interrupt_disable();
    99ec:	0004      	movs	r4, r0
    rt_interrupt_nest ++;
    99ee:	7813      	ldrb	r3, [r2, #0]
    99f0:	3301      	adds	r3, #1
    99f2:	b2db      	uxtb	r3, r3
    99f4:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
    99f6:	4b05      	ldr	r3, [pc, #20]	; (9a0c <rt_interrupt_enter+0x28>)
    99f8:	681b      	ldr	r3, [r3, #0]
    99fa:	2b00      	cmp	r3, #0
    99fc:	d000      	beq.n	9a00 <rt_interrupt_enter+0x1c>
    99fe:	4798      	blx	r3
    rt_hw_interrupt_enable(level);
    9a00:	0020      	movs	r0, r4
    9a02:	f7fa fb59 	bl	40b8 <rt_hw_interrupt_enable>
}
    9a06:	bd10      	pop	{r4, pc}
    9a08:	00018484 	.word	0x00018484
    9a0c:	0001847c 	.word	0x0001847c

00009a10 <rt_interrupt_leave>:
 * @note please don't invoke this routine in application
 *
 * @see rt_interrupt_enter
 */
void rt_interrupt_leave(void)
{
    9a10:	b510      	push	{r4, lr}
    rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
                                rt_interrupt_nest));

    level = rt_hw_interrupt_disable();
    9a12:	f7fa fb4d 	bl	40b0 <rt_hw_interrupt_disable>
    rt_interrupt_nest --;
    9a16:	4a07      	ldr	r2, [pc, #28]	; (9a34 <rt_interrupt_leave+0x24>)
    level = rt_hw_interrupt_disable();
    9a18:	0004      	movs	r4, r0
    rt_interrupt_nest --;
    9a1a:	7813      	ldrb	r3, [r2, #0]
    9a1c:	3b01      	subs	r3, #1
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	7013      	strb	r3, [r2, #0]
    RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
    9a22:	4b05      	ldr	r3, [pc, #20]	; (9a38 <rt_interrupt_leave+0x28>)
    9a24:	681b      	ldr	r3, [r3, #0]
    9a26:	2b00      	cmp	r3, #0
    9a28:	d000      	beq.n	9a2c <rt_interrupt_leave+0x1c>
    9a2a:	4798      	blx	r3
    rt_hw_interrupt_enable(level);
    9a2c:	0020      	movs	r0, r4
    9a2e:	f7fa fb43 	bl	40b8 <rt_hw_interrupt_enable>
}
    9a32:	bd10      	pop	{r4, pc}
    9a34:	00018484 	.word	0x00018484
    9a38:	00018480 	.word	0x00018480

00009a3c <rt_interrupt_get_nest>:
 *
 * @return the number of nested interrupts.
 */
rt_uint8_t rt_interrupt_get_nest(void)
{
    return rt_interrupt_nest;
    9a3c:	4b01      	ldr	r3, [pc, #4]	; (9a44 <rt_interrupt_get_nest+0x8>)
    9a3e:	7818      	ldrb	r0, [r3, #0]
    9a40:	b2c0      	uxtb	r0, r0
}
    9a42:	4770      	bx	lr
    9a44:	00018484 	.word	0x00018484

00009a48 <print_number>:
                          long  num,
                          int   base,
                          int   s,
                          int   type)
#endif
{
    9a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a4a:	4657      	mov	r7, sl
    9a4c:	464e      	mov	r6, r9
    9a4e:	4645      	mov	r5, r8
    9a50:	46de      	mov	lr, fp
    9a52:	b5e0      	push	{r5, r6, r7, lr}
    9a54:	b089      	sub	sp, #36	; 0x24
    9a56:	469a      	mov	sl, r3
    9a58:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9a5a:	0004      	movs	r4, r0
    9a5c:	000d      	movs	r5, r1
    9a5e:	0016      	movs	r6, r2
    register int i;
    register int size;

    size = s;

    digits = (type & LARGE) ? large_digits : small_digits;
    9a60:	065a      	lsls	r2, r3, #25
    9a62:	d448      	bmi.n	9af6 <print_number+0xae>
    9a64:	4a77      	ldr	r2, [pc, #476]	; (9c44 <print_number+0x1fc>)
    9a66:	4693      	mov	fp, r2
    if (type & LEFT)
    9a68:	2210      	movs	r2, #16
    9a6a:	0011      	movs	r1, r2
    9a6c:	4019      	ands	r1, r3
    9a6e:	9101      	str	r1, [sp, #4]
    9a70:	421a      	tst	r2, r3
    9a72:	d048      	beq.n	9b06 <print_number+0xbe>
        type &= ~ZEROPAD;
    9a74:	3a0f      	subs	r2, #15
    9a76:	4393      	bics	r3, r2

    c = (type & ZEROPAD) ? '0' : ' ';
    9a78:	321f      	adds	r2, #31
        type &= ~ZEROPAD;
    9a7a:	9102      	str	r1, [sp, #8]
    c = (type & ZEROPAD) ? '0' : ' ';
    9a7c:	9203      	str	r2, [sp, #12]

    /* get sign */
    sign = 0;
    if (type & SIGN)
    9a7e:	079a      	lsls	r2, r3, #30
    9a80:	d54b      	bpl.n	9b1a <print_number+0xd2>
    {
        if (num < 0)
    9a82:	2e00      	cmp	r6, #0
    9a84:	da00      	bge.n	9a88 <print_number+0x40>
    9a86:	e0c7      	b.n	9c18 <print_number+0x1d0>
        {
            sign = '-';
            num = -num;
        }
        else if (type & PLUS)
            sign = '+';
    9a88:	222b      	movs	r2, #43	; 0x2b
    9a8a:	9200      	str	r2, [sp, #0]
        else if (type & PLUS)
    9a8c:	075a      	lsls	r2, r3, #29
    9a8e:	d446      	bmi.n	9b1e <print_number+0xd6>
        else if (type & SPACE)
    9a90:	071b      	lsls	r3, r3, #28
            sign = ' ';
    9a92:	0fdb      	lsrs	r3, r3, #31
    9a94:	015b      	lsls	r3, r3, #5
    9a96:	9300      	str	r3, [sp, #0]
            size--;
    }
#endif

    i = 0;
    if (num == 0)
    9a98:	2e00      	cmp	r6, #0
    9a9a:	d042      	beq.n	9b22 <print_number+0xda>
    i = 0;
    9a9c:	2300      	movs	r3, #0
    9a9e:	4699      	mov	r9, r3
    9aa0:	ab04      	add	r3, sp, #16
    9aa2:	1e5f      	subs	r7, r3, #1
    9aa4:	002b      	movs	r3, r5
    9aa6:	46a0      	mov	r8, r4
    9aa8:	464d      	mov	r5, r9
    9aaa:	0034      	movs	r4, r6
    9aac:	4699      	mov	r9, r3
    9aae:	e009      	b.n	9ac4 <print_number+0x7c>
        tmp[i++] = '0';
    else
    {
        while (num != 0)
            tmp[i++] = digits[divide(&num, base)];
    9ab0:	260f      	movs	r6, #15
    9ab2:	4659      	mov	r1, fp
    9ab4:	4026      	ands	r6, r4
    9ab6:	5d89      	ldrb	r1, [r1, r6]
    9ab8:	1c6b      	adds	r3, r5, #1
    9aba:	001a      	movs	r2, r3
    9abc:	0924      	lsrs	r4, r4, #4
    9abe:	54f9      	strb	r1, [r7, r3]
        while (num != 0)
    9ac0:	d014      	beq.n	9aec <print_number+0xa4>
            tmp[i++] = digits[divide(&num, base)];
    9ac2:	001d      	movs	r5, r3
    if (base == 10)
    9ac4:	4653      	mov	r3, sl
    9ac6:	2b0a      	cmp	r3, #10
    9ac8:	d1f2      	bne.n	9ab0 <print_number+0x68>
        res = ((rt_uint32_t) * n) % 10U;
    9aca:	0020      	movs	r0, r4
    9acc:	210a      	movs	r1, #10
    9ace:	f7fa fc45 	bl	435c <__aeabi_uidivmod>
        *n = ((rt_uint32_t) * n) / 10U;
    9ad2:	0020      	movs	r0, r4
        res = ((rt_uint32_t) * n) % 10U;
    9ad4:	000e      	movs	r6, r1
        *n = ((rt_uint32_t) * n) / 10U;
    9ad6:	210a      	movs	r1, #10
    9ad8:	f7fa fbba 	bl	4250 <__udivsi3>
            tmp[i++] = digits[divide(&num, base)];
    9adc:	4659      	mov	r1, fp
    9ade:	5d89      	ldrb	r1, [r1, r6]
    9ae0:	1c6b      	adds	r3, r5, #1
        *n = ((rt_uint32_t) * n) / 10U;
    9ae2:	0004      	movs	r4, r0
            tmp[i++] = digits[divide(&num, base)];
    9ae4:	001a      	movs	r2, r3
    9ae6:	54f9      	strb	r1, [r7, r3]
        while (num != 0)
    9ae8:	2c00      	cmp	r4, #0
    9aea:	d1ea      	bne.n	9ac2 <print_number+0x7a>
    9aec:	464b      	mov	r3, r9
    9aee:	4644      	mov	r4, r8
    9af0:	46a9      	mov	r9, r5
    9af2:	001d      	movs	r5, r3
    9af4:	e01b      	b.n	9b2e <print_number+0xe6>
    digits = (type & LARGE) ? large_digits : small_digits;
    9af6:	4a54      	ldr	r2, [pc, #336]	; (9c48 <print_number+0x200>)
    9af8:	4693      	mov	fp, r2
    if (type & LEFT)
    9afa:	2210      	movs	r2, #16
    9afc:	0011      	movs	r1, r2
    9afe:	4019      	ands	r1, r3
    9b00:	9101      	str	r1, [sp, #4]
    9b02:	421a      	tst	r2, r3
    9b04:	d1b6      	bne.n	9a74 <print_number+0x2c>
    size -= precision;
#else
    size -= i;
#endif

    if (!(type & (ZEROPAD | LEFT)))
    9b06:	2211      	movs	r2, #17
    9b08:	401a      	ands	r2, r3
    9b0a:	9202      	str	r2, [sp, #8]
    c = (type & ZEROPAD) ? '0' : ' ';
    9b0c:	07da      	lsls	r2, r3, #31
    9b0e:	d400      	bmi.n	9b12 <print_number+0xca>
    9b10:	e094      	b.n	9c3c <print_number+0x1f4>
    9b12:	2230      	movs	r2, #48	; 0x30
    9b14:	9203      	str	r2, [sp, #12]
    if (type & SIGN)
    9b16:	079a      	lsls	r2, r3, #30
    9b18:	d4b3      	bmi.n	9a82 <print_number+0x3a>
    sign = 0;
    9b1a:	2300      	movs	r3, #0
    9b1c:	9300      	str	r3, [sp, #0]
    if (num == 0)
    9b1e:	2e00      	cmp	r6, #0
    9b20:	d1bc      	bne.n	9a9c <print_number+0x54>
        tmp[i++] = '0';
    9b22:	2330      	movs	r3, #48	; 0x30
    9b24:	aa04      	add	r2, sp, #16
    9b26:	7013      	strb	r3, [r2, #0]
    9b28:	2300      	movs	r3, #0
    9b2a:	2201      	movs	r2, #1
    9b2c:	4699      	mov	r9, r3
    if (i > precision)
    9b2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9b30:	0016      	movs	r6, r2
    9b32:	429a      	cmp	r2, r3
    9b34:	da00      	bge.n	9b38 <print_number+0xf0>
    9b36:	001e      	movs	r6, r3
    size -= precision;
    9b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b3a:	1b98      	subs	r0, r3, r6
    if (!(type & (ZEROPAD | LEFT)))
    9b3c:	9b02      	ldr	r3, [sp, #8]
    9b3e:	2b00      	cmp	r3, #0
    9b40:	d11c      	bne.n	9b7c <print_number+0x134>
    {
        if ((sign) && (size > 0))
    9b42:	9b00      	ldr	r3, [sp, #0]
    9b44:	2b00      	cmp	r3, #0
    9b46:	d15d      	bne.n	9c04 <print_number+0x1bc>
            size--;

        while (size-- > 0)
    9b48:	1e43      	subs	r3, r0, #1
    9b4a:	469c      	mov	ip, r3
    9b4c:	2800      	cmp	r0, #0
    9b4e:	dc00      	bgt.n	9b52 <print_number+0x10a>
    9b50:	e072      	b.n	9c38 <print_number+0x1f0>
    9b52:	1c61      	adds	r1, r4, #1
    9b54:	4461      	add	r1, ip
        tmp[i++] = '0';
    9b56:	0023      	movs	r3, r4
        {
            if (buf <= end)
                *buf = ' ';
    9b58:	2020      	movs	r0, #32
    9b5a:	000f      	movs	r7, r1
            if (buf <= end)
    9b5c:	429d      	cmp	r5, r3
    9b5e:	d300      	bcc.n	9b62 <print_number+0x11a>
                *buf = ' ';
    9b60:	7018      	strb	r0, [r3, #0]
            ++ buf;
    9b62:	3301      	adds	r3, #1
        while (size-- > 0)
    9b64:	1af9      	subs	r1, r7, r3
    9b66:	2900      	cmp	r1, #0
    9b68:	dcf8      	bgt.n	9b5c <print_number+0x114>
    9b6a:	4663      	mov	r3, ip
    9b6c:	43d8      	mvns	r0, r3
    9b6e:	17c0      	asrs	r0, r0, #31
    9b70:	4018      	ands	r0, r3
            ++ buf;
    9b72:	1c43      	adds	r3, r0, #1
    9b74:	18e4      	adds	r4, r4, r3
    9b76:	4663      	mov	r3, ip
    9b78:	1e5f      	subs	r7, r3, #1
        while (size-- > 0)
    9b7a:	1a38      	subs	r0, r7, r0
        }
    }

    if (sign)
    9b7c:	9b00      	ldr	r3, [sp, #0]
    9b7e:	2b00      	cmp	r3, #0
    9b80:	d143      	bne.n	9c0a <print_number+0x1c2>
        }
    }
#endif

    /* no align to the left */
    if (!(type & LEFT))
    9b82:	9b01      	ldr	r3, [sp, #4]
    9b84:	2b00      	cmp	r3, #0
    9b86:	d10c      	bne.n	9ba2 <print_number+0x15a>
    {
        while (size-- > 0)
    9b88:	1e43      	subs	r3, r0, #1
    9b8a:	2800      	cmp	r0, #0
    9b8c:	dd4e      	ble.n	9c2c <print_number+0x1e4>
    9b8e:	9b03      	ldr	r3, [sp, #12]
    9b90:	1820      	adds	r0, r4, r0
        {
            if (buf <= end)
    9b92:	42a5      	cmp	r5, r4
    9b94:	d300      	bcc.n	9b98 <print_number+0x150>
                *buf = c;
    9b96:	7023      	strb	r3, [r4, #0]
            ++ buf;
    9b98:	3401      	adds	r4, #1
        while (size-- > 0)
    9b9a:	4284      	cmp	r4, r0
    9b9c:	d1f9      	bne.n	9b92 <print_number+0x14a>
    9b9e:	2001      	movs	r0, #1
    9ba0:	4240      	negs	r0, r0
        }
    }

#ifdef RT_PRINTF_PRECISION
    while (i < precision--)
    9ba2:	1ab3      	subs	r3, r6, r2
    {
        if (buf <= end)
            *buf = '0';
    9ba4:	2130      	movs	r1, #48	; 0x30
    9ba6:	18e3      	adds	r3, r4, r3
    while (i < precision--)
    9ba8:	42b2      	cmp	r2, r6
    9baa:	da43      	bge.n	9c34 <print_number+0x1ec>
        if (buf <= end)
    9bac:	42a5      	cmp	r5, r4
    9bae:	d300      	bcc.n	9bb2 <print_number+0x16a>
            *buf = '0';
    9bb0:	7021      	strb	r1, [r4, #0]
        ++ buf;
    9bb2:	3401      	adds	r4, #1
    while (i < precision--)
    9bb4:	429c      	cmp	r4, r3
    9bb6:	d1f9      	bne.n	9bac <print_number+0x164>
    }
#endif

    /* put number in the temporary buffer */
    while (i-- > 0 && (precision_bak != 0))
    9bb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9bba:	2a00      	cmp	r2, #0
    9bbc:	d011      	beq.n	9be2 <print_number+0x19a>
    9bbe:	aa04      	add	r2, sp, #16
    9bc0:	464f      	mov	r7, r9
    9bc2:	4694      	mov	ip, r2
    9bc4:	4649      	mov	r1, r9
    9bc6:	001a      	movs	r2, r3
    9bc8:	3701      	adds	r7, #1
    9bca:	4461      	add	r1, ip
    9bcc:	19de      	adds	r6, r3, r7
    {
        if (buf <= end)
    9bce:	4295      	cmp	r5, r2
    9bd0:	d301      	bcc.n	9bd6 <print_number+0x18e>
            *buf = tmp[i];
    9bd2:	780c      	ldrb	r4, [r1, #0]
    9bd4:	7014      	strb	r4, [r2, #0]
        ++ buf;
    9bd6:	3201      	adds	r2, #1
    while (i-- > 0 && (precision_bak != 0))
    9bd8:	3901      	subs	r1, #1
    9bda:	1ab4      	subs	r4, r6, r2
    9bdc:	2c00      	cmp	r4, #0
    9bde:	dcf6      	bgt.n	9bce <print_number+0x186>
        ++ buf;
    9be0:	19db      	adds	r3, r3, r7
    }

    while (size-- > 0)
    9be2:	2800      	cmp	r0, #0
    9be4:	dd24      	ble.n	9c30 <print_number+0x1e8>
    {
        if (buf <= end)
            *buf = ' ';
    9be6:	2220      	movs	r2, #32
    9be8:	1818      	adds	r0, r3, r0
        if (buf <= end)
    9bea:	429d      	cmp	r5, r3
    9bec:	d300      	bcc.n	9bf0 <print_number+0x1a8>
            *buf = ' ';
    9bee:	701a      	strb	r2, [r3, #0]
        ++ buf;
    9bf0:	3301      	adds	r3, #1
    while (size-- > 0)
    9bf2:	4298      	cmp	r0, r3
    9bf4:	d1f9      	bne.n	9bea <print_number+0x1a2>
    }

    return buf;
}
    9bf6:	b009      	add	sp, #36	; 0x24
    9bf8:	bcf0      	pop	{r4, r5, r6, r7}
    9bfa:	46bb      	mov	fp, r7
    9bfc:	46b2      	mov	sl, r6
    9bfe:	46a9      	mov	r9, r5
    9c00:	46a0      	mov	r8, r4
    9c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((sign) && (size > 0))
    9c04:	2800      	cmp	r0, #0
    9c06:	dc0b      	bgt.n	9c20 <print_number+0x1d8>
        while (size-- > 0)
    9c08:	3801      	subs	r0, #1
        if (buf <= end)
    9c0a:	42ac      	cmp	r4, r5
    9c0c:	d802      	bhi.n	9c14 <print_number+0x1cc>
            *buf = sign;
    9c0e:	9b00      	ldr	r3, [sp, #0]
            -- size;
    9c10:	3801      	subs	r0, #1
            *buf = sign;
    9c12:	7023      	strb	r3, [r4, #0]
        ++ buf;
    9c14:	3401      	adds	r4, #1
    9c16:	e7b4      	b.n	9b82 <print_number+0x13a>
            sign = '-';
    9c18:	232d      	movs	r3, #45	; 0x2d
            num = -num;
    9c1a:	4276      	negs	r6, r6
            sign = '-';
    9c1c:	9300      	str	r3, [sp, #0]
    9c1e:	e73d      	b.n	9a9c <print_number+0x54>
        while (size-- > 0)
    9c20:	1e83      	subs	r3, r0, #2
    9c22:	469c      	mov	ip, r3
    9c24:	2801      	cmp	r0, #1
    9c26:	d194      	bne.n	9b52 <print_number+0x10a>
    9c28:	0018      	movs	r0, r3
    9c2a:	e7ee      	b.n	9c0a <print_number+0x1c2>
        while (size-- > 0)
    9c2c:	0018      	movs	r0, r3
    9c2e:	e7b8      	b.n	9ba2 <print_number+0x15a>
    while (size-- > 0)
    9c30:	0018      	movs	r0, r3
    return buf;
    9c32:	e7e0      	b.n	9bf6 <print_number+0x1ae>
    while (i < precision--)
    9c34:	0023      	movs	r3, r4
    9c36:	e7bf      	b.n	9bb8 <print_number+0x170>
        while (size-- > 0)
    9c38:	0018      	movs	r0, r3
    9c3a:	e7a2      	b.n	9b82 <print_number+0x13a>
    c = (type & ZEROPAD) ? '0' : ' ';
    9c3c:	2220      	movs	r2, #32
    9c3e:	9203      	str	r2, [sp, #12]
    9c40:	e71d      	b.n	9a7e <print_number+0x36>
    9c42:	46c0      	nop			; (mov r8, r8)
    9c44:	000152a0 	.word	0x000152a0
    9c48:	0001528c 	.word	0x0001528c

00009c4c <rt_set_errno>:
{
    9c4c:	b510      	push	{r4, lr}
    9c4e:	0004      	movs	r4, r0
    if (rt_interrupt_get_nest() != 0)
    9c50:	f7ff fef4 	bl	9a3c <rt_interrupt_get_nest>
    9c54:	2800      	cmp	r0, #0
    9c56:	d002      	beq.n	9c5e <rt_set_errno+0x12>
        __rt_errno = error;
    9c58:	4b04      	ldr	r3, [pc, #16]	; (9c6c <rt_set_errno+0x20>)
    9c5a:	601c      	str	r4, [r3, #0]
}
    9c5c:	bd10      	pop	{r4, pc}
    tid = rt_thread_self();
    9c5e:	f001 fa09 	bl	b074 <rt_thread_self>
    if (tid == RT_NULL)
    9c62:	2800      	cmp	r0, #0
    9c64:	d0f8      	beq.n	9c58 <rt_set_errno+0xc>
    tid->error = error;
    9c66:	6304      	str	r4, [r0, #48]	; 0x30
    9c68:	e7f8      	b.n	9c5c <rt_set_errno+0x10>
    9c6a:	46c0      	nop			; (mov r8, r8)
    9c6c:	00018488 	.word	0x00018488

00009c70 <rt_memset>:
{
    9c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c72:	0005      	movs	r5, r0
    if (!TOO_SMALL(count) && !UNALIGNED(s))
    9c74:	2a03      	cmp	r2, #3
    9c76:	d930      	bls.n	9cda <rt_memset+0x6a>
    9c78:	0003      	movs	r3, r0
    9c7a:	07a8      	lsls	r0, r5, #30
    9c7c:	d137      	bne.n	9cee <rt_memset+0x7e>
    rt_uint32_t d = c & 0xff;
    9c7e:	20ff      	movs	r0, #255	; 0xff
    9c80:	4008      	ands	r0, r1
            buffer = (d << 8) | d;
    9c82:	0204      	lsls	r4, r0, #8
    9c84:	4304      	orrs	r4, r0
            buffer |= (buffer << 16);
    9c86:	0420      	lsls	r0, r4, #16
    9c88:	4304      	orrs	r4, r0
        while (count >= LBLOCKSIZE * 4)
    9c8a:	2a0f      	cmp	r2, #15
    9c8c:	d932      	bls.n	9cf4 <rt_memset+0x84>
    9c8e:	0017      	movs	r7, r2
    9c90:	3f10      	subs	r7, #16
    9c92:	093f      	lsrs	r7, r7, #4
    9c94:	013e      	lsls	r6, r7, #4
    9c96:	1976      	adds	r6, r6, r5
            *aligned_addr++ = buffer;
    9c98:	0018      	movs	r0, r3
    9c9a:	601c      	str	r4, [r3, #0]
            *aligned_addr++ = buffer;
    9c9c:	605c      	str	r4, [r3, #4]
            *aligned_addr++ = buffer;
    9c9e:	609c      	str	r4, [r3, #8]
            *aligned_addr++ = buffer;
    9ca0:	60dc      	str	r4, [r3, #12]
        while (count >= LBLOCKSIZE * 4)
    9ca2:	3310      	adds	r3, #16
    9ca4:	42b0      	cmp	r0, r6
    9ca6:	d1f7      	bne.n	9c98 <rt_memset+0x28>
            *aligned_addr++ = buffer;
    9ca8:	3701      	adds	r7, #1
    9caa:	0138      	lsls	r0, r7, #4
            count -= 4 * LBLOCKSIZE;
    9cac:	270f      	movs	r7, #15
        while (count >= LBLOCKSIZE)
    9cae:	230c      	movs	r3, #12
            count -= 4 * LBLOCKSIZE;
    9cb0:	4017      	ands	r7, r2
        while (count >= LBLOCKSIZE)
    9cb2:	4013      	ands	r3, r2
            *aligned_addr++ = buffer;
    9cb4:	1828      	adds	r0, r5, r0
        while (count >= LBLOCKSIZE)
    9cb6:	003a      	movs	r2, r7
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d00e      	beq.n	9cda <rt_memset+0x6a>
    9cbc:	1f3e      	subs	r6, r7, #4
    9cbe:	08b6      	lsrs	r6, r6, #2
    9cc0:	00b2      	lsls	r2, r6, #2
    9cc2:	4694      	mov	ip, r2
    9cc4:	0003      	movs	r3, r0
    9cc6:	1d02      	adds	r2, r0, #4
    9cc8:	4462      	add	r2, ip
            *aligned_addr++ = buffer;
    9cca:	c310      	stmia	r3!, {r4}
        while (count >= LBLOCKSIZE)
    9ccc:	4293      	cmp	r3, r2
    9cce:	d1fc      	bne.n	9cca <rt_memset+0x5a>
            count -= LBLOCKSIZE;
    9cd0:	2203      	movs	r2, #3
            *aligned_addr++ = buffer;
    9cd2:	3601      	adds	r6, #1
    9cd4:	00b6      	lsls	r6, r6, #2
    9cd6:	1980      	adds	r0, r0, r6
            count -= LBLOCKSIZE;
    9cd8:	403a      	ands	r2, r7
    while (count--)
    9cda:	1e53      	subs	r3, r2, #1
    9cdc:	2a00      	cmp	r2, #0
    9cde:	d004      	beq.n	9cea <rt_memset+0x7a>
        *m++ = (char)d;
    9ce0:	1c5a      	adds	r2, r3, #1
    9ce2:	23ff      	movs	r3, #255	; 0xff
    9ce4:	4019      	ands	r1, r3
    9ce6:	f004 ff7d 	bl	ebe4 <memset>
}
    9cea:	0028      	movs	r0, r5
    9cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    char *m = (char *)s;
    9cee:	0028      	movs	r0, r5
    while (count--)
    9cf0:	1e53      	subs	r3, r2, #1
    9cf2:	e7f5      	b.n	9ce0 <rt_memset+0x70>
        aligned_addr = (rt_uint32_t *)s;
    9cf4:	0028      	movs	r0, r5
        while (count >= LBLOCKSIZE * 4)
    9cf6:	0017      	movs	r7, r2
    9cf8:	e7e0      	b.n	9cbc <rt_memset+0x4c>
    9cfa:	46c0      	nop			; (mov r8, r8)

00009cfc <rt_memcpy>:
{
    9cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cfe:	46ce      	mov	lr, r9
    9d00:	4647      	mov	r7, r8
    int len = count;
    9d02:	4694      	mov	ip, r2
    char *dst_ptr = (char *)dst;
    9d04:	0005      	movs	r5, r0
{
    9d06:	b580      	push	{r7, lr}
    if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
    9d08:	2a0f      	cmp	r2, #15
    9d0a:	d93c      	bls.n	9d86 <rt_memcpy+0x8a>
    9d0c:	2403      	movs	r4, #3
    9d0e:	46a0      	mov	r8, r4
    9d10:	000c      	movs	r4, r1
    9d12:	4647      	mov	r7, r8
    9d14:	4304      	orrs	r4, r0
    9d16:	4027      	ands	r7, r4
    9d18:	46b9      	mov	r9, r7
    9d1a:	4647      	mov	r7, r8
    9d1c:	000e      	movs	r6, r1
    9d1e:	0003      	movs	r3, r0
    9d20:	4227      	tst	r7, r4
    9d22:	d130      	bne.n	9d86 <rt_memcpy+0x8a>
    9d24:	0014      	movs	r4, r2
    9d26:	3c10      	subs	r4, #16
    9d28:	0924      	lsrs	r4, r4, #4
    9d2a:	46a0      	mov	r8, r4
    9d2c:	0125      	lsls	r5, r4, #4
    9d2e:	182f      	adds	r7, r5, r0
            *aligned_dst++ = *aligned_src++;
    9d30:	6835      	ldr	r5, [r6, #0]
    9d32:	001c      	movs	r4, r3
    9d34:	601d      	str	r5, [r3, #0]
            *aligned_dst++ = *aligned_src++;
    9d36:	6875      	ldr	r5, [r6, #4]
    9d38:	605d      	str	r5, [r3, #4]
            *aligned_dst++ = *aligned_src++;
    9d3a:	68b5      	ldr	r5, [r6, #8]
    9d3c:	609d      	str	r5, [r3, #8]
            *aligned_dst++ = *aligned_src++;
    9d3e:	68f5      	ldr	r5, [r6, #12]
        while (len >= BIGBLOCKSIZE)
    9d40:	3610      	adds	r6, #16
            *aligned_dst++ = *aligned_src++;
    9d42:	60dd      	str	r5, [r3, #12]
        while (len >= BIGBLOCKSIZE)
    9d44:	3310      	adds	r3, #16
    9d46:	42bc      	cmp	r4, r7
    9d48:	d1f2      	bne.n	9d30 <rt_memcpy+0x34>
    9d4a:	4646      	mov	r6, r8
            len -= BIGBLOCKSIZE;
    9d4c:	230f      	movs	r3, #15
    9d4e:	3601      	adds	r6, #1
    9d50:	0135      	lsls	r5, r6, #4
        while (len >= LITTLEBLOCKSIZE)
    9d52:	240c      	movs	r4, #12
    9d54:	4666      	mov	r6, ip
            len -= BIGBLOCKSIZE;
    9d56:	4013      	ands	r3, r2
            *aligned_dst++ = *aligned_src++;
    9d58:	1949      	adds	r1, r1, r5
            len -= BIGBLOCKSIZE;
    9d5a:	001a      	movs	r2, r3
            *aligned_dst++ = *aligned_src++;
    9d5c:	1945      	adds	r5, r0, r5
        while (len >= LITTLEBLOCKSIZE)
    9d5e:	4234      	tst	r4, r6
    9d60:	d011      	beq.n	9d86 <rt_memcpy+0x8a>
    9d62:	3a04      	subs	r2, #4
    9d64:	0892      	lsrs	r2, r2, #2
    9d66:	1c54      	adds	r4, r2, #1
    9d68:	00a4      	lsls	r4, r4, #2
            *aligned_dst++ = *aligned_src++;
    9d6a:	464e      	mov	r6, r9
    9d6c:	464f      	mov	r7, r9
    9d6e:	598e      	ldr	r6, [r1, r6]
    9d70:	51ee      	str	r6, [r5, r7]
        while (len >= LITTLEBLOCKSIZE)
    9d72:	2604      	movs	r6, #4
    9d74:	46b4      	mov	ip, r6
    9d76:	44e1      	add	r9, ip
    9d78:	45a1      	cmp	r9, r4
    9d7a:	d1f6      	bne.n	9d6a <rt_memcpy+0x6e>
    9d7c:	0092      	lsls	r2, r2, #2
    9d7e:	1a9a      	subs	r2, r3, r2
            *aligned_dst++ = *aligned_src++;
    9d80:	444d      	add	r5, r9
    9d82:	4449      	add	r1, r9
    9d84:	3a04      	subs	r2, #4
    while (len--)
    9d86:	2300      	movs	r3, #0
    9d88:	2a00      	cmp	r2, #0
    9d8a:	d004      	beq.n	9d96 <rt_memcpy+0x9a>
        *dst_ptr++ = *src_ptr++;
    9d8c:	5ccc      	ldrb	r4, [r1, r3]
    9d8e:	54ec      	strb	r4, [r5, r3]
    while (len--)
    9d90:	3301      	adds	r3, #1
    9d92:	4293      	cmp	r3, r2
    9d94:	d1fa      	bne.n	9d8c <rt_memcpy+0x90>
}
    9d96:	bcc0      	pop	{r6, r7}
    9d98:	46b9      	mov	r9, r7
    9d9a:	46b0      	mov	r8, r6
    9d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d9e:	46c0      	nop			; (mov r8, r8)

00009da0 <rt_memmove>:
{
    9da0:	b510      	push	{r4, lr}
    if (s < tmp && tmp < s + n)
    9da2:	4288      	cmp	r0, r1
    9da4:	d90a      	bls.n	9dbc <rt_memmove+0x1c>
    9da6:	188b      	adds	r3, r1, r2
    9da8:	4298      	cmp	r0, r3
    9daa:	d207      	bcs.n	9dbc <rt_memmove+0x1c>
        while (n--)
    9dac:	1e53      	subs	r3, r2, #1
    9dae:	2a00      	cmp	r2, #0
    9db0:	d003      	beq.n	9dba <rt_memmove+0x1a>
            *(--tmp) = *(--s);
    9db2:	5cca      	ldrb	r2, [r1, r3]
    9db4:	54c2      	strb	r2, [r0, r3]
        while (n--)
    9db6:	3b01      	subs	r3, #1
    9db8:	d2fb      	bcs.n	9db2 <rt_memmove+0x12>
}
    9dba:	bd10      	pop	{r4, pc}
        while (n--)
    9dbc:	2300      	movs	r3, #0
    9dbe:	2a00      	cmp	r2, #0
    9dc0:	d0fb      	beq.n	9dba <rt_memmove+0x1a>
            *tmp++ = *s++;
    9dc2:	5ccc      	ldrb	r4, [r1, r3]
    9dc4:	54c4      	strb	r4, [r0, r3]
        while (n--)
    9dc6:	3301      	adds	r3, #1
    9dc8:	429a      	cmp	r2, r3
    9dca:	d1fa      	bne.n	9dc2 <rt_memmove+0x22>
    9dcc:	e7f5      	b.n	9dba <rt_memmove+0x1a>
    9dce:	46c0      	nop			; (mov r8, r8)

00009dd0 <rt_strncpy>:
{
    9dd0:	b570      	push	{r4, r5, r6, lr}
    9dd2:	0005      	movs	r5, r0
    if (n != 0)
    9dd4:	2a00      	cmp	r2, #0
    9dd6:	d013      	beq.n	9e00 <rt_strncpy+0x30>
    9dd8:	0013      	movs	r3, r2
    9dda:	1c46      	adds	r6, r0, #1
    9ddc:	2200      	movs	r2, #0
    9dde:	18f6      	adds	r6, r6, r3
    9de0:	e003      	b.n	9dea <rt_strncpy+0x1a>
        } while (--n != 0);
    9de2:	3b01      	subs	r3, #1
    9de4:	3201      	adds	r2, #1
    9de6:	2b00      	cmp	r3, #0
    9de8:	d00a      	beq.n	9e00 <rt_strncpy+0x30>
            if ((*d++ = *s++) == 0)
    9dea:	5c8c      	ldrb	r4, [r1, r2]
    9dec:	1af0      	subs	r0, r6, r3
    9dee:	54ac      	strb	r4, [r5, r2]
    9df0:	2c00      	cmp	r4, #0
    9df2:	d1f6      	bne.n	9de2 <rt_strncpy+0x12>
                while (--n != 0)
    9df4:	1e5a      	subs	r2, r3, #1
    9df6:	2b01      	cmp	r3, #1
    9df8:	d002      	beq.n	9e00 <rt_strncpy+0x30>
                    *d++ = 0;
    9dfa:	2100      	movs	r1, #0
    9dfc:	f004 fef2 	bl	ebe4 <memset>
}
    9e00:	0028      	movs	r0, r5
    9e02:	bd70      	pop	{r4, r5, r6, pc}

00009e04 <rt_strncmp>:
{
    9e04:	b530      	push	{r4, r5, lr}
    while (count)
    9e06:	2a00      	cmp	r2, #0
    9e08:	d00e      	beq.n	9e28 <rt_strncmp+0x24>
    9e0a:	2400      	movs	r4, #0
    9e0c:	e004      	b.n	9e18 <rt_strncmp+0x14>
        if ((__res = *cs - *ct++) != 0 || !*cs++)
    9e0e:	2d00      	cmp	r5, #0
    9e10:	d00a      	beq.n	9e28 <rt_strncmp+0x24>
    while (count)
    9e12:	3401      	adds	r4, #1
    9e14:	42a2      	cmp	r2, r4
    9e16:	d007      	beq.n	9e28 <rt_strncmp+0x24>
        if ((__res = *cs - *ct++) != 0 || !*cs++)
    9e18:	5d05      	ldrb	r5, [r0, r4]
    9e1a:	5d0b      	ldrb	r3, [r1, r4]
    9e1c:	1aeb      	subs	r3, r5, r3
    9e1e:	b25b      	sxtb	r3, r3
    9e20:	2b00      	cmp	r3, #0
    9e22:	d0f4      	beq.n	9e0e <rt_strncmp+0xa>
    return __res;
    9e24:	0018      	movs	r0, r3
    9e26:	e000      	b.n	9e2a <rt_strncmp+0x26>
    9e28:	2000      	movs	r0, #0
}
    9e2a:	bd30      	pop	{r4, r5, pc}

00009e2c <rt_strlen>:
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    9e2c:	7803      	ldrb	r3, [r0, #0]
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d006      	beq.n	9e40 <rt_strlen+0x14>
    9e32:	0003      	movs	r3, r0
    9e34:	785a      	ldrb	r2, [r3, #1]
    9e36:	3301      	adds	r3, #1
    9e38:	2a00      	cmp	r2, #0
    9e3a:	d1fb      	bne.n	9e34 <rt_strlen+0x8>
    return sc - s;
    9e3c:	1a18      	subs	r0, r3, r0
}
    9e3e:	4770      	bx	lr
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    9e40:	2000      	movs	r0, #0
    return sc - s;
    9e42:	e7fc      	b.n	9e3e <rt_strlen+0x12>

00009e44 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char       *buf,
                        rt_size_t   size,
                        const char *fmt,
                        va_list     args)
{
    9e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e46:	464e      	mov	r6, r9
    9e48:	4645      	mov	r5, r8
    9e4a:	46de      	mov	lr, fp
    9e4c:	4657      	mov	r7, sl
    9e4e:	4680      	mov	r8, r0
    9e50:	b5e0      	push	{r5, r6, r7, lr}
#ifdef RT_PRINTF_PRECISION
    int precision;      /* min. # of digits for integers and max for a string */
#endif

    str = buf;
    end = buf + size - 1;
    9e52:	3901      	subs	r1, #1
{
    9e54:	b087      	sub	sp, #28
    end = buf + size - 1;
    9e56:	4441      	add	r1, r8
    9e58:	000e      	movs	r6, r1
{
    9e5a:	9305      	str	r3, [sp, #20]

    /* Make sure end is always >= buf */
    if (end < buf)
    9e5c:	4288      	cmp	r0, r1
    9e5e:	d901      	bls.n	9e64 <rt_vsnprintf+0x20>
    {
        end  = ((char *) - 1);
    9e60:	2601      	movs	r6, #1
    9e62:	4276      	negs	r6, r6
        size = end - buf;
    }

    for (; *fmt ; ++fmt)
    9e64:	7811      	ldrb	r1, [r2, #0]
    9e66:	4640      	mov	r0, r8
    9e68:	2300      	movs	r3, #0
    9e6a:	2900      	cmp	r1, #0
    9e6c:	d108      	bne.n	9e80 <rt_vsnprintf+0x3c>
    9e6e:	e09f      	b.n	9fb0 <rt_vsnprintf+0x16c>
    {
        if (*fmt != '%')
        {
            if (str <= end)
    9e70:	4286      	cmp	r6, r0
    9e72:	d300      	bcc.n	9e76 <rt_vsnprintf+0x32>
                *str = *fmt;
    9e74:	7001      	strb	r1, [r0, #0]
    for (; *fmt ; ++fmt)
    9e76:	7851      	ldrb	r1, [r2, #1]
            ++ str;
    9e78:	3001      	adds	r0, #1
            continue;
    9e7a:	3201      	adds	r2, #1
    for (; *fmt ; ++fmt)
    9e7c:	2900      	cmp	r1, #0
    9e7e:	d05e      	beq.n	9f3e <rt_vsnprintf+0xfa>
        if (*fmt != '%')
    9e80:	2925      	cmp	r1, #37	; 0x25
    9e82:	d1f5      	bne.n	9e70 <rt_vsnprintf+0x2c>
            ++ fmt;
            if (*fmt == '-') flags |= LEFT;
            else if (*fmt == '+') flags |= PLUS;
            else if (*fmt == ' ') flags |= SPACE;
            else if (*fmt == '#') flags |= SPECIAL;
            else if (*fmt == '0') flags |= ZEROPAD;
    9e84:	2301      	movs	r3, #1
    9e86:	4699      	mov	r9, r3
            else if (*fmt == '#') flags |= SPECIAL;
    9e88:	2320      	movs	r3, #32
    9e8a:	469b      	mov	fp, r3
            else if (*fmt == ' ') flags |= SPACE;
    9e8c:	2308      	movs	r3, #8
    9e8e:	469a      	mov	sl, r3
            if (*fmt == '-') flags |= LEFT;
    9e90:	7853      	ldrb	r3, [r2, #1]
        flags = 0;
    9e92:	2100      	movs	r1, #0
            else if (*fmt == '+') flags |= PLUS;
    9e94:	2704      	movs	r7, #4
            if (*fmt == '-') flags |= LEFT;
    9e96:	2510      	movs	r5, #16
            ++ fmt;
    9e98:	1c54      	adds	r4, r2, #1
            if (*fmt == '-') flags |= LEFT;
    9e9a:	2b2d      	cmp	r3, #45	; 0x2d
    9e9c:	d00f      	beq.n	9ebe <rt_vsnprintf+0x7a>
            else if (*fmt == '+') flags |= PLUS;
    9e9e:	2b2b      	cmp	r3, #43	; 0x2b
    9ea0:	d011      	beq.n	9ec6 <rt_vsnprintf+0x82>
            else if (*fmt == ' ') flags |= SPACE;
    9ea2:	2b20      	cmp	r3, #32
    9ea4:	d013      	beq.n	9ece <rt_vsnprintf+0x8a>
            else if (*fmt == '#') flags |= SPECIAL;
    9ea6:	2b23      	cmp	r3, #35	; 0x23
    9ea8:	d016      	beq.n	9ed8 <rt_vsnprintf+0x94>
            else if (*fmt == '0') flags |= ZEROPAD;
    9eaa:	2b30      	cmp	r3, #48	; 0x30
    9eac:	d119      	bne.n	9ee2 <rt_vsnprintf+0x9e>
    9eae:	464b      	mov	r3, r9
    for (; *fmt ; ++fmt)
    9eb0:	0022      	movs	r2, r4
            else if (*fmt == '0') flags |= ZEROPAD;
    9eb2:	4319      	orrs	r1, r3
    9eb4:	b2c9      	uxtb	r1, r1
            if (*fmt == '-') flags |= LEFT;
    9eb6:	7853      	ldrb	r3, [r2, #1]
            ++ fmt;
    9eb8:	1c54      	adds	r4, r2, #1
            if (*fmt == '-') flags |= LEFT;
    9eba:	2b2d      	cmp	r3, #45	; 0x2d
    9ebc:	d1ef      	bne.n	9e9e <rt_vsnprintf+0x5a>
    9ebe:	4329      	orrs	r1, r5
    for (; *fmt ; ++fmt)
    9ec0:	0022      	movs	r2, r4
            if (*fmt == '-') flags |= LEFT;
    9ec2:	b2c9      	uxtb	r1, r1
    9ec4:	e7f7      	b.n	9eb6 <rt_vsnprintf+0x72>
            else if (*fmt == '+') flags |= PLUS;
    9ec6:	4339      	orrs	r1, r7
    for (; *fmt ; ++fmt)
    9ec8:	0022      	movs	r2, r4
            else if (*fmt == '+') flags |= PLUS;
    9eca:	b2c9      	uxtb	r1, r1
    9ecc:	e7f3      	b.n	9eb6 <rt_vsnprintf+0x72>
            else if (*fmt == ' ') flags |= SPACE;
    9ece:	4653      	mov	r3, sl
    9ed0:	4319      	orrs	r1, r3
    for (; *fmt ; ++fmt)
    9ed2:	0022      	movs	r2, r4
            else if (*fmt == ' ') flags |= SPACE;
    9ed4:	b2c9      	uxtb	r1, r1
    9ed6:	e7ee      	b.n	9eb6 <rt_vsnprintf+0x72>
            else if (*fmt == '#') flags |= SPECIAL;
    9ed8:	465b      	mov	r3, fp
    9eda:	4319      	orrs	r1, r3
    for (; *fmt ; ++fmt)
    9edc:	0022      	movs	r2, r4
            else if (*fmt == '#') flags |= SPECIAL;
    9ede:	b2c9      	uxtb	r1, r1
    9ee0:	e7e9      	b.n	9eb6 <rt_vsnprintf+0x72>
            else break;
        }

        /* get field width */
        field_width = -1;
        if (isdigit(*fmt)) field_width = skip_atoi(&fmt);
    9ee2:	001f      	movs	r7, r3
    9ee4:	3f30      	subs	r7, #48	; 0x30
    9ee6:	001d      	movs	r5, r3
    9ee8:	2f09      	cmp	r7, #9
    9eea:	d944      	bls.n	9f76 <rt_vsnprintf+0x132>
        else if (*fmt == '*')
    9eec:	2b2a      	cmp	r3, #42	; 0x2a
    9eee:	d054      	beq.n	9f9a <rt_vsnprintf+0x156>
        field_width = -1;
    9ef0:	2201      	movs	r2, #1
    9ef2:	4252      	negs	r2, r2
    9ef4:	4694      	mov	ip, r2
        }

#ifdef RT_PRINTF_PRECISION
        /* get the precision */
        precision = -1;
        if (*fmt == '.')
    9ef6:	2b2e      	cmp	r3, #46	; 0x2e
    9ef8:	d02f      	beq.n	9f5a <rt_vsnprintf+0x116>
        precision = -1;
    9efa:	2501      	movs	r5, #1
    9efc:	426d      	negs	r5, r5
        /* get the conversion qualifier */
        qualifier = 0;
#ifdef RT_PRINTF_LONGLONG
        if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
#else
        if (*fmt == 'h' || *fmt == 'l')
    9efe:	2204      	movs	r2, #4
    9f00:	001f      	movs	r7, r3
    9f02:	4397      	bics	r7, r2
        qualifier = 0;
    9f04:	2200      	movs	r2, #0
        if (*fmt == 'h' || *fmt == 'l')
    9f06:	2f68      	cmp	r7, #104	; 0x68
    9f08:	d104      	bne.n	9f14 <rt_vsnprintf+0xd0>
        }

        /* the default base */
        base = 10;

        switch (*fmt)
    9f0a:	7862      	ldrb	r2, [r4, #1]
            ++ fmt;
    9f0c:	3401      	adds	r4, #1
        switch (*fmt)
    9f0e:	4691      	mov	r9, r2
    9f10:	001a      	movs	r2, r3
    9f12:	464b      	mov	r3, r9
    9f14:	2b25      	cmp	r3, #37	; 0x25
    9f16:	d100      	bne.n	9f1a <rt_vsnprintf+0xd6>
    9f18:	e0ed      	b.n	a0f6 <rt_vsnprintf+0x2b2>
    9f1a:	3b58      	subs	r3, #88	; 0x58
    9f1c:	b2db      	uxtb	r3, r3
    9f1e:	2b20      	cmp	r3, #32
    9f20:	d803      	bhi.n	9f2a <rt_vsnprintf+0xe6>
    9f22:	4fa4      	ldr	r7, [pc, #656]	; (a1b4 <rt_vsnprintf+0x370>)
    9f24:	009b      	lsls	r3, r3, #2
    9f26:	58fb      	ldr	r3, [r7, r3]
    9f28:	469f      	mov	pc, r3
            flags |= SIGN;
        case 'u':
            break;

        default:
            if (str <= end) *str = '%';
    9f2a:	4286      	cmp	r6, r0
    9f2c:	d301      	bcc.n	9f32 <rt_vsnprintf+0xee>
    9f2e:	2325      	movs	r3, #37	; 0x25
    9f30:	7003      	strb	r3, [r0, #0]
            ++ str;

            if (*fmt)
    9f32:	7823      	ldrb	r3, [r4, #0]
            ++ str;
    9f34:	1c42      	adds	r2, r0, #1
            if (*fmt)
    9f36:	2b00      	cmp	r3, #0
    9f38:	d000      	beq.n	9f3c <rt_vsnprintf+0xf8>
    9f3a:	e0f6      	b.n	a12a <rt_vsnprintf+0x2e6>
            ++ str;
    9f3c:	0010      	movs	r0, r2
#else
        str = print_number(str, end, num, base, field_width, flags);
#endif
    }

    if (str <= end) *str = '\0';
    9f3e:	42b0      	cmp	r0, r6
    9f40:	d934      	bls.n	9fac <rt_vsnprintf+0x168>
    else *end = '\0';
    9f42:	2300      	movs	r3, #0
    9f44:	7033      	strb	r3, [r6, #0]

    /* the trailing null byte doesn't count towards the total
    * ++str;
    */
    return str - buf;
    9f46:	4643      	mov	r3, r8
    9f48:	1ac3      	subs	r3, r0, r3
}
    9f4a:	0018      	movs	r0, r3
    9f4c:	b007      	add	sp, #28
    9f4e:	bcf0      	pop	{r4, r5, r6, r7}
    9f50:	46bb      	mov	fp, r7
    9f52:	46b2      	mov	sl, r6
    9f54:	46a9      	mov	r9, r5
    9f56:	46a0      	mov	r8, r4
    9f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (isdigit(*fmt)) precision = skip_atoi(&fmt);
    9f5a:	7865      	ldrb	r5, [r4, #1]
            ++ fmt;
    9f5c:	1c67      	adds	r7, r4, #1
            if (isdigit(*fmt)) precision = skip_atoi(&fmt);
    9f5e:	002a      	movs	r2, r5
    9f60:	3a30      	subs	r2, #48	; 0x30
    9f62:	002b      	movs	r3, r5
    9f64:	2a09      	cmp	r2, #9
    9f66:	d800      	bhi.n	9f6a <rt_vsnprintf+0x126>
    9f68:	e0a9      	b.n	a0be <rt_vsnprintf+0x27a>
            else if (*fmt == '*')
    9f6a:	2d2a      	cmp	r5, #42	; 0x2a
    9f6c:	d100      	bne.n	9f70 <rt_vsnprintf+0x12c>
    9f6e:	e0c9      	b.n	a104 <rt_vsnprintf+0x2c0>
            ++ fmt;
    9f70:	003c      	movs	r4, r7
            if (precision < 0) precision = 0;
    9f72:	2500      	movs	r5, #0
    9f74:	e7c3      	b.n	9efe <rt_vsnprintf+0xba>
    register int i = 0;
    9f76:	2300      	movs	r3, #0
    9f78:	002a      	movs	r2, r5
    9f7a:	001f      	movs	r7, r3
        i = i * 10 + *((*s)++) - '0';
    9f7c:	00bd      	lsls	r5, r7, #2
    9f7e:	19ed      	adds	r5, r5, r7
    9f80:	3401      	adds	r4, #1
    9f82:	006d      	lsls	r5, r5, #1
    9f84:	18ad      	adds	r5, r5, r2
    while (isdigit(**s))
    9f86:	7822      	ldrb	r2, [r4, #0]
        i = i * 10 + *((*s)++) - '0';
    9f88:	3d30      	subs	r5, #48	; 0x30
    9f8a:	002f      	movs	r7, r5
    while (isdigit(**s))
    9f8c:	0015      	movs	r5, r2
    9f8e:	3d30      	subs	r5, #48	; 0x30
    9f90:	0013      	movs	r3, r2
    9f92:	2d09      	cmp	r5, #9
    9f94:	d9f2      	bls.n	9f7c <rt_vsnprintf+0x138>
    9f96:	46bc      	mov	ip, r7
    9f98:	e7ad      	b.n	9ef6 <rt_vsnprintf+0xb2>
            field_width = va_arg(args, int);
    9f9a:	9f05      	ldr	r7, [sp, #20]
            ++ fmt;
    9f9c:	1c94      	adds	r4, r2, #2
            field_width = va_arg(args, int);
    9f9e:	cf08      	ldmia	r7!, {r3}
    9fa0:	469c      	mov	ip, r3
            if (field_width < 0)
    9fa2:	2b00      	cmp	r3, #0
    9fa4:	db1c      	blt.n	9fe0 <rt_vsnprintf+0x19c>
        if (*fmt == '.')
    9fa6:	7893      	ldrb	r3, [r2, #2]
            field_width = va_arg(args, int);
    9fa8:	9705      	str	r7, [sp, #20]
    9faa:	e7a4      	b.n	9ef6 <rt_vsnprintf+0xb2>
    return str - buf;
    9fac:	4643      	mov	r3, r8
    9fae:	1ac3      	subs	r3, r0, r3
    if (str <= end) *str = '\0';
    9fb0:	2200      	movs	r2, #0
    9fb2:	7002      	strb	r2, [r0, #0]
    9fb4:	e7c9      	b.n	9f4a <rt_vsnprintf+0x106>
            flags |= SIGN;
    9fb6:	2302      	movs	r3, #2
    9fb8:	4319      	orrs	r1, r3
    9fba:	3308      	adds	r3, #8
            num = va_arg(args, rt_uint32_t);
    9fbc:	9f05      	ldr	r7, [sp, #20]
        if (qualifier == 'l')
    9fbe:	2a6c      	cmp	r2, #108	; 0x6c
    9fc0:	d002      	beq.n	9fc8 <rt_vsnprintf+0x184>
        else if (qualifier == 'h')
    9fc2:	2a68      	cmp	r2, #104	; 0x68
    9fc4:	d100      	bne.n	9fc8 <rt_vsnprintf+0x184>
    9fc6:	e08e      	b.n	a0e6 <rt_vsnprintf+0x2a2>
        str = print_number(str, end, num, base, field_width, precision, flags);
    9fc8:	cf04      	ldmia	r7!, {r2}
            num = va_arg(args, rt_uint32_t);
    9fca:	9705      	str	r7, [sp, #20]
        str = print_number(str, end, num, base, field_width, precision, flags);
    9fcc:	9102      	str	r1, [sp, #8]
    9fce:	4661      	mov	r1, ip
    9fd0:	9501      	str	r5, [sp, #4]
    9fd2:	9100      	str	r1, [sp, #0]
    9fd4:	0031      	movs	r1, r6
    9fd6:	f7ff fd37 	bl	9a48 <print_number>
    for (; *fmt ; ++fmt)
    9fda:	7861      	ldrb	r1, [r4, #1]
    9fdc:	1c62      	adds	r2, r4, #1
    9fde:	e74d      	b.n	9e7c <rt_vsnprintf+0x38>
                field_width = -field_width;
    9fe0:	425b      	negs	r3, r3
    9fe2:	469c      	mov	ip, r3
                flags |= LEFT;
    9fe4:	2310      	movs	r3, #16
            field_width = va_arg(args, int);
    9fe6:	9705      	str	r7, [sp, #20]
                flags |= LEFT;
    9fe8:	4319      	orrs	r1, r3
        if (*fmt == '.')
    9fea:	7893      	ldrb	r3, [r2, #2]
    9fec:	e783      	b.n	9ef6 <rt_vsnprintf+0xb2>
            if (!(flags & LEFT))
    9fee:	06cb      	lsls	r3, r1, #27
    9ff0:	d400      	bmi.n	9ff4 <rt_vsnprintf+0x1b0>
    9ff2:	e0a8      	b.n	a146 <rt_vsnprintf+0x302>
            c = (rt_uint8_t)va_arg(args, int);
    9ff4:	9b05      	ldr	r3, [sp, #20]
    9ff6:	1d1d      	adds	r5, r3, #4
            if (str <= end) *str = c;
    9ff8:	42b0      	cmp	r0, r6
    9ffa:	d800      	bhi.n	9ffe <rt_vsnprintf+0x1ba>
    9ffc:	e092      	b.n	a124 <rt_vsnprintf+0x2e0>
            while (--field_width > 0)
    9ffe:	4662      	mov	r2, ip
            ++ str;
    a000:	1c43      	adds	r3, r0, #1
            while (--field_width > 0)
    a002:	4460      	add	r0, ip
    a004:	2a01      	cmp	r2, #1
    a006:	dc00      	bgt.n	a00a <rt_vsnprintf+0x1c6>
    a008:	e0c3      	b.n	a192 <rt_vsnprintf+0x34e>
                if (str <= end) *str = ' ';
    a00a:	429e      	cmp	r6, r3
    a00c:	d301      	bcc.n	a012 <rt_vsnprintf+0x1ce>
    a00e:	2220      	movs	r2, #32
    a010:	701a      	strb	r2, [r3, #0]
                ++ str;
    a012:	3301      	adds	r3, #1
            while (--field_width > 0)
    a014:	4283      	cmp	r3, r0
    a016:	d1f8      	bne.n	a00a <rt_vsnprintf+0x1c6>
    for (; *fmt ; ++fmt)
    a018:	7861      	ldrb	r1, [r4, #1]
    a01a:	1c62      	adds	r2, r4, #1
            c = (rt_uint8_t)va_arg(args, int);
    a01c:	9505      	str	r5, [sp, #20]
    a01e:	e72d      	b.n	9e7c <rt_vsnprintf+0x38>
            flags |= LARGE;
    a020:	2340      	movs	r3, #64	; 0x40
    a022:	4319      	orrs	r1, r3
    a024:	3b30      	subs	r3, #48	; 0x30
    a026:	e7c9      	b.n	9fbc <rt_vsnprintf+0x178>
        switch (*fmt)
    a028:	230a      	movs	r3, #10
    a02a:	e7c7      	b.n	9fbc <rt_vsnprintf+0x178>
            s = va_arg(args, char *);
    a02c:	9b05      	ldr	r3, [sp, #20]
    a02e:	cb80      	ldmia	r3!, {r7}
    a030:	4699      	mov	r9, r3
            if (!s) s = "(NULL)";
    a032:	2f00      	cmp	r7, #0
    a034:	d100      	bne.n	a038 <rt_vsnprintf+0x1f4>
    a036:	e095      	b.n	a164 <rt_vsnprintf+0x320>
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    a038:	783b      	ldrb	r3, [r7, #0]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d100      	bne.n	a040 <rt_vsnprintf+0x1fc>
    a03e:	e0a6      	b.n	a18e <rt_vsnprintf+0x34a>
    a040:	787a      	ldrb	r2, [r7, #1]
            if (!s) s = "(NULL)";
    a042:	003b      	movs	r3, r7
    a044:	e000      	b.n	a048 <rt_vsnprintf+0x204>
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    a046:	785a      	ldrb	r2, [r3, #1]
    a048:	3301      	adds	r3, #1
    a04a:	2a00      	cmp	r2, #0
    a04c:	d1fb      	bne.n	a046 <rt_vsnprintf+0x202>
    return sc - s;
    a04e:	1bda      	subs	r2, r3, r7
            if (precision > 0 && len > precision) len = precision;
    a050:	2d00      	cmp	r5, #0
    a052:	dd02      	ble.n	a05a <rt_vsnprintf+0x216>
    a054:	42aa      	cmp	r2, r5
    a056:	dd00      	ble.n	a05a <rt_vsnprintf+0x216>
    a058:	002a      	movs	r2, r5
            if (!(flags & LEFT))
    a05a:	06cb      	lsls	r3, r1, #27
    a05c:	d400      	bmi.n	a060 <rt_vsnprintf+0x21c>
    a05e:	e084      	b.n	a16a <rt_vsnprintf+0x326>
            for (i = 0; i < len; ++i)
    a060:	2a00      	cmp	r2, #0
    a062:	dc00      	bgt.n	a066 <rt_vsnprintf+0x222>
    a064:	e0a0      	b.n	a1a8 <rt_vsnprintf+0x364>
    a066:	1883      	adds	r3, r0, r2
                if (str <= end) *str = *s;
    a068:	42b0      	cmp	r0, r6
    a06a:	d801      	bhi.n	a070 <rt_vsnprintf+0x22c>
    a06c:	7839      	ldrb	r1, [r7, #0]
    a06e:	7001      	strb	r1, [r0, #0]
                ++ str;
    a070:	3001      	adds	r0, #1
                ++ s;
    a072:	3701      	adds	r7, #1
            for (i = 0; i < len; ++i)
    a074:	4283      	cmp	r3, r0
    a076:	d1f7      	bne.n	a068 <rt_vsnprintf+0x224>
            while (len < field_width--)
    a078:	4661      	mov	r1, ip
    a07a:	1a88      	subs	r0, r1, r2
    a07c:	1818      	adds	r0, r3, r0
    a07e:	4562      	cmp	r2, ip
    a080:	db00      	blt.n	a084 <rt_vsnprintf+0x240>
    a082:	e08b      	b.n	a19c <rt_vsnprintf+0x358>
                if (str <= end) *str = ' ';
    a084:	429e      	cmp	r6, r3
    a086:	d301      	bcc.n	a08c <rt_vsnprintf+0x248>
    a088:	2220      	movs	r2, #32
    a08a:	701a      	strb	r2, [r3, #0]
                ++ str;
    a08c:	3301      	adds	r3, #1
            while (len < field_width--)
    a08e:	4298      	cmp	r0, r3
    a090:	d1f8      	bne.n	a084 <rt_vsnprintf+0x240>
            s = va_arg(args, char *);
    a092:	464b      	mov	r3, r9
    for (; *fmt ; ++fmt)
    a094:	7861      	ldrb	r1, [r4, #1]
    a096:	1c62      	adds	r2, r4, #1
            s = va_arg(args, char *);
    a098:	9305      	str	r3, [sp, #20]
    a09a:	e6ef      	b.n	9e7c <rt_vsnprintf+0x38>
            if (field_width == -1)
    a09c:	4663      	mov	r3, ip
    a09e:	3301      	adds	r3, #1
    a0a0:	d04c      	beq.n	a13c <rt_vsnprintf+0x2f8>
            str = print_number(str, end,
    a0a2:	4663      	mov	r3, ip
                               (long)va_arg(args, void *),
    a0a4:	9f05      	ldr	r7, [sp, #20]
            str = print_number(str, end,
    a0a6:	cf04      	ldmia	r7!, {r2}
    a0a8:	9102      	str	r1, [sp, #8]
    a0aa:	9300      	str	r3, [sp, #0]
    a0ac:	0031      	movs	r1, r6
    a0ae:	2310      	movs	r3, #16
    a0b0:	9501      	str	r5, [sp, #4]
    a0b2:	f7ff fcc9 	bl	9a48 <print_number>
    for (; *fmt ; ++fmt)
    a0b6:	7861      	ldrb	r1, [r4, #1]
    a0b8:	1c62      	adds	r2, r4, #1
                               (long)va_arg(args, void *),
    a0ba:	9705      	str	r7, [sp, #20]
            continue;
    a0bc:	e6de      	b.n	9e7c <rt_vsnprintf+0x38>
    register int i = 0;
    a0be:	2200      	movs	r2, #0
    a0c0:	002c      	movs	r4, r5
        i = i * 10 + *((*s)++) - '0';
    a0c2:	0095      	lsls	r5, r2, #2
    a0c4:	18ad      	adds	r5, r5, r2
    while (isdigit(**s))
    a0c6:	787b      	ldrb	r3, [r7, #1]
        i = i * 10 + *((*s)++) - '0';
    a0c8:	006d      	lsls	r5, r5, #1
    a0ca:	192d      	adds	r5, r5, r4
    a0cc:	002a      	movs	r2, r5
    while (isdigit(**s))
    a0ce:	001d      	movs	r5, r3
    a0d0:	3d30      	subs	r5, #48	; 0x30
        i = i * 10 + *((*s)++) - '0';
    a0d2:	3701      	adds	r7, #1
    while (isdigit(**s))
    a0d4:	001c      	movs	r4, r3
        i = i * 10 + *((*s)++) - '0';
    a0d6:	3a30      	subs	r2, #48	; 0x30
    while (isdigit(**s))
    a0d8:	2d09      	cmp	r5, #9
    a0da:	d9f2      	bls.n	a0c2 <rt_vsnprintf+0x27e>
    a0dc:	43d5      	mvns	r5, r2
    a0de:	17ed      	asrs	r5, r5, #31
        i = i * 10 + *((*s)++) - '0';
    a0e0:	003c      	movs	r4, r7
    a0e2:	4015      	ands	r5, r2
    a0e4:	e70b      	b.n	9efe <rt_vsnprintf+0xba>
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
    a0e6:	cf04      	ldmia	r7!, {r2}
    a0e8:	4691      	mov	r9, r2
            if (flags & SIGN) num = (rt_int16_t)num;
    a0ea:	078a      	lsls	r2, r1, #30
    a0ec:	d513      	bpl.n	a116 <rt_vsnprintf+0x2d2>
        str = print_number(str, end, num, base, field_width, precision, flags);
    a0ee:	464a      	mov	r2, r9
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
    a0f0:	9705      	str	r7, [sp, #20]
        str = print_number(str, end, num, base, field_width, precision, flags);
    a0f2:	b212      	sxth	r2, r2
    a0f4:	e76a      	b.n	9fcc <rt_vsnprintf+0x188>
            if (str <= end) *str = '%';
    a0f6:	4286      	cmp	r6, r0
    a0f8:	d300      	bcc.n	a0fc <rt_vsnprintf+0x2b8>
    a0fa:	7003      	strb	r3, [r0, #0]
    for (; *fmt ; ++fmt)
    a0fc:	7861      	ldrb	r1, [r4, #1]
            ++ str;
    a0fe:	3001      	adds	r0, #1
    for (; *fmt ; ++fmt)
    a100:	1c62      	adds	r2, r4, #1
            continue;
    a102:	e6bb      	b.n	9e7c <rt_vsnprintf+0x38>
                precision = va_arg(args, int);
    a104:	9f05      	ldr	r7, [sp, #20]
                ++ fmt;
    a106:	3402      	adds	r4, #2
    a108:	cf20      	ldmia	r7!, {r5}
    a10a:	43eb      	mvns	r3, r5
    a10c:	17db      	asrs	r3, r3, #31
    a10e:	401d      	ands	r5, r3
                precision = va_arg(args, int);
    a110:	9705      	str	r7, [sp, #20]
        if (*fmt == 'h' || *fmt == 'l')
    a112:	7823      	ldrb	r3, [r4, #0]
            if (precision < 0) precision = 0;
    a114:	e6f3      	b.n	9efe <rt_vsnprintf+0xba>
    a116:	464a      	mov	r2, r9
    a118:	0412      	lsls	r2, r2, #16
    a11a:	0c12      	lsrs	r2, r2, #16
            num = (rt_uint16_t)va_arg(args, rt_int32_t);
    a11c:	9705      	str	r7, [sp, #20]
    a11e:	e755      	b.n	9fcc <rt_vsnprintf+0x188>
        switch (*fmt)
    a120:	2308      	movs	r3, #8
    a122:	e74b      	b.n	9fbc <rt_vsnprintf+0x178>
            c = (rt_uint8_t)va_arg(args, int);
    a124:	681b      	ldr	r3, [r3, #0]
    a126:	7003      	strb	r3, [r0, #0]
    a128:	e769      	b.n	9ffe <rt_vsnprintf+0x1ba>
                if (str <= end) *str = *fmt;
    a12a:	42b2      	cmp	r2, r6
    a12c:	d800      	bhi.n	a130 <rt_vsnprintf+0x2ec>
    a12e:	7043      	strb	r3, [r0, #1]
    for (; *fmt ; ++fmt)
    a130:	7861      	ldrb	r1, [r4, #1]
                ++ str;
    a132:	3002      	adds	r0, #2
    for (; *fmt ; ++fmt)
    a134:	1c62      	adds	r2, r4, #1
    a136:	e6a1      	b.n	9e7c <rt_vsnprintf+0x38>
        switch (*fmt)
    a138:	2310      	movs	r3, #16
    a13a:	e73f      	b.n	9fbc <rt_vsnprintf+0x178>
                flags |= ZEROPAD;
    a13c:	2301      	movs	r3, #1
    a13e:	4319      	orrs	r1, r3
                field_width = sizeof(void *) << 1;
    a140:	3307      	adds	r3, #7
    a142:	469c      	mov	ip, r3
    a144:	e7ad      	b.n	a0a2 <rt_vsnprintf+0x25e>
                while (--field_width > 0)
    a146:	4663      	mov	r3, ip
    a148:	3b01      	subs	r3, #1
    a14a:	2b00      	cmp	r3, #0
    a14c:	dd30      	ble.n	a1b0 <rt_vsnprintf+0x36c>
    a14e:	18c3      	adds	r3, r0, r3
                    if (str <= end) *str = ' ';
    a150:	42b0      	cmp	r0, r6
    a152:	d801      	bhi.n	a158 <rt_vsnprintf+0x314>
    a154:	2220      	movs	r2, #32
    a156:	7002      	strb	r2, [r0, #0]
                    ++ str;
    a158:	3001      	adds	r0, #1
                while (--field_width > 0)
    a15a:	4283      	cmp	r3, r0
    a15c:	d1f8      	bne.n	a150 <rt_vsnprintf+0x30c>
    a15e:	2300      	movs	r3, #0
    a160:	469c      	mov	ip, r3
    a162:	e747      	b.n	9ff4 <rt_vsnprintf+0x1b0>
    a164:	224e      	movs	r2, #78	; 0x4e
            if (!s) s = "(NULL)";
    a166:	4f14      	ldr	r7, [pc, #80]	; (a1b8 <rt_vsnprintf+0x374>)
    a168:	e76b      	b.n	a042 <rt_vsnprintf+0x1fe>
                while (len < field_width--)
    a16a:	4663      	mov	r3, ip
    a16c:	1e59      	subs	r1, r3, #1
    a16e:	4562      	cmp	r2, ip
    a170:	da1c      	bge.n	a1ac <rt_vsnprintf+0x368>
    a172:	1a9b      	subs	r3, r3, r2
    a174:	18c3      	adds	r3, r0, r3
                    if (str <= end) *str = ' ';
    a176:	42b0      	cmp	r0, r6
    a178:	d801      	bhi.n	a17e <rt_vsnprintf+0x33a>
    a17a:	2520      	movs	r5, #32
    a17c:	7005      	strb	r5, [r0, #0]
                    ++ str;
    a17e:	3001      	adds	r0, #1
                while (len < field_width--)
    a180:	4283      	cmp	r3, r0
    a182:	d1f8      	bne.n	a176 <rt_vsnprintf+0x332>
    a184:	4663      	mov	r3, ip
    a186:	1ad3      	subs	r3, r2, r3
    a188:	469c      	mov	ip, r3
    a18a:	448c      	add	ip, r1
    a18c:	e768      	b.n	a060 <rt_vsnprintf+0x21c>
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    a18e:	2200      	movs	r2, #0
    a190:	e75e      	b.n	a050 <rt_vsnprintf+0x20c>
            ++ str;
    a192:	0018      	movs	r0, r3
    for (; *fmt ; ++fmt)
    a194:	7861      	ldrb	r1, [r4, #1]
    a196:	1c62      	adds	r2, r4, #1
            c = (rt_uint8_t)va_arg(args, int);
    a198:	9505      	str	r5, [sp, #20]
    a19a:	e66f      	b.n	9e7c <rt_vsnprintf+0x38>
            s = va_arg(args, char *);
    a19c:	4648      	mov	r0, r9
    for (; *fmt ; ++fmt)
    a19e:	7861      	ldrb	r1, [r4, #1]
            s = va_arg(args, char *);
    a1a0:	9005      	str	r0, [sp, #20]
    for (; *fmt ; ++fmt)
    a1a2:	1c62      	adds	r2, r4, #1
    a1a4:	0018      	movs	r0, r3
    a1a6:	e669      	b.n	9e7c <rt_vsnprintf+0x38>
            for (i = 0; i < len; ++i)
    a1a8:	0003      	movs	r3, r0
    a1aa:	e765      	b.n	a078 <rt_vsnprintf+0x234>
                while (len < field_width--)
    a1ac:	468c      	mov	ip, r1
    a1ae:	e757      	b.n	a060 <rt_vsnprintf+0x21c>
                while (--field_width > 0)
    a1b0:	469c      	mov	ip, r3
    a1b2:	e71f      	b.n	9ff4 <rt_vsnprintf+0x1b0>
    a1b4:	00015048 	.word	0x00015048
    a1b8:	00015040 	.word	0x00015040

0000a1bc <rt_console_get_device>:
 *
 * @return the device using in console or RT_NULL
 */
rt_device_t rt_console_get_device(void)
{
    return _console_device;
    a1bc:	4b01      	ldr	r3, [pc, #4]	; (a1c4 <rt_console_get_device+0x8>)
    a1be:	6818      	ldr	r0, [r3, #0]
}
    a1c0:	4770      	bx	lr
    a1c2:	46c0      	nop			; (mov r8, r8)
    a1c4:	0001848c 	.word	0x0001848c

0000a1c8 <rt_console_set_device>:
 * @param name the name of new console device
 *
 * @return the old console device handler
 */
rt_device_t rt_console_set_device(const char *name)
{
    a1c8:	b570      	push	{r4, r5, r6, lr}
    rt_device_t new, old;

    /* save old device */
    old = _console_device;
    a1ca:	4d09      	ldr	r5, [pc, #36]	; (a1f0 <rt_console_set_device+0x28>)
    a1cc:	682e      	ldr	r6, [r5, #0]

    /* find new console device */
    new = rt_device_find(name);
    a1ce:	f7ff f8b3 	bl	9338 <rt_device_find>
    a1d2:	1e04      	subs	r4, r0, #0
    if (new != RT_NULL)
    a1d4:	d009      	beq.n	a1ea <rt_console_set_device+0x22>
    {
        if (_console_device != RT_NULL)
    a1d6:	6828      	ldr	r0, [r5, #0]
    a1d8:	2800      	cmp	r0, #0
    a1da:	d001      	beq.n	a1e0 <rt_console_set_device+0x18>
        {
            /* close old console device */
            rt_device_close(_console_device);
    a1dc:	f7ff f95c 	bl	9498 <rt_device_close>
        }

        /* set new console device */
        rt_device_open(new, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
    a1e0:	2143      	movs	r1, #67	; 0x43
    a1e2:	0020      	movs	r0, r4
    a1e4:	f7ff f8f8 	bl	93d8 <rt_device_open>
        _console_device = new;
    a1e8:	602c      	str	r4, [r5, #0]
    }

    return old;
}
    a1ea:	0030      	movs	r0, r6
    a1ec:	bd70      	pop	{r4, r5, r6, pc}
    a1ee:	46c0      	nop			; (mov r8, r8)
    a1f0:	0001848c 	.word	0x0001848c

0000a1f4 <rt_kputs>:
 * This function will put string to the console.
 *
 * @param str the string output to the console.
 */
void rt_kputs(const char *str)
{
    a1f4:	0002      	movs	r2, r0
    a1f6:	b570      	push	{r4, r5, r6, lr}
    if (!str) return;
    a1f8:	2800      	cmp	r0, #0
    a1fa:	d015      	beq.n	a228 <rt_kputs+0x34>

#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
    a1fc:	4c0e      	ldr	r4, [pc, #56]	; (a238 <rt_kputs+0x44>)
    a1fe:	6820      	ldr	r0, [r4, #0]
    a200:	2800      	cmp	r0, #0
    a202:	d012      	beq.n	a22a <rt_kputs+0x36>
    }
    else
    {
        rt_uint16_t old_flag = _console_device->open_flag;

        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
    a204:	2340      	movs	r3, #64	; 0x40
        rt_uint16_t old_flag = _console_device->open_flag;
    a206:	8b05      	ldrh	r5, [r0, #24]
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
    a208:	432b      	orrs	r3, r5
    a20a:	8303      	strh	r3, [r0, #24]
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    a20c:	7813      	ldrb	r3, [r2, #0]
    a20e:	2b00      	cmp	r3, #0
    a210:	d00f      	beq.n	a232 <rt_kputs+0x3e>
    a212:	0013      	movs	r3, r2
    a214:	7859      	ldrb	r1, [r3, #1]
    a216:	3301      	adds	r3, #1
    a218:	2900      	cmp	r1, #0
    a21a:	d1fb      	bne.n	a214 <rt_kputs+0x20>
    return sc - s;
    a21c:	1a9b      	subs	r3, r3, r2
        rt_device_write(_console_device, 0, str, rt_strlen(str));
    a21e:	2100      	movs	r1, #0
    a220:	f7ff f9ac 	bl	957c <rt_device_write>
        _console_device->open_flag = old_flag;
    a224:	6823      	ldr	r3, [r4, #0]
    a226:	831d      	strh	r5, [r3, #24]
    }
#else
    rt_hw_console_output(str);
#endif
}
    a228:	bd70      	pop	{r4, r5, r6, pc}
        rt_hw_console_output(str);
    a22a:	0010      	movs	r0, r2
    a22c:	f7fe fc08 	bl	8a40 <rt_hw_console_output>
    a230:	e7fa      	b.n	a228 <rt_kputs+0x34>
    for (sc = s; *sc != '\0'; ++sc) /* nothing */
    a232:	2300      	movs	r3, #0
    a234:	e7f3      	b.n	a21e <rt_kputs+0x2a>
    a236:	46c0      	nop			; (mov r8, r8)
    a238:	0001848c 	.word	0x0001848c

0000a23c <rt_kprintf>:
 * This function will print a formatted string on system console
 *
 * @param fmt the format
 */
void rt_kprintf(const char *fmt, ...)
{
    a23c:	b40f      	push	{r0, r1, r2, r3}
    a23e:	b5f0      	push	{r4, r5, r6, r7, lr}
    a240:	b083      	sub	sp, #12
    a242:	ab08      	add	r3, sp, #32
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
    a244:	4d15      	ldr	r5, [pc, #84]	; (a29c <rt_kprintf+0x60>)
{
    a246:	cb04      	ldmia	r3!, {r2}
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
    a248:	217f      	movs	r1, #127	; 0x7f
    a24a:	0028      	movs	r0, r5
    va_start(args, fmt);
    a24c:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
    a24e:	f7ff fdf9 	bl	9e44 <rt_vsnprintf>
    if (length > RT_CONSOLEBUF_SIZE - 1)
        length = RT_CONSOLEBUF_SIZE - 1;

    if (console_output_hook) {
    a252:	4b13      	ldr	r3, [pc, #76]	; (a2a0 <rt_kprintf+0x64>)
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
    a254:	0004      	movs	r4, r0
    if (console_output_hook) {
    a256:	681b      	ldr	r3, [r3, #0]
    a258:	2b00      	cmp	r3, #0
    a25a:	d002      	beq.n	a262 <rt_kprintf+0x26>
        console_output_hook(rt_log_buf, 0);
    a25c:	2100      	movs	r1, #0
    a25e:	0028      	movs	r0, r5
    a260:	4798      	blx	r3
    }

#ifdef RT_USING_DEVICE
    if (_console_device == RT_NULL)
    a262:	4e10      	ldr	r6, [pc, #64]	; (a2a4 <rt_kprintf+0x68>)
    a264:	6830      	ldr	r0, [r6, #0]
    a266:	2800      	cmp	r0, #0
    a268:	d013      	beq.n	a292 <rt_kprintf+0x56>
    }
    else
    {
        rt_uint16_t old_flag = _console_device->open_flag;

        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
    a26a:	2340      	movs	r3, #64	; 0x40
        rt_uint16_t old_flag = _console_device->open_flag;
    a26c:	8b07      	ldrh	r7, [r0, #24]
        _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
    a26e:	433b      	orrs	r3, r7
    a270:	8303      	strh	r3, [r0, #24]
        rt_device_write(_console_device, 0, rt_log_buf, length);
    a272:	0023      	movs	r3, r4
    a274:	2c7f      	cmp	r4, #127	; 0x7f
    a276:	d80a      	bhi.n	a28e <rt_kprintf+0x52>
    a278:	002a      	movs	r2, r5
    a27a:	2100      	movs	r1, #0
    a27c:	f7ff f97e 	bl	957c <rt_device_write>
        _console_device->open_flag = old_flag;
    a280:	6833      	ldr	r3, [r6, #0]
    a282:	831f      	strh	r7, [r3, #24]
    }
#else
    rt_hw_console_output(rt_log_buf);
#endif
    va_end(args);
}
    a284:	b003      	add	sp, #12
    a286:	bcf0      	pop	{r4, r5, r6, r7}
    a288:	bc08      	pop	{r3}
    a28a:	b004      	add	sp, #16
    a28c:	4718      	bx	r3
        rt_device_write(_console_device, 0, rt_log_buf, length);
    a28e:	237f      	movs	r3, #127	; 0x7f
    a290:	e7f2      	b.n	a278 <rt_kprintf+0x3c>
        rt_hw_console_output(rt_log_buf);
    a292:	0028      	movs	r0, r5
    a294:	f7fe fbd4 	bl	8a40 <rt_hw_console_output>
    a298:	e7f4      	b.n	a284 <rt_kprintf+0x48>
    a29a:	46c0      	nop			; (mov r8, r8)
    a29c:	00018498 	.word	0x00018498
    a2a0:	00018490 	.word	0x00018490
    a2a4:	0001848c 	.word	0x0001848c

0000a2a8 <rt_show_version>:
{
    a2a8:	b500      	push	{lr}
    rt_kprintf("\n \\ | /\n");
    a2aa:	480a      	ldr	r0, [pc, #40]	; (a2d4 <rt_show_version+0x2c>)
{
    a2ac:	b083      	sub	sp, #12
    rt_kprintf("\n \\ | /\n");
    a2ae:	f7ff ffc5 	bl	a23c <rt_kprintf>
    rt_kprintf("- RT -     Thread Operating System\n");
    a2b2:	4809      	ldr	r0, [pc, #36]	; (a2d8 <rt_show_version+0x30>)
    a2b4:	f7ff ffc2 	bl	a23c <rt_kprintf>
    rt_kprintf(" / | \\     %d.%d.%d build %s\n",
    a2b8:	4b08      	ldr	r3, [pc, #32]	; (a2dc <rt_show_version+0x34>)
    a2ba:	2201      	movs	r2, #1
    a2bc:	2103      	movs	r1, #3
    a2be:	9300      	str	r3, [sp, #0]
    a2c0:	4807      	ldr	r0, [pc, #28]	; (a2e0 <rt_show_version+0x38>)
    a2c2:	2303      	movs	r3, #3
    a2c4:	f7ff ffba 	bl	a23c <rt_kprintf>
    rt_kprintf(" 2006 - 2019 Copyright by rt-thread team\n");
    a2c8:	4806      	ldr	r0, [pc, #24]	; (a2e4 <rt_show_version+0x3c>)
    a2ca:	f7ff ffb7 	bl	a23c <rt_kprintf>
}
    a2ce:	b003      	add	sp, #12
    a2d0:	bd00      	pop	{pc}
    a2d2:	46c0      	nop			; (mov r8, r8)
    a2d4:	000150cc 	.word	0x000150cc
    a2d8:	000150d8 	.word	0x000150d8
    a2dc:	0001511c 	.word	0x0001511c
    a2e0:	000150fc 	.word	0x000150fc
    a2e4:	00015128 	.word	0x00015128

0000a2e8 <__rt_ffs>:
 * @return return the index of the first bit set. If value is 0, then this function
 * shall return 0.
 */
int __rt_ffs(int value)
{
    if (value == 0) return 0;
    a2e8:	2800      	cmp	r0, #0
    a2ea:	d015      	beq.n	a318 <__rt_ffs+0x30>

    if (value & 0xff)
    a2ec:	23ff      	movs	r3, #255	; 0xff
    a2ee:	001a      	movs	r2, r3
    a2f0:	4002      	ands	r2, r0
    a2f2:	4203      	tst	r3, r0
    a2f4:	d10c      	bne.n	a310 <__rt_ffs+0x28>
        return __lowest_bit_bitmap[value & 0xff] + 1;

    if (value & 0xff00)
    a2f6:	22ff      	movs	r2, #255	; 0xff
    a2f8:	0212      	lsls	r2, r2, #8
    a2fa:	4210      	tst	r0, r2
    a2fc:	d114      	bne.n	a328 <__rt_ffs+0x40>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;

    if (value & 0xff0000)
    a2fe:	22ff      	movs	r2, #255	; 0xff
    a300:	0412      	lsls	r2, r2, #16
    a302:	4210      	tst	r0, r2
    a304:	d10a      	bne.n	a31c <__rt_ffs+0x34>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;

    return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
    a306:	4b0b      	ldr	r3, [pc, #44]	; (a334 <__rt_ffs+0x4c>)
    a308:	0e00      	lsrs	r0, r0, #24
    a30a:	5c18      	ldrb	r0, [r3, r0]
    a30c:	3019      	adds	r0, #25
    a30e:	e002      	b.n	a316 <__rt_ffs+0x2e>
        return __lowest_bit_bitmap[value & 0xff] + 1;
    a310:	4b08      	ldr	r3, [pc, #32]	; (a334 <__rt_ffs+0x4c>)
    a312:	5c98      	ldrb	r0, [r3, r2]
    a314:	3001      	adds	r0, #1
}
    a316:	4770      	bx	lr
    if (value == 0) return 0;
    a318:	2000      	movs	r0, #0
    a31a:	e7fc      	b.n	a316 <__rt_ffs+0x2e>
        return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
    a31c:	1400      	asrs	r0, r0, #16
    a31e:	4018      	ands	r0, r3
    a320:	4b04      	ldr	r3, [pc, #16]	; (a334 <__rt_ffs+0x4c>)
    a322:	5c18      	ldrb	r0, [r3, r0]
    a324:	3011      	adds	r0, #17
    a326:	e7f6      	b.n	a316 <__rt_ffs+0x2e>
        return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
    a328:	1200      	asrs	r0, r0, #8
    a32a:	4018      	ands	r0, r3
    a32c:	4b01      	ldr	r3, [pc, #4]	; (a334 <__rt_ffs+0x4c>)
    a32e:	5c18      	ldrb	r0, [r3, r0]
    a330:	3009      	adds	r0, #9
    a332:	e7f0      	b.n	a316 <__rt_ffs+0x2e>
    a334:	0001518c 	.word	0x0001518c

0000a338 <rt_assert_handler>:
 * @param ex the assertion condition string
 * @param func the function name when assertion.
 * @param line the file line number when assertion.
 */
void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
    a338:	b510      	push	{r4, lr}
    a33a:	b082      	sub	sp, #8
    volatile char dummy = 0;
    a33c:	466b      	mov	r3, sp
    a33e:	1ddc      	adds	r4, r3, #7
    a340:	2300      	movs	r3, #0
    a342:	7023      	strb	r3, [r4, #0]

    if (rt_assert_hook == RT_NULL)
    a344:	4b08      	ldr	r3, [pc, #32]	; (a368 <rt_assert_handler+0x30>)
    a346:	681b      	ldr	r3, [r3, #0]
    a348:	2b00      	cmp	r3, #0
    a34a:	d002      	beq.n	a352 <rt_assert_handler+0x1a>
            while (dummy == 0);
        }
    }
    else
    {
        rt_assert_hook(ex_string, func, line);
    a34c:	4798      	blx	r3
    }
}
    a34e:	b002      	add	sp, #8
    a350:	bd10      	pop	{r4, pc}
            rt_kprintf("(%s) assertion failed at function:%s, line number:%d \n", ex_string, func, line);
    a352:	0013      	movs	r3, r2
    a354:	000a      	movs	r2, r1
    a356:	0001      	movs	r1, r0
    a358:	4804      	ldr	r0, [pc, #16]	; (a36c <rt_assert_handler+0x34>)
    a35a:	f7ff ff6f 	bl	a23c <rt_kprintf>
            while (dummy == 0);
    a35e:	7823      	ldrb	r3, [r4, #0]
    a360:	2b00      	cmp	r3, #0
    a362:	d0fc      	beq.n	a35e <rt_assert_handler+0x26>
    a364:	e7f3      	b.n	a34e <rt_assert_handler+0x16>
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	00018494 	.word	0x00018494
    a36c:	00015154 	.word	0x00015154

0000a370 <list_mem>:
#ifdef RT_USING_FINSH
#include <finsh.h>

void list_mem(void)
{
    rt_kprintf("total memory: %d\n", mem_size_aligned);
    a370:	4b08      	ldr	r3, [pc, #32]	; (a394 <list_mem+0x24>)
{
    a372:	b510      	push	{r4, lr}
    rt_kprintf("total memory: %d\n", mem_size_aligned);
    a374:	6819      	ldr	r1, [r3, #0]
    a376:	4808      	ldr	r0, [pc, #32]	; (a398 <list_mem+0x28>)
    a378:	f7ff ff60 	bl	a23c <rt_kprintf>
    rt_kprintf("used memory : %d\n", used_mem);
    a37c:	4b07      	ldr	r3, [pc, #28]	; (a39c <list_mem+0x2c>)
    a37e:	4808      	ldr	r0, [pc, #32]	; (a3a0 <list_mem+0x30>)
    a380:	6819      	ldr	r1, [r3, #0]
    a382:	f7ff ff5b 	bl	a23c <rt_kprintf>
    rt_kprintf("maximum allocated memory: %d\n", max_mem);
    a386:	4b07      	ldr	r3, [pc, #28]	; (a3a4 <list_mem+0x34>)
    a388:	4807      	ldr	r0, [pc, #28]	; (a3a8 <list_mem+0x38>)
    a38a:	6819      	ldr	r1, [r3, #0]
    a38c:	f7ff ff56 	bl	a23c <rt_kprintf>
}
    a390:	bd10      	pop	{r4, pc}
    a392:	46c0      	nop			; (mov r8, r8)
    a394:	00018548 	.word	0x00018548
    a398:	000152b4 	.word	0x000152b4
    a39c:	00018554 	.word	0x00018554
    a3a0:	000152c8 	.word	0x000152c8
    a3a4:	00018544 	.word	0x00018544
    a3a8:	000152dc 	.word	0x000152dc

0000a3ac <plug_holes>:
{
    a3ac:	b570      	push	{r4, r5, r6, lr}
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    a3ae:	4d24      	ldr	r5, [pc, #144]	; (a440 <plug_holes+0x94>)
{
    a3b0:	0004      	movs	r4, r0
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    a3b2:	682b      	ldr	r3, [r5, #0]
    a3b4:	4283      	cmp	r3, r0
    a3b6:	d838      	bhi.n	a42a <plug_holes+0x7e>
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)heap_end);
    a3b8:	4e22      	ldr	r6, [pc, #136]	; (a444 <plug_holes+0x98>)
    a3ba:	6833      	ldr	r3, [r6, #0]
    a3bc:	42a3      	cmp	r3, r4
    a3be:	d92e      	bls.n	a41e <plug_holes+0x72>
    RT_ASSERT(mem->used == 0);
    a3c0:	8863      	ldrh	r3, [r4, #2]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d125      	bne.n	a412 <plug_holes+0x66>
    nmem = (struct heap_mem *)&heap_ptr[mem->next];
    a3c6:	682a      	ldr	r2, [r5, #0]
    a3c8:	6863      	ldr	r3, [r4, #4]
    a3ca:	18d3      	adds	r3, r2, r3
    if (mem != nmem &&
    a3cc:	429c      	cmp	r4, r3
    a3ce:	d00f      	beq.n	a3f0 <plug_holes+0x44>
    a3d0:	8859      	ldrh	r1, [r3, #2]
    a3d2:	2900      	cmp	r1, #0
    a3d4:	d10c      	bne.n	a3f0 <plug_holes+0x44>
        nmem->used == 0 &&
    a3d6:	6831      	ldr	r1, [r6, #0]
    a3d8:	4299      	cmp	r1, r3
    a3da:	d009      	beq.n	a3f0 <plug_holes+0x44>
        if (lfree == nmem)
    a3dc:	491a      	ldr	r1, [pc, #104]	; (a448 <plug_holes+0x9c>)
    a3de:	6808      	ldr	r0, [r1, #0]
    a3e0:	4298      	cmp	r0, r3
    a3e2:	d028      	beq.n	a436 <plug_holes+0x8a>
        mem->next = nmem->next;
    a3e4:	6859      	ldr	r1, [r3, #4]
    a3e6:	6061      	str	r1, [r4, #4]
        ((struct heap_mem *)&heap_ptr[nmem->next])->prev = (rt_uint8_t *)mem - heap_ptr;
    a3e8:	685b      	ldr	r3, [r3, #4]
    a3ea:	1aa1      	subs	r1, r4, r2
    a3ec:	18d3      	adds	r3, r2, r3
    a3ee:	6099      	str	r1, [r3, #8]
    pmem = (struct heap_mem *)&heap_ptr[mem->prev];
    a3f0:	68a1      	ldr	r1, [r4, #8]
    a3f2:	1853      	adds	r3, r2, r1
    if (pmem != mem && pmem->used == 0)
    a3f4:	429c      	cmp	r4, r3
    a3f6:	d00b      	beq.n	a410 <plug_holes+0x64>
    a3f8:	8858      	ldrh	r0, [r3, #2]
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d108      	bne.n	a410 <plug_holes+0x64>
        if (lfree == mem)
    a3fe:	4812      	ldr	r0, [pc, #72]	; (a448 <plug_holes+0x9c>)
    a400:	6805      	ldr	r5, [r0, #0]
    a402:	42a5      	cmp	r5, r4
    a404:	d019      	beq.n	a43a <plug_holes+0x8e>
        pmem->next = mem->next;
    a406:	6860      	ldr	r0, [r4, #4]
    a408:	6058      	str	r0, [r3, #4]
        ((struct heap_mem *)&heap_ptr[mem->next])->prev = (rt_uint8_t *)pmem - heap_ptr;
    a40a:	6863      	ldr	r3, [r4, #4]
    a40c:	18d2      	adds	r2, r2, r3
    a40e:	6091      	str	r1, [r2, #8]
}
    a410:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(mem->used == 0);
    a412:	2296      	movs	r2, #150	; 0x96
    a414:	490d      	ldr	r1, [pc, #52]	; (a44c <plug_holes+0xa0>)
    a416:	480e      	ldr	r0, [pc, #56]	; (a450 <plug_holes+0xa4>)
    a418:	f7ff ff8e 	bl	a338 <rt_assert_handler>
    a41c:	e7d3      	b.n	a3c6 <plug_holes+0x1a>
    RT_ASSERT((rt_uint8_t *)mem < (rt_uint8_t *)heap_end);
    a41e:	2295      	movs	r2, #149	; 0x95
    a420:	490a      	ldr	r1, [pc, #40]	; (a44c <plug_holes+0xa0>)
    a422:	480c      	ldr	r0, [pc, #48]	; (a454 <plug_holes+0xa8>)
    a424:	f7ff ff88 	bl	a338 <rt_assert_handler>
    a428:	e7ca      	b.n	a3c0 <plug_holes+0x14>
    RT_ASSERT((rt_uint8_t *)mem >= heap_ptr);
    a42a:	2294      	movs	r2, #148	; 0x94
    a42c:	4907      	ldr	r1, [pc, #28]	; (a44c <plug_holes+0xa0>)
    a42e:	480a      	ldr	r0, [pc, #40]	; (a458 <plug_holes+0xac>)
    a430:	f7ff ff82 	bl	a338 <rt_assert_handler>
    a434:	e7c0      	b.n	a3b8 <plug_holes+0xc>
            lfree = mem;
    a436:	600c      	str	r4, [r1, #0]
    a438:	e7d4      	b.n	a3e4 <plug_holes+0x38>
            lfree = pmem;
    a43a:	6003      	str	r3, [r0, #0]
    a43c:	e7e3      	b.n	a406 <plug_holes+0x5a>
    a43e:	46c0      	nop			; (mov r8, r8)
    a440:	0001851c 	.word	0x0001851c
    a444:	00018518 	.word	0x00018518
    a448:	00018540 	.word	0x00018540
    a44c:	0001556c 	.word	0x0001556c
    a450:	00015348 	.word	0x00015348
    a454:	0001531c 	.word	0x0001531c
    a458:	000152fc 	.word	0x000152fc

0000a45c <rt_free.part.0>:
void rt_free(void *rmem)
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	0004      	movs	r4, r0
    RT_DEBUG_NOT_IN_INTERRUPT;
    a460:	f7f9 fe26 	bl	40b0 <rt_hw_interrupt_disable>
    a464:	0005      	movs	r5, r0
    a466:	f7ff fae9 	bl	9a3c <rt_interrupt_get_nest>
    a46a:	2800      	cmp	r0, #0
    a46c:	d000      	beq.n	a470 <rt_free.part.0+0x14>
    a46e:	e067      	b.n	a540 <rt_free.part.0+0xe4>
    a470:	0028      	movs	r0, r5
    a472:	f7f9 fe21 	bl	40b8 <rt_hw_interrupt_enable>
    RT_ASSERT((((rt_uint32_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
    a476:	07a3      	lsls	r3, r4, #30
    a478:	d15c      	bne.n	a534 <rt_free.part.0+0xd8>
    RT_ASSERT((rt_uint8_t *)rmem >= (rt_uint8_t *)heap_ptr &&
    a47a:	4d3d      	ldr	r5, [pc, #244]	; (a570 <rt_free.part.0+0x114>)
    a47c:	682b      	ldr	r3, [r5, #0]
    a47e:	429c      	cmp	r4, r3
    a480:	d303      	bcc.n	a48a <rt_free.part.0+0x2e>
    a482:	4b3c      	ldr	r3, [pc, #240]	; (a574 <rt_free.part.0+0x118>)
    a484:	681b      	ldr	r3, [r3, #0]
    a486:	429c      	cmp	r4, r3
    a488:	d312      	bcc.n	a4b0 <rt_free.part.0+0x54>
    a48a:	4a3b      	ldr	r2, [pc, #236]	; (a578 <rt_free.part.0+0x11c>)
    a48c:	493b      	ldr	r1, [pc, #236]	; (a57c <rt_free.part.0+0x120>)
    a48e:	483c      	ldr	r0, [pc, #240]	; (a580 <rt_free.part.0+0x124>)
    a490:	f7ff ff52 	bl	a338 <rt_assert_handler>
    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));
    a494:	4b3b      	ldr	r3, [pc, #236]	; (a584 <rt_free.part.0+0x128>)
    a496:	681b      	ldr	r3, [r3, #0]
    a498:	2b00      	cmp	r3, #0
    a49a:	d001      	beq.n	a4a0 <rt_free.part.0+0x44>
    a49c:	0020      	movs	r0, r4
    a49e:	4798      	blx	r3
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
    a4a0:	682b      	ldr	r3, [r5, #0]
    a4a2:	429c      	cmp	r4, r3
    a4a4:	d303      	bcc.n	a4ae <rt_free.part.0+0x52>
        (rt_uint8_t *)rmem >= (rt_uint8_t *)heap_end)
    a4a6:	4b33      	ldr	r3, [pc, #204]	; (a574 <rt_free.part.0+0x118>)
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
    a4a8:	681b      	ldr	r3, [r3, #0]
    a4aa:	429c      	cmp	r4, r3
    a4ac:	d304      	bcc.n	a4b8 <rt_free.part.0+0x5c>
}
    a4ae:	bd70      	pop	{r4, r5, r6, pc}
    RT_OBJECT_HOOK_CALL(rt_free_hook, (rmem));
    a4b0:	4b34      	ldr	r3, [pc, #208]	; (a584 <rt_free.part.0+0x128>)
    a4b2:	681b      	ldr	r3, [r3, #0]
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d1f1      	bne.n	a49c <rt_free.part.0+0x40>
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
    a4b8:	2101      	movs	r1, #1
    a4ba:	4e33      	ldr	r6, [pc, #204]	; (a588 <rt_free.part.0+0x12c>)
    mem = (struct heap_mem *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
    a4bc:	3c0c      	subs	r4, #12
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
    a4be:	0030      	movs	r0, r6
    a4c0:	4249      	negs	r1, r1
    a4c2:	f7ff f981 	bl	97c8 <rt_sem_take>
    if (!mem->used || mem->magic != HEAP_MAGIC)
    a4c6:	8863      	ldrh	r3, [r4, #2]
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d004      	beq.n	a4d6 <rt_free.part.0+0x7a>
    a4cc:	23f5      	movs	r3, #245	; 0xf5
    a4ce:	8822      	ldrh	r2, [r4, #0]
    a4d0:	015b      	lsls	r3, r3, #5
    a4d2:	429a      	cmp	r2, r3
    a4d4:	d015      	beq.n	a502 <rt_free.part.0+0xa6>
        rt_kprintf("to free a bad data block:\n");
    a4d6:	482d      	ldr	r0, [pc, #180]	; (a58c <rt_free.part.0+0x130>)
    a4d8:	f7ff feb0 	bl	a23c <rt_kprintf>
        rt_kprintf("mem: 0x%08x, used flag: %d, magic code: 0x%04x\n", mem, mem->used, mem->magic);
    a4dc:	8823      	ldrh	r3, [r4, #0]
    a4de:	0021      	movs	r1, r4
    a4e0:	8862      	ldrh	r2, [r4, #2]
    a4e2:	482b      	ldr	r0, [pc, #172]	; (a590 <rt_free.part.0+0x134>)
    a4e4:	f7ff feaa 	bl	a23c <rt_kprintf>
    RT_ASSERT(mem->used);
    a4e8:	8863      	ldrh	r3, [r4, #2]
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d034      	beq.n	a558 <rt_free.part.0+0xfc>
    RT_ASSERT(mem->magic == HEAP_MAGIC);
    a4ee:	23f5      	movs	r3, #245	; 0xf5
    a4f0:	8822      	ldrh	r2, [r4, #0]
    a4f2:	015b      	lsls	r3, r3, #5
    a4f4:	429a      	cmp	r2, r3
    a4f6:	d004      	beq.n	a502 <rt_free.part.0+0xa6>
    a4f8:	4a26      	ldr	r2, [pc, #152]	; (a594 <rt_free.part.0+0x138>)
    a4fa:	4920      	ldr	r1, [pc, #128]	; (a57c <rt_free.part.0+0x120>)
    a4fc:	4826      	ldr	r0, [pc, #152]	; (a598 <rt_free.part.0+0x13c>)
    a4fe:	f7ff ff1b 	bl	a338 <rt_assert_handler>
    mem->used  = 0;
    a502:	2300      	movs	r3, #0
    a504:	8063      	strh	r3, [r4, #2]
    mem->magic = HEAP_MAGIC;
    a506:	23f5      	movs	r3, #245	; 0xf5
    a508:	015b      	lsls	r3, r3, #5
    a50a:	8023      	strh	r3, [r4, #0]
    if (mem < lfree)
    a50c:	4b23      	ldr	r3, [pc, #140]	; (a59c <rt_free.part.0+0x140>)
    a50e:	681a      	ldr	r2, [r3, #0]
    a510:	4294      	cmp	r4, r2
    a512:	d200      	bcs.n	a516 <rt_free.part.0+0xba>
        lfree = mem;
    a514:	601c      	str	r4, [r3, #0]
    used_mem -= (mem->next - ((rt_uint8_t *)mem - heap_ptr));
    a516:	4922      	ldr	r1, [pc, #136]	; (a5a0 <rt_free.part.0+0x144>)
    a518:	6862      	ldr	r2, [r4, #4]
    a51a:	680b      	ldr	r3, [r1, #0]
    plug_holes(mem);
    a51c:	0020      	movs	r0, r4
    used_mem -= (mem->next - ((rt_uint8_t *)mem - heap_ptr));
    a51e:	1a9b      	subs	r3, r3, r2
    a520:	682a      	ldr	r2, [r5, #0]
    a522:	1aa2      	subs	r2, r4, r2
    a524:	189b      	adds	r3, r3, r2
    a526:	600b      	str	r3, [r1, #0]
    plug_holes(mem);
    a528:	f7ff ff40 	bl	a3ac <plug_holes>
    rt_sem_release(&heap_sem);
    a52c:	0030      	movs	r0, r6
    a52e:	f7ff fa1d 	bl	996c <rt_sem_release>
    a532:	e7bc      	b.n	a4ae <rt_free.part.0+0x52>
    RT_ASSERT((((rt_uint32_t)rmem) & (RT_ALIGN_SIZE - 1)) == 0);
    a534:	4a1b      	ldr	r2, [pc, #108]	; (a5a4 <rt_free.part.0+0x148>)
    a536:	4911      	ldr	r1, [pc, #68]	; (a57c <rt_free.part.0+0x120>)
    a538:	481b      	ldr	r0, [pc, #108]	; (a5a8 <rt_free.part.0+0x14c>)
    a53a:	f7ff fefd 	bl	a338 <rt_assert_handler>
    a53e:	e79c      	b.n	a47a <rt_free.part.0+0x1e>
    RT_DEBUG_NOT_IN_INTERRUPT;
    a540:	4e0e      	ldr	r6, [pc, #56]	; (a57c <rt_free.part.0+0x120>)
    a542:	481a      	ldr	r0, [pc, #104]	; (a5ac <rt_free.part.0+0x150>)
    a544:	0031      	movs	r1, r6
    a546:	f7ff fe79 	bl	a23c <rt_kprintf>
    a54a:	2287      	movs	r2, #135	; 0x87
    a54c:	0031      	movs	r1, r6
    a54e:	4818      	ldr	r0, [pc, #96]	; (a5b0 <rt_free.part.0+0x154>)
    a550:	0092      	lsls	r2, r2, #2
    a552:	f7ff fef1 	bl	a338 <rt_assert_handler>
    a556:	e78b      	b.n	a470 <rt_free.part.0+0x14>
    RT_ASSERT(mem->used);
    a558:	4a16      	ldr	r2, [pc, #88]	; (a5b4 <rt_free.part.0+0x158>)
    a55a:	4908      	ldr	r1, [pc, #32]	; (a57c <rt_free.part.0+0x120>)
    a55c:	4816      	ldr	r0, [pc, #88]	; (a5b8 <rt_free.part.0+0x15c>)
    a55e:	f7ff feeb 	bl	a338 <rt_assert_handler>
    RT_ASSERT(mem->magic == HEAP_MAGIC);
    a562:	23f5      	movs	r3, #245	; 0xf5
    a564:	8822      	ldrh	r2, [r4, #0]
    a566:	015b      	lsls	r3, r3, #5
    a568:	429a      	cmp	r2, r3
    a56a:	d1c5      	bne.n	a4f8 <rt_free.part.0+0x9c>
    a56c:	e7c9      	b.n	a502 <rt_free.part.0+0xa6>
    a56e:	46c0      	nop			; (mov r8, r8)
    a570:	0001851c 	.word	0x0001851c
    a574:	00018518 	.word	0x00018518
    a578:	0000021f 	.word	0x0000021f
    a57c:	00015564 	.word	0x00015564
    a580:	0001538c 	.word	0x0001538c
    a584:	0001854c 	.word	0x0001854c
    a588:	00018520 	.word	0x00018520
    a58c:	000153e8 	.word	0x000153e8
    a590:	00015404 	.word	0x00015404
    a594:	0000023f 	.word	0x0000023f
    a598:	00015440 	.word	0x00015440
    a59c:	00018540 	.word	0x00018540
    a5a0:	00018554 	.word	0x00018554
    a5a4:	0000021e 	.word	0x0000021e
    a5a8:	00015358 	.word	0x00015358
    a5ac:	00014f10 	.word	0x00014f10
    a5b0:	00015530 	.word	0x00015530
    a5b4:	0000023e 	.word	0x0000023e
    a5b8:	00015434 	.word	0x00015434

0000a5bc <rt_system_heap_init>:
{
    a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5be:	4647      	mov	r7, r8
    a5c0:	46ce      	mov	lr, r9
    rt_uint32_t begin_align = RT_ALIGN((rt_uint32_t)begin_addr, RT_ALIGN_SIZE);
    a5c2:	2303      	movs	r3, #3
    rt_uint32_t end_align = RT_ALIGN_DOWN((rt_uint32_t)end_addr, RT_ALIGN_SIZE);
    a5c4:	000d      	movs	r5, r1
{
    a5c6:	b580      	push	{r7, lr}
    rt_uint32_t begin_align = RT_ALIGN((rt_uint32_t)begin_addr, RT_ALIGN_SIZE);
    a5c8:	1cc4      	adds	r4, r0, #3
{
    a5ca:	0006      	movs	r6, r0
    a5cc:	000f      	movs	r7, r1
    rt_uint32_t begin_align = RT_ALIGN((rt_uint32_t)begin_addr, RT_ALIGN_SIZE);
    a5ce:	439c      	bics	r4, r3
    rt_uint32_t end_align = RT_ALIGN_DOWN((rt_uint32_t)end_addr, RT_ALIGN_SIZE);
    a5d0:	439d      	bics	r5, r3
    RT_DEBUG_NOT_IN_INTERRUPT;
    a5d2:	f7f9 fd6d 	bl	40b0 <rt_hw_interrupt_disable>
    a5d6:	4680      	mov	r8, r0
    a5d8:	f7ff fa30 	bl	9a3c <rt_interrupt_get_nest>
    a5dc:	2800      	cmp	r0, #0
    a5de:	d130      	bne.n	a642 <rt_system_heap_init+0x86>
    a5e0:	4640      	mov	r0, r8
    a5e2:	f7f9 fd69 	bl	40b8 <rt_hw_interrupt_enable>
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
    a5e6:	2d18      	cmp	r5, #24
    a5e8:	d903      	bls.n	a5f2 <rt_system_heap_init+0x36>
        ((end_align - 2 * SIZEOF_STRUCT_MEM) >= begin_align))
    a5ea:	002b      	movs	r3, r5
    a5ec:	3b18      	subs	r3, #24
    if ((end_align > (2 * SIZEOF_STRUCT_MEM)) &&
    a5ee:	42a3      	cmp	r3, r4
    a5f0:	d208      	bcs.n	a604 <rt_system_heap_init+0x48>
        rt_kprintf("mem init, error begin address 0x%x, and end address 0x%x\n",
    a5f2:	003a      	movs	r2, r7
    a5f4:	0031      	movs	r1, r6
    a5f6:	4819      	ldr	r0, [pc, #100]	; (a65c <rt_system_heap_init+0xa0>)
    a5f8:	f7ff fe20 	bl	a23c <rt_kprintf>
}
    a5fc:	bcc0      	pop	{r6, r7}
    a5fe:	46b9      	mov	r9, r7
    a600:	46b0      	mov	r8, r6
    a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mem_size_aligned = end_align - begin_align - 2 * SIZEOF_STRUCT_MEM;
    a604:	1b2d      	subs	r5, r5, r4
    a606:	002a      	movs	r2, r5
    a608:	4b15      	ldr	r3, [pc, #84]	; (a660 <rt_system_heap_init+0xa4>)
    a60a:	3a18      	subs	r2, #24
    a60c:	601a      	str	r2, [r3, #0]
    mem->prev  = 0;
    a60e:	2300      	movs	r3, #0
    a610:	60a3      	str	r3, [r4, #8]
    mem->magic = HEAP_MAGIC;
    a612:	23f5      	movs	r3, #245	; 0xf5
    heap_ptr = (rt_uint8_t *)begin_align;
    a614:	4e13      	ldr	r6, [pc, #76]	; (a664 <rt_system_heap_init+0xa8>)
    mem->magic = HEAP_MAGIC;
    a616:	015b      	lsls	r3, r3, #5
    mem->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
    a618:	3d0c      	subs	r5, #12
    mem->magic = HEAP_MAGIC;
    a61a:	6023      	str	r3, [r4, #0]
    heap_end        = (struct heap_mem *)&heap_ptr[mem->next];
    a61c:	4b12      	ldr	r3, [pc, #72]	; (a668 <rt_system_heap_init+0xac>)
    mem->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
    a61e:	6065      	str	r5, [r4, #4]
    heap_ptr = (rt_uint8_t *)begin_align;
    a620:	6034      	str	r4, [r6, #0]
    heap_end        = (struct heap_mem *)&heap_ptr[mem->next];
    a622:	1964      	adds	r4, r4, r5
    a624:	601c      	str	r4, [r3, #0]
    heap_end->magic = HEAP_MAGIC;
    a626:	4b11      	ldr	r3, [pc, #68]	; (a66c <rt_system_heap_init+0xb0>)
    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
    a628:	2201      	movs	r2, #1
    heap_end->magic = HEAP_MAGIC;
    a62a:	6023      	str	r3, [r4, #0]
    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
    a62c:	4910      	ldr	r1, [pc, #64]	; (a670 <rt_system_heap_init+0xb4>)
    a62e:	2300      	movs	r3, #0
    a630:	4810      	ldr	r0, [pc, #64]	; (a674 <rt_system_heap_init+0xb8>)
    heap_end->next  = mem_size_aligned + SIZEOF_STRUCT_MEM;
    a632:	6065      	str	r5, [r4, #4]
    heap_end->prev  = mem_size_aligned + SIZEOF_STRUCT_MEM;
    a634:	60a5      	str	r5, [r4, #8]
    rt_sem_init(&heap_sem, "heap", 1, RT_IPC_FLAG_FIFO);
    a636:	f7ff f8a9 	bl	978c <rt_sem_init>
    lfree = (struct heap_mem *)heap_ptr;
    a63a:	6832      	ldr	r2, [r6, #0]
    a63c:	4b0e      	ldr	r3, [pc, #56]	; (a678 <rt_system_heap_init+0xbc>)
    a63e:	601a      	str	r2, [r3, #0]
    a640:	e7dc      	b.n	a5fc <rt_system_heap_init+0x40>
    RT_DEBUG_NOT_IN_INTERRUPT;
    a642:	4b0e      	ldr	r3, [pc, #56]	; (a67c <rt_system_heap_init+0xc0>)
    a644:	480e      	ldr	r0, [pc, #56]	; (a680 <rt_system_heap_init+0xc4>)
    a646:	4699      	mov	r9, r3
    a648:	0019      	movs	r1, r3
    a64a:	f7ff fdf7 	bl	a23c <rt_kprintf>
    a64e:	22c5      	movs	r2, #197	; 0xc5
    a650:	4649      	mov	r1, r9
    a652:	480c      	ldr	r0, [pc, #48]	; (a684 <rt_system_heap_init+0xc8>)
    a654:	f7ff fe70 	bl	a338 <rt_assert_handler>
    a658:	e7c2      	b.n	a5e0 <rt_system_heap_init+0x24>
    a65a:	46c0      	nop			; (mov r8, r8)
    a65c:	00015464 	.word	0x00015464
    a660:	00018548 	.word	0x00018548
    a664:	0001851c 	.word	0x0001851c
    a668:	00018518 	.word	0x00018518
    a66c:	00011ea0 	.word	0x00011ea0
    a670:	0001545c 	.word	0x0001545c
    a674:	00018520 	.word	0x00018520
    a678:	00018540 	.word	0x00018540
    a67c:	00015590 	.word	0x00015590
    a680:	00014f10 	.word	0x00014f10
    a684:	00015530 	.word	0x00015530

0000a688 <rt_malloc>:
{
    a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a68a:	4645      	mov	r5, r8
    a68c:	46de      	mov	lr, fp
    a68e:	4657      	mov	r7, sl
    a690:	464e      	mov	r6, r9
    a692:	b5e0      	push	{r5, r6, r7, lr}
    a694:	1e05      	subs	r5, r0, #0
    if (size == 0)
    a696:	d035      	beq.n	a704 <rt_malloc+0x7c>
    RT_DEBUG_NOT_IN_INTERRUPT;
    a698:	f7f9 fd0a 	bl	40b0 <rt_hw_interrupt_disable>
    a69c:	0004      	movs	r4, r0
    a69e:	f7ff f9cd 	bl	9a3c <rt_interrupt_get_nest>
    a6a2:	2800      	cmp	r0, #0
    a6a4:	d136      	bne.n	a714 <rt_malloc+0x8c>
    a6a6:	0020      	movs	r0, r4
    a6a8:	f7f9 fd06 	bl	40b8 <rt_hw_interrupt_enable>
    if (size != RT_ALIGN(size, RT_ALIGN_SIZE))
    a6ac:	2303      	movs	r3, #3
    if (size > mem_size_aligned)
    a6ae:	4c61      	ldr	r4, [pc, #388]	; (a834 <rt_malloc+0x1ac>)
    if (size != RT_ALIGN(size, RT_ALIGN_SIZE))
    a6b0:	3503      	adds	r5, #3
    a6b2:	439d      	bics	r5, r3
    if (size > mem_size_aligned)
    a6b4:	6823      	ldr	r3, [r4, #0]
    a6b6:	429d      	cmp	r5, r3
    a6b8:	d824      	bhi.n	a704 <rt_malloc+0x7c>
    if (size < MIN_SIZE_ALIGNED)
    a6ba:	2d0c      	cmp	r5, #12
    a6bc:	d200      	bcs.n	a6c0 <rt_malloc+0x38>
    a6be:	250c      	movs	r5, #12
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
    a6c0:	2101      	movs	r1, #1
    a6c2:	485d      	ldr	r0, [pc, #372]	; (a838 <rt_malloc+0x1b0>)
    a6c4:	4249      	negs	r1, r1
    a6c6:	f7ff f87f 	bl	97c8 <rt_sem_take>
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
    a6ca:	4b5c      	ldr	r3, [pc, #368]	; (a83c <rt_malloc+0x1b4>)
         ptr < mem_size_aligned - size;
    a6cc:	6822      	ldr	r2, [r4, #0]
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
    a6ce:	4698      	mov	r8, r3
    a6d0:	681b      	ldr	r3, [r3, #0]
         ptr < mem_size_aligned - size;
    a6d2:	4691      	mov	r9, r2
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
    a6d4:	469c      	mov	ip, r3
    a6d6:	4b5a      	ldr	r3, [pc, #360]	; (a840 <rt_malloc+0x1b8>)
         ptr < mem_size_aligned - size;
    a6d8:	1b50      	subs	r0, r2, r5
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
    a6da:	6819      	ldr	r1, [r3, #0]
    a6dc:	4663      	mov	r3, ip
    a6de:	1a5b      	subs	r3, r3, r1
    a6e0:	4298      	cmp	r0, r3
    a6e2:	d90c      	bls.n	a6fe <rt_malloc+0x76>
        mem = (struct heap_mem *)&heap_ptr[ptr];
    a6e4:	18cc      	adds	r4, r1, r3
        if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
    a6e6:	8862      	ldrh	r2, [r4, #2]
    a6e8:	2a00      	cmp	r2, #0
    a6ea:	d11f      	bne.n	a72c <rt_malloc+0xa4>
    a6ec:	6862      	ldr	r2, [r4, #4]
    a6ee:	1ad7      	subs	r7, r2, r3
    a6f0:	003e      	movs	r6, r7
    a6f2:	3e0c      	subs	r6, #12
    a6f4:	42ae      	cmp	r6, r5
    a6f6:	d21b      	bcs.n	a730 <rt_malloc+0xa8>
    a6f8:	0013      	movs	r3, r2
    for (ptr = (rt_uint8_t *)lfree - heap_ptr;
    a6fa:	4298      	cmp	r0, r3
    a6fc:	d8f2      	bhi.n	a6e4 <rt_malloc+0x5c>
    rt_sem_release(&heap_sem);
    a6fe:	484e      	ldr	r0, [pc, #312]	; (a838 <rt_malloc+0x1b0>)
    a700:	f7ff f934 	bl	996c <rt_sem_release>
    return RT_NULL;
    a704:	2600      	movs	r6, #0
}
    a706:	0030      	movs	r0, r6
    a708:	bcf0      	pop	{r4, r5, r6, r7}
    a70a:	46bb      	mov	fp, r7
    a70c:	46b2      	mov	sl, r6
    a70e:	46a9      	mov	r9, r5
    a710:	46a0      	mov	r8, r4
    a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_DEBUG_NOT_IN_INTERRUPT;
    a714:	4e4b      	ldr	r6, [pc, #300]	; (a844 <rt_malloc+0x1bc>)
    a716:	484c      	ldr	r0, [pc, #304]	; (a848 <rt_malloc+0x1c0>)
    a718:	0031      	movs	r1, r6
    a71a:	f7ff fd8f 	bl	a23c <rt_kprintf>
    a71e:	220c      	movs	r2, #12
    a720:	0031      	movs	r1, r6
    a722:	484a      	ldr	r0, [pc, #296]	; (a84c <rt_malloc+0x1c4>)
    a724:	32ff      	adds	r2, #255	; 0xff
    a726:	f7ff fe07 	bl	a338 <rt_assert_handler>
    a72a:	e7bc      	b.n	a6a6 <rt_malloc+0x1e>
        if ((!mem->used) && (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size)
    a72c:	6863      	ldr	r3, [r4, #4]
    a72e:	e7d7      	b.n	a6e0 <rt_malloc+0x58>
                (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED))
    a730:	0028      	movs	r0, r5
    a732:	3018      	adds	r0, #24
            if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >=
    a734:	4286      	cmp	r6, r0
    a736:	d339      	bcc.n	a7ac <rt_malloc+0x124>
                ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
    a738:	002f      	movs	r7, r5
    a73a:	370c      	adds	r7, #12
    a73c:	19d8      	adds	r0, r3, r7
    a73e:	4682      	mov	sl, r0
                mem2->magic = HEAP_MAGIC;
    a740:	26f5      	movs	r6, #245	; 0xf5
                mem2       = (struct heap_mem *)&heap_ptr[ptr2];
    a742:	1808      	adds	r0, r1, r0
                mem2->prev = ptr;
    a744:	6083      	str	r3, [r0, #8]
                mem->next = ptr2;
    a746:	4653      	mov	r3, sl
                mem2->magic = HEAP_MAGIC;
    a748:	0176      	lsls	r6, r6, #5
                mem2->next = mem->next;
    a74a:	6042      	str	r2, [r0, #4]
                mem2->magic = HEAP_MAGIC;
    a74c:	6006      	str	r6, [r0, #0]
                mem->next = ptr2;
    a74e:	6063      	str	r3, [r4, #4]
                mem->used = 1;
    a750:	2301      	movs	r3, #1
    a752:	8063      	strh	r3, [r4, #2]
                if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
    a754:	464b      	mov	r3, r9
    a756:	6842      	ldr	r2, [r0, #4]
    a758:	330c      	adds	r3, #12
    a75a:	429a      	cmp	r2, r3
    a75c:	d002      	beq.n	a764 <rt_malloc+0xdc>
                    ((struct heap_mem *)&heap_ptr[mem2->next])->prev = ptr2;
    a75e:	4653      	mov	r3, sl
    a760:	188a      	adds	r2, r1, r2
    a762:	6093      	str	r3, [r2, #8]
                used_mem += (size + SIZEOF_STRUCT_MEM);
    a764:	4a3a      	ldr	r2, [pc, #232]	; (a850 <rt_malloc+0x1c8>)
    a766:	6813      	ldr	r3, [r2, #0]
    a768:	330c      	adds	r3, #12
    a76a:	195b      	adds	r3, r3, r5
    a76c:	6013      	str	r3, [r2, #0]
                if (max_mem < used_mem)
    a76e:	4a39      	ldr	r2, [pc, #228]	; (a854 <rt_malloc+0x1cc>)
    a770:	6810      	ldr	r0, [r2, #0]
    a772:	4283      	cmp	r3, r0
    a774:	d83f      	bhi.n	a7f6 <rt_malloc+0x16e>
            mem->magic = HEAP_MAGIC;
    a776:	23f5      	movs	r3, #245	; 0xf5
    a778:	015b      	lsls	r3, r3, #5
    a77a:	8023      	strh	r3, [r4, #0]
            if (mem == lfree)
    a77c:	45a4      	cmp	ip, r4
    a77e:	d03c      	beq.n	a7fa <rt_malloc+0x172>
    a780:	4b35      	ldr	r3, [pc, #212]	; (a858 <rt_malloc+0x1d0>)
    a782:	4699      	mov	r9, r3
            rt_sem_release(&heap_sem);
    a784:	482c      	ldr	r0, [pc, #176]	; (a838 <rt_malloc+0x1b0>)
    a786:	f7ff f8f1 	bl	996c <rt_sem_release>
            RT_ASSERT((rt_uint32_t)mem + SIZEOF_STRUCT_MEM + size <= (rt_uint32_t)heap_end);
    a78a:	464b      	mov	r3, r9
    a78c:	681b      	ldr	r3, [r3, #0]
    a78e:	193f      	adds	r7, r7, r4
    a790:	42bb      	cmp	r3, r7
    a792:	d329      	bcc.n	a7e8 <rt_malloc+0x160>
            RT_ASSERT((rt_uint32_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM) % RT_ALIGN_SIZE == 0);
    a794:	0026      	movs	r6, r4
    a796:	360c      	adds	r6, #12
    a798:	07a3      	lsls	r3, r4, #30
    a79a:	d116      	bne.n	a7ca <rt_malloc+0x142>
            RT_OBJECT_HOOK_CALL(rt_malloc_hook,
    a79c:	4b2f      	ldr	r3, [pc, #188]	; (a85c <rt_malloc+0x1d4>)
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	2b00      	cmp	r3, #0
    a7a2:	d0b0      	beq.n	a706 <rt_malloc+0x7e>
    a7a4:	0029      	movs	r1, r5
    a7a6:	0030      	movs	r0, r6
    a7a8:	4798      	blx	r3
    a7aa:	e7ac      	b.n	a706 <rt_malloc+0x7e>
                mem->used = 1;
    a7ac:	2301      	movs	r3, #1
    a7ae:	8063      	strh	r3, [r4, #2]
                used_mem += mem->next - ((rt_uint8_t *)mem - heap_ptr);
    a7b0:	4b27      	ldr	r3, [pc, #156]	; (a850 <rt_malloc+0x1c8>)
    a7b2:	681a      	ldr	r2, [r3, #0]
    a7b4:	4691      	mov	r9, r2
    a7b6:	444f      	add	r7, r9
    a7b8:	601f      	str	r7, [r3, #0]
                if (max_mem < used_mem)
    a7ba:	4b26      	ldr	r3, [pc, #152]	; (a854 <rt_malloc+0x1cc>)
    a7bc:	681a      	ldr	r2, [r3, #0]
    a7be:	4297      	cmp	r7, r2
    a7c0:	d900      	bls.n	a7c4 <rt_malloc+0x13c>
                    max_mem = used_mem;
    a7c2:	601f      	str	r7, [r3, #0]
    a7c4:	002f      	movs	r7, r5
    a7c6:	370c      	adds	r7, #12
    a7c8:	e7d5      	b.n	a776 <rt_malloc+0xee>
            RT_ASSERT((rt_uint32_t)((rt_uint8_t *)mem + SIZEOF_STRUCT_MEM) % RT_ALIGN_SIZE == 0);
    a7ca:	22bd      	movs	r2, #189	; 0xbd
    a7cc:	491d      	ldr	r1, [pc, #116]	; (a844 <rt_malloc+0x1bc>)
    a7ce:	4824      	ldr	r0, [pc, #144]	; (a860 <rt_malloc+0x1d8>)
    a7d0:	0052      	lsls	r2, r2, #1
    a7d2:	f7ff fdb1 	bl	a338 <rt_assert_handler>
            RT_ASSERT((((rt_uint32_t)mem) & (RT_ALIGN_SIZE - 1)) == 0);
    a7d6:	07a3      	lsls	r3, r4, #30
    a7d8:	d0e0      	beq.n	a79c <rt_malloc+0x114>
    a7da:	227c      	movs	r2, #124	; 0x7c
    a7dc:	4919      	ldr	r1, [pc, #100]	; (a844 <rt_malloc+0x1bc>)
    a7de:	4821      	ldr	r0, [pc, #132]	; (a864 <rt_malloc+0x1dc>)
    a7e0:	32ff      	adds	r2, #255	; 0xff
    a7e2:	f7ff fda9 	bl	a338 <rt_assert_handler>
    a7e6:	e7d9      	b.n	a79c <rt_malloc+0x114>
            RT_ASSERT((rt_uint32_t)mem + SIZEOF_STRUCT_MEM + size <= (rt_uint32_t)heap_end);
    a7e8:	227a      	movs	r2, #122	; 0x7a
    a7ea:	4916      	ldr	r1, [pc, #88]	; (a844 <rt_malloc+0x1bc>)
    a7ec:	481e      	ldr	r0, [pc, #120]	; (a868 <rt_malloc+0x1e0>)
    a7ee:	32ff      	adds	r2, #255	; 0xff
    a7f0:	f7ff fda2 	bl	a338 <rt_assert_handler>
    a7f4:	e7ce      	b.n	a794 <rt_malloc+0x10c>
                    max_mem = used_mem;
    a7f6:	6013      	str	r3, [r2, #0]
    a7f8:	e7bd      	b.n	a776 <rt_malloc+0xee>
                while (lfree->used && lfree != heap_end)
    a7fa:	4663      	mov	r3, ip
    a7fc:	885b      	ldrh	r3, [r3, #2]
    a7fe:	2b00      	cmp	r3, #0
    a800:	d0be      	beq.n	a780 <rt_malloc+0xf8>
    a802:	4b15      	ldr	r3, [pc, #84]	; (a858 <rt_malloc+0x1d0>)
    a804:	2000      	movs	r0, #0
    a806:	4699      	mov	r9, r3
    a808:	681a      	ldr	r2, [r3, #0]
    a80a:	e008      	b.n	a81e <rt_malloc+0x196>
                    lfree = (struct heap_mem *)&heap_ptr[lfree->next];
    a80c:	4663      	mov	r3, ip
    a80e:	685b      	ldr	r3, [r3, #4]
    a810:	2001      	movs	r0, #1
    a812:	469c      	mov	ip, r3
    a814:	448c      	add	ip, r1
                while (lfree->used && lfree != heap_end)
    a816:	4663      	mov	r3, ip
    a818:	885b      	ldrh	r3, [r3, #2]
    a81a:	2b00      	cmp	r3, #0
    a81c:	d006      	beq.n	a82c <rt_malloc+0x1a4>
    a81e:	4562      	cmp	r2, ip
    a820:	d1f4      	bne.n	a80c <rt_malloc+0x184>
    a822:	2800      	cmp	r0, #0
    a824:	d0ae      	beq.n	a784 <rt_malloc+0xfc>
    a826:	4643      	mov	r3, r8
    a828:	601a      	str	r2, [r3, #0]
    a82a:	e7ab      	b.n	a784 <rt_malloc+0xfc>
    a82c:	4643      	mov	r3, r8
    a82e:	4662      	mov	r2, ip
    a830:	601a      	str	r2, [r3, #0]
    a832:	e7a7      	b.n	a784 <rt_malloc+0xfc>
    a834:	00018548 	.word	0x00018548
    a838:	00018520 	.word	0x00018520
    a83c:	00018540 	.word	0x00018540
    a840:	0001851c 	.word	0x0001851c
    a844:	00015584 	.word	0x00015584
    a848:	00014f10 	.word	0x00014f10
    a84c:	00015530 	.word	0x00015530
    a850:	00018554 	.word	0x00018554
    a854:	00018544 	.word	0x00018544
    a858:	00018518 	.word	0x00018518
    a85c:	00018550 	.word	0x00018550
    a860:	000154e8 	.word	0x000154e8
    a864:	00015534 	.word	0x00015534
    a868:	000154a0 	.word	0x000154a0

0000a86c <rt_realloc>:
{
    a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a86e:	46d6      	mov	lr, sl
    a870:	4646      	mov	r6, r8
    a872:	464f      	mov	r7, r9
    a874:	b5c0      	push	{r6, r7, lr}
    a876:	0005      	movs	r5, r0
    a878:	000c      	movs	r4, r1
    RT_DEBUG_NOT_IN_INTERRUPT;
    a87a:	f7f9 fc19 	bl	40b0 <rt_hw_interrupt_disable>
    a87e:	0006      	movs	r6, r0
    a880:	f7ff f8dc 	bl	9a3c <rt_interrupt_get_nest>
    a884:	2800      	cmp	r0, #0
    a886:	d151      	bne.n	a92c <rt_realloc+0xc0>
    a888:	0030      	movs	r0, r6
    a88a:	f7f9 fc15 	bl	40b8 <rt_hw_interrupt_enable>
    newsize = RT_ALIGN(newsize, RT_ALIGN_SIZE);
    a88e:	2303      	movs	r3, #3
    if (newsize > mem_size_aligned)
    a890:	4e3e      	ldr	r6, [pc, #248]	; (a98c <rt_realloc+0x120>)
    newsize = RT_ALIGN(newsize, RT_ALIGN_SIZE);
    a892:	3403      	adds	r4, #3
    a894:	439c      	bics	r4, r3
    if (newsize > mem_size_aligned)
    a896:	6833      	ldr	r3, [r6, #0]
    a898:	42a3      	cmp	r3, r4
    a89a:	d353      	bcc.n	a944 <rt_realloc+0xd8>
    else if (newsize == 0)
    a89c:	2c00      	cmp	r4, #0
    a89e:	d066      	beq.n	a96e <rt_realloc+0x102>
    if (rmem == RT_NULL)
    a8a0:	2d00      	cmp	r5, #0
    a8a2:	d06b      	beq.n	a97c <rt_realloc+0x110>
    rt_sem_take(&heap_sem, RT_WAITING_FOREVER);
    a8a4:	2101      	movs	r1, #1
    a8a6:	4b3a      	ldr	r3, [pc, #232]	; (a990 <rt_realloc+0x124>)
    a8a8:	4249      	negs	r1, r1
    a8aa:	0018      	movs	r0, r3
    a8ac:	4698      	mov	r8, r3
    a8ae:	f7fe ff8b 	bl	97c8 <rt_sem_take>
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
    a8b2:	4b38      	ldr	r3, [pc, #224]	; (a994 <rt_realloc+0x128>)
    a8b4:	681b      	ldr	r3, [r3, #0]
    a8b6:	42ab      	cmp	r3, r5
    a8b8:	d82e      	bhi.n	a918 <rt_realloc+0xac>
        (rt_uint8_t *)rmem >= (rt_uint8_t *)heap_end)
    a8ba:	4a37      	ldr	r2, [pc, #220]	; (a998 <rt_realloc+0x12c>)
    if ((rt_uint8_t *)rmem < (rt_uint8_t *)heap_ptr ||
    a8bc:	6812      	ldr	r2, [r2, #0]
    a8be:	42aa      	cmp	r2, r5
    a8c0:	d92a      	bls.n	a918 <rt_realloc+0xac>
    mem = (struct heap_mem *)((rt_uint8_t *)rmem - SIZEOF_STRUCT_MEM);
    a8c2:	0029      	movs	r1, r5
    a8c4:	390c      	subs	r1, #12
    size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    a8c6:	6848      	ldr	r0, [r1, #4]
    ptr = (rt_uint8_t *)mem - heap_ptr;
    a8c8:	1aca      	subs	r2, r1, r3
    size = mem->next - ptr - SIZEOF_STRUCT_MEM;
    a8ca:	4684      	mov	ip, r0
    a8cc:	200c      	movs	r0, #12
    a8ce:	4240      	negs	r0, r0
    a8d0:	4460      	add	r0, ip
    a8d2:	4681      	mov	r9, r0
    a8d4:	1a87      	subs	r7, r0, r2
    if (size == newsize)
    a8d6:	42bc      	cmp	r4, r7
    a8d8:	d01e      	beq.n	a918 <rt_realloc+0xac>
    if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE < size)
    a8da:	0020      	movs	r0, r4
    a8dc:	3018      	adds	r0, #24
    a8de:	42b8      	cmp	r0, r7
    a8e0:	d232      	bcs.n	a948 <rt_realloc+0xdc>
        used_mem -= (size - newsize);
    a8e2:	482e      	ldr	r0, [pc, #184]	; (a99c <rt_realloc+0x130>)
    a8e4:	464f      	mov	r7, r9
    a8e6:	4682      	mov	sl, r0
    a8e8:	6800      	ldr	r0, [r0, #0]
    a8ea:	18a4      	adds	r4, r4, r2
    a8ec:	1820      	adds	r0, r4, r0
    a8ee:	1bc0      	subs	r0, r0, r7
    a8f0:	4657      	mov	r7, sl
    a8f2:	6038      	str	r0, [r7, #0]
        mem2->magic = HEAP_MAGIC;
    a8f4:	27f5      	movs	r7, #245	; 0xf5
        ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    a8f6:	340c      	adds	r4, #12
        mem2 = (struct heap_mem *)&heap_ptr[ptr2];
    a8f8:	1918      	adds	r0, r3, r4
        mem2->magic = HEAP_MAGIC;
    a8fa:	017f      	lsls	r7, r7, #5
    a8fc:	6007      	str	r7, [r0, #0]
        mem2->next = mem->next;
    a8fe:	4667      	mov	r7, ip
        mem2->prev = ptr;
    a900:	6082      	str	r2, [r0, #8]
        mem2->next = mem->next;
    a902:	6047      	str	r7, [r0, #4]
        if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
    a904:	6832      	ldr	r2, [r6, #0]
        mem->next = ptr2;
    a906:	604c      	str	r4, [r1, #4]
        if (mem2->next != mem_size_aligned + SIZEOF_STRUCT_MEM)
    a908:	6841      	ldr	r1, [r0, #4]
    a90a:	320c      	adds	r2, #12
    a90c:	4291      	cmp	r1, r2
    a90e:	d001      	beq.n	a914 <rt_realloc+0xa8>
            ((struct heap_mem *)&heap_ptr[mem2->next])->prev = ptr2;
    a910:	185b      	adds	r3, r3, r1
    a912:	609c      	str	r4, [r3, #8]
        plug_holes(mem2);
    a914:	f7ff fd4a 	bl	a3ac <plug_holes>
        rt_sem_release(&heap_sem);
    a918:	4640      	mov	r0, r8
    a91a:	f7ff f827 	bl	996c <rt_sem_release>
        return rmem;
    a91e:	002e      	movs	r6, r5
}
    a920:	0030      	movs	r0, r6
    a922:	bce0      	pop	{r5, r6, r7}
    a924:	46ba      	mov	sl, r7
    a926:	46b1      	mov	r9, r6
    a928:	46a8      	mov	r8, r5
    a92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RT_DEBUG_NOT_IN_INTERRUPT;
    a92c:	4f1c      	ldr	r7, [pc, #112]	; (a9a0 <rt_realloc+0x134>)
    a92e:	481d      	ldr	r0, [pc, #116]	; (a9a4 <rt_realloc+0x138>)
    a930:	0039      	movs	r1, r7
    a932:	f7ff fc83 	bl	a23c <rt_kprintf>
    a936:	22a0      	movs	r2, #160	; 0xa0
    a938:	0039      	movs	r1, r7
    a93a:	481b      	ldr	r0, [pc, #108]	; (a9a8 <rt_realloc+0x13c>)
    a93c:	32ff      	adds	r2, #255	; 0xff
    a93e:	f7ff fcfb 	bl	a338 <rt_assert_handler>
    a942:	e7a1      	b.n	a888 <rt_realloc+0x1c>
        return RT_NULL;
    a944:	2600      	movs	r6, #0
    a946:	e7eb      	b.n	a920 <rt_realloc+0xb4>
    rt_sem_release(&heap_sem);
    a948:	4640      	mov	r0, r8
    a94a:	f7ff f80f 	bl	996c <rt_sem_release>
    nmem = rt_malloc(newsize);
    a94e:	0020      	movs	r0, r4
    a950:	f7ff fe9a 	bl	a688 <rt_malloc>
    a954:	1e06      	subs	r6, r0, #0
    if (nmem != RT_NULL) /* check memory */
    a956:	d0e3      	beq.n	a920 <rt_realloc+0xb4>
        rt_memcpy(nmem, rmem, size < newsize ? size : newsize);
    a958:	0022      	movs	r2, r4
    a95a:	42bc      	cmp	r4, r7
    a95c:	d813      	bhi.n	a986 <rt_realloc+0x11a>
    a95e:	0029      	movs	r1, r5
    a960:	0030      	movs	r0, r6
    a962:	f7ff f9cb 	bl	9cfc <rt_memcpy>
    if (rmem == RT_NULL)
    a966:	0028      	movs	r0, r5
    a968:	f7ff fd78 	bl	a45c <rt_free.part.0>
    a96c:	e7d8      	b.n	a920 <rt_realloc+0xb4>
    a96e:	2d00      	cmp	r5, #0
    a970:	d0e8      	beq.n	a944 <rt_realloc+0xd8>
    a972:	0028      	movs	r0, r5
    a974:	f7ff fd72 	bl	a45c <rt_free.part.0>
        return RT_NULL;
    a978:	2600      	movs	r6, #0
    a97a:	e7d1      	b.n	a920 <rt_realloc+0xb4>
        return rt_malloc(newsize);
    a97c:	0020      	movs	r0, r4
    a97e:	f7ff fe83 	bl	a688 <rt_malloc>
    a982:	0006      	movs	r6, r0
    a984:	e7cc      	b.n	a920 <rt_realloc+0xb4>
        rt_memcpy(nmem, rmem, size < newsize ? size : newsize);
    a986:	003a      	movs	r2, r7
    a988:	e7e9      	b.n	a95e <rt_realloc+0xf2>
    a98a:	46c0      	nop			; (mov r8, r8)
    a98c:	00018548 	.word	0x00018548
    a990:	00018520 	.word	0x00018520
    a994:	0001851c 	.word	0x0001851c
    a998:	00018518 	.word	0x00018518
    a99c:	00018554 	.word	0x00018554
    a9a0:	00015578 	.word	0x00015578
    a9a4:	00014f10 	.word	0x00014f10
    a9a8:	00015530 	.word	0x00015530

0000a9ac <rt_calloc>:
    p = rt_malloc(count * size);
    a9ac:	4341      	muls	r1, r0
{
    a9ae:	b570      	push	{r4, r5, r6, lr}
    p = rt_malloc(count * size);
    a9b0:	0008      	movs	r0, r1
    a9b2:	000d      	movs	r5, r1
    a9b4:	f7ff fe68 	bl	a688 <rt_malloc>
    a9b8:	1e04      	subs	r4, r0, #0
    if (p)
    a9ba:	d003      	beq.n	a9c4 <rt_calloc+0x18>
        rt_memset(p, 0, count * size);
    a9bc:	002a      	movs	r2, r5
    a9be:	2100      	movs	r1, #0
    a9c0:	f7ff f956 	bl	9c70 <rt_memset>
}
    a9c4:	0020      	movs	r0, r4
    a9c6:	bd70      	pop	{r4, r5, r6, pc}

0000a9c8 <rt_free>:
{
    a9c8:	b510      	push	{r4, lr}
    if (rmem == RT_NULL)
    a9ca:	2800      	cmp	r0, #0
    a9cc:	d001      	beq.n	a9d2 <rt_free+0xa>
    a9ce:	f7ff fd45 	bl	a45c <rt_free.part.0>
}
    a9d2:	bd10      	pop	{r4, pc}

0000a9d4 <rt_object_get_information>:
 * @param type the type of object
 * @return the object type information or RT_NULL
 */
struct rt_object_information *
rt_object_get_information(enum rt_object_class_type type)
{
    a9d4:	b510      	push	{r4, lr}
    a9d6:	4c07      	ldr	r4, [pc, #28]	; (a9f4 <rt_object_get_information+0x20>)
    int index;

    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    a9d8:	2300      	movs	r3, #0
    a9da:	0022      	movs	r2, r4
        if (rt_object_container[index].type == type) return &rt_object_container[index];
    a9dc:	7811      	ldrb	r1, [r2, #0]
    a9de:	4281      	cmp	r1, r0
    a9e0:	d005      	beq.n	a9ee <rt_object_get_information+0x1a>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    a9e2:	3301      	adds	r3, #1
    a9e4:	3210      	adds	r2, #16
    a9e6:	2b09      	cmp	r3, #9
    a9e8:	d1f8      	bne.n	a9dc <rt_object_get_information+0x8>

    return RT_NULL;
    a9ea:	2000      	movs	r0, #0
}
    a9ec:	bd10      	pop	{r4, pc}
        if (rt_object_container[index].type == type) return &rt_object_container[index];
    a9ee:	0118      	lsls	r0, r3, #4
    a9f0:	1820      	adds	r0, r4, r0
    a9f2:	e7fb      	b.n	a9ec <rt_object_get_information+0x18>
    a9f4:	000172e4 	.word	0x000172e4

0000a9f8 <rt_object_init>:
 * @param name the object name. In system, the object's name must be unique.
 */
void rt_object_init(struct rt_object         *object,
                    enum rt_object_class_type type,
                    const char               *name)
{
    a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9fa:	46c6      	mov	lr, r8
    a9fc:	4690      	mov	r8, r2
    a9fe:	4a1a      	ldr	r2, [pc, #104]	; (aa68 <rt_object_init+0x70>)
    aa00:	0007      	movs	r7, r0
    aa02:	000e      	movs	r6, r1
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    aa04:	0014      	movs	r4, r2
    aa06:	2300      	movs	r3, #0
{
    aa08:	b500      	push	{lr}
        if (rt_object_container[index].type == type) return &rt_object_container[index];
    aa0a:	7825      	ldrb	r5, [r4, #0]
    aa0c:	42b5      	cmp	r5, r6
    aa0e:	d00a      	beq.n	aa26 <rt_object_init+0x2e>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    aa10:	3301      	adds	r3, #1
    aa12:	3410      	adds	r4, #16
    aa14:	2b09      	cmp	r3, #9
    aa16:	d1f8      	bne.n	aa0a <rt_object_init+0x12>
    struct rt_dlmodule *module = dlmodule_self();
#endif

    /* get object information */
    information = rt_object_get_information(type);
    RT_ASSERT(information != RT_NULL);
    aa18:	22fa      	movs	r2, #250	; 0xfa
    aa1a:	4914      	ldr	r1, [pc, #80]	; (aa6c <rt_object_init+0x74>)
    aa1c:	4814      	ldr	r0, [pc, #80]	; (aa70 <rt_object_init+0x78>)
    aa1e:	f7ff fc8b 	bl	a338 <rt_assert_handler>
    return RT_NULL;
    aa22:	2400      	movs	r4, #0
    aa24:	e001      	b.n	aa2a <rt_object_init+0x32>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
    aa26:	011c      	lsls	r4, r3, #4
    aa28:	1914      	adds	r4, r2, r4

    /* initialize object's parameters */

    /* set object type to static */
    object->type = type | RT_Object_Class_Static;
    aa2a:	2180      	movs	r1, #128	; 0x80
    aa2c:	4249      	negs	r1, r1
    aa2e:	430e      	orrs	r6, r1

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
    aa30:	2208      	movs	r2, #8
    aa32:	4641      	mov	r1, r8
    aa34:	0038      	movs	r0, r7
    object->type = type | RT_Object_Class_Static;
    aa36:	723e      	strb	r6, [r7, #8]
    rt_strncpy(object->name, name, RT_NAME_MAX);
    aa38:	f7ff f9ca 	bl	9dd0 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
    aa3c:	4b0d      	ldr	r3, [pc, #52]	; (aa74 <rt_object_init+0x7c>)
    aa3e:	681b      	ldr	r3, [r3, #0]
    aa40:	2b00      	cmp	r3, #0
    aa42:	d001      	beq.n	aa48 <rt_object_init+0x50>
    aa44:	0038      	movs	r0, r7
    aa46:	4798      	blx	r3

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    aa48:	f7f9 fb32 	bl	40b0 <rt_hw_interrupt_disable>
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
    aa4c:	003b      	movs	r3, r7
    l->next->prev = n;
    aa4e:	6862      	ldr	r2, [r4, #4]
    aa50:	330c      	adds	r3, #12
    aa52:	6053      	str	r3, [r2, #4]
    aa54:	3404      	adds	r4, #4
    n->next = l->next;
    aa56:	60fa      	str	r2, [r7, #12]
    l->next = n;
    aa58:	6023      	str	r3, [r4, #0]
    n->prev = l;
    aa5a:	613c      	str	r4, [r7, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    aa5c:	f7f9 fb2c 	bl	40b8 <rt_hw_interrupt_enable>
}
    aa60:	bc80      	pop	{r7}
    aa62:	46b8      	mov	r8, r7
    aa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aa66:	46c0      	nop			; (mov r8, r8)
    aa68:	000172e4 	.word	0x000172e4
    aa6c:	0001567c 	.word	0x0001567c
    aa70:	00014e40 	.word	0x00014e40
    aa74:	00018558 	.word	0x00018558

0000aa78 <rt_object_detach>:
 * and the memory of static object is not freed.
 *
 * @param object the specified object to be detached.
 */
void rt_object_detach(rt_object_t object)
{
    aa78:	b510      	push	{r4, lr}
    aa7a:	1e04      	subs	r4, r0, #0
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
    aa7c:	d014      	beq.n	aaa8 <rt_object_detach+0x30>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
    aa7e:	4b0e      	ldr	r3, [pc, #56]	; (aab8 <rt_object_detach+0x40>)
    aa80:	681b      	ldr	r3, [r3, #0]
    aa82:	2b00      	cmp	r3, #0
    aa84:	d001      	beq.n	aa8a <rt_object_detach+0x12>
    aa86:	0020      	movs	r0, r4
    aa88:	4798      	blx	r3

    /* reset object type */
    object->type = 0;
    aa8a:	2300      	movs	r3, #0
    aa8c:	7223      	strb	r3, [r4, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    aa8e:	f7f9 fb0f 	bl	40b0 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
    aa92:	0023      	movs	r3, r4
    n->next->prev = n->prev;
    aa94:	68e1      	ldr	r1, [r4, #12]
    aa96:	6922      	ldr	r2, [r4, #16]
    aa98:	330c      	adds	r3, #12
    aa9a:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    aa9c:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
    aa9e:	6123      	str	r3, [r4, #16]
    aaa0:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    aaa2:	f7f9 fb09 	bl	40b8 <rt_hw_interrupt_enable>
}
    aaa6:	bd10      	pop	{r4, pc}
    RT_ASSERT(object != RT_NULL);
    aaa8:	2226      	movs	r2, #38	; 0x26
    aaaa:	4904      	ldr	r1, [pc, #16]	; (aabc <rt_object_detach+0x44>)
    aaac:	4804      	ldr	r0, [pc, #16]	; (aac0 <rt_object_detach+0x48>)
    aaae:	32ff      	adds	r2, #255	; 0xff
    aab0:	f7ff fc42 	bl	a338 <rt_assert_handler>
    aab4:	e7e3      	b.n	aa7e <rt_object_detach+0x6>
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	0001855c 	.word	0x0001855c
    aabc:	00015668 	.word	0x00015668
    aac0:	000155d0 	.word	0x000155d0

0000aac4 <rt_object_allocate>:
 * @param name the object name. In system, the object's name must be unique.
 *
 * @return object
 */
rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
{
    aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aac6:	4647      	mov	r7, r8
    aac8:	46ce      	mov	lr, r9
    aaca:	b580      	push	{r7, lr}
    aacc:	4688      	mov	r8, r1
    aace:	0007      	movs	r7, r0
    struct rt_object_information *information;
#ifdef RT_USING_MODULE
    struct rt_dlmodule *module = dlmodule_self();
#endif

    RT_DEBUG_NOT_IN_INTERRUPT;
    aad0:	f7f9 faee 	bl	40b0 <rt_hw_interrupt_disable>
    aad4:	0004      	movs	r4, r0
    aad6:	f7fe ffb1 	bl	9a3c <rt_interrupt_get_nest>
    aada:	2800      	cmp	r0, #0
    aadc:	d13a      	bne.n	ab54 <rt_object_allocate+0x90>
    aade:	0020      	movs	r0, r4
    aae0:	f7f9 faea 	bl	40b8 <rt_hw_interrupt_enable>
    for (index = 0; index < RT_Object_Info_Unknown; index ++)
    aae4:	4e26      	ldr	r6, [pc, #152]	; (ab80 <rt_object_allocate+0xbc>)
    aae6:	2300      	movs	r3, #0
    aae8:	0032      	movs	r2, r6
    aaea:	e003      	b.n	aaf4 <rt_object_allocate+0x30>
    aaec:	3301      	adds	r3, #1
    aaee:	3210      	adds	r2, #16
    aaf0:	2b09      	cmp	r3, #9
    aaf2:	d03b      	beq.n	ab6c <rt_object_allocate+0xa8>
        if (rt_object_container[index].type == type) return &rt_object_container[index];
    aaf4:	7814      	ldrb	r4, [r2, #0]
    aaf6:	42bc      	cmp	r4, r7
    aaf8:	d1f8      	bne.n	aaec <rt_object_allocate+0x28>
    aafa:	011b      	lsls	r3, r3, #4
    aafc:	18f4      	adds	r4, r6, r3

    /* get object information */
    information = rt_object_get_information(type);
    RT_ASSERT(information != RT_NULL);

    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
    aafe:	68e0      	ldr	r0, [r4, #12]
    ab00:	4699      	mov	r9, r3
    ab02:	f7ff fdc1 	bl	a688 <rt_malloc>
    ab06:	1e05      	subs	r5, r0, #0
    if (object == RT_NULL)
    ab08:	d01f      	beq.n	ab4a <rt_object_allocate+0x86>
        /* no memory can be allocated */
        return RT_NULL;
    }

    /* clean memory data of object */
    rt_memset(object, 0x0, information->object_size);
    ab0a:	2100      	movs	r1, #0
    ab0c:	68e2      	ldr	r2, [r4, #12]
    ab0e:	f7ff f8af 	bl	9c70 <rt_memset>

    /* set object type */
    object->type = type;

    /* set object flag */
    object->flag = 0;
    ab12:	2300      	movs	r3, #0

    /* copy name */
    rt_strncpy(object->name, name, RT_NAME_MAX);
    ab14:	2208      	movs	r2, #8
    object->flag = 0;
    ab16:	726b      	strb	r3, [r5, #9]
    rt_strncpy(object->name, name, RT_NAME_MAX);
    ab18:	4641      	mov	r1, r8
    ab1a:	0028      	movs	r0, r5
    object->type = type;
    ab1c:	722f      	strb	r7, [r5, #8]
    rt_strncpy(object->name, name, RT_NAME_MAX);
    ab1e:	f7ff f957 	bl	9dd0 <rt_strncpy>

    RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
    ab22:	4b18      	ldr	r3, [pc, #96]	; (ab84 <rt_object_allocate+0xc0>)
    ab24:	681b      	ldr	r3, [r3, #0]
    ab26:	2b00      	cmp	r3, #0
    ab28:	d001      	beq.n	ab2e <rt_object_allocate+0x6a>
    ab2a:	0028      	movs	r0, r5
    ab2c:	4798      	blx	r3

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    ab2e:	f7f9 fabf 	bl	40b0 <rt_hw_interrupt_disable>
    l->next->prev = n;
    ab32:	002b      	movs	r3, r5
    ab34:	6862      	ldr	r2, [r4, #4]
    ab36:	330c      	adds	r3, #12
    ab38:	6053      	str	r3, [r2, #4]
    n->next = l->next;
    ab3a:	60ea      	str	r2, [r5, #12]
    l->next = n;
    ab3c:	6063      	str	r3, [r4, #4]
    }
    else
#endif
    {
        /* insert object into information object list */
        rt_list_insert_after(&(information->object_list), &(object->list));
    ab3e:	464b      	mov	r3, r9
    ab40:	3304      	adds	r3, #4
    ab42:	18f3      	adds	r3, r6, r3
    n->prev = l;
    ab44:	612b      	str	r3, [r5, #16]
    }

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    ab46:	f7f9 fab7 	bl	40b8 <rt_hw_interrupt_enable>

    /* return object */
    return object;
}
    ab4a:	0028      	movs	r0, r5
    ab4c:	bcc0      	pop	{r6, r7}
    ab4e:	46b9      	mov	r9, r7
    ab50:	46b0      	mov	r8, r6
    ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_DEBUG_NOT_IN_INTERRUPT;
    ab54:	4d0c      	ldr	r5, [pc, #48]	; (ab88 <rt_object_allocate+0xc4>)
    ab56:	480d      	ldr	r0, [pc, #52]	; (ab8c <rt_object_allocate+0xc8>)
    ab58:	0029      	movs	r1, r5
    ab5a:	f7ff fb6f 	bl	a23c <rt_kprintf>
    ab5e:	22a4      	movs	r2, #164	; 0xa4
    ab60:	0029      	movs	r1, r5
    ab62:	480b      	ldr	r0, [pc, #44]	; (ab90 <rt_object_allocate+0xcc>)
    ab64:	0052      	lsls	r2, r2, #1
    ab66:	f7ff fbe7 	bl	a338 <rt_assert_handler>
    ab6a:	e7b8      	b.n	aade <rt_object_allocate+0x1a>
    RT_ASSERT(information != RT_NULL);
    ab6c:	22a6      	movs	r2, #166	; 0xa6
    ab6e:	4906      	ldr	r1, [pc, #24]	; (ab88 <rt_object_allocate+0xc4>)
    ab70:	4808      	ldr	r0, [pc, #32]	; (ab94 <rt_object_allocate+0xd0>)
    ab72:	0052      	lsls	r2, r2, #1
    ab74:	f7ff fbe0 	bl	a338 <rt_assert_handler>
    object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
    ab78:	2300      	movs	r3, #0
    ab7a:	68db      	ldr	r3, [r3, #12]
    ab7c:	deff      	udf	#255	; 0xff
    ab7e:	46c0      	nop			; (mov r8, r8)
    ab80:	000172e4 	.word	0x000172e4
    ab84:	00018558 	.word	0x00018558
    ab88:	00015654 	.word	0x00015654
    ab8c:	00014f10 	.word	0x00014f10
    ab90:	00015530 	.word	0x00015530
    ab94:	00014e40 	.word	0x00014e40

0000ab98 <rt_object_delete>:
 * This function will delete an object and release object memory.
 *
 * @param object the specified object to be deleted.
 */
void rt_object_delete(rt_object_t object)
{
    ab98:	b510      	push	{r4, lr}
    ab9a:	1e04      	subs	r4, r0, #0
    register rt_base_t temp;

    /* object check */
    RT_ASSERT(object != RT_NULL);
    ab9c:	d021      	beq.n	abe2 <rt_object_delete+0x4a>
    RT_ASSERT(!(object->type & RT_Object_Class_Static));
    ab9e:	7a23      	ldrb	r3, [r4, #8]
    aba0:	2b7f      	cmp	r3, #127	; 0x7f
    aba2:	d817      	bhi.n	abd4 <rt_object_delete+0x3c>

    RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
    aba4:	4b12      	ldr	r3, [pc, #72]	; (abf0 <rt_object_delete+0x58>)
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	2b00      	cmp	r3, #0
    abaa:	d001      	beq.n	abb0 <rt_object_delete+0x18>
    abac:	0020      	movs	r0, r4
    abae:	4798      	blx	r3

    /* reset object type */
    object->type = 0;
    abb0:	2300      	movs	r3, #0
    abb2:	7223      	strb	r3, [r4, #8]

    /* lock interrupt */
    temp = rt_hw_interrupt_disable();
    abb4:	f7f9 fa7c 	bl	40b0 <rt_hw_interrupt_disable>

    /* remove from old list */
    rt_list_remove(&(object->list));
    abb8:	0023      	movs	r3, r4
    n->next->prev = n->prev;
    abba:	68e1      	ldr	r1, [r4, #12]
    abbc:	6922      	ldr	r2, [r4, #16]
    abbe:	330c      	adds	r3, #12
    abc0:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    abc2:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
    abc4:	6123      	str	r3, [r4, #16]
    abc6:	60e3      	str	r3, [r4, #12]

    /* unlock interrupt */
    rt_hw_interrupt_enable(temp);
    abc8:	f7f9 fa76 	bl	40b8 <rt_hw_interrupt_enable>

    /* free the memory of object */
    RT_KERNEL_FREE(object);
    abcc:	0020      	movs	r0, r4
    abce:	f7ff fefb 	bl	a9c8 <rt_free>
}
    abd2:	bd10      	pop	{r4, pc}
    RT_ASSERT(!(object->type & RT_Object_Class_Static));
    abd4:	2288      	movs	r2, #136	; 0x88
    abd6:	4907      	ldr	r1, [pc, #28]	; (abf4 <rt_object_delete+0x5c>)
    abd8:	4807      	ldr	r0, [pc, #28]	; (abf8 <rt_object_delete+0x60>)
    abda:	32ff      	adds	r2, #255	; 0xff
    abdc:	f7ff fbac 	bl	a338 <rt_assert_handler>
    abe0:	e7e0      	b.n	aba4 <rt_object_delete+0xc>
    RT_ASSERT(object != RT_NULL);
    abe2:	22c3      	movs	r2, #195	; 0xc3
    abe4:	4903      	ldr	r1, [pc, #12]	; (abf4 <rt_object_delete+0x5c>)
    abe6:	4805      	ldr	r0, [pc, #20]	; (abfc <rt_object_delete+0x64>)
    abe8:	0052      	lsls	r2, r2, #1
    abea:	f7ff fba5 	bl	a338 <rt_assert_handler>
    abee:	e7d6      	b.n	ab9e <rt_object_delete+0x6>
    abf0:	0001855c 	.word	0x0001855c
    abf4:	00015640 	.word	0x00015640
    abf8:	000155e4 	.word	0x000155e4
    abfc:	000155d0 	.word	0x000155d0

0000ac00 <rt_object_is_systemobject>:
 * @param object the specified object to be judged.
 *
 * @return RT_TRUE if a system object, RT_FALSE for others.
 */
rt_bool_t rt_object_is_systemobject(rt_object_t object)
{
    ac00:	b510      	push	{r4, lr}
    ac02:	1e04      	subs	r4, r0, #0
    /* object check */
    RT_ASSERT(object != RT_NULL);
    ac04:	d003      	beq.n	ac0e <rt_object_is_systemobject+0xe>

    if (object->type & RT_Object_Class_Static)
    ac06:	2008      	movs	r0, #8
    ac08:	5620      	ldrsb	r0, [r4, r0]
    ac0a:	0fc0      	lsrs	r0, r0, #31
        return RT_TRUE;

    return RT_FALSE;
}
    ac0c:	bd10      	pop	{r4, pc}
    RT_ASSERT(object != RT_NULL);
    ac0e:	22d4      	movs	r2, #212	; 0xd4
    ac10:	4902      	ldr	r1, [pc, #8]	; (ac1c <rt_object_is_systemobject+0x1c>)
    ac12:	4803      	ldr	r0, [pc, #12]	; (ac20 <rt_object_is_systemobject+0x20>)
    ac14:	0052      	lsls	r2, r2, #1
    ac16:	f7ff fb8f 	bl	a338 <rt_assert_handler>
    ac1a:	e7f4      	b.n	ac06 <rt_object_is_systemobject+0x6>
    ac1c:	00015624 	.word	0x00015624
    ac20:	000155d0 	.word	0x000155d0

0000ac24 <rt_object_get_type>:
 * @param object the specified object to be get type.
 *
 * @return the type of object.
 */
rt_uint8_t rt_object_get_type(rt_object_t object)
{
    ac24:	b510      	push	{r4, lr}
    ac26:	1e04      	subs	r4, r0, #0
    /* object check */
    RT_ASSERT(object != RT_NULL);
    ac28:	d003      	beq.n	ac32 <rt_object_get_type+0xe>

    return object->type & ~RT_Object_Class_Static;
    ac2a:	207f      	movs	r0, #127	; 0x7f
    ac2c:	7a23      	ldrb	r3, [r4, #8]
    ac2e:	4018      	ands	r0, r3
}
    ac30:	bd10      	pop	{r4, pc}
    RT_ASSERT(object != RT_NULL);
    ac32:	22bc      	movs	r2, #188	; 0xbc
    ac34:	4902      	ldr	r1, [pc, #8]	; (ac40 <rt_object_get_type+0x1c>)
    ac36:	4803      	ldr	r0, [pc, #12]	; (ac44 <rt_object_get_type+0x20>)
    ac38:	32ff      	adds	r2, #255	; 0xff
    ac3a:	f7ff fb7d 	bl	a338 <rt_assert_handler>
    ac3e:	e7f4      	b.n	ac2a <rt_object_get_type+0x6>
    ac40:	00015610 	.word	0x00015610
    ac44:	000155d0 	.word	0x000155d0

0000ac48 <rt_system_scheduler_init>:
 */
void rt_system_scheduler_init(void)
{
    register rt_base_t offset;

    rt_scheduler_lock_nest = 0;
    ac48:	2200      	movs	r2, #0
    ac4a:	4b0b      	ldr	r3, [pc, #44]	; (ac78 <rt_system_scheduler_init+0x30>)
    ac4c:	801a      	strh	r2, [r3, #0]

    RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
                                      RT_THREAD_PRIORITY_MAX));

    for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
    ac4e:	4b0b      	ldr	r3, [pc, #44]	; (ac7c <rt_system_scheduler_init+0x34>)
    ac50:	1c5a      	adds	r2, r3, #1
    ac52:	32ff      	adds	r2, #255	; 0xff
    l->next = l->prev = l;
    ac54:	605b      	str	r3, [r3, #4]
    ac56:	601b      	str	r3, [r3, #0]
    ac58:	3308      	adds	r3, #8
    ac5a:	4293      	cmp	r3, r2
    ac5c:	d1fa      	bne.n	ac54 <rt_system_scheduler_init+0xc>
    {
        rt_list_init(&rt_thread_priority_table[offset]);
    }

    rt_current_priority = RT_THREAD_PRIORITY_MAX - 1;
    ac5e:	221f      	movs	r2, #31
    ac60:	4b07      	ldr	r3, [pc, #28]	; (ac80 <rt_system_scheduler_init+0x38>)
    ac62:	701a      	strb	r2, [r3, #0]
    rt_current_thread = RT_NULL;
    ac64:	2300      	movs	r3, #0
    ac66:	4a07      	ldr	r2, [pc, #28]	; (ac84 <rt_system_scheduler_init+0x3c>)
    ac68:	6013      	str	r3, [r2, #0]

    /* initialize ready priority group */
    rt_thread_ready_priority_group = 0;
    ac6a:	4a07      	ldr	r2, [pc, #28]	; (ac88 <rt_system_scheduler_init+0x40>)
    ac6c:	6013      	str	r3, [r2, #0]
    ac6e:	4b07      	ldr	r3, [pc, #28]	; (ac8c <rt_system_scheduler_init+0x44>)
    ac70:	605b      	str	r3, [r3, #4]
    ac72:	601b      	str	r3, [r3, #0]
    rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
#endif

    /* initialize thread defunct */
    rt_list_init(&rt_thread_defunct);
}
    ac74:	4770      	bx	lr
    ac76:	46c0      	nop			; (mov r8, r8)
    ac78:	00018578 	.word	0x00018578
    ac7c:	00018584 	.word	0x00018584
    ac80:	0001856c 	.word	0x0001856c
    ac84:	00018570 	.word	0x00018570
    ac88:	00018684 	.word	0x00018684
    ac8c:	0001857c 	.word	0x0001857c

0000ac90 <rt_system_scheduler_start>:
    register rt_ubase_t number;

    number = __rt_ffs(rt_thread_ready_priority_group) - 1;
    highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#else
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
    ac90:	4b08      	ldr	r3, [pc, #32]	; (acb4 <rt_system_scheduler_start+0x24>)
{
    ac92:	b510      	push	{r4, lr}
    highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
    ac94:	6818      	ldr	r0, [r3, #0]
    ac96:	f7ff fb27 	bl	a2e8 <__rt_ffs>
#endif

    /* get switch to thread */
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    ac9a:	4b07      	ldr	r3, [pc, #28]	; (acb8 <rt_system_scheduler_start+0x28>)
    ac9c:	3801      	subs	r0, #1
    ac9e:	00c0      	lsls	r0, r0, #3
    aca0:	58c0      	ldr	r0, [r0, r3]
                              struct rt_thread,
                              tlist);

    rt_current_thread = to_thread;
    aca2:	4b06      	ldr	r3, [pc, #24]	; (acbc <rt_system_scheduler_start+0x2c>)
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    aca4:	0002      	movs	r2, r0

    /* switch to new thread */
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
    aca6:	3008      	adds	r0, #8
    to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    aca8:	3a14      	subs	r2, #20
    rt_current_thread = to_thread;
    acaa:	601a      	str	r2, [r3, #0]
    rt_hw_context_switch_to((rt_uint32_t)&to_thread->sp);
    acac:	f7f9 fa3f 	bl	412e <rt_hw_context_switch_to>

    /* never come back */
}
    acb0:	bd10      	pop	{r4, pc}
    acb2:	46c0      	nop			; (mov r8, r8)
    acb4:	00018684 	.word	0x00018684
    acb8:	00018584 	.word	0x00018584
    acbc:	00018570 	.word	0x00018570

0000acc0 <rt_schedule>:
/**
 * This function will perform one schedule. It will select one thread
 * with the highest priority level, then switch to it.
 */
void rt_schedule(void)
{
    acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    rt_base_t level;
    struct rt_thread *to_thread;
    struct rt_thread *from_thread;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    acc2:	f7f9 f9f5 	bl	40b0 <rt_hw_interrupt_disable>

    /* check the scheduler is enabled or not */
    if (rt_scheduler_lock_nest == 0)
    acc6:	4b27      	ldr	r3, [pc, #156]	; (ad64 <rt_schedule+0xa4>)
    level = rt_hw_interrupt_disable();
    acc8:	0004      	movs	r4, r0
    if (rt_scheduler_lock_nest == 0)
    acca:	2200      	movs	r2, #0
    accc:	5e9b      	ldrsh	r3, [r3, r2]
    acce:	2b00      	cmp	r3, #0
    acd0:	d136      	bne.n	ad40 <rt_schedule+0x80>
    {
        register rt_ubase_t highest_ready_priority;

#if RT_THREAD_PRIORITY_MAX <= 32
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
    acd2:	4b25      	ldr	r3, [pc, #148]	; (ad68 <rt_schedule+0xa8>)
    acd4:	6818      	ldr	r0, [r3, #0]
    acd6:	f7ff fb07 	bl	a2e8 <__rt_ffs>
        number = __rt_ffs(rt_thread_ready_priority_group) - 1;
        highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
#endif

        /* get switch to thread */
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    acda:	4b24      	ldr	r3, [pc, #144]	; (ad6c <rt_schedule+0xac>)
        highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
    acdc:	3801      	subs	r0, #1
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    acde:	00c2      	lsls	r2, r0, #3
    ace0:	58d7      	ldr	r7, [r2, r3]
                                  struct rt_thread,
                                  tlist);

        /* if the destination thread is not the same as current thread */
        if (to_thread != rt_current_thread)
    ace2:	4b23      	ldr	r3, [pc, #140]	; (ad70 <rt_schedule+0xb0>)
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    ace4:	003d      	movs	r5, r7
        if (to_thread != rt_current_thread)
    ace6:	681e      	ldr	r6, [r3, #0]
        to_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
    ace8:	3d14      	subs	r5, #20
        if (to_thread != rt_current_thread)
    acea:	42ae      	cmp	r6, r5
    acec:	d028      	beq.n	ad40 <rt_schedule+0x80>
        {
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
            from_thread         = rt_current_thread;
            rt_current_thread   = to_thread;
    acee:	601d      	str	r5, [r3, #0]

            RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
    acf0:	4b20      	ldr	r3, [pc, #128]	; (ad74 <rt_schedule+0xb4>)
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
    acf2:	4a21      	ldr	r2, [pc, #132]	; (ad78 <rt_schedule+0xb8>)
            RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
    acf4:	681b      	ldr	r3, [r3, #0]
            rt_current_priority = (rt_uint8_t)highest_ready_priority;
    acf6:	7010      	strb	r0, [r2, #0]
            RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
    acf8:	2b00      	cmp	r3, #0
    acfa:	d002      	beq.n	ad02 <rt_schedule+0x42>
    acfc:	0029      	movs	r1, r5
    acfe:	0030      	movs	r0, r6
    ad00:	4798      	blx	r3
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
    ad02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ad04:	781a      	ldrb	r2, [r3, #0]
    ad06:	2a23      	cmp	r2, #35	; 0x23
    ad08:	d106      	bne.n	ad18 <rt_schedule+0x58>
        (rt_uint32_t)thread->sp <= (rt_uint32_t)thread->stack_addr ||
    ad0a:	69ea      	ldr	r2, [r5, #28]
    if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
    ad0c:	429a      	cmp	r2, r3
    ad0e:	d903      	bls.n	ad18 <rt_schedule+0x58>
        (rt_uint32_t)thread->stack_addr + (rt_uint32_t)thread->stack_size)
    ad10:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    ad12:	1859      	adds	r1, r3, r1
        (rt_uint32_t)thread->sp <= (rt_uint32_t)thread->stack_addr ||
    ad14:	428a      	cmp	r2, r1
    ad16:	d91d      	bls.n	ad54 <rt_schedule+0x94>
        rt_kprintf("thread:%s stack overflow\n", thread->name);
    ad18:	0029      	movs	r1, r5
    ad1a:	4818      	ldr	r0, [pc, #96]	; (ad7c <rt_schedule+0xbc>)
    ad1c:	f7ff fa8e 	bl	a23c <rt_kprintf>
            list_thread();
    ad20:	f001 f892 	bl	be48 <list_thread>
        level = rt_hw_interrupt_disable();
    ad24:	f7f9 f9c4 	bl	40b0 <rt_hw_interrupt_disable>
        while (level);
    ad28:	2800      	cmp	r0, #0
    ad2a:	d1fd      	bne.n	ad28 <rt_schedule+0x68>
            if (rt_interrupt_nest == 0)
            {
                extern void rt_thread_handle_sig(void);

                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
                                     (rt_uint32_t)&to_thread->sp);
    ad2c:	0039      	movs	r1, r7
                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
    ad2e:	0030      	movs	r0, r6
            if (rt_interrupt_nest == 0)
    ad30:	4b13      	ldr	r3, [pc, #76]	; (ad80 <rt_schedule+0xc0>)
                                     (rt_uint32_t)&to_thread->sp);
    ad32:	3108      	adds	r1, #8
            if (rt_interrupt_nest == 0)
    ad34:	781b      	ldrb	r3, [r3, #0]
                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
    ad36:	301c      	adds	r0, #28
            if (rt_interrupt_nest == 0)
    ad38:	2b00      	cmp	r3, #0
    ad3a:	d005      	beq.n	ad48 <rt_schedule+0x88>
            }
            else
            {
                RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));

                rt_hw_context_switch_interrupt((rt_uint32_t)&from_thread->sp,
    ad3c:	f7f9 f9bf 	bl	40be <rt_hw_context_switch>
            }
        }
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    ad40:	0020      	movs	r0, r4
    ad42:	f7f9 f9b9 	bl	40b8 <rt_hw_interrupt_enable>
}
    ad46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                rt_hw_context_switch((rt_uint32_t)&from_thread->sp,
    ad48:	f7f9 f9b9 	bl	40be <rt_hw_context_switch>
                rt_hw_interrupt_enable(level);
    ad4c:	0020      	movs	r0, r4
    ad4e:	f7f9 f9b3 	bl	40b8 <rt_hw_interrupt_enable>
                return ;
    ad52:	e7f8      	b.n	ad46 <rt_schedule+0x86>
    else if ((rt_uint32_t)thread->sp <= ((rt_uint32_t)thread->stack_addr + 32))
    ad54:	3320      	adds	r3, #32
    ad56:	429a      	cmp	r2, r3
    ad58:	d8e8      	bhi.n	ad2c <rt_schedule+0x6c>
        rt_kprintf("warning: %s stack is close to the bottom of stack address.\n",
    ad5a:	0029      	movs	r1, r5
    ad5c:	4809      	ldr	r0, [pc, #36]	; (ad84 <rt_schedule+0xc4>)
    ad5e:	f7ff fa6d 	bl	a23c <rt_kprintf>
    ad62:	e7e3      	b.n	ad2c <rt_schedule+0x6c>
    ad64:	00018578 	.word	0x00018578
    ad68:	00018684 	.word	0x00018684
    ad6c:	00018584 	.word	0x00018584
    ad70:	00018570 	.word	0x00018570
    ad74:	00018574 	.word	0x00018574
    ad78:	0001856c 	.word	0x0001856c
    ad7c:	0001568c 	.word	0x0001568c
    ad80:	00018484 	.word	0x00018484
    ad84:	000156a8 	.word	0x000156a8

0000ad88 <rt_schedule_insert_thread>:
 *
 * @param thread the thread to be inserted
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_insert_thread(struct rt_thread *thread)
{
    ad88:	b510      	push	{r4, lr}
    ad8a:	1e04      	subs	r4, r0, #0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);
    ad8c:	d01c      	beq.n	adc8 <rt_schedule_insert_thread+0x40>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    ad8e:	f7f9 f98f 	bl	40b0 <rt_hw_interrupt_disable>

    /* change stat */
    thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
    ad92:	2234      	movs	r2, #52	; 0x34
    ad94:	210f      	movs	r1, #15
    ad96:	5ca3      	ldrb	r3, [r4, r2]
    ad98:	438b      	bics	r3, r1
    ad9a:	2101      	movs	r1, #1
    ad9c:	430b      	orrs	r3, r1
    ad9e:	54a3      	strb	r3, [r4, r2]

    /* insert thread to ready list */
    rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
    ada0:	2335      	movs	r3, #53	; 0x35
    ada2:	0021      	movs	r1, r4
    ada4:	5ce2      	ldrb	r2, [r4, r3]
    l->prev->next = n;
    ada6:	4b0c      	ldr	r3, [pc, #48]	; (add8 <rt_schedule_insert_thread+0x50>)
    ada8:	00d2      	lsls	r2, r2, #3
    adaa:	189b      	adds	r3, r3, r2
    adac:	685a      	ldr	r2, [r3, #4]
    adae:	3114      	adds	r1, #20
    adb0:	6011      	str	r1, [r2, #0]
    n->prev = l->prev;
    adb2:	61a2      	str	r2, [r4, #24]
#endif

#if RT_THREAD_PRIORITY_MAX > 32
    rt_thread_ready_table[thread->number] |= thread->high_mask;
#endif
    rt_thread_ready_priority_group |= thread->number_mask;
    adb4:	4a09      	ldr	r2, [pc, #36]	; (addc <rt_schedule_insert_thread+0x54>)
    l->prev = n;
    adb6:	6059      	str	r1, [r3, #4]
    adb8:	6811      	ldr	r1, [r2, #0]
    n->next = l;
    adba:	6163      	str	r3, [r4, #20]
    adbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    adbe:	430b      	orrs	r3, r1
    adc0:	6013      	str	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    adc2:	f7f9 f979 	bl	40b8 <rt_hw_interrupt_enable>
}
    adc6:	bd10      	pop	{r4, pc}
    RT_ASSERT(thread != RT_NULL);
    adc8:	228a      	movs	r2, #138	; 0x8a
    adca:	4905      	ldr	r1, [pc, #20]	; (ade0 <rt_schedule_insert_thread+0x58>)
    adcc:	4805      	ldr	r0, [pc, #20]	; (ade4 <rt_schedule_insert_thread+0x5c>)
    adce:	0052      	lsls	r2, r2, #1
    add0:	f7ff fab2 	bl	a338 <rt_assert_handler>
    add4:	e7db      	b.n	ad8e <rt_schedule_insert_thread+0x6>
    add6:	46c0      	nop			; (mov r8, r8)
    add8:	00018584 	.word	0x00018584
    addc:	00018684 	.word	0x00018684
    ade0:	00015714 	.word	0x00015714
    ade4:	000156e4 	.word	0x000156e4

0000ade8 <rt_schedule_remove_thread>:
 * @param thread the thread to be removed
 *
 * @note Please do not invoke this function in user application.
 */
void rt_schedule_remove_thread(struct rt_thread *thread)
{
    ade8:	b510      	push	{r4, lr}
    adea:	1e04      	subs	r4, r0, #0
    register rt_base_t temp;

    RT_ASSERT(thread != RT_NULL);
    adec:	d01a      	beq.n	ae24 <rt_schedule_remove_thread+0x3c>

    /* disable interrupt */
    temp = rt_hw_interrupt_disable();
    adee:	f7f9 f95f 	bl	40b0 <rt_hw_interrupt_disable>
    n->next->prev = n->prev;
    adf2:	6962      	ldr	r2, [r4, #20]
    adf4:	69a3      	ldr	r3, [r4, #24]
    adf6:	6053      	str	r3, [r2, #4]
    n->prev->next = n->next;
    adf8:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    adfa:	0023      	movs	r3, r4
    adfc:	3314      	adds	r3, #20
    adfe:	61a3      	str	r3, [r4, #24]
    ae00:	6163      	str	r3, [r4, #20]
                  thread->high_mask));
#endif

    /* remove thread from ready list */
    rt_list_remove(&(thread->tlist));
    if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
    ae02:	2335      	movs	r3, #53	; 0x35
    ae04:	5ce3      	ldrb	r3, [r4, r3]
    ae06:	4a0b      	ldr	r2, [pc, #44]	; (ae34 <rt_schedule_remove_thread+0x4c>)
    ae08:	00db      	lsls	r3, r3, #3
    ae0a:	1899      	adds	r1, r3, r2
    ae0c:	589b      	ldr	r3, [r3, r2]
    ae0e:	428b      	cmp	r3, r1
    ae10:	d002      	beq.n	ae18 <rt_schedule_remove_thread+0x30>
        rt_thread_ready_priority_group &= ~thread->number_mask;
#endif
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(temp);
    ae12:	f7f9 f951 	bl	40b8 <rt_hw_interrupt_enable>
}
    ae16:	bd10      	pop	{r4, pc}
        rt_thread_ready_priority_group &= ~thread->number_mask;
    ae18:	4a07      	ldr	r2, [pc, #28]	; (ae38 <rt_schedule_remove_thread+0x50>)
    ae1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    ae1c:	6811      	ldr	r1, [r2, #0]
    ae1e:	4399      	bics	r1, r3
    ae20:	6011      	str	r1, [r2, #0]
    ae22:	e7f6      	b.n	ae12 <rt_schedule_remove_thread+0x2a>
    RT_ASSERT(thread != RT_NULL);
    ae24:	22a1      	movs	r2, #161	; 0xa1
    ae26:	4905      	ldr	r1, [pc, #20]	; (ae3c <rt_schedule_remove_thread+0x54>)
    ae28:	4805      	ldr	r0, [pc, #20]	; (ae40 <rt_schedule_remove_thread+0x58>)
    ae2a:	0052      	lsls	r2, r2, #1
    ae2c:	f7ff fa84 	bl	a338 <rt_assert_handler>
    ae30:	e7dd      	b.n	adee <rt_schedule_remove_thread+0x6>
    ae32:	46c0      	nop			; (mov r8, r8)
    ae34:	00018584 	.word	0x00018584
    ae38:	00018684 	.word	0x00018684
    ae3c:	000156f8 	.word	0x000156f8
    ae40:	000156e4 	.word	0x000156e4

0000ae44 <rt_enter_critical>:

/**
 * This function will lock the thread scheduler.
 */
void rt_enter_critical(void)
{
    ae44:	b510      	push	{r4, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    ae46:	f7f9 f933 	bl	40b0 <rt_hw_interrupt_disable>

    /*
     * the maximal number of nest is RT_UINT16_MAX, which is big
     * enough and does not check here
     */
    rt_scheduler_lock_nest ++;
    ae4a:	4a03      	ldr	r2, [pc, #12]	; (ae58 <rt_enter_critical+0x14>)
    ae4c:	8813      	ldrh	r3, [r2, #0]
    ae4e:	3301      	adds	r3, #1
    ae50:	8013      	strh	r3, [r2, #0]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    ae52:	f7f9 f931 	bl	40b8 <rt_hw_interrupt_enable>
}
    ae56:	bd10      	pop	{r4, pc}
    ae58:	00018578 	.word	0x00018578

0000ae5c <rt_exit_critical>:

/**
 * This function will unlock the thread scheduler.
 */
void rt_exit_critical(void)
{
    ae5c:	b510      	push	{r4, lr}
    register rt_base_t level;

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    ae5e:	f7f9 f927 	bl	40b0 <rt_hw_interrupt_disable>

    rt_scheduler_lock_nest --;
    ae62:	4a08      	ldr	r2, [pc, #32]	; (ae84 <rt_exit_critical+0x28>)
    ae64:	8813      	ldrh	r3, [r2, #0]
    ae66:	3b01      	subs	r3, #1
    ae68:	b21b      	sxth	r3, r3
    ae6a:	8013      	strh	r3, [r2, #0]

    if (rt_scheduler_lock_nest <= 0)
    ae6c:	2b00      	cmp	r3, #0
    ae6e:	dd02      	ble.n	ae76 <rt_exit_critical+0x1a>
        rt_schedule();
    }
    else
    {
        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    ae70:	f7f9 f922 	bl	40b8 <rt_hw_interrupt_enable>
    }
}
    ae74:	bd10      	pop	{r4, pc}
        rt_scheduler_lock_nest = 0;
    ae76:	2300      	movs	r3, #0
    ae78:	8013      	strh	r3, [r2, #0]
        rt_hw_interrupt_enable(level);
    ae7a:	f7f9 f91d 	bl	40b8 <rt_hw_interrupt_enable>
        rt_schedule();
    ae7e:	f7ff ff1f 	bl	acc0 <rt_schedule>
    ae82:	e7f7      	b.n	ae74 <rt_exit_critical+0x18>
    ae84:	00018578 	.word	0x00018578

0000ae88 <rt_thread_exit>:
{
    struct rt_thread *thread;
    register rt_base_t level;

    /* get current thread */
    thread = rt_current_thread;
    ae88:	4b14      	ldr	r3, [pc, #80]	; (aedc <rt_thread_exit+0x54>)
{
    ae8a:	b570      	push	{r4, r5, r6, lr}
    thread = rt_current_thread;
    ae8c:	681c      	ldr	r4, [r3, #0]

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    ae8e:	f7f9 f90f 	bl	40b0 <rt_hw_interrupt_disable>
    ae92:	0005      	movs	r5, r0

    /* remove from schedule */
    rt_schedule_remove_thread(thread);
    ae94:	0020      	movs	r0, r4
    ae96:	f7ff ffa7 	bl	ade8 <rt_schedule_remove_thread>
    /* change stat */
    thread->stat = RT_THREAD_CLOSE;
    ae9a:	2334      	movs	r3, #52	; 0x34
    ae9c:	2204      	movs	r2, #4

    /* remove it from timer list */
    rt_timer_detach(&thread->thread_timer);
    ae9e:	0020      	movs	r0, r4
    thread->stat = RT_THREAD_CLOSE;
    aea0:	54e2      	strb	r2, [r4, r3]
    rt_timer_detach(&thread->thread_timer);
    aea2:	304c      	adds	r0, #76	; 0x4c
    aea4:	f000 fa84 	bl	b3b0 <rt_timer_detach>

    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
    aea8:	0020      	movs	r0, r4
    aeaa:	f7ff fea9 	bl	ac00 <rt_object_is_systemobject>
    aeae:	2801      	cmp	r0, #1
    aeb0:	d00d      	beq.n	aece <rt_thread_exit+0x46>
        rt_object_detach((rt_object_t)thread);
    }
    else
    {
        /* insert to defunct thread list */
        rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
    aeb2:	0022      	movs	r2, r4
    l->next->prev = n;
    aeb4:	4b0a      	ldr	r3, [pc, #40]	; (aee0 <rt_thread_exit+0x58>)
    aeb6:	3214      	adds	r2, #20
    aeb8:	6819      	ldr	r1, [r3, #0]
    l->next = n;
    aeba:	601a      	str	r2, [r3, #0]
    l->next->prev = n;
    aebc:	604a      	str	r2, [r1, #4]
    n->next = l->next;
    aebe:	6161      	str	r1, [r4, #20]
    n->prev = l;
    aec0:	61a3      	str	r3, [r4, #24]
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    aec2:	0028      	movs	r0, r5
    aec4:	f7f9 f8f8 	bl	40b8 <rt_hw_interrupt_enable>

    /* switch to next task */
    rt_schedule();
    aec8:	f7ff fefa 	bl	acc0 <rt_schedule>
}
    aecc:	bd70      	pop	{r4, r5, r6, pc}
    if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
    aece:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    aed0:	2b00      	cmp	r3, #0
    aed2:	d1ee      	bne.n	aeb2 <rt_thread_exit+0x2a>
        rt_object_detach((rt_object_t)thread);
    aed4:	0020      	movs	r0, r4
    aed6:	f7ff fdcf 	bl	aa78 <rt_object_detach>
    aeda:	e7f2      	b.n	aec2 <rt_thread_exit+0x3a>
    aedc:	00018570 	.word	0x00018570
    aee0:	0001857c 	.word	0x0001857c

0000aee4 <rt_thread_timeout>:
 * when thread is timeout to wait some resource.
 *
 * @param parameter the parameter of thread timeout function
 */
void rt_thread_timeout(void *parameter)
{
    aee4:	b510      	push	{r4, lr}
    aee6:	1e04      	subs	r4, r0, #0
    struct rt_thread *thread;

    thread = (struct rt_thread *)parameter;

    /* thread check */
    RT_ASSERT(thread != RT_NULL);
    aee8:	d027      	beq.n	af3a <rt_thread_timeout+0x56>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
    aeea:	2334      	movs	r3, #52	; 0x34
    aeec:	5ce2      	ldrb	r2, [r4, r3]
    aeee:	3b25      	subs	r3, #37	; 0x25
    aef0:	4013      	ands	r3, r2
    aef2:	2b02      	cmp	r3, #2
    aef4:	d005      	beq.n	af02 <rt_thread_timeout+0x1e>
    aef6:	22bb      	movs	r2, #187	; 0xbb
    aef8:	4913      	ldr	r1, [pc, #76]	; (af48 <rt_thread_timeout+0x64>)
    aefa:	4814      	ldr	r0, [pc, #80]	; (af4c <rt_thread_timeout+0x68>)
    aefc:	0092      	lsls	r2, r2, #2
    aefe:	f7ff fa1b 	bl	a338 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    af02:	0020      	movs	r0, r4
    af04:	f7ff fe8e 	bl	ac24 <rt_object_get_type>
    af08:	2800      	cmp	r0, #0
    af0a:	d110      	bne.n	af2e <rt_thread_timeout+0x4a>

    /* set error number */
    thread->error = -RT_ETIMEOUT;
    af0c:	2302      	movs	r3, #2
    af0e:	425b      	negs	r3, r3
    af10:	6323      	str	r3, [r4, #48]	; 0x30

    /* remove from suspend list */
    rt_list_remove(&(thread->tlist));
    af12:	0023      	movs	r3, r4
    n->next->prev = n->prev;
    af14:	6961      	ldr	r1, [r4, #20]
    af16:	69a2      	ldr	r2, [r4, #24]
    af18:	3314      	adds	r3, #20
    af1a:	604a      	str	r2, [r1, #4]

    /* insert to schedule ready list */
    rt_schedule_insert_thread(thread);
    af1c:	0020      	movs	r0, r4
    n->prev->next = n->next;
    af1e:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
    af20:	61a3      	str	r3, [r4, #24]
    af22:	6163      	str	r3, [r4, #20]
    af24:	f7ff ff30 	bl	ad88 <rt_schedule_insert_thread>

    /* do schedule */
    rt_schedule();
    af28:	f7ff feca 	bl	acc0 <rt_schedule>
}
    af2c:	bd10      	pop	{r4, pc}
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    af2e:	4a08      	ldr	r2, [pc, #32]	; (af50 <rt_thread_timeout+0x6c>)
    af30:	4905      	ldr	r1, [pc, #20]	; (af48 <rt_thread_timeout+0x64>)
    af32:	4808      	ldr	r0, [pc, #32]	; (af54 <rt_thread_timeout+0x70>)
    af34:	f7ff fa00 	bl	a338 <rt_assert_handler>
    af38:	e7e8      	b.n	af0c <rt_thread_timeout+0x28>
    RT_ASSERT(thread != RT_NULL);
    af3a:	4a07      	ldr	r2, [pc, #28]	; (af58 <rt_thread_timeout+0x74>)
    af3c:	4902      	ldr	r1, [pc, #8]	; (af48 <rt_thread_timeout+0x64>)
    af3e:	4807      	ldr	r0, [pc, #28]	; (af5c <rt_thread_timeout+0x78>)
    af40:	f7ff f9fa 	bl	a338 <rt_assert_handler>
    af44:	e7d1      	b.n	aeea <rt_thread_timeout+0x6>
    af46:	46c0      	nop			; (mov r8, r8)
    af48:	00015824 	.word	0x00015824
    af4c:	00015730 	.word	0x00015730
    af50:	000002ed 	.word	0x000002ed
    af54:	0001576c 	.word	0x0001576c
    af58:	000002eb 	.word	0x000002eb
    af5c:	000156e4 	.word	0x000156e4

0000af60 <_rt_thread_init.constprop.0>:
static rt_err_t _rt_thread_init(struct rt_thread *thread,
    af60:	b570      	push	{r4, r5, r6, lr}
    af62:	0004      	movs	r4, r0
    af64:	b082      	sub	sp, #8
    af66:	0018      	movs	r0, r3
    af68:	ab06      	add	r3, sp, #24
    af6a:	0016      	movs	r6, r2
    af6c:	cb04      	ldmia	r3!, {r2}
    thread->entry = (void *)entry;
    af6e:	6221      	str	r1, [r4, #32]
static rt_err_t _rt_thread_init(struct rt_thread *thread,
    af70:	781d      	ldrb	r5, [r3, #0]
    rt_list_init(&(thread->tlist));
    af72:	0023      	movs	r3, r4
    af74:	3314      	adds	r3, #20
    rt_memset(thread->stack_addr, '#', thread->stack_size);
    af76:	2123      	movs	r1, #35	; 0x23
    l->next = l->prev = l;
    af78:	61a3      	str	r3, [r4, #24]
    af7a:	6163      	str	r3, [r4, #20]
    thread->stack_size = stack_size;
    af7c:	62e2      	str	r2, [r4, #44]	; 0x2c
    thread->parameter = parameter;
    af7e:	6266      	str	r6, [r4, #36]	; 0x24
    thread->stack_addr = stack_start;
    af80:	62a0      	str	r0, [r4, #40]	; 0x28
    rt_memset(thread->stack_addr, '#', thread->stack_size);
    af82:	f7fe fe75 	bl	9c70 <rt_memset>
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
    af86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    af88:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
    af8a:	1f1a      	subs	r2, r3, #4
    af8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    af8e:	6a20      	ldr	r0, [r4, #32]
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
    af90:	469c      	mov	ip, r3
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    af92:	4b16      	ldr	r3, [pc, #88]	; (afec <_rt_thread_init.constprop.0+0x8c>)
                                          (void *)((char *)thread->stack_addr + thread->stack_size - 4),
    af94:	4462      	add	r2, ip
    thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
    af96:	f000 fb9d 	bl	b6d4 <rt_hw_stack_init>
    af9a:	61e0      	str	r0, [r4, #28]
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    af9c:	2d1f      	cmp	r5, #31
    af9e:	d81f      	bhi.n	afe0 <_rt_thread_init.constprop.0+0x80>
    thread->init_priority    = priority;
    afa0:	2336      	movs	r3, #54	; 0x36
    thread->init_tick      = tick;
    afa2:	9a08      	ldr	r2, [sp, #32]
    thread->init_priority    = priority;
    afa4:	54e5      	strb	r5, [r4, r3]
    thread->current_priority = priority;
    afa6:	3b01      	subs	r3, #1
    afa8:	54e5      	strb	r5, [r4, r3]
    rt_timer_init(&(thread->thread_timer),
    afaa:	0020      	movs	r0, r4
    thread->number_mask = 0;
    afac:	2300      	movs	r3, #0
    thread->init_tick      = tick;
    afae:	6462      	str	r2, [r4, #68]	; 0x44
    thread->remaining_tick = tick;
    afb0:	64a2      	str	r2, [r4, #72]	; 0x48
    thread->stat  = RT_THREAD_INIT;
    afb2:	2234      	movs	r2, #52	; 0x34
    thread->number_mask = 0;
    afb4:	63a3      	str	r3, [r4, #56]	; 0x38
    thread->error = RT_EOK;
    afb6:	6323      	str	r3, [r4, #48]	; 0x30
    rt_timer_init(&(thread->thread_timer),
    afb8:	9301      	str	r3, [sp, #4]
    thread->stat  = RT_THREAD_INIT;
    afba:	54a3      	strb	r3, [r4, r2]
    rt_timer_init(&(thread->thread_timer),
    afbc:	9300      	str	r3, [sp, #0]
    thread->cleanup   = 0;
    afbe:	67a3      	str	r3, [r4, #120]	; 0x78
    thread->user_data = 0;
    afc0:	67e3      	str	r3, [r4, #124]	; 0x7c
    rt_timer_init(&(thread->thread_timer),
    afc2:	0021      	movs	r1, r4
    afc4:	0023      	movs	r3, r4
    afc6:	4a0a      	ldr	r2, [pc, #40]	; (aff0 <_rt_thread_init.constprop.0+0x90>)
    afc8:	304c      	adds	r0, #76	; 0x4c
    afca:	f000 f9c3 	bl	b354 <rt_timer_init>
    RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
    afce:	4b09      	ldr	r3, [pc, #36]	; (aff4 <_rt_thread_init.constprop.0+0x94>)
    afd0:	681b      	ldr	r3, [r3, #0]
    afd2:	2b00      	cmp	r3, #0
    afd4:	d001      	beq.n	afda <_rt_thread_init.constprop.0+0x7a>
    afd6:	0020      	movs	r0, r4
    afd8:	4798      	blx	r3
}
    afda:	2000      	movs	r0, #0
    afdc:	b002      	add	sp, #8
    afde:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
    afe0:	2296      	movs	r2, #150	; 0x96
    afe2:	4905      	ldr	r1, [pc, #20]	; (aff8 <_rt_thread_init.constprop.0+0x98>)
    afe4:	4805      	ldr	r0, [pc, #20]	; (affc <_rt_thread_init.constprop.0+0x9c>)
    afe6:	f7ff f9a7 	bl	a338 <rt_assert_handler>
    afea:	e7d9      	b.n	afa0 <_rt_thread_init.constprop.0+0x40>
    afec:	0000ae89 	.word	0x0000ae89
    aff0:	0000aee5 	.word	0x0000aee5
    aff4:	00018688 	.word	0x00018688
    aff8:	00015894 	.word	0x00015894
    affc:	000157b0 	.word	0x000157b0

0000b000 <rt_thread_init>:
{
    b000:	b5f0      	push	{r4, r5, r6, r7, lr}
    b002:	46c6      	mov	lr, r8
    b004:	b500      	push	{lr}
    b006:	b084      	sub	sp, #16
    b008:	001e      	movs	r6, r3
    b00a:	ab0c      	add	r3, sp, #48	; 0x30
    b00c:	781b      	ldrb	r3, [r3, #0]
    b00e:	0004      	movs	r4, r0
    b010:	000f      	movs	r7, r1
    b012:	0015      	movs	r5, r2
    b014:	4698      	mov	r8, r3
    RT_ASSERT(thread != RT_NULL);
    b016:	2800      	cmp	r0, #0
    b018:	d017      	beq.n	b04a <rt_thread_init+0x4a>
    RT_ASSERT(stack_start != RT_NULL);
    b01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b01c:	2b00      	cmp	r3, #0
    b01e:	d01c      	beq.n	b05a <rt_thread_init+0x5a>
    rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
    b020:	003a      	movs	r2, r7
    b022:	0020      	movs	r0, r4
    b024:	2100      	movs	r1, #0
    b026:	f7ff fce7 	bl	a9f8 <rt_object_init>
    return _rt_thread_init(thread,
    b02a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b02c:	0032      	movs	r2, r6
    b02e:	9302      	str	r3, [sp, #8]
    b030:	4643      	mov	r3, r8
    b032:	9301      	str	r3, [sp, #4]
    b034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b036:	0029      	movs	r1, r5
    b038:	9300      	str	r3, [sp, #0]
    b03a:	0020      	movs	r0, r4
    b03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b03e:	f7ff ff8f 	bl	af60 <_rt_thread_init.constprop.0>
}
    b042:	b004      	add	sp, #16
    b044:	bc80      	pop	{r7}
    b046:	46b8      	mov	r8, r7
    b048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RT_ASSERT(thread != RT_NULL);
    b04a:	22e6      	movs	r2, #230	; 0xe6
    b04c:	4906      	ldr	r1, [pc, #24]	; (b068 <rt_thread_init+0x68>)
    b04e:	4807      	ldr	r0, [pc, #28]	; (b06c <rt_thread_init+0x6c>)
    b050:	f7ff f972 	bl	a338 <rt_assert_handler>
    RT_ASSERT(stack_start != RT_NULL);
    b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b056:	2b00      	cmp	r3, #0
    b058:	d1e2      	bne.n	b020 <rt_thread_init+0x20>
    b05a:	22e7      	movs	r2, #231	; 0xe7
    b05c:	4902      	ldr	r1, [pc, #8]	; (b068 <rt_thread_init+0x68>)
    b05e:	4804      	ldr	r0, [pc, #16]	; (b070 <rt_thread_init+0x70>)
    b060:	f7ff f96a 	bl	a338 <rt_assert_handler>
    b064:	e7dc      	b.n	b020 <rt_thread_init+0x20>
    b066:	46c0      	nop			; (mov r8, r8)
    b068:	00015838 	.word	0x00015838
    b06c:	000156e4 	.word	0x000156e4
    b070:	000157d4 	.word	0x000157d4

0000b074 <rt_thread_self>:
    return rt_current_thread;
    b074:	4b01      	ldr	r3, [pc, #4]	; (b07c <rt_thread_self+0x8>)
    b076:	6818      	ldr	r0, [r3, #0]
}
    b078:	4770      	bx	lr
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	00018570 	.word	0x00018570

0000b080 <rt_thread_create>:
{
    b080:	b5f0      	push	{r4, r5, r6, r7, lr}
    b082:	46c6      	mov	lr, r8
    b084:	b500      	push	{lr}
    b086:	b084      	sub	sp, #16
    b088:	001d      	movs	r5, r3
    b08a:	ab0a      	add	r3, sp, #40	; 0x28
    b08c:	781b      	ldrb	r3, [r3, #0]
    b08e:	000e      	movs	r6, r1
    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
    b090:	0001      	movs	r1, r0
    b092:	2000      	movs	r0, #0
{
    b094:	0017      	movs	r7, r2
    b096:	4698      	mov	r8, r3
    thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
    b098:	f7ff fd14 	bl	aac4 <rt_object_allocate>
    b09c:	1e04      	subs	r4, r0, #0
    if (thread == RT_NULL)
    b09e:	d00e      	beq.n	b0be <rt_thread_create+0x3e>
    stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
    b0a0:	0028      	movs	r0, r5
    b0a2:	f7ff faf1 	bl	a688 <rt_malloc>
    b0a6:	1e03      	subs	r3, r0, #0
    if (stack_start == RT_NULL)
    b0a8:	d00e      	beq.n	b0c8 <rt_thread_create+0x48>
    _rt_thread_init(thread,
    b0aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b0ac:	0031      	movs	r1, r6
    b0ae:	9202      	str	r2, [sp, #8]
    b0b0:	4642      	mov	r2, r8
    b0b2:	0020      	movs	r0, r4
    b0b4:	9201      	str	r2, [sp, #4]
    b0b6:	9500      	str	r5, [sp, #0]
    b0b8:	003a      	movs	r2, r7
    b0ba:	f7ff ff51 	bl	af60 <_rt_thread_init.constprop.0>
}
    b0be:	0020      	movs	r0, r4
    b0c0:	b004      	add	sp, #16
    b0c2:	bc80      	pop	{r7}
    b0c4:	46b8      	mov	r8, r7
    b0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rt_object_delete((rt_object_t)thread);
    b0c8:	0020      	movs	r0, r4
    b0ca:	f7ff fd65 	bl	ab98 <rt_object_delete>
        return RT_NULL;
    b0ce:	2400      	movs	r4, #0
    b0d0:	e7f5      	b.n	b0be <rt_thread_create+0x3e>
    b0d2:	46c0      	nop			; (mov r8, r8)

0000b0d4 <rt_thread_yield>:
{
    b0d4:	b510      	push	{r4, lr}
    level = rt_hw_interrupt_disable();
    b0d6:	f7f8 ffeb 	bl	40b0 <rt_hw_interrupt_disable>
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
    b0da:	2234      	movs	r2, #52	; 0x34
    thread = rt_current_thread;
    b0dc:	4b11      	ldr	r3, [pc, #68]	; (b124 <rt_thread_yield+0x50>)
    b0de:	681b      	ldr	r3, [r3, #0]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
    b0e0:	5c99      	ldrb	r1, [r3, r2]
    b0e2:	3a25      	subs	r2, #37	; 0x25
    b0e4:	400a      	ands	r2, r1
    b0e6:	2a01      	cmp	r2, #1
    b0e8:	d103      	bne.n	b0f2 <rt_thread_yield+0x1e>
        thread->tlist.next != thread->tlist.prev)
    b0ea:	6959      	ldr	r1, [r3, #20]
    b0ec:	699a      	ldr	r2, [r3, #24]
    if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY &&
    b0ee:	4291      	cmp	r1, r2
    b0f0:	d103      	bne.n	b0fa <rt_thread_yield+0x26>
    rt_hw_interrupt_enable(level);
    b0f2:	f7f8 ffe1 	bl	40b8 <rt_hw_interrupt_enable>
}
    b0f6:	2000      	movs	r0, #0
    b0f8:	bd10      	pop	{r4, pc}
        rt_list_remove(&(thread->tlist));
    b0fa:	001c      	movs	r4, r3
    n->next->prev = n->prev;
    b0fc:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    b0fe:	6011      	str	r1, [r2, #0]
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
    b100:	2235      	movs	r2, #53	; 0x35
        rt_list_remove(&(thread->tlist));
    b102:	3414      	adds	r4, #20
    n->next = n->prev = n;
    b104:	619c      	str	r4, [r3, #24]
    b106:	615c      	str	r4, [r3, #20]
        rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
    b108:	5c99      	ldrb	r1, [r3, r2]
    l->prev->next = n;
    b10a:	4a07      	ldr	r2, [pc, #28]	; (b128 <rt_thread_yield+0x54>)
    b10c:	00c9      	lsls	r1, r1, #3
    b10e:	1852      	adds	r2, r2, r1
    b110:	6851      	ldr	r1, [r2, #4]
    b112:	600c      	str	r4, [r1, #0]
    n->prev = l->prev;
    b114:	6199      	str	r1, [r3, #24]
    l->prev = n;
    b116:	6054      	str	r4, [r2, #4]
    n->next = l;
    b118:	615a      	str	r2, [r3, #20]
        rt_hw_interrupt_enable(level);
    b11a:	f7f8 ffcd 	bl	40b8 <rt_hw_interrupt_enable>
        rt_schedule();
    b11e:	f7ff fdcf 	bl	acc0 <rt_schedule>
        return RT_EOK;
    b122:	e7e8      	b.n	b0f6 <rt_thread_yield+0x22>
    b124:	00018570 	.word	0x00018570
    b128:	00018584 	.word	0x00018584

0000b12c <rt_thread_suspend>:
{
    b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b12e:	1e04      	subs	r4, r0, #0
    RT_ASSERT(thread != RT_NULL);
    b130:	d02d      	beq.n	b18e <rt_thread_suspend+0x62>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b132:	0020      	movs	r0, r4
    b134:	f7ff fd76 	bl	ac24 <rt_object_get_type>
    b138:	2800      	cmp	r0, #0
    b13a:	d11f      	bne.n	b17c <rt_thread_suspend+0x50>
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_READY)
    b13c:	2534      	movs	r5, #52	; 0x34
    b13e:	270f      	movs	r7, #15
    b140:	5d63      	ldrb	r3, [r4, r5]
    b142:	403b      	ands	r3, r7
    b144:	2b01      	cmp	r3, #1
    b146:	d128      	bne.n	b19a <rt_thread_suspend+0x6e>
    temp = rt_hw_interrupt_disable();
    b148:	f7f8 ffb2 	bl	40b0 <rt_hw_interrupt_disable>
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
    b14c:	2202      	movs	r2, #2
    b14e:	5d63      	ldrb	r3, [r4, r5]
    temp = rt_hw_interrupt_disable();
    b150:	0006      	movs	r6, r0
    thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
    b152:	43bb      	bics	r3, r7
    b154:	4313      	orrs	r3, r2
    b156:	5563      	strb	r3, [r4, r5]
    rt_schedule_remove_thread(thread);
    b158:	0020      	movs	r0, r4
    b15a:	f7ff fe45 	bl	ade8 <rt_schedule_remove_thread>
    rt_timer_stop(&(thread->thread_timer));
    b15e:	0020      	movs	r0, r4
    b160:	304c      	adds	r0, #76	; 0x4c
    b162:	f000 f9d3 	bl	b50c <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
    b166:	0030      	movs	r0, r6
    b168:	f7f8 ffa6 	bl	40b8 <rt_hw_interrupt_enable>
    RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
    b16c:	4b0c      	ldr	r3, [pc, #48]	; (b1a0 <rt_thread_suspend+0x74>)
    b16e:	681b      	ldr	r3, [r3, #0]
    b170:	2b00      	cmp	r3, #0
    b172:	d00a      	beq.n	b18a <rt_thread_suspend+0x5e>
    b174:	0020      	movs	r0, r4
    b176:	4798      	blx	r3
    return RT_EOK;
    b178:	2000      	movs	r0, #0
}
    b17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b17c:	22a5      	movs	r2, #165	; 0xa5
    b17e:	4909      	ldr	r1, [pc, #36]	; (b1a4 <rt_thread_suspend+0x78>)
    b180:	4809      	ldr	r0, [pc, #36]	; (b1a8 <rt_thread_suspend+0x7c>)
    b182:	0092      	lsls	r2, r2, #2
    b184:	f7ff f8d8 	bl	a338 <rt_assert_handler>
    b188:	e7d8      	b.n	b13c <rt_thread_suspend+0x10>
    return RT_EOK;
    b18a:	2000      	movs	r0, #0
    b18c:	e7f5      	b.n	b17a <rt_thread_suspend+0x4e>
    RT_ASSERT(thread != RT_NULL);
    b18e:	4a07      	ldr	r2, [pc, #28]	; (b1ac <rt_thread_suspend+0x80>)
    b190:	4904      	ldr	r1, [pc, #16]	; (b1a4 <rt_thread_suspend+0x78>)
    b192:	4807      	ldr	r0, [pc, #28]	; (b1b0 <rt_thread_suspend+0x84>)
    b194:	f7ff f8d0 	bl	a338 <rt_assert_handler>
    b198:	e7cb      	b.n	b132 <rt_thread_suspend+0x6>
        return -RT_ERROR;
    b19a:	2001      	movs	r0, #1
    b19c:	4240      	negs	r0, r0
    b19e:	e7ec      	b.n	b17a <rt_thread_suspend+0x4e>
    b1a0:	00018690 	.word	0x00018690
    b1a4:	0001585c 	.word	0x0001585c
    b1a8:	0001576c 	.word	0x0001576c
    b1ac:	00000293 	.word	0x00000293
    b1b0:	000156e4 	.word	0x000156e4

0000b1b4 <rt_thread_sleep>:
{
    b1b4:	b570      	push	{r4, r5, r6, lr}
    b1b6:	b082      	sub	sp, #8
    b1b8:	9001      	str	r0, [sp, #4]
    temp = rt_hw_interrupt_disable();
    b1ba:	f7f8 ff79 	bl	40b0 <rt_hw_interrupt_disable>
    thread = rt_current_thread;
    b1be:	4b18      	ldr	r3, [pc, #96]	; (b220 <rt_thread_sleep+0x6c>)
    temp = rt_hw_interrupt_disable();
    b1c0:	0006      	movs	r6, r0
    thread = rt_current_thread;
    b1c2:	681c      	ldr	r4, [r3, #0]
    RT_ASSERT(thread != RT_NULL);
    b1c4:	2c00      	cmp	r4, #0
    b1c6:	d025      	beq.n	b214 <rt_thread_sleep+0x60>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b1c8:	0020      	movs	r0, r4
    b1ca:	f7ff fd2b 	bl	ac24 <rt_object_get_type>
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d119      	bne.n	b206 <rt_thread_sleep+0x52>
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
    b1d2:	0025      	movs	r5, r4
    rt_thread_suspend(thread);
    b1d4:	0020      	movs	r0, r4
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
    b1d6:	354c      	adds	r5, #76	; 0x4c
    rt_thread_suspend(thread);
    b1d8:	f7ff ffa8 	bl	b12c <rt_thread_suspend>
    rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
    b1dc:	2100      	movs	r1, #0
    b1de:	aa01      	add	r2, sp, #4
    b1e0:	0028      	movs	r0, r5
    b1e2:	f000 f9cf 	bl	b584 <rt_timer_control>
    rt_timer_start(&(thread->thread_timer));
    b1e6:	0028      	movs	r0, r5
    b1e8:	f000 f91a 	bl	b420 <rt_timer_start>
    rt_hw_interrupt_enable(temp);
    b1ec:	0030      	movs	r0, r6
    b1ee:	f7f8 ff63 	bl	40b8 <rt_hw_interrupt_enable>
    rt_schedule();
    b1f2:	f7ff fd65 	bl	acc0 <rt_schedule>
    if (thread->error == -RT_ETIMEOUT)
    b1f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b1f8:	3302      	adds	r3, #2
    b1fa:	d101      	bne.n	b200 <rt_thread_sleep+0x4c>
        thread->error = RT_EOK;
    b1fc:	2300      	movs	r3, #0
    b1fe:	6323      	str	r3, [r4, #48]	; 0x30
}
    b200:	2000      	movs	r0, #0
    b202:	b002      	add	sp, #8
    b204:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b206:	2280      	movs	r2, #128	; 0x80
    b208:	4906      	ldr	r1, [pc, #24]	; (b224 <rt_thread_sleep+0x70>)
    b20a:	4807      	ldr	r0, [pc, #28]	; (b228 <rt_thread_sleep+0x74>)
    b20c:	0092      	lsls	r2, r2, #2
    b20e:	f7ff f893 	bl	a338 <rt_assert_handler>
    b212:	e7de      	b.n	b1d2 <rt_thread_sleep+0x1e>
    RT_ASSERT(thread != RT_NULL);
    b214:	4a05      	ldr	r2, [pc, #20]	; (b22c <rt_thread_sleep+0x78>)
    b216:	4903      	ldr	r1, [pc, #12]	; (b224 <rt_thread_sleep+0x70>)
    b218:	4805      	ldr	r0, [pc, #20]	; (b230 <rt_thread_sleep+0x7c>)
    b21a:	f7ff f88d 	bl	a338 <rt_assert_handler>
    b21e:	e7d3      	b.n	b1c8 <rt_thread_sleep+0x14>
    b220:	00018570 	.word	0x00018570
    b224:	00015870 	.word	0x00015870
    b228:	0001576c 	.word	0x0001576c
    b22c:	000001ff 	.word	0x000001ff
    b230:	000156e4 	.word	0x000156e4

0000b234 <rt_thread_delay>:
{
    b234:	b510      	push	{r4, lr}
    return rt_thread_sleep(tick);
    b236:	f7ff ffbd 	bl	b1b4 <rt_thread_sleep>
}
    b23a:	bd10      	pop	{r4, pc}

0000b23c <rt_thread_resume>:
{
    b23c:	b570      	push	{r4, r5, r6, lr}
    b23e:	1e04      	subs	r4, r0, #0
    RT_ASSERT(thread != RT_NULL);
    b240:	d02f      	beq.n	b2a2 <rt_thread_resume+0x66>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b242:	0020      	movs	r0, r4
    b244:	f7ff fcee 	bl	ac24 <rt_object_get_type>
    b248:	2800      	cmp	r0, #0
    b24a:	d122      	bne.n	b292 <rt_thread_resume+0x56>
    if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
    b24c:	2334      	movs	r3, #52	; 0x34
    b24e:	5ce2      	ldrb	r2, [r4, r3]
    b250:	3b25      	subs	r3, #37	; 0x25
    b252:	4013      	ands	r3, r2
    b254:	2b02      	cmp	r3, #2
    b256:	d12a      	bne.n	b2ae <rt_thread_resume+0x72>
    temp = rt_hw_interrupt_disable();
    b258:	f7f8 ff2a 	bl	40b0 <rt_hw_interrupt_disable>
    n->next->prev = n->prev;
    b25c:	6962      	ldr	r2, [r4, #20]
    b25e:	69a3      	ldr	r3, [r4, #24]
    b260:	0005      	movs	r5, r0
    b262:	6053      	str	r3, [r2, #4]
    n->prev->next = n->next;
    b264:	601a      	str	r2, [r3, #0]
    n->next = n->prev = n;
    b266:	0023      	movs	r3, r4
    rt_timer_stop(&thread->thread_timer);
    b268:	0020      	movs	r0, r4
    b26a:	3314      	adds	r3, #20
    b26c:	61a3      	str	r3, [r4, #24]
    b26e:	6163      	str	r3, [r4, #20]
    b270:	304c      	adds	r0, #76	; 0x4c
    b272:	f000 f94b 	bl	b50c <rt_timer_stop>
    rt_hw_interrupt_enable(temp);
    b276:	0028      	movs	r0, r5
    b278:	f7f8 ff1e 	bl	40b8 <rt_hw_interrupt_enable>
    rt_schedule_insert_thread(thread);
    b27c:	0020      	movs	r0, r4
    b27e:	f7ff fd83 	bl	ad88 <rt_schedule_insert_thread>
    RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
    b282:	4b0c      	ldr	r3, [pc, #48]	; (b2b4 <rt_thread_resume+0x78>)
    b284:	681b      	ldr	r3, [r3, #0]
    b286:	2b00      	cmp	r3, #0
    b288:	d009      	beq.n	b29e <rt_thread_resume+0x62>
    b28a:	0020      	movs	r0, r4
    b28c:	4798      	blx	r3
    return RT_EOK;
    b28e:	2000      	movs	r0, #0
}
    b290:	bd70      	pop	{r4, r5, r6, pc}
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b292:	4a09      	ldr	r2, [pc, #36]	; (b2b8 <rt_thread_resume+0x7c>)
    b294:	4909      	ldr	r1, [pc, #36]	; (b2bc <rt_thread_resume+0x80>)
    b296:	480a      	ldr	r0, [pc, #40]	; (b2c0 <rt_thread_resume+0x84>)
    b298:	f7ff f84e 	bl	a338 <rt_assert_handler>
    b29c:	e7d6      	b.n	b24c <rt_thread_resume+0x10>
    return RT_EOK;
    b29e:	2000      	movs	r0, #0
    b2a0:	e7f6      	b.n	b290 <rt_thread_resume+0x54>
    RT_ASSERT(thread != RT_NULL);
    b2a2:	4a08      	ldr	r2, [pc, #32]	; (b2c4 <rt_thread_resume+0x88>)
    b2a4:	4905      	ldr	r1, [pc, #20]	; (b2bc <rt_thread_resume+0x80>)
    b2a6:	4808      	ldr	r0, [pc, #32]	; (b2c8 <rt_thread_resume+0x8c>)
    b2a8:	f7ff f846 	bl	a338 <rt_assert_handler>
    b2ac:	e7c9      	b.n	b242 <rt_thread_resume+0x6>
        return -RT_ERROR;
    b2ae:	2001      	movs	r0, #1
    b2b0:	4240      	negs	r0, r0
    b2b2:	e7ed      	b.n	b290 <rt_thread_resume+0x54>
    b2b4:	0001868c 	.word	0x0001868c
    b2b8:	000002bf 	.word	0x000002bf
    b2bc:	00015848 	.word	0x00015848
    b2c0:	0001576c 	.word	0x0001576c
    b2c4:	000002be 	.word	0x000002be
    b2c8:	000156e4 	.word	0x000156e4

0000b2cc <rt_thread_startup>:
{
    b2cc:	b510      	push	{r4, lr}
    b2ce:	1e04      	subs	r4, r0, #0
    RT_ASSERT(thread != RT_NULL);
    b2d0:	d02f      	beq.n	b332 <rt_thread_startup+0x66>
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
    b2d2:	2334      	movs	r3, #52	; 0x34
    b2d4:	5ce3      	ldrb	r3, [r4, r3]
    b2d6:	071b      	lsls	r3, r3, #28
    b2d8:	d119      	bne.n	b30e <rt_thread_startup+0x42>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b2da:	0020      	movs	r0, r4
    b2dc:	f7ff fca2 	bl	ac24 <rt_object_get_type>
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d11f      	bne.n	b324 <rt_thread_startup+0x58>
    thread->current_priority = thread->init_priority;
    b2e4:	2336      	movs	r3, #54	; 0x36
    b2e6:	5ce2      	ldrb	r2, [r4, r3]
    b2e8:	3b01      	subs	r3, #1
    b2ea:	54e2      	strb	r2, [r4, r3]
    thread->number_mask = 1L << thread->current_priority;
    b2ec:	3b34      	subs	r3, #52	; 0x34
    b2ee:	4093      	lsls	r3, r2
    thread->stat = RT_THREAD_SUSPEND;
    b2f0:	2202      	movs	r2, #2
    thread->number_mask = 1L << thread->current_priority;
    b2f2:	63a3      	str	r3, [r4, #56]	; 0x38
    thread->stat = RT_THREAD_SUSPEND;
    b2f4:	2334      	movs	r3, #52	; 0x34
    rt_thread_resume(thread);
    b2f6:	0020      	movs	r0, r4
    thread->stat = RT_THREAD_SUSPEND;
    b2f8:	54e2      	strb	r2, [r4, r3]
    rt_thread_resume(thread);
    b2fa:	f7ff ff9f 	bl	b23c <rt_thread_resume>
    return rt_current_thread;
    b2fe:	4b10      	ldr	r3, [pc, #64]	; (b340 <rt_thread_startup+0x74>)
    if (rt_thread_self() != RT_NULL)
    b300:	681b      	ldr	r3, [r3, #0]
    b302:	2b00      	cmp	r3, #0
    b304:	d001      	beq.n	b30a <rt_thread_startup+0x3e>
        rt_schedule();
    b306:	f7ff fcdb 	bl	acc0 <rt_schedule>
}
    b30a:	2000      	movs	r0, #0
    b30c:	bd10      	pop	{r4, pc}
    RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
    b30e:	220e      	movs	r2, #14
    b310:	480c      	ldr	r0, [pc, #48]	; (b344 <rt_thread_startup+0x78>)
    b312:	490d      	ldr	r1, [pc, #52]	; (b348 <rt_thread_startup+0x7c>)
    b314:	32ff      	adds	r2, #255	; 0xff
    b316:	f7ff f80f 	bl	a338 <rt_assert_handler>
    RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
    b31a:	0020      	movs	r0, r4
    b31c:	f7ff fc82 	bl	ac24 <rt_object_get_type>
    b320:	2800      	cmp	r0, #0
    b322:	d0df      	beq.n	b2e4 <rt_thread_startup+0x18>
    b324:	2287      	movs	r2, #135	; 0x87
    b326:	4908      	ldr	r1, [pc, #32]	; (b348 <rt_thread_startup+0x7c>)
    b328:	4808      	ldr	r0, [pc, #32]	; (b34c <rt_thread_startup+0x80>)
    b32a:	0052      	lsls	r2, r2, #1
    b32c:	f7ff f804 	bl	a338 <rt_assert_handler>
    b330:	e7d8      	b.n	b2e4 <rt_thread_startup+0x18>
    RT_ASSERT(thread != RT_NULL);
    b332:	2286      	movs	r2, #134	; 0x86
    b334:	4904      	ldr	r1, [pc, #16]	; (b348 <rt_thread_startup+0x7c>)
    b336:	4806      	ldr	r0, [pc, #24]	; (b350 <rt_thread_startup+0x84>)
    b338:	0052      	lsls	r2, r2, #1
    b33a:	f7fe fffd 	bl	a338 <rt_assert_handler>
    b33e:	e7c8      	b.n	b2d2 <rt_thread_startup+0x6>
    b340:	00018570 	.word	0x00018570
    b344:	000157ec 	.word	0x000157ec
    b348:	00015880 	.word	0x00015880
    b34c:	0001576c 	.word	0x0001576c
    b350:	000156e4 	.word	0x000156e4

0000b354 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
    b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b356:	4647      	mov	r7, r8
    b358:	46ce      	mov	lr, r9
    b35a:	b580      	push	{r7, lr}
    b35c:	001d      	movs	r5, r3
    b35e:	ab08      	add	r3, sp, #32
    b360:	0016      	movs	r6, r2
    b362:	cb04      	ldmia	r3!, {r2}
    b364:	0004      	movs	r4, r0
    b366:	4688      	mov	r8, r1
    b368:	4691      	mov	r9, r2
    b36a:	781f      	ldrb	r7, [r3, #0]
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    b36c:	2800      	cmp	r0, #0
    b36e:	d015      	beq.n	b39c <rt_timer_init+0x48>

    /* timer object initialization */
    rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
    b370:	4642      	mov	r2, r8
    b372:	2109      	movs	r1, #9
    b374:	0020      	movs	r0, r4
    b376:	f7ff fb3f 	bl	a9f8 <rt_object_init>
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b37a:	2301      	movs	r3, #1
    b37c:	439f      	bics	r7, r3
    timer->timeout_tick = 0;
    b37e:	2300      	movs	r3, #0
    b380:	62a3      	str	r3, [r4, #40]	; 0x28
    timer->init_tick    = time;
    b382:	464b      	mov	r3, r9
    b384:	6263      	str	r3, [r4, #36]	; 0x24
        rt_list_init(&(timer->row[i]));
    b386:	0023      	movs	r3, r4
    b388:	3314      	adds	r3, #20
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b38a:	7267      	strb	r7, [r4, #9]
    timer->timeout_func = timeout;
    b38c:	61e6      	str	r6, [r4, #28]
    timer->parameter    = parameter;
    b38e:	6225      	str	r5, [r4, #32]
    l->next = l->prev = l;
    b390:	61a3      	str	r3, [r4, #24]
    b392:	6163      	str	r3, [r4, #20]

    _rt_timer_init(timer, timeout, parameter, time, flag);
}
    b394:	bcc0      	pop	{r6, r7}
    b396:	46b9      	mov	r9, r7
    b398:	46b0      	mov	r8, r6
    b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(timer != RT_NULL);
    b39c:	22ba      	movs	r2, #186	; 0xba
    b39e:	4902      	ldr	r1, [pc, #8]	; (b3a8 <rt_timer_init+0x54>)
    b3a0:	4802      	ldr	r0, [pc, #8]	; (b3ac <rt_timer_init+0x58>)
    b3a2:	f7fe ffc9 	bl	a338 <rt_assert_handler>
    b3a6:	e7e3      	b.n	b370 <rt_timer_init+0x1c>
    b3a8:	00015988 	.word	0x00015988
    b3ac:	000158a4 	.word	0x000158a4

0000b3b0 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
    b3b0:	b510      	push	{r4, lr}
    b3b2:	1e04      	subs	r4, r0, #0
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    b3b4:	d025      	beq.n	b402 <rt_timer_detach+0x52>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    b3b6:	0020      	movs	r0, r4
    b3b8:	f7ff fc34 	bl	ac24 <rt_object_get_type>
    b3bc:	2809      	cmp	r0, #9
    b3be:	d004      	beq.n	b3ca <rt_timer_detach+0x1a>
    b3c0:	22d0      	movs	r2, #208	; 0xd0
    b3c2:	4913      	ldr	r1, [pc, #76]	; (b410 <rt_timer_detach+0x60>)
    b3c4:	4813      	ldr	r0, [pc, #76]	; (b414 <rt_timer_detach+0x64>)
    b3c6:	f7fe ffb7 	bl	a338 <rt_assert_handler>
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));
    b3ca:	0020      	movs	r0, r4
    b3cc:	f7ff fc18 	bl	ac00 <rt_object_is_systemobject>
    b3d0:	2800      	cmp	r0, #0
    b3d2:	d010      	beq.n	b3f6 <rt_timer_detach+0x46>

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    b3d4:	f7f8 fe6c 	bl	40b0 <rt_hw_interrupt_disable>
        rt_list_remove(&timer->row[i]);
    b3d8:	0023      	movs	r3, r4
    n->next->prev = n->prev;
    b3da:	6961      	ldr	r1, [r4, #20]
    b3dc:	69a2      	ldr	r2, [r4, #24]
    b3de:	3314      	adds	r3, #20
    b3e0:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    b3e2:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
    b3e4:	61a3      	str	r3, [r4, #24]
    b3e6:	6163      	str	r3, [r4, #20]

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    b3e8:	f7f8 fe66 	bl	40b8 <rt_hw_interrupt_enable>

    rt_object_detach((rt_object_t)timer);
    b3ec:	0020      	movs	r0, r4
    b3ee:	f7ff fb43 	bl	aa78 <rt_object_detach>

    return RT_EOK;
}
    b3f2:	2000      	movs	r0, #0
    b3f4:	bd10      	pop	{r4, pc}
    RT_ASSERT(rt_object_is_systemobject(&timer->parent));
    b3f6:	22d1      	movs	r2, #209	; 0xd1
    b3f8:	4905      	ldr	r1, [pc, #20]	; (b410 <rt_timer_detach+0x60>)
    b3fa:	4807      	ldr	r0, [pc, #28]	; (b418 <rt_timer_detach+0x68>)
    b3fc:	f7fe ff9c 	bl	a338 <rt_assert_handler>
    b400:	e7e8      	b.n	b3d4 <rt_timer_detach+0x24>
    RT_ASSERT(timer != RT_NULL);
    b402:	22cf      	movs	r2, #207	; 0xcf
    b404:	4902      	ldr	r1, [pc, #8]	; (b410 <rt_timer_detach+0x60>)
    b406:	4805      	ldr	r0, [pc, #20]	; (b41c <rt_timer_detach+0x6c>)
    b408:	f7fe ff96 	bl	a338 <rt_assert_handler>
    b40c:	e7d3      	b.n	b3b6 <rt_timer_detach+0x6>
    b40e:	46c0      	nop			; (mov r8, r8)
    b410:	00015978 	.word	0x00015978
    b414:	000158b8 	.word	0x000158b8
    b418:	000158f4 	.word	0x000158f4
    b41c:	000158a4 	.word	0x000158a4

0000b420 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
    b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b422:	1e05      	subs	r5, r0, #0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    b424:	d057      	beq.n	b4d6 <rt_timer_start+0xb6>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    b426:	0028      	movs	r0, r5
    b428:	f7ff fbfc 	bl	ac24 <rt_object_get_type>
    b42c:	2809      	cmp	r0, #9
    b42e:	d005      	beq.n	b43c <rt_timer_start+0x1c>
    b430:	2234      	movs	r2, #52	; 0x34
    b432:	492e      	ldr	r1, [pc, #184]	; (b4ec <rt_timer_start+0xcc>)
    b434:	482e      	ldr	r0, [pc, #184]	; (b4f0 <rt_timer_start+0xd0>)
    b436:	32ff      	adds	r2, #255	; 0xff
    b438:	f7fe ff7e 	bl	a338 <rt_assert_handler>

    /* stop timer firstly */
    level = rt_hw_interrupt_disable();
    b43c:	f7f8 fe38 	bl	40b0 <rt_hw_interrupt_disable>
    n->next->prev = n->prev;
    b440:	696a      	ldr	r2, [r5, #20]
    b442:	69ab      	ldr	r3, [r5, #24]
        rt_list_remove(&timer->row[i]);
    b444:	002e      	movs	r6, r5
    b446:	6053      	str	r3, [r2, #4]
    n->prev->next = n->next;
    b448:	601a      	str	r2, [r3, #0]
    /* remove timer from list */
    _rt_timer_remove(timer);
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b44a:	2201      	movs	r2, #1
    b44c:	7a6b      	ldrb	r3, [r5, #9]
        rt_list_remove(&timer->row[i]);
    b44e:	3614      	adds	r6, #20
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b450:	4393      	bics	r3, r2
    b452:	726b      	strb	r3, [r5, #9]
    n->next = n->prev = n;
    b454:	61ae      	str	r6, [r5, #24]
    b456:	616e      	str	r6, [r5, #20]
    rt_hw_interrupt_enable(level);
    b458:	f7f8 fe2e 	bl	40b8 <rt_hw_interrupt_enable>

    RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
    b45c:	4b25      	ldr	r3, [pc, #148]	; (b4f4 <rt_timer_start+0xd4>)
    b45e:	681b      	ldr	r3, [r3, #0]
    b460:	2b00      	cmp	r3, #0
    b462:	d001      	beq.n	b468 <rt_timer_start+0x48>
    b464:	0028      	movs	r0, r5
    b466:	4798      	blx	r3

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    b468:	4b23      	ldr	r3, [pc, #140]	; (b4f8 <rt_timer_start+0xd8>)
    b46a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    b46c:	429a      	cmp	r2, r3
    b46e:	d82b      	bhi.n	b4c8 <rt_timer_start+0xa8>
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
    b470:	f7fd fed2 	bl	9218 <rt_tick_get>
    b474:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b476:	469c      	mov	ip, r3
    b478:	4460      	add	r0, ip
    b47a:	62a8      	str	r0, [r5, #40]	; 0x28

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    b47c:	f7f8 fe18 	bl	40b0 <rt_hw_interrupt_disable>
    }

    row_head[0]  = &timer_list[0];
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
    b480:	4b1e      	ldr	r3, [pc, #120]	; (b4fc <rt_timer_start+0xdc>)
    level = rt_hw_interrupt_disable();
    b482:	4684      	mov	ip, r0
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
    b484:	685f      	ldr	r7, [r3, #4]
    b486:	429f      	cmp	r7, r3
    b488:	d02c      	beq.n	b4e4 <rt_timer_start+0xc4>
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
    b48a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
    b48c:	481a      	ldr	r0, [pc, #104]	; (b4f8 <rt_timer_start+0xd8>)
            rt_list_t *p = row_head[row_lvl]->next;
    b48e:	001c      	movs	r4, r3
    b490:	681b      	ldr	r3, [r3, #0]
            if ((t->timeout_tick - timer->timeout_tick) == 0)
    b492:	695a      	ldr	r2, [r3, #20]
    b494:	428a      	cmp	r2, r1
    b496:	d002      	beq.n	b49e <rt_timer_start+0x7e>
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
    b498:	1a52      	subs	r2, r2, r1
    b49a:	4282      	cmp	r2, r0
    b49c:	d903      	bls.n	b4a6 <rt_timer_start+0x86>
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
    b49e:	42bb      	cmp	r3, r7
    b4a0:	d1f5      	bne.n	b48e <rt_timer_start+0x6e>
    l->next->prev = n;
    b4a2:	001c      	movs	r4, r3
    b4a4:	681b      	ldr	r3, [r3, #0]

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
    b4a6:	4916      	ldr	r1, [pc, #88]	; (b500 <rt_timer_start+0xe0>)
    b4a8:	605e      	str	r6, [r3, #4]
    b4aa:	680a      	ldr	r2, [r1, #0]
    n->next = l->next;
    b4ac:	616b      	str	r3, [r5, #20]
    b4ae:	3201      	adds	r2, #1
    b4b0:	600a      	str	r2, [r1, #0]
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
    b4b2:	2201      	movs	r2, #1
    l->next = n;
    b4b4:	6026      	str	r6, [r4, #0]
    b4b6:	7a6b      	ldrb	r3, [r5, #9]

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    b4b8:	4660      	mov	r0, ip
    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
    b4ba:	4313      	orrs	r3, r2
    n->prev = l;
    b4bc:	61ac      	str	r4, [r5, #24]
    b4be:	726b      	strb	r3, [r5, #9]
    rt_hw_interrupt_enable(level);
    b4c0:	f7f8 fdfa 	bl	40b8 <rt_hw_interrupt_enable>
        }
    }
#endif

    return RT_EOK;
}
    b4c4:	2000      	movs	r0, #0
    b4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
    b4c8:	2244      	movs	r2, #68	; 0x44
    b4ca:	4908      	ldr	r1, [pc, #32]	; (b4ec <rt_timer_start+0xcc>)
    b4cc:	480d      	ldr	r0, [pc, #52]	; (b504 <rt_timer_start+0xe4>)
    b4ce:	32ff      	adds	r2, #255	; 0xff
    b4d0:	f7fe ff32 	bl	a338 <rt_assert_handler>
    b4d4:	e7cc      	b.n	b470 <rt_timer_start+0x50>
    RT_ASSERT(timer != RT_NULL);
    b4d6:	2299      	movs	r2, #153	; 0x99
    b4d8:	4904      	ldr	r1, [pc, #16]	; (b4ec <rt_timer_start+0xcc>)
    b4da:	480b      	ldr	r0, [pc, #44]	; (b508 <rt_timer_start+0xe8>)
    b4dc:	0052      	lsls	r2, r2, #1
    b4de:	f7fe ff2b 	bl	a338 <rt_assert_handler>
    b4e2:	e7a0      	b.n	b426 <rt_timer_start+0x6>
    row_head[0]  = &timer_list[0];
    b4e4:	003c      	movs	r4, r7
    l->next->prev = n;
    b4e6:	683b      	ldr	r3, [r7, #0]
    b4e8:	e7dd      	b.n	b4a6 <rt_timer_start+0x86>
    b4ea:	46c0      	nop			; (mov r8, r8)
    b4ec:	00015968 	.word	0x00015968
    b4f0:	000158b8 	.word	0x000158b8
    b4f4:	00018564 	.word	0x00018564
    b4f8:	7ffffffe 	.word	0x7ffffffe
    b4fc:	000186a0 	.word	0x000186a0
    b500:	00018694 	.word	0x00018694
    b504:	00015920 	.word	0x00015920
    b508:	000158a4 	.word	0x000158a4

0000b50c <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
    b50c:	b510      	push	{r4, lr}
    b50e:	1e04      	subs	r4, r0, #0
    register rt_base_t level;

    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    b510:	d025      	beq.n	b55e <rt_timer_stop+0x52>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    b512:	0020      	movs	r0, r4
    b514:	f7ff fb86 	bl	ac24 <rt_object_get_type>
    b518:	2809      	cmp	r0, #9
    b51a:	d005      	beq.n	b528 <rt_timer_stop+0x1c>
    b51c:	22d6      	movs	r2, #214	; 0xd6
    b51e:	4915      	ldr	r1, [pc, #84]	; (b574 <rt_timer_stop+0x68>)
    b520:	4815      	ldr	r0, [pc, #84]	; (b578 <rt_timer_stop+0x6c>)
    b522:	0052      	lsls	r2, r2, #1
    b524:	f7fe ff08 	bl	a338 <rt_assert_handler>

    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
    b528:	7a63      	ldrb	r3, [r4, #9]
    b52a:	07db      	lsls	r3, r3, #31
    b52c:	d51e      	bpl.n	b56c <rt_timer_stop+0x60>
        return -RT_ERROR;

    RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
    b52e:	4b13      	ldr	r3, [pc, #76]	; (b57c <rt_timer_stop+0x70>)
    b530:	681b      	ldr	r3, [r3, #0]
    b532:	2b00      	cmp	r3, #0
    b534:	d001      	beq.n	b53a <rt_timer_stop+0x2e>
    b536:	0020      	movs	r0, r4
    b538:	4798      	blx	r3

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    b53a:	f7f8 fdb9 	bl	40b0 <rt_hw_interrupt_disable>
        rt_list_remove(&timer->row[i]);
    b53e:	0023      	movs	r3, r4
    n->next->prev = n->prev;
    b540:	69a2      	ldr	r2, [r4, #24]
    b542:	6961      	ldr	r1, [r4, #20]
    b544:	3314      	adds	r3, #20
    b546:	604a      	str	r2, [r1, #4]
    n->prev->next = n->next;
    b548:	6011      	str	r1, [r2, #0]
    n->next = n->prev = n;
    b54a:	61a3      	str	r3, [r4, #24]
    b54c:	6163      	str	r3, [r4, #20]

    _rt_timer_remove(timer);

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    b54e:	f7f8 fdb3 	bl	40b8 <rt_hw_interrupt_enable>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b552:	2201      	movs	r2, #1

    return RT_EOK;
    b554:	2000      	movs	r0, #0
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b556:	7a63      	ldrb	r3, [r4, #9]
    b558:	4393      	bics	r3, r2
    b55a:	7263      	strb	r3, [r4, #9]
}
    b55c:	bd10      	pop	{r4, pc}
    RT_ASSERT(timer != RT_NULL);
    b55e:	22ac      	movs	r2, #172	; 0xac
    b560:	4904      	ldr	r1, [pc, #16]	; (b574 <rt_timer_stop+0x68>)
    b562:	4807      	ldr	r0, [pc, #28]	; (b580 <rt_timer_stop+0x74>)
    b564:	32ff      	adds	r2, #255	; 0xff
    b566:	f7fe fee7 	bl	a338 <rt_assert_handler>
    b56a:	e7d2      	b.n	b512 <rt_timer_stop+0x6>
        return -RT_ERROR;
    b56c:	2001      	movs	r0, #1
    b56e:	4240      	negs	r0, r0
    b570:	e7f4      	b.n	b55c <rt_timer_stop+0x50>
    b572:	46c0      	nop			; (mov r8, r8)
    b574:	00015958 	.word	0x00015958
    b578:	000158b8 	.word	0x000158b8
    b57c:	00018560 	.word	0x00018560
    b580:	000158a4 	.word	0x000158a4

0000b584 <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
    b584:	b570      	push	{r4, r5, r6, lr}
    b586:	0005      	movs	r5, r0
    b588:	000c      	movs	r4, r1
    b58a:	0016      	movs	r6, r2
    /* timer check */
    RT_ASSERT(timer != RT_NULL);
    b58c:	2800      	cmp	r0, #0
    b58e:	d023      	beq.n	b5d8 <rt_timer_control+0x54>
    RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
    b590:	0028      	movs	r0, r5
    b592:	f7ff fb47 	bl	ac24 <rt_object_get_type>
    b596:	2809      	cmp	r0, #9
    b598:	d005      	beq.n	b5a6 <rt_timer_control+0x22>
    b59a:	22d0      	movs	r2, #208	; 0xd0
    b59c:	4912      	ldr	r1, [pc, #72]	; (b5e8 <rt_timer_control+0x64>)
    b59e:	4813      	ldr	r0, [pc, #76]	; (b5ec <rt_timer_control+0x68>)
    b5a0:	32ff      	adds	r2, #255	; 0xff
    b5a2:	f7fe fec9 	bl	a338 <rt_assert_handler>

    switch (cmd)
    b5a6:	2c02      	cmp	r4, #2
    b5a8:	d00f      	beq.n	b5ca <rt_timer_control+0x46>
    b5aa:	dc07      	bgt.n	b5bc <rt_timer_control+0x38>
    b5ac:	2c00      	cmp	r4, #0
    b5ae:	d010      	beq.n	b5d2 <rt_timer_control+0x4e>
    b5b0:	2c01      	cmp	r4, #1
    b5b2:	d101      	bne.n	b5b8 <rt_timer_control+0x34>
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
    b5b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b5b6:	6033      	str	r3, [r6, #0]
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
        break;
    }

    return RT_EOK;
}
    b5b8:	2000      	movs	r0, #0
    b5ba:	bd70      	pop	{r4, r5, r6, pc}
    switch (cmd)
    b5bc:	2c03      	cmp	r4, #3
    b5be:	d1fb      	bne.n	b5b8 <rt_timer_control+0x34>
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
    b5c0:	2202      	movs	r2, #2
    b5c2:	7a6b      	ldrb	r3, [r5, #9]
    b5c4:	4313      	orrs	r3, r2
    b5c6:	726b      	strb	r3, [r5, #9]
        break;
    b5c8:	e7f6      	b.n	b5b8 <rt_timer_control+0x34>
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
    b5ca:	7a6b      	ldrb	r3, [r5, #9]
    b5cc:	43a3      	bics	r3, r4
    b5ce:	726b      	strb	r3, [r5, #9]
        break;
    b5d0:	e7f2      	b.n	b5b8 <rt_timer_control+0x34>
        timer->init_tick = *(rt_tick_t *)arg;
    b5d2:	6833      	ldr	r3, [r6, #0]
    b5d4:	626b      	str	r3, [r5, #36]	; 0x24
        break;
    b5d6:	e7ef      	b.n	b5b8 <rt_timer_control+0x34>
    RT_ASSERT(timer != RT_NULL);
    b5d8:	22e7      	movs	r2, #231	; 0xe7
    b5da:	4903      	ldr	r1, [pc, #12]	; (b5e8 <rt_timer_control+0x64>)
    b5dc:	4804      	ldr	r0, [pc, #16]	; (b5f0 <rt_timer_control+0x6c>)
    b5de:	0052      	lsls	r2, r2, #1
    b5e0:	f7fe feaa 	bl	a338 <rt_assert_handler>
    b5e4:	e7d4      	b.n	b590 <rt_timer_control+0xc>
    b5e6:	46c0      	nop			; (mov r8, r8)
    b5e8:	00015944 	.word	0x00015944
    b5ec:	000158b8 	.word	0x000158b8
    b5f0:	000158a4 	.word	0x000158a4

0000b5f4 <rt_timer_check>:
 * corresponding timeout function will be invoked.
 *
 * @note this function shall be invoked in operating system timer interrupt.
 */
void rt_timer_check(void)
{
    b5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5f6:	46de      	mov	lr, fp
    b5f8:	4657      	mov	r7, sl
    b5fa:	464e      	mov	r6, r9
    b5fc:	4645      	mov	r5, r8
    b5fe:	b5e0      	push	{r5, r6, r7, lr}
    b600:	b083      	sub	sp, #12
    rt_tick_t current_tick;
    register rt_base_t level;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));

    current_tick = rt_tick_get();
    b602:	f7fd fe09 	bl	9218 <rt_tick_get>
    b606:	0006      	movs	r6, r0

    /* disable interrupt */
    level = rt_hw_interrupt_disable();
    b608:	f7f8 fd52 	bl	40b0 <rt_hw_interrupt_disable>
    return l->next == l;
    b60c:	4f29      	ldr	r7, [pc, #164]	; (b6b4 <rt_timer_check+0xc0>)
    b60e:	9001      	str	r0, [sp, #4]
    b610:	683d      	ldr	r5, [r7, #0]

    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
    b612:	42bd      	cmp	r5, r7
    b614:	d043      	beq.n	b69e <rt_timer_check+0xaa>
    {
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
    b616:	002c      	movs	r4, r5

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
    b618:	6963      	ldr	r3, [r4, #20]
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
    b61a:	3c14      	subs	r4, #20
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
    b61c:	1af6      	subs	r6, r6, r3
    b61e:	4b26      	ldr	r3, [pc, #152]	; (b6b8 <rt_timer_check+0xc4>)
    b620:	429e      	cmp	r6, r3
    b622:	d83c      	bhi.n	b69e <rt_timer_check+0xaa>
    b624:	4a25      	ldr	r2, [pc, #148]	; (b6bc <rt_timer_check+0xc8>)
    b626:	9300      	str	r3, [sp, #0]
    b628:	4692      	mov	sl, r2
    b62a:	4a25      	ldr	r2, [pc, #148]	; (b6c0 <rt_timer_check+0xcc>)
    b62c:	4691      	mov	r9, r2
            current_tick = rt_tick_get();

            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
    b62e:	2203      	movs	r2, #3
    b630:	4690      	mov	r8, r2
                rt_timer_start(t);
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b632:	3a02      	subs	r2, #2
    b634:	4693      	mov	fp, r2
    b636:	e00c      	b.n	b652 <rt_timer_check+0x5e>
    b638:	465a      	mov	r2, fp
    b63a:	4393      	bics	r3, r2
    b63c:	7263      	strb	r3, [r4, #9]
    b63e:	683d      	ldr	r5, [r7, #0]
    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
    b640:	42bd      	cmp	r5, r7
    b642:	d02c      	beq.n	b69e <rt_timer_check+0xaa>
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
    b644:	002c      	movs	r4, r5
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
    b646:	6963      	ldr	r3, [r4, #20]
        t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
    b648:	3c14      	subs	r4, #20
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
    b64a:	1af6      	subs	r6, r6, r3
    b64c:	9b00      	ldr	r3, [sp, #0]
    b64e:	429e      	cmp	r6, r3
    b650:	d825      	bhi.n	b69e <rt_timer_check+0xaa>
            RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
    b652:	4653      	mov	r3, sl
    b654:	681b      	ldr	r3, [r3, #0]
    b656:	2b00      	cmp	r3, #0
    b658:	d001      	beq.n	b65e <rt_timer_check+0x6a>
    b65a:	0020      	movs	r0, r4
    b65c:	4798      	blx	r3
    n->next->prev = n->prev;
    b65e:	6962      	ldr	r2, [r4, #20]
    b660:	69a3      	ldr	r3, [r4, #24]
            t->timeout_func(t->parameter);
    b662:	6a20      	ldr	r0, [r4, #32]
    b664:	6053      	str	r3, [r2, #4]
    n->prev->next = n->next;
    b666:	601a      	str	r2, [r3, #0]
    b668:	69e3      	ldr	r3, [r4, #28]
    n->next = n->prev = n;
    b66a:	61a5      	str	r5, [r4, #24]
    b66c:	6165      	str	r5, [r4, #20]
    b66e:	4798      	blx	r3
            current_tick = rt_tick_get();
    b670:	f7fd fdd2 	bl	9218 <rt_tick_get>
            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
    b674:	464b      	mov	r3, r9
    b676:	681b      	ldr	r3, [r3, #0]
            current_tick = rt_tick_get();
    b678:	0006      	movs	r6, r0
            RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
    b67a:	2b00      	cmp	r3, #0
    b67c:	d001      	beq.n	b682 <rt_timer_check+0x8e>
    b67e:	0020      	movs	r0, r4
    b680:	4798      	blx	r3
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
    b682:	4642      	mov	r2, r8
    b684:	7a63      	ldrb	r3, [r4, #9]
    b686:	401a      	ands	r2, r3
    b688:	2a03      	cmp	r2, #3
    b68a:	d1d5      	bne.n	b638 <rt_timer_check+0x44>
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b68c:	465a      	mov	r2, fp
    b68e:	4393      	bics	r3, r2
                rt_timer_start(t);
    b690:	0020      	movs	r0, r4
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
    b692:	7263      	strb	r3, [r4, #9]
                rt_timer_start(t);
    b694:	f7ff fec4 	bl	b420 <rt_timer_start>
    return l->next == l;
    b698:	683d      	ldr	r5, [r7, #0]
    while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
    b69a:	42bd      	cmp	r5, r7
    b69c:	d1d2      	bne.n	b644 <rt_timer_check+0x50>
        else
            break;
    }

    /* enable interrupt */
    rt_hw_interrupt_enable(level);
    b69e:	9801      	ldr	r0, [sp, #4]
    b6a0:	f7f8 fd0a 	bl	40b8 <rt_hw_interrupt_enable>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
}
    b6a4:	b003      	add	sp, #12
    b6a6:	bcf0      	pop	{r4, r5, r6, r7}
    b6a8:	46bb      	mov	fp, r7
    b6aa:	46b2      	mov	sl, r6
    b6ac:	46a9      	mov	r9, r5
    b6ae:	46a0      	mov	r8, r4
    b6b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6b2:	46c0      	nop			; (mov r8, r8)
    b6b4:	000186a0 	.word	0x000186a0
    b6b8:	7ffffffe 	.word	0x7ffffffe
    b6bc:	00018698 	.word	0x00018698
    b6c0:	0001869c 	.word	0x0001869c

0000b6c4 <rt_system_timer_init>:
    l->next = l->prev = l;
    b6c4:	4b01      	ldr	r3, [pc, #4]	; (b6cc <rt_system_timer_init+0x8>)
    b6c6:	605b      	str	r3, [r3, #4]
    b6c8:	601b      	str	r3, [r3, #0]

    for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
    {
        rt_list_init(rt_timer_list + i);
    }
}
    b6ca:	4770      	bx	lr
    b6cc:	000186a0 	.word	0x000186a0

0000b6d0 <rt_system_timer_thread_init>:
                   10);

    /* startup */
    rt_thread_startup(&timer_thread);
#endif
}
    b6d0:	4770      	bx	lr
    b6d2:	46c0      	nop			; (mov r8, r8)

0000b6d4 <rt_hw_stack_init>:
 */
rt_uint8_t *rt_hw_stack_init(void       *tentry,
                             void       *parameter,
                             rt_uint8_t *stack_addr,
                             void       *texit)
{
    b6d4:	b570      	push	{r4, r5, r6, lr}
    struct stack_frame *stack_frame;
    rt_uint8_t         *stk;
    unsigned long       i;

    stk  = stack_addr + sizeof(rt_uint32_t);
    b6d6:	1d14      	adds	r4, r2, #4
    stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
    b6d8:	2207      	movs	r2, #7
    b6da:	4394      	bics	r4, r2
{
    b6dc:	0006      	movs	r6, r0
    stk -= sizeof(struct stack_frame);
    b6de:	0020      	movs	r0, r4
    b6e0:	3840      	subs	r0, #64	; 0x40

    stack_frame = (struct stack_frame *)stk;

    /* init all register */
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
    b6e2:	0002      	movs	r2, r0
    {
        ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
    b6e4:	4d07      	ldr	r5, [pc, #28]	; (b704 <rt_hw_stack_init+0x30>)
    b6e6:	c220      	stmia	r2!, {r5}
    for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
    b6e8:	4294      	cmp	r4, r2
    b6ea:	d1fc      	bne.n	b6e6 <rt_hw_stack_init+0x12>
    stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
    stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
    stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
    stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
    stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
    b6ec:	6343      	str	r3, [r0, #52]	; 0x34
    stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
    b6ee:	2380      	movs	r3, #128	; 0x80
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
    b6f0:	2200      	movs	r2, #0
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
    b6f2:	045b      	lsls	r3, r3, #17
    stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
    b6f4:	6386      	str	r6, [r0, #56]	; 0x38
    stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
    b6f6:	6201      	str	r1, [r0, #32]
    stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
    b6f8:	6242      	str	r2, [r0, #36]	; 0x24
    stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
    b6fa:	6282      	str	r2, [r0, #40]	; 0x28
    stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
    b6fc:	62c2      	str	r2, [r0, #44]	; 0x2c
    stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
    b6fe:	6302      	str	r2, [r0, #48]	; 0x30
    stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
    b700:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* return task's current stack address */
    return stk;
}
    b702:	bd70      	pop	{r4, r5, r6, pc}
    b704:	deadbeef 	.word	0xdeadbeef

0000b708 <rt_hw_hard_fault_exception>:
void rt_hw_hard_fault_exception(struct exception_info *exception_info)
{
    extern long list_thread(void);
    struct exception_stack_frame *contex = &exception_info->stack_frame.exception_stack_frame;

    if (rt_exception_hook != RT_NULL)
    b708:	4b18      	ldr	r3, [pc, #96]	; (b76c <rt_hw_hard_fault_exception+0x64>)
{
    b70a:	b510      	push	{r4, lr}
    if (rt_exception_hook != RT_NULL)
    b70c:	681b      	ldr	r3, [r3, #0]
{
    b70e:	0004      	movs	r4, r0
    if (rt_exception_hook != RT_NULL)
    b710:	2b00      	cmp	r3, #0
    b712:	d002      	beq.n	b71a <rt_hw_hard_fault_exception+0x12>
    {
        rt_err_t result;

        result = rt_exception_hook(exception_info);
    b714:	4798      	blx	r3
        if (result == RT_EOK) return;
    b716:	2800      	cmp	r0, #0
    b718:	d027      	beq.n	b76a <rt_hw_hard_fault_exception+0x62>
    }

    rt_kprintf("psr: 0x%08x\n", contex->psr);
    b71a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    b71c:	4814      	ldr	r0, [pc, #80]	; (b770 <rt_hw_hard_fault_exception+0x68>)
    b71e:	f7fe fd8d 	bl	a23c <rt_kprintf>
    rt_kprintf(" pc: 0x%08x\n", contex->pc);
    b722:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    b724:	4813      	ldr	r0, [pc, #76]	; (b774 <rt_hw_hard_fault_exception+0x6c>)
    b726:	f7fe fd89 	bl	a23c <rt_kprintf>
    rt_kprintf(" lr: 0x%08x\n", contex->lr);
    b72a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    b72c:	4812      	ldr	r0, [pc, #72]	; (b778 <rt_hw_hard_fault_exception+0x70>)
    b72e:	f7fe fd85 	bl	a23c <rt_kprintf>
    rt_kprintf("r12: 0x%08x\n", contex->r12);
    b732:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b734:	4811      	ldr	r0, [pc, #68]	; (b77c <rt_hw_hard_fault_exception+0x74>)
    b736:	f7fe fd81 	bl	a23c <rt_kprintf>
    rt_kprintf("r03: 0x%08x\n", contex->r3);
    b73a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    b73c:	4810      	ldr	r0, [pc, #64]	; (b780 <rt_hw_hard_fault_exception+0x78>)
    b73e:	f7fe fd7d 	bl	a23c <rt_kprintf>
    rt_kprintf("r02: 0x%08x\n", contex->r2);
    b742:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    b744:	480f      	ldr	r0, [pc, #60]	; (b784 <rt_hw_hard_fault_exception+0x7c>)
    b746:	f7fe fd79 	bl	a23c <rt_kprintf>
    rt_kprintf("r01: 0x%08x\n", contex->r1);
    b74a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    b74c:	480e      	ldr	r0, [pc, #56]	; (b788 <rt_hw_hard_fault_exception+0x80>)
    b74e:	f7fe fd75 	bl	a23c <rt_kprintf>
    rt_kprintf("r00: 0x%08x\n", contex->r0);
    b752:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b754:	480d      	ldr	r0, [pc, #52]	; (b78c <rt_hw_hard_fault_exception+0x84>)
    b756:	f7fe fd71 	bl	a23c <rt_kprintf>

    rt_kprintf("hard fault on thread: %s\n", rt_current_thread->name);
    b75a:	4b0d      	ldr	r3, [pc, #52]	; (b790 <rt_hw_hard_fault_exception+0x88>)
    b75c:	480d      	ldr	r0, [pc, #52]	; (b794 <rt_hw_hard_fault_exception+0x8c>)
    b75e:	6819      	ldr	r1, [r3, #0]
    b760:	f7fe fd6c 	bl	a23c <rt_kprintf>

#ifdef RT_USING_FINSH
    list_thread();
    b764:	f000 fb70 	bl	be48 <list_thread>
#endif

    while (1);
    b768:	e7fe      	b.n	b768 <rt_hw_hard_fault_exception+0x60>
}
    b76a:	bd10      	pop	{r4, pc}
    b76c:	000186a8 	.word	0x000186a8
    b770:	00015998 	.word	0x00015998
    b774:	000159a8 	.word	0x000159a8
    b778:	000159b8 	.word	0x000159b8
    b77c:	000159c8 	.word	0x000159c8
    b780:	000159d8 	.word	0x000159d8
    b784:	000159e8 	.word	0x000159e8
    b788:	000159f8 	.word	0x000159f8
    b78c:	00015a08 	.word	0x00015a08
    b790:	00018570 	.word	0x00018570
    b794:	00015a18 	.word	0x00015a18

0000b798 <finsh_rx_ind>:
#endif
}

#ifndef RT_USING_POSIX
static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
{
    b798:	b510      	push	{r4, lr}
    RT_ASSERT(shell != RT_NULL);
    b79a:	4c07      	ldr	r4, [pc, #28]	; (b7b8 <finsh_rx_ind+0x20>)
    b79c:	6820      	ldr	r0, [r4, #0]
    b79e:	2800      	cmp	r0, #0
    b7a0:	d003      	beq.n	b7aa <finsh_rx_ind+0x12>

    /* release semaphore to let finsh thread rx data */
    rt_sem_release(&shell->rx_sem);
    b7a2:	f7fe f8e3 	bl	996c <rt_sem_release>

    return RT_EOK;
}
    b7a6:	2000      	movs	r0, #0
    b7a8:	bd10      	pop	{r4, pc}
    RT_ASSERT(shell != RT_NULL);
    b7aa:	4804      	ldr	r0, [pc, #16]	; (b7bc <finsh_rx_ind+0x24>)
    b7ac:	229b      	movs	r2, #155	; 0x9b
    b7ae:	4904      	ldr	r1, [pc, #16]	; (b7c0 <finsh_rx_ind+0x28>)
    b7b0:	f7fe fdc2 	bl	a338 <rt_assert_handler>
    rt_sem_release(&shell->rx_sem);
    b7b4:	6820      	ldr	r0, [r4, #0]
    b7b6:	e7f4      	b.n	b7a2 <finsh_rx_ind+0xa>
    b7b8:	00018740 	.word	0x00018740
    b7bc:	00015a34 	.word	0x00015a34
    b7c0:	00015ad8 	.word	0x00015ad8

0000b7c4 <finsh_system_init>:
#endif
#endif

#ifdef RT_USING_HEAP
    /* create or set shell structure */
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
    b7c4:	2183      	movs	r1, #131	; 0x83
    _syscall_table_begin = (struct finsh_syscall *) begin;
    b7c6:	4b23      	ldr	r3, [pc, #140]	; (b854 <finsh_system_init+0x90>)
    b7c8:	4a23      	ldr	r2, [pc, #140]	; (b858 <finsh_system_init+0x94>)
{
    b7ca:	b530      	push	{r4, r5, lr}
    _syscall_table_begin = (struct finsh_syscall *) begin;
    b7cc:	601a      	str	r2, [r3, #0]
    _syscall_table_end = (struct finsh_syscall *) end;
    b7ce:	4b23      	ldr	r3, [pc, #140]	; (b85c <finsh_system_init+0x98>)
    b7d0:	4a23      	ldr	r2, [pc, #140]	; (b860 <finsh_system_init+0x9c>)
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
    b7d2:	2001      	movs	r0, #1
    _syscall_table_end = (struct finsh_syscall *) end;
    b7d4:	601a      	str	r2, [r3, #0]
    _sysvar_table_begin = (struct finsh_sysvar *) begin;
    b7d6:	4b23      	ldr	r3, [pc, #140]	; (b864 <finsh_system_init+0xa0>)
    b7d8:	4a23      	ldr	r2, [pc, #140]	; (b868 <finsh_system_init+0xa4>)
{
    b7da:	b083      	sub	sp, #12
    _sysvar_table_begin = (struct finsh_sysvar *) begin;
    b7dc:	601a      	str	r2, [r3, #0]
    _sysvar_table_end = (struct finsh_sysvar *) end;
    b7de:	4b23      	ldr	r3, [pc, #140]	; (b86c <finsh_system_init+0xa8>)
    b7e0:	4a23      	ldr	r2, [pc, #140]	; (b870 <finsh_system_init+0xac>)
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
    b7e2:	0089      	lsls	r1, r1, #2
    _sysvar_table_end = (struct finsh_sysvar *) end;
    b7e4:	601a      	str	r2, [r3, #0]
    shell = (struct finsh_shell *)rt_calloc(1, sizeof(struct finsh_shell));
    b7e6:	f7ff f8e1 	bl	a9ac <rt_calloc>
    b7ea:	4d22      	ldr	r5, [pc, #136]	; (b874 <finsh_system_init+0xb0>)
    b7ec:	6028      	str	r0, [r5, #0]
    if (shell == RT_NULL)
    b7ee:	2800      	cmp	r0, #0
    b7f0:	d029      	beq.n	b846 <finsh_system_init+0x82>
    {
        rt_kprintf("no memory for shell\n");
        return -1;
    }
    tid = rt_thread_create(FINSH_THREAD_NAME,
    b7f2:	230a      	movs	r3, #10
    b7f4:	9301      	str	r3, [sp, #4]
    b7f6:	330a      	adds	r3, #10
    b7f8:	9300      	str	r3, [sp, #0]
    b7fa:	2380      	movs	r3, #128	; 0x80
    b7fc:	2200      	movs	r2, #0
    b7fe:	491e      	ldr	r1, [pc, #120]	; (b878 <finsh_system_init+0xb4>)
    b800:	015b      	lsls	r3, r3, #5
    b802:	481e      	ldr	r0, [pc, #120]	; (b87c <finsh_system_init+0xb8>)
    b804:	f7ff fc3c 	bl	b080 <rt_thread_create>
                            finsh_thread_entry, RT_NULL,
                            &finsh_thread_stack[0], sizeof(finsh_thread_stack),
                            FINSH_THREAD_PRIORITY, 10);
#endif /* RT_USING_HEAP */

    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
    b808:	2300      	movs	r3, #0
    tid = rt_thread_create(FINSH_THREAD_NAME,
    b80a:	0004      	movs	r4, r0
    rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
    b80c:	2200      	movs	r2, #0
    b80e:	491c      	ldr	r1, [pc, #112]	; (b880 <finsh_system_init+0xbc>)
    b810:	6828      	ldr	r0, [r5, #0]
    b812:	f7fd ffbb 	bl	978c <rt_sem_init>
    RT_ASSERT(shell != RT_NULL);
    b816:	682b      	ldr	r3, [r5, #0]
    b818:	2b00      	cmp	r3, #0
    b81a:	d00d      	beq.n	b838 <finsh_system_init+0x74>
    shell->prompt_mode = prompt_mode;
    b81c:	2121      	movs	r1, #33	; 0x21
    b81e:	2002      	movs	r0, #2
    b820:	5c5a      	ldrb	r2, [r3, r1]
    finsh_set_prompt_mode(1);

    if (tid != NULL && result == RT_EOK)
        rt_thread_startup(tid);
    return 0;
    b822:	2500      	movs	r5, #0
    shell->prompt_mode = prompt_mode;
    b824:	4302      	orrs	r2, r0
    b826:	545a      	strb	r2, [r3, r1]
    if (tid != NULL && result == RT_EOK)
    b828:	2c00      	cmp	r4, #0
    b82a:	d002      	beq.n	b832 <finsh_system_init+0x6e>
        rt_thread_startup(tid);
    b82c:	0020      	movs	r0, r4
    b82e:	f7ff fd4d 	bl	b2cc <rt_thread_startup>
}
    b832:	0028      	movs	r0, r5
    b834:	b003      	add	sp, #12
    b836:	bd30      	pop	{r4, r5, pc}
    RT_ASSERT(shell != RT_NULL);
    b838:	2285      	movs	r2, #133	; 0x85
    b83a:	4912      	ldr	r1, [pc, #72]	; (b884 <finsh_system_init+0xc0>)
    b83c:	4812      	ldr	r0, [pc, #72]	; (b888 <finsh_system_init+0xc4>)
    b83e:	f7fe fd7b 	bl	a338 <rt_assert_handler>
    shell->prompt_mode = prompt_mode;
    b842:	682b      	ldr	r3, [r5, #0]
    b844:	e7ea      	b.n	b81c <finsh_system_init+0x58>
        return -1;
    b846:	2501      	movs	r5, #1
        rt_kprintf("no memory for shell\n");
    b848:	4810      	ldr	r0, [pc, #64]	; (b88c <finsh_system_init+0xc8>)
    b84a:	f7fe fcf7 	bl	a23c <rt_kprintf>
        return -1;
    b84e:	426d      	negs	r5, r5
    b850:	e7ef      	b.n	b832 <finsh_system_init+0x6e>
    b852:	46c0      	nop			; (mov r8, r8)
    b854:	00018744 	.word	0x00018744
    b858:	00017070 	.word	0x00017070
    b85c:	00018748 	.word	0x00018748
    b860:	000171f0 	.word	0x000171f0
    b864:	0001874c 	.word	0x0001874c
    b868:	000171f0 	.word	0x000171f0
    b86c:	00018750 	.word	0x00018750
    b870:	000171f0 	.word	0x000171f0
    b874:	00018740 	.word	0x00018740
    b878:	0000b9a9 	.word	0x0000b9a9
    b87c:	00015a60 	.word	0x00015a60
    b880:	00015a68 	.word	0x00015a68
    b884:	00015afc 	.word	0x00015afc
    b888:	00015a34 	.word	0x00015a34
    b88c:	00015a48 	.word	0x00015a48

0000b890 <finsh_get_prompt>:
    if (!shell->prompt_mode)
    b890:	4b19      	ldr	r3, [pc, #100]	; (b8f8 <finsh_get_prompt+0x68>)
{
    b892:	b510      	push	{r4, lr}
    if (!shell->prompt_mode)
    b894:	681a      	ldr	r2, [r3, #0]
    b896:	2321      	movs	r3, #33	; 0x21
    b898:	5cd3      	ldrb	r3, [r2, r3]
    b89a:	2202      	movs	r2, #2
    b89c:	0011      	movs	r1, r2
    b89e:	4019      	ands	r1, r3
    b8a0:	421a      	tst	r2, r3
    b8a2:	d01f      	beq.n	b8e4 <finsh_get_prompt+0x54>
    if(finsh_prompt_custom)
    b8a4:	4b15      	ldr	r3, [pc, #84]	; (b8fc <finsh_get_prompt+0x6c>)
    b8a6:	6819      	ldr	r1, [r3, #0]
    b8a8:	2900      	cmp	r1, #0
    b8aa:	d006      	beq.n	b8ba <finsh_get_prompt+0x2a>
        strncpy(finsh_prompt, finsh_prompt_custom, sizeof(finsh_prompt)-1);
    b8ac:	4c14      	ldr	r4, [pc, #80]	; (b900 <finsh_get_prompt+0x70>)
    b8ae:	2280      	movs	r2, #128	; 0x80
    b8b0:	0020      	movs	r0, r4
    b8b2:	f003 ff2b 	bl	f70c <strncpy>
}
    b8b6:	0020      	movs	r0, r4
    b8b8:	bd10      	pop	{r4, pc}
    if (msh_is_used()) strcpy(finsh_prompt, _MSH_PROMPT);
    b8ba:	f001 f835 	bl	c928 <msh_is_used>
    b8be:	4c10      	ldr	r4, [pc, #64]	; (b900 <finsh_get_prompt+0x70>)
    b8c0:	2800      	cmp	r0, #0
    b8c2:	d112      	bne.n	b8ea <finsh_get_prompt+0x5a>
        strcpy(finsh_prompt, _PROMPT);
    b8c4:	4b0f      	ldr	r3, [pc, #60]	; (b904 <finsh_get_prompt+0x74>)
    b8c6:	681a      	ldr	r2, [r3, #0]
    b8c8:	6022      	str	r2, [r4, #0]
    b8ca:	889a      	ldrh	r2, [r3, #4]
    b8cc:	80a2      	strh	r2, [r4, #4]
    b8ce:	799b      	ldrb	r3, [r3, #6]
    b8d0:	71a3      	strb	r3, [r4, #6]
    strcat(finsh_prompt, ">");
    b8d2:	0020      	movs	r0, r4
    b8d4:	f003 feb2 	bl	f63c <strlen>
    b8d8:	2202      	movs	r2, #2
    b8da:	490b      	ldr	r1, [pc, #44]	; (b908 <finsh_get_prompt+0x78>)
    b8dc:	1820      	adds	r0, r4, r0
    b8de:	f003 f8d9 	bl	ea94 <memcpy>
    return finsh_prompt;
    b8e2:	e7e8      	b.n	b8b6 <finsh_get_prompt+0x26>
        finsh_prompt[0] = '\0';
    b8e4:	4c06      	ldr	r4, [pc, #24]	; (b900 <finsh_get_prompt+0x70>)
    b8e6:	7021      	strb	r1, [r4, #0]
        return finsh_prompt;
    b8e8:	e7e5      	b.n	b8b6 <finsh_get_prompt+0x26>
    if (msh_is_used()) strcpy(finsh_prompt, _MSH_PROMPT);
    b8ea:	4b08      	ldr	r3, [pc, #32]	; (b90c <finsh_get_prompt+0x7c>)
    b8ec:	681a      	ldr	r2, [r3, #0]
    b8ee:	6022      	str	r2, [r4, #0]
    b8f0:	791b      	ldrb	r3, [r3, #4]
    b8f2:	7123      	strb	r3, [r4, #4]
    b8f4:	e7ed      	b.n	b8d2 <finsh_get_prompt+0x42>
    b8f6:	46c0      	nop			; (mov r8, r8)
    b8f8:	00018740 	.word	0x00018740
    b8fc:	0001873c 	.word	0x0001873c
    b900:	000186b8 	.word	0x000186b8
    b904:	00015a78 	.word	0x00015a78
    b908:	00015a80 	.word	0x00015a80
    b90c:	00015a70 	.word	0x00015a70

0000b910 <finsh_set_device>:
{
    b910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    RT_ASSERT(shell != RT_NULL);
    b912:	4e1f      	ldr	r6, [pc, #124]	; (b990 <finsh_set_device+0x80>)
{
    b914:	0005      	movs	r5, r0
    RT_ASSERT(shell != RT_NULL);
    b916:	6833      	ldr	r3, [r6, #0]
    b918:	2b00      	cmp	r3, #0
    b91a:	d02d      	beq.n	b978 <finsh_set_device+0x68>
    dev = rt_device_find(device_name);
    b91c:	0028      	movs	r0, r5
    b91e:	f7fd fd0b 	bl	9338 <rt_device_find>
    b922:	1e04      	subs	r4, r0, #0
    if (dev == RT_NULL)
    b924:	d02e      	beq.n	b984 <finsh_set_device+0x74>
    if (dev == shell->device) return;
    b926:	2582      	movs	r5, #130	; 0x82
    b928:	6833      	ldr	r3, [r6, #0]
    b92a:	00ad      	lsls	r5, r5, #2
    b92c:	595b      	ldr	r3, [r3, r5]
    b92e:	4283      	cmp	r3, r0
    b930:	d021      	beq.n	b976 <finsh_set_device+0x66>
    if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | \
    b932:	2144      	movs	r1, #68	; 0x44
    b934:	31ff      	adds	r1, #255	; 0xff
    b936:	f7fd fd4f 	bl	93d8 <rt_device_open>
    b93a:	2800      	cmp	r0, #0
    b93c:	d11b      	bne.n	b976 <finsh_set_device+0x66>
        if (shell->device != RT_NULL)
    b93e:	6837      	ldr	r7, [r6, #0]
    b940:	5978      	ldr	r0, [r7, r5]
    b942:	2800      	cmp	r0, #0
    b944:	d007      	beq.n	b956 <finsh_set_device+0x46>
            rt_device_close(shell->device);
    b946:	f7fd fda7 	bl	9498 <rt_device_close>
            rt_device_set_rx_indicate(shell->device, RT_NULL);
    b94a:	6833      	ldr	r3, [r6, #0]
    b94c:	2100      	movs	r1, #0
    b94e:	5958      	ldr	r0, [r3, r5]
    b950:	f7fd fe50 	bl	95f4 <rt_device_set_rx_indicate>
        memset(shell->line, 0, sizeof(shell->line));
    b954:	6837      	ldr	r7, [r6, #0]
    b956:	0038      	movs	r0, r7
    b958:	30b7      	adds	r0, #183	; 0xb7
    b95a:	2250      	movs	r2, #80	; 0x50
    b95c:	2100      	movs	r1, #0
    b95e:	30ff      	adds	r0, #255	; 0xff
    b960:	f003 f940 	bl	ebe4 <memset>
        shell->line_curpos = shell->line_position = 0;
    b964:	2200      	movs	r2, #0
    b966:	4b0b      	ldr	r3, [pc, #44]	; (b994 <finsh_set_device+0x84>)
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
    b968:	0020      	movs	r0, r4
        shell->line_curpos = shell->line_position = 0;
    b96a:	52fa      	strh	r2, [r7, r3]
        shell->device = dev;
    b96c:	3302      	adds	r3, #2
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
    b96e:	490a      	ldr	r1, [pc, #40]	; (b998 <finsh_set_device+0x88>)
        shell->device = dev;
    b970:	50fc      	str	r4, [r7, r3]
        rt_device_set_rx_indicate(dev, finsh_rx_ind);
    b972:	f7fd fe3f 	bl	95f4 <rt_device_set_rx_indicate>
}
    b976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(shell != RT_NULL);
    b978:	22ae      	movs	r2, #174	; 0xae
    b97a:	4908      	ldr	r1, [pc, #32]	; (b99c <finsh_set_device+0x8c>)
    b97c:	4808      	ldr	r0, [pc, #32]	; (b9a0 <finsh_set_device+0x90>)
    b97e:	f7fe fcdb 	bl	a338 <rt_assert_handler>
    b982:	e7cb      	b.n	b91c <finsh_set_device+0xc>
        rt_kprintf("finsh: can not find device: %s\n", device_name);
    b984:	0029      	movs	r1, r5
    b986:	4807      	ldr	r0, [pc, #28]	; (b9a4 <finsh_set_device+0x94>)
    b988:	f7fe fc58 	bl	a23c <rt_kprintf>
        return;
    b98c:	e7f3      	b.n	b976 <finsh_set_device+0x66>
    b98e:	46c0      	nop			; (mov r8, r8)
    b990:	00018740 	.word	0x00018740
    b994:	00000206 	.word	0x00000206
    b998:	0000b799 	.word	0x0000b799
    b99c:	00015ae8 	.word	0x00015ae8
    b9a0:	00015a34 	.word	0x00015a34
    b9a4:	00015a84 	.word	0x00015a84

0000b9a8 <finsh_thread_entry>:
{
    b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9aa:	4657      	mov	r7, sl
    b9ac:	46de      	mov	lr, fp
    b9ae:	464e      	mov	r6, r9
    b9b0:	4645      	mov	r5, r8
    shell->echo_mode = 1;
    b9b2:	2121      	movs	r1, #33	; 0x21
    b9b4:	2001      	movs	r0, #1
{
    b9b6:	b5e0      	push	{r5, r6, r7, lr}
    shell->echo_mode = 1;
    b9b8:	4fc4      	ldr	r7, [pc, #784]	; (bccc <finsh_thread_entry+0x324>)
{
    b9ba:	b083      	sub	sp, #12
    shell->echo_mode = 1;
    b9bc:	683b      	ldr	r3, [r7, #0]
    b9be:	5c5a      	ldrb	r2, [r3, r1]
    b9c0:	4302      	orrs	r2, r0
    b9c2:	545a      	strb	r2, [r3, r1]
    if (shell->device == RT_NULL)
    b9c4:	2282      	movs	r2, #130	; 0x82
    b9c6:	0092      	lsls	r2, r2, #2
    b9c8:	589b      	ldr	r3, [r3, r2]
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d100      	bne.n	b9d0 <finsh_thread_entry+0x28>
    b9ce:	e219      	b.n	be04 <finsh_thread_entry+0x45c>
    rt_kprintf(FINSH_PROMPT);
    b9d0:	f7ff ff5e 	bl	b890 <finsh_get_prompt>
    b9d4:	f7fe fc32 	bl	a23c <rt_kprintf>
    b9d8:	4bbd      	ldr	r3, [pc, #756]	; (bcd0 <finsh_thread_entry+0x328>)
    while (rt_device_read(shell->device, -1, &ch, 1) != 1)
    b9da:	2582      	movs	r5, #130	; 0x82
    b9dc:	469a      	mov	sl, r3
    b9de:	4bbd      	ldr	r3, [pc, #756]	; (bcd4 <finsh_thread_entry+0x32c>)
    RT_ASSERT(shell != RT_NULL);
    b9e0:	683c      	ldr	r4, [r7, #0]
    b9e2:	469b      	mov	fp, r3
    while (rt_device_read(shell->device, -1, &ch, 1) != 1)
    b9e4:	00ad      	lsls	r5, r5, #2
    RT_ASSERT(shell != RT_NULL);
    b9e6:	2c00      	cmp	r4, #0
    b9e8:	d106      	bne.n	b9f8 <finsh_thread_entry+0x50>
    b9ea:	e04c      	b.n	ba86 <finsh_thread_entry+0xde>
        rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER);
    b9ec:	2101      	movs	r1, #1
    b9ee:	6838      	ldr	r0, [r7, #0]
    b9f0:	4249      	negs	r1, r1
    b9f2:	f7fd fee9 	bl	97c8 <rt_sem_take>
    while (rt_device_read(shell->device, -1, &ch, 1) != 1)
    b9f6:	683c      	ldr	r4, [r7, #0]
    b9f8:	466a      	mov	r2, sp
    b9fa:	2101      	movs	r1, #1
    b9fc:	2301      	movs	r3, #1
    b9fe:	5960      	ldr	r0, [r4, r5]
    ba00:	3207      	adds	r2, #7
    ba02:	4249      	negs	r1, r1
    ba04:	f7fd fd7e 	bl	9504 <rt_device_read>
    ba08:	2801      	cmp	r0, #1
    ba0a:	d1ef      	bne.n	b9ec <finsh_thread_entry+0x44>
    return ch;
    ba0c:	466b      	mov	r3, sp
    ba0e:	79de      	ldrb	r6, [r3, #7]
            shell->stat = WAIT_SPEC_KEY;
    ba10:	683c      	ldr	r4, [r7, #0]
        if (ch == 0x1b)
    ba12:	2e1b      	cmp	r6, #27
    ba14:	d03e      	beq.n	ba94 <finsh_thread_entry+0xec>
        else if (shell->stat == WAIT_SPEC_KEY)
    ba16:	2220      	movs	r2, #32
    ba18:	5ca3      	ldrb	r3, [r4, r2]
    ba1a:	2b01      	cmp	r3, #1
    ba1c:	d03d      	beq.n	ba9a <finsh_thread_entry+0xf2>
        else if (shell->stat == WAIT_FUNC_KEY)
    ba1e:	2b02      	cmp	r3, #2
    ba20:	d05d      	beq.n	bade <finsh_thread_entry+0x136>
        if (ch == '\0' || ch == 0xFF) continue;
    ba22:	1e73      	subs	r3, r6, #1
    ba24:	b2db      	uxtb	r3, r3
    ba26:	2bfd      	cmp	r3, #253	; 0xfd
    ba28:	d8dd      	bhi.n	b9e6 <finsh_thread_entry+0x3e>
        else if (ch == '\t')
    ba2a:	2e09      	cmp	r6, #9
    ba2c:	d100      	bne.n	ba30 <finsh_thread_entry+0x88>
    ba2e:	e11b      	b.n	bc68 <finsh_thread_entry+0x2c0>
        else if (ch == 0x7f || ch == 0x08)
    ba30:	2e7f      	cmp	r6, #127	; 0x7f
    ba32:	d038      	beq.n	baa6 <finsh_thread_entry+0xfe>
    ba34:	2e08      	cmp	r6, #8
    ba36:	d036      	beq.n	baa6 <finsh_thread_entry+0xfe>
    if (shell->line_position != 0)
    ba38:	4ba7      	ldr	r3, [pc, #668]	; (bcd8 <finsh_thread_entry+0x330>)
        if (ch == '\r' || ch == '\n')
    ba3a:	2e0d      	cmp	r6, #13
    ba3c:	d100      	bne.n	ba40 <finsh_thread_entry+0x98>
    ba3e:	e0c5      	b.n	bbcc <finsh_thread_entry+0x224>
    ba40:	2e0a      	cmp	r6, #10
    ba42:	d100      	bne.n	ba46 <finsh_thread_entry+0x9e>
    ba44:	e0c2      	b.n	bbcc <finsh_thread_entry+0x224>
        if (shell->line_position >= FINSH_CMD_SIZE)
    ba46:	5ce2      	ldrb	r2, [r4, r3]
    ba48:	2a4f      	cmp	r2, #79	; 0x4f
    ba4a:	d800      	bhi.n	ba4e <finsh_thread_entry+0xa6>
    ba4c:	e08d      	b.n	bb6a <finsh_thread_entry+0x1c2>
            shell->line_position = 0;
    ba4e:	2200      	movs	r2, #0
    ba50:	54e2      	strb	r2, [r4, r3]
    ba52:	2300      	movs	r3, #0
            shell->line[shell->line_position] = ch;
    ba54:	18e3      	adds	r3, r4, r3
    ba56:	33b7      	adds	r3, #183	; 0xb7
    ba58:	33ff      	adds	r3, #255	; 0xff
    ba5a:	701e      	strb	r6, [r3, #0]
            if (shell->echo_mode)
    ba5c:	2321      	movs	r3, #33	; 0x21
    ba5e:	5ce3      	ldrb	r3, [r4, r3]
    ba60:	07db      	lsls	r3, r3, #31
    ba62:	d500      	bpl.n	ba66 <finsh_thread_entry+0xbe>
    ba64:	e12c      	b.n	bcc0 <finsh_thread_entry+0x318>
        shell->line_position ++;
    ba66:	4b9c      	ldr	r3, [pc, #624]	; (bcd8 <finsh_thread_entry+0x330>)
    ba68:	5ce3      	ldrb	r3, [r4, r3]
    ba6a:	489b      	ldr	r0, [pc, #620]	; (bcd8 <finsh_thread_entry+0x330>)
    ba6c:	3301      	adds	r3, #1
        shell->line_curpos++;
    ba6e:	499b      	ldr	r1, [pc, #620]	; (bcdc <finsh_thread_entry+0x334>)
        shell->line_position ++;
    ba70:	b2db      	uxtb	r3, r3
    ba72:	5423      	strb	r3, [r4, r0]
        shell->line_curpos++;
    ba74:	5c62      	ldrb	r2, [r4, r1]
    ba76:	3201      	adds	r2, #1
    ba78:	5462      	strb	r2, [r4, r1]
        if (shell->line_position >= FINSH_CMD_SIZE)
    ba7a:	2b4f      	cmp	r3, #79	; 0x4f
    ba7c:	d9b3      	bls.n	b9e6 <finsh_thread_entry+0x3e>
            shell->line_position = 0;
    ba7e:	2300      	movs	r3, #0
    ba80:	5223      	strh	r3, [r4, r0]
    RT_ASSERT(shell != RT_NULL);
    ba82:	2c00      	cmp	r4, #0
    ba84:	d1b8      	bne.n	b9f8 <finsh_thread_entry+0x50>
    ba86:	2290      	movs	r2, #144	; 0x90
    ba88:	4651      	mov	r1, sl
    ba8a:	4658      	mov	r0, fp
    ba8c:	f7fe fc54 	bl	a338 <rt_assert_handler>
    while (rt_device_read(shell->device, -1, &ch, 1) != 1)
    ba90:	683c      	ldr	r4, [r7, #0]
    ba92:	e7b1      	b.n	b9f8 <finsh_thread_entry+0x50>
            shell->stat = WAIT_SPEC_KEY;
    ba94:	2320      	movs	r3, #32
    ba96:	54e0      	strb	r0, [r4, r3]
            continue;
    ba98:	e7a5      	b.n	b9e6 <finsh_thread_entry+0x3e>
            if (ch == 0x5b)
    ba9a:	2e5b      	cmp	r6, #91	; 0x5b
    ba9c:	d100      	bne.n	baa0 <finsh_thread_entry+0xf8>
    ba9e:	e092      	b.n	bbc6 <finsh_thread_entry+0x21e>
            shell->stat = WAIT_NORMAL;
    baa0:	2300      	movs	r3, #0
    baa2:	54a3      	strb	r3, [r4, r2]
    baa4:	e7bd      	b.n	ba22 <finsh_thread_entry+0x7a>
            if (shell->line_curpos == 0)
    baa6:	4e8d      	ldr	r6, [pc, #564]	; (bcdc <finsh_thread_entry+0x334>)
    baa8:	5da1      	ldrb	r1, [r4, r6]
    baaa:	2900      	cmp	r1, #0
    baac:	d09b      	beq.n	b9e6 <finsh_thread_entry+0x3e>
            shell->line_position--;
    baae:	4b8a      	ldr	r3, [pc, #552]	; (bcd8 <finsh_thread_entry+0x330>)
    bab0:	5ce2      	ldrb	r2, [r4, r3]
    bab2:	4698      	mov	r8, r3
    bab4:	3a01      	subs	r2, #1
    bab6:	b2d2      	uxtb	r2, r2
    bab8:	54e2      	strb	r2, [r4, r3]
            shell->line_curpos--;
    baba:	1e4b      	subs	r3, r1, #1
    babc:	b2db      	uxtb	r3, r3
    babe:	55a3      	strb	r3, [r4, r6]
            if (shell->line_position > shell->line_curpos)
    bac0:	429a      	cmp	r2, r3
    bac2:	d900      	bls.n	bac6 <finsh_thread_entry+0x11e>
    bac4:	e118      	b.n	bcf8 <finsh_thread_entry+0x350>
                rt_kprintf("\b \b");
    bac6:	4886      	ldr	r0, [pc, #536]	; (bce0 <finsh_thread_entry+0x338>)
    bac8:	f7fe fbb8 	bl	a23c <rt_kprintf>
                shell->line[shell->line_position] = 0;
    bacc:	4643      	mov	r3, r8
    bace:	2200      	movs	r2, #0
    bad0:	683c      	ldr	r4, [r7, #0]
    bad2:	5ce3      	ldrb	r3, [r4, r3]
    bad4:	18e3      	adds	r3, r4, r3
    bad6:	33b7      	adds	r3, #183	; 0xb7
    bad8:	33ff      	adds	r3, #255	; 0xff
    bada:	701a      	strb	r2, [r3, #0]
    badc:	e783      	b.n	b9e6 <finsh_thread_entry+0x3e>
            shell->stat = WAIT_NORMAL;
    bade:	2300      	movs	r3, #0
    bae0:	54a3      	strb	r3, [r4, r2]
            if (ch == 0x41) /* up key */
    bae2:	2e41      	cmp	r6, #65	; 0x41
    bae4:	d01a      	beq.n	bb1c <finsh_thread_entry+0x174>
            else if (ch == 0x42) /* down key */
    bae6:	2e42      	cmp	r6, #66	; 0x42
    bae8:	d100      	bne.n	baec <finsh_thread_entry+0x144>
    baea:	e0b2      	b.n	bc52 <finsh_thread_entry+0x2aa>
            else if (ch == 0x44) /* left key */
    baec:	2e44      	cmp	r6, #68	; 0x44
    baee:	d100      	bne.n	baf2 <finsh_thread_entry+0x14a>
    baf0:	e138      	b.n	bd64 <finsh_thread_entry+0x3bc>
            else if (ch == 0x43) /* right key */
    baf2:	2e43      	cmp	r6, #67	; 0x43
    baf4:	d195      	bne.n	ba22 <finsh_thread_entry+0x7a>
                if (shell->line_curpos < shell->line_position)
    baf6:	4e79      	ldr	r6, [pc, #484]	; (bcdc <finsh_thread_entry+0x334>)
    baf8:	4a77      	ldr	r2, [pc, #476]	; (bcd8 <finsh_thread_entry+0x330>)
    bafa:	5da3      	ldrb	r3, [r4, r6]
    bafc:	5ca2      	ldrb	r2, [r4, r2]
    bafe:	429a      	cmp	r2, r3
    bb00:	d800      	bhi.n	bb04 <finsh_thread_entry+0x15c>
    bb02:	e770      	b.n	b9e6 <finsh_thread_entry+0x3e>
                    rt_kprintf("%c", shell->line[shell->line_curpos]);
    bb04:	18e3      	adds	r3, r4, r3
    bb06:	33b7      	adds	r3, #183	; 0xb7
    bb08:	33ff      	adds	r3, #255	; 0xff
    bb0a:	7819      	ldrb	r1, [r3, #0]
    bb0c:	4875      	ldr	r0, [pc, #468]	; (bce4 <finsh_thread_entry+0x33c>)
    bb0e:	f7fe fb95 	bl	a23c <rt_kprintf>
                    shell->line_curpos ++;
    bb12:	683c      	ldr	r4, [r7, #0]
    bb14:	5da3      	ldrb	r3, [r4, r6]
    bb16:	3301      	adds	r3, #1
    bb18:	55a3      	strb	r3, [r4, r6]
    bb1a:	e764      	b.n	b9e6 <finsh_thread_entry+0x3e>
                if (shell->current_history > 0)
    bb1c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    bb1e:	2b00      	cmp	r3, #0
    bb20:	d100      	bne.n	bb24 <finsh_thread_entry+0x17c>
    bb22:	e760      	b.n	b9e6 <finsh_thread_entry+0x3e>
                    shell->current_history --;
    bb24:	3b01      	subs	r3, #1
    bb26:	b29b      	uxth	r3, r3
                        shell->current_history = shell->history_count - 1;
    bb28:	8463      	strh	r3, [r4, #34]	; 0x22
                memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
    bb2a:	0026      	movs	r6, r4
    bb2c:	0099      	lsls	r1, r3, #2
    bb2e:	18c9      	adds	r1, r1, r3
    bb30:	36b7      	adds	r6, #183	; 0xb7
    bb32:	0109      	lsls	r1, r1, #4
    bb34:	36ff      	adds	r6, #255	; 0xff
    bb36:	3126      	adds	r1, #38	; 0x26
    bb38:	1861      	adds	r1, r4, r1
    bb3a:	2250      	movs	r2, #80	; 0x50
    bb3c:	0030      	movs	r0, r6
    bb3e:	f002 ffa9 	bl	ea94 <memcpy>
                shell->line_curpos = shell->line_position = strlen(shell->line);
    bb42:	0030      	movs	r0, r6
    bb44:	f003 fd7a 	bl	f63c <strlen>
    bb48:	4b63      	ldr	r3, [pc, #396]	; (bcd8 <finsh_thread_entry+0x330>)
    bb4a:	b2c0      	uxtb	r0, r0
    bb4c:	54e0      	strb	r0, [r4, r3]
    bb4e:	4b63      	ldr	r3, [pc, #396]	; (bcdc <finsh_thread_entry+0x334>)
    bb50:	54e0      	strb	r0, [r4, r3]
    rt_kprintf("\033[2K\r");
    bb52:	4865      	ldr	r0, [pc, #404]	; (bce8 <finsh_thread_entry+0x340>)
    bb54:	f7fe fb72 	bl	a23c <rt_kprintf>
    rt_kprintf("%s%s", FINSH_PROMPT, shell->line);
    bb58:	f7ff fe9a 	bl	b890 <finsh_get_prompt>
    bb5c:	0032      	movs	r2, r6
    bb5e:	0001      	movs	r1, r0
    bb60:	4862      	ldr	r0, [pc, #392]	; (bcec <finsh_thread_entry+0x344>)
    bb62:	f7fe fb6b 	bl	a23c <rt_kprintf>
    RT_ASSERT(shell != RT_NULL);
    bb66:	683c      	ldr	r4, [r7, #0]
                continue;
    bb68:	e73d      	b.n	b9e6 <finsh_thread_entry+0x3e>
        if (shell->line_curpos < shell->line_position)
    bb6a:	4b5c      	ldr	r3, [pc, #368]	; (bcdc <finsh_thread_entry+0x334>)
    bb6c:	5ce0      	ldrb	r0, [r4, r3]
    bb6e:	4699      	mov	r9, r3
            shell->line[shell->line_position] = ch;
    bb70:	0013      	movs	r3, r2
        if (shell->line_curpos < shell->line_position)
    bb72:	4282      	cmp	r2, r0
    bb74:	d800      	bhi.n	bb78 <finsh_thread_entry+0x1d0>
    bb76:	e76d      	b.n	ba54 <finsh_thread_entry+0xac>
                       &shell->line[shell->line_curpos],
    bb78:	0001      	movs	r1, r0
                       shell->line_position - shell->line_curpos);
    bb7a:	1a12      	subs	r2, r2, r0
                       &shell->line[shell->line_curpos],
    bb7c:	31b7      	adds	r1, #183	; 0xb7
            rt_memmove(&shell->line[shell->line_curpos + 1],
    bb7e:	30b8      	adds	r0, #184	; 0xb8
                       &shell->line[shell->line_curpos],
    bb80:	31ff      	adds	r1, #255	; 0xff
            rt_memmove(&shell->line[shell->line_curpos + 1],
    bb82:	30ff      	adds	r0, #255	; 0xff
                       &shell->line[shell->line_curpos],
    bb84:	1861      	adds	r1, r4, r1
            rt_memmove(&shell->line[shell->line_curpos + 1],
    bb86:	1820      	adds	r0, r4, r0
    bb88:	f7fe f90a 	bl	9da0 <rt_memmove>
            shell->line[shell->line_curpos] = ch;
    bb8c:	464b      	mov	r3, r9
    bb8e:	683c      	ldr	r4, [r7, #0]
    bb90:	5ce3      	ldrb	r3, [r4, r3]
    bb92:	4698      	mov	r8, r3
    bb94:	18e3      	adds	r3, r4, r3
    bb96:	33b7      	adds	r3, #183	; 0xb7
    bb98:	33ff      	adds	r3, #255	; 0xff
    bb9a:	701e      	strb	r6, [r3, #0]
            if (shell->echo_mode)
    bb9c:	2321      	movs	r3, #33	; 0x21
    bb9e:	5ce3      	ldrb	r3, [r4, r3]
    bba0:	07db      	lsls	r3, r3, #31
    bba2:	d500      	bpl.n	bba6 <finsh_thread_entry+0x1fe>
    bba4:	e122      	b.n	bdec <finsh_thread_entry+0x444>
            for (i = shell->line_curpos; i < shell->line_position; i++)
    bba6:	4e4c      	ldr	r6, [pc, #304]	; (bcd8 <finsh_thread_entry+0x330>)
    bba8:	5da3      	ldrb	r3, [r4, r6]
    bbaa:	4543      	cmp	r3, r8
    bbac:	dc00      	bgt.n	bbb0 <finsh_thread_entry+0x208>
    bbae:	e75c      	b.n	ba6a <finsh_thread_entry+0xc2>
    bbb0:	4644      	mov	r4, r8
                rt_kprintf("\b");
    bbb2:	484f      	ldr	r0, [pc, #316]	; (bcf0 <finsh_thread_entry+0x348>)
    bbb4:	f7fe fb42 	bl	a23c <rt_kprintf>
            for (i = shell->line_curpos; i < shell->line_position; i++)
    bbb8:	683a      	ldr	r2, [r7, #0]
    bbba:	3401      	adds	r4, #1
    bbbc:	5d93      	ldrb	r3, [r2, r6]
    bbbe:	42a3      	cmp	r3, r4
    bbc0:	dcf7      	bgt.n	bbb2 <finsh_thread_entry+0x20a>
    bbc2:	0014      	movs	r4, r2
    bbc4:	e751      	b.n	ba6a <finsh_thread_entry+0xc2>
                shell->stat = WAIT_FUNC_KEY;
    bbc6:	3301      	adds	r3, #1
    bbc8:	54a3      	strb	r3, [r4, r2]
                continue;
    bbca:	e70c      	b.n	b9e6 <finsh_thread_entry+0x3e>
    if (shell->line_position != 0)
    bbcc:	5ce3      	ldrb	r3, [r4, r3]
        if (shell->history_count >= FINSH_HISTORY_LINES)
    bbce:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
    if (shell->line_position != 0)
    bbd0:	2b00      	cmp	r3, #0
    bbd2:	d028      	beq.n	bc26 <finsh_thread_entry+0x27e>
        if (shell->history_count >= FINSH_HISTORY_LINES)
    bbd4:	2e04      	cmp	r6, #4
    bbd6:	d800      	bhi.n	bbda <finsh_thread_entry+0x232>
    bbd8:	e0d5      	b.n	bd86 <finsh_thread_entry+0x3de>
            if (memcmp(&shell->cmd_history[FINSH_HISTORY_LINES - 1], shell->line, FINSH_CMD_SIZE))
    bbda:	23b3      	movs	r3, #179	; 0xb3
    bbdc:	005b      	lsls	r3, r3, #1
    bbde:	4698      	mov	r8, r3
    bbe0:	3350      	adds	r3, #80	; 0x50
    bbe2:	4699      	mov	r9, r3
    bbe4:	44a0      	add	r8, r4
    bbe6:	44a1      	add	r9, r4
    bbe8:	2250      	movs	r2, #80	; 0x50
    bbea:	4649      	mov	r1, r9
    bbec:	4640      	mov	r0, r8
    bbee:	f002 ff2d 	bl	ea4c <memcmp>
    bbf2:	2800      	cmp	r0, #0
    bbf4:	d017      	beq.n	bc26 <finsh_thread_entry+0x27e>
    bbf6:	0026      	movs	r6, r4
    bbf8:	3626      	adds	r6, #38	; 0x26
                    memcpy(&shell->cmd_history[index][0],
    bbfa:	0030      	movs	r0, r6
    bbfc:	3650      	adds	r6, #80	; 0x50
    bbfe:	2250      	movs	r2, #80	; 0x50
    bc00:	0031      	movs	r1, r6
    bc02:	f002 ff47 	bl	ea94 <memcpy>
                for (index = 0; index < FINSH_HISTORY_LINES - 1; index ++)
    bc06:	45b0      	cmp	r8, r6
    bc08:	d1f7      	bne.n	bbfa <finsh_thread_entry+0x252>
                memset(&shell->cmd_history[index][0], 0, FINSH_CMD_SIZE);
    bc0a:	2250      	movs	r2, #80	; 0x50
    bc0c:	2100      	movs	r1, #0
    bc0e:	4640      	mov	r0, r8
    bc10:	f002 ffe8 	bl	ebe4 <memset>
                memcpy(&shell->cmd_history[index][0], shell->line, shell->line_position);
    bc14:	4b30      	ldr	r3, [pc, #192]	; (bcd8 <finsh_thread_entry+0x330>)
    bc16:	4649      	mov	r1, r9
    bc18:	5ce2      	ldrb	r2, [r4, r3]
    bc1a:	4640      	mov	r0, r8
    bc1c:	f002 ff3a 	bl	ea94 <memcpy>
                shell->history_count = FINSH_HISTORY_LINES;
    bc20:	2305      	movs	r3, #5
    bc22:	001e      	movs	r6, r3
    bc24:	84a3      	strh	r3, [r4, #36]	; 0x24
    shell->current_history = shell->history_count;
    bc26:	8466      	strh	r6, [r4, #34]	; 0x22
            if (msh_is_used() == RT_TRUE)
    bc28:	f000 fe7e 	bl	c928 <msh_is_used>
    bc2c:	2801      	cmp	r0, #1
    bc2e:	d100      	bne.n	bc32 <finsh_thread_entry+0x28a>
    bc30:	e08b      	b.n	bd4a <finsh_thread_entry+0x3a2>
            rt_kprintf(FINSH_PROMPT);
    bc32:	f7ff fe2d 	bl	b890 <finsh_get_prompt>
    bc36:	f7fe fb01 	bl	a23c <rt_kprintf>
            memset(shell->line, 0, sizeof(shell->line));
    bc3a:	683c      	ldr	r4, [r7, #0]
    bc3c:	2250      	movs	r2, #80	; 0x50
    bc3e:	0020      	movs	r0, r4
    bc40:	30b7      	adds	r0, #183	; 0xb7
    bc42:	2100      	movs	r1, #0
    bc44:	30ff      	adds	r0, #255	; 0xff
    bc46:	f002 ffcd 	bl	ebe4 <memset>
            shell->line_curpos = shell->line_position = 0;
    bc4a:	2200      	movs	r2, #0
    bc4c:	4b22      	ldr	r3, [pc, #136]	; (bcd8 <finsh_thread_entry+0x330>)
    bc4e:	52e2      	strh	r2, [r4, r3]
            continue;
    bc50:	e6c9      	b.n	b9e6 <finsh_thread_entry+0x3e>
                if (shell->current_history < shell->history_count - 1)
    bc52:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    bc54:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    bc56:	1e51      	subs	r1, r2, #1
    bc58:	428b      	cmp	r3, r1
    bc5a:	da00      	bge.n	bc5e <finsh_thread_entry+0x2b6>
    bc5c:	e08f      	b.n	bd7e <finsh_thread_entry+0x3d6>
                    if (shell->history_count != 0)
    bc5e:	2a00      	cmp	r2, #0
    bc60:	d100      	bne.n	bc64 <finsh_thread_entry+0x2bc>
    bc62:	e6c0      	b.n	b9e6 <finsh_thread_entry+0x3e>
                        shell->current_history = shell->history_count - 1;
    bc64:	b28b      	uxth	r3, r1
    bc66:	e75f      	b.n	bb28 <finsh_thread_entry+0x180>
            for (i = 0; i < shell->line_curpos; i++)
    bc68:	4b1c      	ldr	r3, [pc, #112]	; (bcdc <finsh_thread_entry+0x334>)
    bc6a:	4698      	mov	r8, r3
    bc6c:	5ce3      	ldrb	r3, [r4, r3]
    bc6e:	2b00      	cmp	r3, #0
    bc70:	d009      	beq.n	bc86 <finsh_thread_entry+0x2de>
    bc72:	2600      	movs	r6, #0
                rt_kprintf("\b");
    bc74:	481e      	ldr	r0, [pc, #120]	; (bcf0 <finsh_thread_entry+0x348>)
    bc76:	f7fe fae1 	bl	a23c <rt_kprintf>
            for (i = 0; i < shell->line_curpos; i++)
    bc7a:	4643      	mov	r3, r8
    bc7c:	683c      	ldr	r4, [r7, #0]
    bc7e:	3601      	adds	r6, #1
    bc80:	5ce3      	ldrb	r3, [r4, r3]
    bc82:	42b3      	cmp	r3, r6
    bc84:	dcf6      	bgt.n	bc74 <finsh_thread_entry+0x2cc>
    rt_kprintf("\n");
    bc86:	481b      	ldr	r0, [pc, #108]	; (bcf4 <finsh_thread_entry+0x34c>)
            shell_auto_complete(&shell->line[0]);
    bc88:	34b7      	adds	r4, #183	; 0xb7
    bc8a:	34ff      	adds	r4, #255	; 0xff
    rt_kprintf("\n");
    bc8c:	f7fe fad6 	bl	a23c <rt_kprintf>
    if (msh_is_used() == RT_TRUE)
    bc90:	f000 fe4a 	bl	c928 <msh_is_used>
    bc94:	2801      	cmp	r0, #1
    bc96:	d100      	bne.n	bc9a <finsh_thread_entry+0x2f2>
    bc98:	e09f      	b.n	bdda <finsh_thread_entry+0x432>
    rt_kprintf("%s%s", FINSH_PROMPT, prefix);
    bc9a:	f7ff fdf9 	bl	b890 <finsh_get_prompt>
    bc9e:	0022      	movs	r2, r4
    bca0:	0001      	movs	r1, r0
    bca2:	4812      	ldr	r0, [pc, #72]	; (bcec <finsh_thread_entry+0x344>)
    bca4:	f7fe faca 	bl	a23c <rt_kprintf>
            shell->line_curpos = shell->line_position = strlen(shell->line);
    bca8:	683c      	ldr	r4, [r7, #0]
    bcaa:	0020      	movs	r0, r4
    bcac:	30b7      	adds	r0, #183	; 0xb7
    bcae:	30ff      	adds	r0, #255	; 0xff
    bcb0:	f003 fcc4 	bl	f63c <strlen>
    bcb4:	4b08      	ldr	r3, [pc, #32]	; (bcd8 <finsh_thread_entry+0x330>)
    bcb6:	b2c0      	uxtb	r0, r0
    bcb8:	54e0      	strb	r0, [r4, r3]
    bcba:	4b08      	ldr	r3, [pc, #32]	; (bcdc <finsh_thread_entry+0x334>)
    bcbc:	54e0      	strb	r0, [r4, r3]
            continue;
    bcbe:	e692      	b.n	b9e6 <finsh_thread_entry+0x3e>
                rt_kprintf("%c", ch);
    bcc0:	0031      	movs	r1, r6
    bcc2:	4808      	ldr	r0, [pc, #32]	; (bce4 <finsh_thread_entry+0x33c>)
    bcc4:	f7fe faba 	bl	a23c <rt_kprintf>
        shell->line_position ++;
    bcc8:	683c      	ldr	r4, [r7, #0]
    bcca:	e6cc      	b.n	ba66 <finsh_thread_entry+0xbe>
    bccc:	00018740 	.word	0x00018740
    bcd0:	00015ac8 	.word	0x00015ac8
    bcd4:	00015a34 	.word	0x00015a34
    bcd8:	00000206 	.word	0x00000206
    bcdc:	00000207 	.word	0x00000207
    bce0:	00015ac4 	.word	0x00015ac4
    bce4:	00015ab8 	.word	0x00015ab8
    bce8:	00015aa4 	.word	0x00015aa4
    bcec:	00015aac 	.word	0x00015aac
    bcf0:	00015ab4 	.word	0x00015ab4
    bcf4:	00015c60 	.word	0x00015c60
                           shell->line_position - shell->line_curpos);
    bcf8:	1ad2      	subs	r2, r2, r3
                           &shell->line[shell->line_curpos + 1],
    bcfa:	31b7      	adds	r1, #183	; 0xb7
                rt_memmove(&shell->line[shell->line_curpos],
    bcfc:	33b7      	adds	r3, #183	; 0xb7
    bcfe:	33ff      	adds	r3, #255	; 0xff
                           &shell->line[shell->line_curpos + 1],
    bd00:	31ff      	adds	r1, #255	; 0xff
    bd02:	1861      	adds	r1, r4, r1
                rt_memmove(&shell->line[shell->line_curpos],
    bd04:	18e0      	adds	r0, r4, r3
    bd06:	f7fe f84b 	bl	9da0 <rt_memmove>
                shell->line[shell->line_position] = 0;
    bd0a:	4643      	mov	r3, r8
    bd0c:	2200      	movs	r2, #0
    bd0e:	6839      	ldr	r1, [r7, #0]
                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
    bd10:	4840      	ldr	r0, [pc, #256]	; (be14 <finsh_thread_entry+0x46c>)
                shell->line[shell->line_position] = 0;
    bd12:	5ccb      	ldrb	r3, [r1, r3]
    bd14:	18cb      	adds	r3, r1, r3
    bd16:	33b7      	adds	r3, #183	; 0xb7
    bd18:	33ff      	adds	r3, #255	; 0xff
    bd1a:	701a      	strb	r2, [r3, #0]
                rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
    bd1c:	5d8b      	ldrb	r3, [r1, r6]
    bd1e:	33b7      	adds	r3, #183	; 0xb7
    bd20:	33ff      	adds	r3, #255	; 0xff
    bd22:	18c9      	adds	r1, r1, r3
    bd24:	f7fe fa8a 	bl	a23c <rt_kprintf>
                for (i = shell->line_curpos; i <= shell->line_position; i++)
    bd28:	4643      	mov	r3, r8
    bd2a:	683c      	ldr	r4, [r7, #0]
    bd2c:	5da6      	ldrb	r6, [r4, r6]
    bd2e:	5ce3      	ldrb	r3, [r4, r3]
    bd30:	429e      	cmp	r6, r3
    bd32:	dd00      	ble.n	bd36 <finsh_thread_entry+0x38e>
    bd34:	e657      	b.n	b9e6 <finsh_thread_entry+0x3e>
                    rt_kprintf("\b");
    bd36:	4838      	ldr	r0, [pc, #224]	; (be18 <finsh_thread_entry+0x470>)
    bd38:	f7fe fa80 	bl	a23c <rt_kprintf>
                for (i = shell->line_curpos; i <= shell->line_position; i++)
    bd3c:	4643      	mov	r3, r8
    bd3e:	683c      	ldr	r4, [r7, #0]
    bd40:	3601      	adds	r6, #1
    bd42:	5ce3      	ldrb	r3, [r4, r3]
    bd44:	42b3      	cmp	r3, r6
    bd46:	daf6      	bge.n	bd36 <finsh_thread_entry+0x38e>
    bd48:	e64d      	b.n	b9e6 <finsh_thread_entry+0x3e>
                if (shell->echo_mode)
    bd4a:	2221      	movs	r2, #33	; 0x21
    bd4c:	683b      	ldr	r3, [r7, #0]
    bd4e:	5c9a      	ldrb	r2, [r3, r2]
    bd50:	4210      	tst	r0, r2
    bd52:	d146      	bne.n	bde2 <finsh_thread_entry+0x43a>
                msh_exec(shell->line, shell->line_position);
    bd54:	4a31      	ldr	r2, [pc, #196]	; (be1c <finsh_thread_entry+0x474>)
    bd56:	5c99      	ldrb	r1, [r3, r2]
    bd58:	33b7      	adds	r3, #183	; 0xb7
    bd5a:	33ff      	adds	r3, #255	; 0xff
    bd5c:	0018      	movs	r0, r3
    bd5e:	f000 fde5 	bl	c92c <msh_exec>
    bd62:	e766      	b.n	bc32 <finsh_thread_entry+0x28a>
                if (shell->line_curpos)
    bd64:	4e2e      	ldr	r6, [pc, #184]	; (be20 <finsh_thread_entry+0x478>)
    bd66:	5da3      	ldrb	r3, [r4, r6]
    bd68:	2b00      	cmp	r3, #0
    bd6a:	d100      	bne.n	bd6e <finsh_thread_entry+0x3c6>
    bd6c:	e63b      	b.n	b9e6 <finsh_thread_entry+0x3e>
                    rt_kprintf("\b");
    bd6e:	482a      	ldr	r0, [pc, #168]	; (be18 <finsh_thread_entry+0x470>)
    bd70:	f7fe fa64 	bl	a23c <rt_kprintf>
                    shell->line_curpos --;
    bd74:	683c      	ldr	r4, [r7, #0]
    bd76:	5da3      	ldrb	r3, [r4, r6]
    bd78:	3b01      	subs	r3, #1
    bd7a:	55a3      	strb	r3, [r4, r6]
    bd7c:	e633      	b.n	b9e6 <finsh_thread_entry+0x3e>
                    shell->current_history ++;
    bd7e:	3301      	adds	r3, #1
    bd80:	b29b      	uxth	r3, r3
    bd82:	8463      	strh	r3, [r4, #34]	; 0x22
    bd84:	e6d1      	b.n	bb2a <finsh_thread_entry+0x182>
            if (shell->history_count == 0 || memcmp(&shell->cmd_history[shell->history_count - 1], shell->line, FINSH_CMD_SIZE))
    bd86:	23db      	movs	r3, #219	; 0xdb
    bd88:	005b      	lsls	r3, r3, #1
    bd8a:	4699      	mov	r9, r3
    bd8c:	44a1      	add	r9, r4
    bd8e:	2e00      	cmp	r6, #0
    bd90:	d00a      	beq.n	bda8 <finsh_thread_entry+0x400>
    bd92:	2250      	movs	r2, #80	; 0x50
    bd94:	1e70      	subs	r0, r6, #1
    bd96:	4350      	muls	r0, r2
    bd98:	3026      	adds	r0, #38	; 0x26
    bd9a:	4649      	mov	r1, r9
    bd9c:	1820      	adds	r0, r4, r0
    bd9e:	f002 fe55 	bl	ea4c <memcmp>
    bda2:	2800      	cmp	r0, #0
    bda4:	d100      	bne.n	bda8 <finsh_thread_entry+0x400>
    bda6:	e73e      	b.n	bc26 <finsh_thread_entry+0x27e>
                memset(&shell->cmd_history[shell->history_count][0], 0, FINSH_CMD_SIZE);
    bda8:	2350      	movs	r3, #80	; 0x50
    bdaa:	0018      	movs	r0, r3
    bdac:	4698      	mov	r8, r3
    bdae:	4370      	muls	r0, r6
    bdb0:	3026      	adds	r0, #38	; 0x26
    bdb2:	001a      	movs	r2, r3
    bdb4:	2100      	movs	r1, #0
    bdb6:	1820      	adds	r0, r4, r0
    bdb8:	f002 ff14 	bl	ebe4 <memset>
                memcpy(&shell->cmd_history[shell->history_count][0], shell->line, shell->line_position);
    bdbc:	4643      	mov	r3, r8
    bdbe:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
    bdc0:	4649      	mov	r1, r9
    bdc2:	4358      	muls	r0, r3
    bdc4:	4b15      	ldr	r3, [pc, #84]	; (be1c <finsh_thread_entry+0x474>)
    bdc6:	3026      	adds	r0, #38	; 0x26
    bdc8:	5ce2      	ldrb	r2, [r4, r3]
    bdca:	1820      	adds	r0, r4, r0
    bdcc:	f002 fe62 	bl	ea94 <memcpy>
                shell->history_count ++;
    bdd0:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
    bdd2:	3601      	adds	r6, #1
    bdd4:	84a6      	strh	r6, [r4, #36]	; 0x24
    bdd6:	b2b6      	uxth	r6, r6
    bdd8:	e725      	b.n	bc26 <finsh_thread_entry+0x27e>
        msh_auto_complete(prefix);
    bdda:	0020      	movs	r0, r4
    bddc:	f000 fe92 	bl	cb04 <msh_auto_complete>
    bde0:	e75b      	b.n	bc9a <finsh_thread_entry+0x2f2>
                    rt_kprintf("\n");
    bde2:	4810      	ldr	r0, [pc, #64]	; (be24 <finsh_thread_entry+0x47c>)
    bde4:	f7fe fa2a 	bl	a23c <rt_kprintf>
                msh_exec(shell->line, shell->line_position);
    bde8:	683b      	ldr	r3, [r7, #0]
    bdea:	e7b3      	b.n	bd54 <finsh_thread_entry+0x3ac>
                rt_kprintf("%s", &shell->line[shell->line_curpos]);
    bdec:	4641      	mov	r1, r8
    bdee:	31b7      	adds	r1, #183	; 0xb7
    bdf0:	31ff      	adds	r1, #255	; 0xff
    bdf2:	1861      	adds	r1, r4, r1
    bdf4:	480c      	ldr	r0, [pc, #48]	; (be28 <finsh_thread_entry+0x480>)
    bdf6:	f7fe fa21 	bl	a23c <rt_kprintf>
            for (i = shell->line_curpos; i < shell->line_position; i++)
    bdfa:	464b      	mov	r3, r9
    bdfc:	683c      	ldr	r4, [r7, #0]
    bdfe:	5ce3      	ldrb	r3, [r4, r3]
    be00:	4698      	mov	r8, r3
    be02:	e6d0      	b.n	bba6 <finsh_thread_entry+0x1fe>
        rt_device_t console = rt_console_get_device();
    be04:	f7fe f9da 	bl	a1bc <rt_console_get_device>
        if (console)
    be08:	2800      	cmp	r0, #0
    be0a:	d100      	bne.n	be0e <finsh_thread_entry+0x466>
    be0c:	e5e0      	b.n	b9d0 <finsh_thread_entry+0x28>
            finsh_set_device(console->parent.name);
    be0e:	f7ff fd7f 	bl	b910 <finsh_set_device>
    be12:	e5dd      	b.n	b9d0 <finsh_thread_entry+0x28>
    be14:	00015abc 	.word	0x00015abc
    be18:	00015ab4 	.word	0x00015ab4
    be1c:	00000206 	.word	0x00000206
    be20:	00000207 	.word	0x00000207
    be24:	00015c60 	.word	0x00015c60
    be28:	00014414 	.word	0x00014414

0000be2c <hello>:
#ifdef RT_USING_CORE_FREERTOS
#include "task.h"
#endif

long hello(void)
{
    be2c:	b510      	push	{r4, lr}
    rt_kprintf("Hello RT-Thread!\n");
    be2e:	4802      	ldr	r0, [pc, #8]	; (be38 <hello+0xc>)
    be30:	f7fe fa04 	bl	a23c <rt_kprintf>

    return 0;
}
    be34:	2000      	movs	r0, #0
    be36:	bd10      	pop	{r4, pc}
    be38:	00015c50 	.word	0x00015c50

0000be3c <version>:
FINSH_FUNCTION_EXPORT(hello, say hello world);

extern void rt_show_version(void);
long version(void)
{
    be3c:	b510      	push	{r4, lr}
    rt_show_version();
    be3e:	f7fe fa33 	bl	a2a8 <rt_show_version>

    return 0;
}
    be42:	2000      	movs	r0, #0
    be44:	bd10      	pop	{r4, pc}
    be46:	46c0      	nop			; (mov r8, r8)

0000be48 <list_thread>:
    return 0;
}
#endif

long list_thread(void)
{
    be48:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4a:	46de      	mov	lr, fp
    be4c:	464e      	mov	r6, r9
    be4e:	4645      	mov	r5, r8
    be50:	4657      	mov	r7, sl
    be52:	b5e0      	push	{r5, r6, r7, lr}
    struct rt_object_information *info;

    info = rt_object_get_information(RT_Object_Class_Thread);
    be54:	2000      	movs	r0, #0
{
    be56:	b083      	sub	sp, #12
    info = rt_object_get_information(RT_Object_Class_Thread);
    be58:	f7fe fdbc 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    be5c:	4e48      	ldr	r6, [pc, #288]	; (bf80 <list_thread+0x138>)
    return _list_thread(&info->object_list);
    be5e:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_Thread);
    be60:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    be62:	0030      	movs	r0, r6
    return _list_thread(&info->object_list);
    be64:	4699      	mov	r9, r3
    int max_length = rt_strlen(type_name), length;
    be66:	f7fd ffe1 	bl	9e2c <rt_strlen>
    be6a:	4680      	mov	r8, r0
    rt_enter_critical();
    be6c:	f7fe ffea 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    be70:	686c      	ldr	r4, [r5, #4]
    be72:	45a1      	cmp	r9, r4
    be74:	d00f      	beq.n	be96 <list_thread+0x4e>
    be76:	4647      	mov	r7, r8
    be78:	46a8      	mov	r8, r5
    be7a:	464d      	mov	r5, r9
        length = rt_strlen(object->name);
    be7c:	0020      	movs	r0, r4
    be7e:	380c      	subs	r0, #12
    be80:	f7fd ffd4 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    be84:	4287      	cmp	r7, r0
    be86:	da00      	bge.n	be8a <list_thread+0x42>
    be88:	0007      	movs	r7, r0
    for (node = list->next; node != list; node = node->next)
    be8a:	6824      	ldr	r4, [r4, #0]
    be8c:	42a5      	cmp	r5, r4
    be8e:	d1f5      	bne.n	be7c <list_thread+0x34>
    be90:	46a9      	mov	r9, r5
    be92:	4645      	mov	r5, r8
    be94:	46b8      	mov	r8, r7
    rt_exit_critical();
    be96:	f7fe ffe1 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    be9a:	4643      	mov	r3, r8
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title); object_split(maxlen);
    be9c:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    be9e:	2b08      	cmp	r3, #8
    bea0:	dc55      	bgt.n	bf4e <list_thread+0x106>
    bea2:	2b00      	cmp	r3, #0
    bea4:	d053      	beq.n	bf4e <list_thread+0x106>
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title); object_split(maxlen);
    bea6:	4641      	mov	r1, r8
    bea8:	4836      	ldr	r0, [pc, #216]	; (bf84 <list_thread+0x13c>)
    beaa:	f7fe f9c7 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    beae:	4643      	mov	r3, r8
    beb0:	1e5c      	subs	r4, r3, #1
    beb2:	4e35      	ldr	r6, [pc, #212]	; (bf88 <list_thread+0x140>)
    beb4:	0030      	movs	r0, r6
    beb6:	f7fe f9c1 	bl	a23c <rt_kprintf>
    beba:	3c01      	subs	r4, #1
    bebc:	d2fa      	bcs.n	beb4 <list_thread+0x6c>
    rt_kprintf(     " ---  ------- ---------- ----------  ------  ---------- ---\n");
    bebe:	4833      	ldr	r0, [pc, #204]	; (bf8c <list_thread+0x144>)
    bec0:	f7fe f9bc 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    bec4:	686e      	ldr	r6, [r5, #4]
    bec6:	45b1      	cmp	r9, r6
    bec8:	d039      	beq.n	bf3e <list_thread+0xf6>
    beca:	4b31      	ldr	r3, [pc, #196]	; (bf90 <list_thread+0x148>)
    becc:	469b      	mov	fp, r3
    bece:	4b31      	ldr	r3, [pc, #196]	; (bf94 <list_thread+0x14c>)
    bed0:	469a      	mov	sl, r3
        rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
    bed2:	0034      	movs	r4, r6
    bed4:	2335      	movs	r3, #53	; 0x35
    bed6:	3c0c      	subs	r4, #12
    bed8:	5ce3      	ldrb	r3, [r4, r3]
    beda:	2208      	movs	r2, #8
    bedc:	9300      	str	r3, [sp, #0]
    bede:	4641      	mov	r1, r8
    bee0:	0023      	movs	r3, r4
    bee2:	4658      	mov	r0, fp
    bee4:	f7fe f9aa 	bl	a23c <rt_kprintf>
        stat = (thread->stat & RT_THREAD_STAT_MASK);
    bee8:	2334      	movs	r3, #52	; 0x34
    beea:	5ce2      	ldrb	r2, [r4, r3]
    beec:	3b25      	subs	r3, #37	; 0x25
    beee:	4013      	ands	r3, r2
        if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
    bef0:	2b01      	cmp	r3, #1
    bef2:	d038      	beq.n	bf66 <list_thread+0x11e>
        else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
    bef4:	2b02      	cmp	r3, #2
    bef6:	d03a      	beq.n	bf6e <list_thread+0x126>
        else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
    bef8:	2b00      	cmp	r3, #0
    befa:	d030      	beq.n	bf5e <list_thread+0x116>
        else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
    befc:	2b04      	cmp	r3, #4
    befe:	d03a      	beq.n	bf76 <list_thread+0x12e>
        ptr = (rt_uint8_t *)thread->stack_addr;
    bf00:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        while (*ptr == '#')ptr ++;
    bf02:	782b      	ldrb	r3, [r5, #0]
    bf04:	0028      	movs	r0, r5
    bf06:	2b23      	cmp	r3, #35	; 0x23
    bf08:	d103      	bne.n	bf12 <list_thread+0xca>
    bf0a:	7843      	ldrb	r3, [r0, #1]
    bf0c:	3001      	adds	r0, #1
    bf0e:	2b23      	cmp	r3, #35	; 0x23
    bf10:	d0fb      	beq.n	bf0a <list_thread+0xc2>
                   (thread->stack_size + (rt_uint32_t)thread->stack_addr - (rt_uint32_t) ptr) * 100
    bf12:	2364      	movs	r3, #100	; 0x64
                   (thread->stack_size + (rt_uint32_t)thread->stack_addr - (rt_uint32_t)thread->sp),
    bf14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    bf16:	19ed      	adds	r5, r5, r7
                   (thread->stack_size + (rt_uint32_t)thread->stack_addr - (rt_uint32_t) ptr) * 100
    bf18:	1a28      	subs	r0, r5, r0
        rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
    bf1a:	0039      	movs	r1, r7
                   (thread->stack_size + (rt_uint32_t)thread->stack_addr - (rt_uint32_t) ptr) * 100
    bf1c:	4358      	muls	r0, r3
        rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
    bf1e:	f7f8 f997 	bl	4250 <__udivsi3>
    bf22:	69e2      	ldr	r2, [r4, #28]
    bf24:	0003      	movs	r3, r0
    bf26:	1aa9      	subs	r1, r5, r2
    bf28:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bf2a:	4650      	mov	r0, sl
    bf2c:	9201      	str	r2, [sp, #4]
    bf2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    bf30:	9200      	str	r2, [sp, #0]
    bf32:	003a      	movs	r2, r7
    bf34:	f7fe f982 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    bf38:	6836      	ldr	r6, [r6, #0]
    bf3a:	45b1      	cmp	r9, r6
    bf3c:	d1c9      	bne.n	bed2 <list_thread+0x8a>
}
    bf3e:	2000      	movs	r0, #0
    bf40:	b003      	add	sp, #12
    bf42:	bcf0      	pop	{r4, r5, r6, r7}
    bf44:	46bb      	mov	fp, r7
    bf46:	46b2      	mov	sl, r6
    bf48:	46a9      	mov	r9, r5
    bf4a:	46a0      	mov	r8, r4
    bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, item_title); object_split(maxlen);
    bf4e:	2108      	movs	r1, #8
    bf50:	480c      	ldr	r0, [pc, #48]	; (bf84 <list_thread+0x13c>)
    bf52:	f7fe f973 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    bf56:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    bf58:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    bf5a:	4698      	mov	r8, r3
    bf5c:	e7a9      	b.n	beb2 <list_thread+0x6a>
        else if (stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
    bf5e:	480e      	ldr	r0, [pc, #56]	; (bf98 <list_thread+0x150>)
    bf60:	f7fe f96c 	bl	a23c <rt_kprintf>
    bf64:	e7cc      	b.n	bf00 <list_thread+0xb8>
        if (stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
    bf66:	480d      	ldr	r0, [pc, #52]	; (bf9c <list_thread+0x154>)
    bf68:	f7fe f968 	bl	a23c <rt_kprintf>
    bf6c:	e7c8      	b.n	bf00 <list_thread+0xb8>
        else if (stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
    bf6e:	480c      	ldr	r0, [pc, #48]	; (bfa0 <list_thread+0x158>)
    bf70:	f7fe f964 	bl	a23c <rt_kprintf>
    bf74:	e7c4      	b.n	bf00 <list_thread+0xb8>
        else if (stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
    bf76:	480b      	ldr	r0, [pc, #44]	; (bfa4 <list_thread+0x15c>)
    bf78:	f7fe f960 	bl	a23c <rt_kprintf>
    bf7c:	e7c0      	b.n	bf00 <list_thread+0xb8>
    bf7e:	46c0      	nop			; (mov r8, r8)
    bf80:	00015c64 	.word	0x00015c64
    bf84:	00015c6c 	.word	0x00015c6c
    bf88:	00016990 	.word	0x00016990
    bf8c:	00015cb0 	.word	0x00015cb0
    bf90:	00015cf0 	.word	0x00015cf0
    bf94:	00015d2c 	.word	0x00015d2c
    bf98:	00015d14 	.word	0x00015d14
    bf9c:	00015cfc 	.word	0x00015cfc
    bfa0:	00015d08 	.word	0x00015d08
    bfa4:	00015d20 	.word	0x00015d20

0000bfa8 <list>:
FINSH_FUNCTION_EXPORT(list_device, list device in system);
MSH_CMD_EXPORT(list_device, list device in system);
#endif

long list(void)
{
    bfa8:	b570      	push	{r4, r5, r6, lr}
#ifndef FINSH_USING_MSH_ONLY
    struct finsh_syscall_item *syscall_item;
    struct finsh_sysvar_item *sysvar_item;
#endif

    rt_kprintf("--Function List:\n");
    bfaa:	4810      	ldr	r0, [pc, #64]	; (bfec <list+0x44>)
    bfac:	f7fe f946 	bl	a23c <rt_kprintf>
    {
        struct finsh_syscall *index;
        for (index = _syscall_table_begin;
    bfb0:	4b0f      	ldr	r3, [pc, #60]	; (bff0 <list+0x48>)
                index < _syscall_table_end;
    bfb2:	4d10      	ldr	r5, [pc, #64]	; (bff4 <list+0x4c>)
        for (index = _syscall_table_begin;
    bfb4:	681c      	ldr	r4, [r3, #0]
    bfb6:	682b      	ldr	r3, [r5, #0]
    bfb8:	429c      	cmp	r4, r3
    bfba:	d214      	bcs.n	bfe6 <list+0x3e>
        {
            /* skip the internal command */
            if (strncmp((char *)index->name, "__", 2) == 0) continue;

#ifdef FINSH_USING_DESCRIPTION
            rt_kprintf("%-16s -- %s\n", index->name, index->desc);
    bfbc:	4e0e      	ldr	r6, [pc, #56]	; (bff8 <list+0x50>)
    bfbe:	e006      	b.n	bfce <list+0x26>
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
    bfc0:	784b      	ldrb	r3, [r1, #1]
    bfc2:	2b5f      	cmp	r3, #95	; 0x5f
    bfc4:	d107      	bne.n	bfd6 <list+0x2e>
        for (index = _syscall_table_begin;
    bfc6:	682b      	ldr	r3, [r5, #0]
                FINSH_NEXT_SYSCALL(index))
    bfc8:	340c      	adds	r4, #12
        for (index = _syscall_table_begin;
    bfca:	42a3      	cmp	r3, r4
    bfcc:	d90b      	bls.n	bfe6 <list+0x3e>
            if (strncmp((char *)index->name, "__", 2) == 0) continue;
    bfce:	6821      	ldr	r1, [r4, #0]
    bfd0:	780b      	ldrb	r3, [r1, #0]
    bfd2:	2b5f      	cmp	r3, #95	; 0x5f
    bfd4:	d0f4      	beq.n	bfc0 <list+0x18>
            rt_kprintf("%-16s -- %s\n", index->name, index->desc);
    bfd6:	6862      	ldr	r2, [r4, #4]
    bfd8:	0030      	movs	r0, r6
    bfda:	f7fe f92f 	bl	a23c <rt_kprintf>
        for (index = _syscall_table_begin;
    bfde:	682b      	ldr	r3, [r5, #0]
                FINSH_NEXT_SYSCALL(index))
    bfe0:	340c      	adds	r4, #12
        for (index = _syscall_table_begin;
    bfe2:	42a3      	cmp	r3, r4
    bfe4:	d8f3      	bhi.n	bfce <list+0x26>
        sysvar_item = sysvar_item->next;
    }
#endif

    return 0;
}
    bfe6:	2000      	movs	r0, #0
    bfe8:	bd70      	pop	{r4, r5, r6, pc}
    bfea:	46c0      	nop			; (mov r8, r8)
    bfec:	00015d54 	.word	0x00015d54
    bff0:	00018744 	.word	0x00018744
    bff4:	00018748 	.word	0x00018748
    bff8:	00015d68 	.word	0x00015d68

0000bffc <list_mutex>:
{
    bffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bffe:	46ce      	mov	lr, r9
    c000:	4647      	mov	r7, r8
    c002:	b580      	push	{r7, lr}
    info = rt_object_get_information(RT_Object_Class_Mutex);
    c004:	2002      	movs	r0, #2
{
    c006:	b085      	sub	sp, #20
    info = rt_object_get_information(RT_Object_Class_Mutex);
    c008:	f7fe fce4 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c00c:	4f2e      	ldr	r7, [pc, #184]	; (c0c8 <list_mutex+0xcc>)
    info = rt_object_get_information(RT_Object_Class_Mutex);
    c00e:	4680      	mov	r8, r0
    return _list_mutex(&info->object_list);
    c010:	1d06      	adds	r6, r0, #4
    int max_length = rt_strlen(type_name), length;
    c012:	0038      	movs	r0, r7
    c014:	f7fd ff0a 	bl	9e2c <rt_strlen>
    c018:	0005      	movs	r5, r0
    rt_enter_critical();
    c01a:	f7fe ff13 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c01e:	4643      	mov	r3, r8
    c020:	685c      	ldr	r4, [r3, #4]
    c022:	42a6      	cmp	r6, r4
    c024:	d009      	beq.n	c03a <list_mutex+0x3e>
        length = rt_strlen(object->name);
    c026:	0020      	movs	r0, r4
    c028:	380c      	subs	r0, #12
    c02a:	f7fd feff 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c02e:	4285      	cmp	r5, r0
    c030:	da00      	bge.n	c034 <list_mutex+0x38>
    c032:	0005      	movs	r5, r0
    for (node = list->next; node != list; node = node->next)
    c034:	6824      	ldr	r4, [r4, #0]
    c036:	42a6      	cmp	r6, r4
    c038:	d1f5      	bne.n	c026 <list_mutex+0x2a>
    rt_exit_critical();
    c03a:	f7fe ff0f 	bl	ae5c <rt_exit_critical>
    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title); object_split(maxlen);
    c03e:	003a      	movs	r2, r7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c040:	2d08      	cmp	r5, #8
    c042:	dc3a      	bgt.n	c0ba <list_mutex+0xbe>
    c044:	2d00      	cmp	r5, #0
    c046:	d038      	beq.n	c0ba <list_mutex+0xbe>
    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title); object_split(maxlen);
    c048:	0029      	movs	r1, r5
    c04a:	4820      	ldr	r0, [pc, #128]	; (c0cc <list_mutex+0xd0>)
    c04c:	f7fe f8f6 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c050:	1e6c      	subs	r4, r5, #1
    c052:	4f1f      	ldr	r7, [pc, #124]	; (c0d0 <list_mutex+0xd4>)
    c054:	0038      	movs	r0, r7
    c056:	f7fe f8f1 	bl	a23c <rt_kprintf>
    c05a:	3c01      	subs	r4, #1
    c05c:	d2fa      	bcs.n	c054 <list_mutex+0x58>
    rt_kprintf(     " -------- ---- --------------\n");
    c05e:	481d      	ldr	r0, [pc, #116]	; (c0d4 <list_mutex+0xd8>)
    c060:	f7fe f8ec 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c064:	4643      	mov	r3, r8
    c066:	685c      	ldr	r4, [r3, #4]
    c068:	42a6      	cmp	r6, r4
    c06a:	d020      	beq.n	c0ae <list_mutex+0xb2>
    c06c:	4b1a      	ldr	r3, [pc, #104]	; (c0d8 <list_mutex+0xdc>)
        rt_kprintf("%-*.*s %-8.*s %04d %d\n",
    c06e:	2708      	movs	r7, #8
    c070:	4698      	mov	r8, r3
                   m->parent.parent.name,
    c072:	0023      	movs	r3, r4
                   rt_list_len(&m->parent.suspend_thread));
    c074:	0020      	movs	r0, r4
                   m->owner->name,
    c076:	695a      	ldr	r2, [r3, #20]
                   rt_list_len(&m->parent.suspend_thread));
    c078:	3008      	adds	r0, #8
                   m->owner->name,
    c07a:	4694      	mov	ip, r2
        rt_kprintf("%-*.*s %-8.*s %04d %d\n",
    c07c:	7cda      	ldrb	r2, [r3, #19]
                   m->parent.parent.name,
    c07e:	3b0c      	subs	r3, #12
        rt_kprintf("%-*.*s %-8.*s %04d %d\n",
    c080:	4691      	mov	r9, r2
 */
rt_inline unsigned int rt_list_len(const rt_list_t *l)
{
    unsigned int len = 0;
    const rt_list_t *p = l;
    while (p->next != l)
    c082:	68a2      	ldr	r2, [r4, #8]
    unsigned int len = 0;
    c084:	2100      	movs	r1, #0
    while (p->next != l)
    c086:	4282      	cmp	r2, r0
    c088:	d003      	beq.n	c092 <list_mutex+0x96>
    c08a:	6812      	ldr	r2, [r2, #0]
    {
        p = p->next;
        len ++;
    c08c:	3101      	adds	r1, #1
    while (p->next != l)
    c08e:	4290      	cmp	r0, r2
    c090:	d1fb      	bne.n	c08a <list_mutex+0x8e>
    c092:	464a      	mov	r2, r9
    c094:	9202      	str	r2, [sp, #8]
    c096:	4662      	mov	r2, ip
    c098:	9103      	str	r1, [sp, #12]
    c09a:	9201      	str	r2, [sp, #4]
    c09c:	0029      	movs	r1, r5
    c09e:	2208      	movs	r2, #8
    c0a0:	4640      	mov	r0, r8
    c0a2:	9700      	str	r7, [sp, #0]
    c0a4:	f7fe f8ca 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c0a8:	6824      	ldr	r4, [r4, #0]
    c0aa:	42a6      	cmp	r6, r4
    c0ac:	d1e1      	bne.n	c072 <list_mutex+0x76>
}
    c0ae:	2000      	movs	r0, #0
    c0b0:	b005      	add	sp, #20
    c0b2:	bcc0      	pop	{r6, r7}
    c0b4:	46b9      	mov	r9, r7
    c0b6:	46b0      	mov	r8, r6
    c0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, item_title); object_split(maxlen);
    c0ba:	2108      	movs	r1, #8
    c0bc:	4803      	ldr	r0, [pc, #12]	; (c0cc <list_mutex+0xd0>)
    c0be:	f7fe f8bd 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c0c2:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c0c4:	2508      	movs	r5, #8
    c0c6:	e7c4      	b.n	c052 <list_mutex+0x56>
    c0c8:	00015d78 	.word	0x00015d78
    c0cc:	00015d80 	.word	0x00015d80
    c0d0:	00016990 	.word	0x00016990
    c0d4:	00015da4 	.word	0x00015da4
    c0d8:	00015dc4 	.word	0x00015dc4

0000c0dc <list_device>:
{
    c0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0de:	46ce      	mov	lr, r9
    c0e0:	4647      	mov	r7, r8
    c0e2:	b580      	push	{r7, lr}
    info = rt_object_get_information(RT_Object_Class_Device);
    c0e4:	2008      	movs	r0, #8
{
    c0e6:	b099      	sub	sp, #100	; 0x64
    info = rt_object_get_information(RT_Object_Class_Device);
    c0e8:	f7fe fc74 	bl	a9d4 <rt_object_get_information>
    char *const device_type_str[] =
    c0ec:	ad02      	add	r5, sp, #8
    c0ee:	2258      	movs	r2, #88	; 0x58
    c0f0:	492c      	ldr	r1, [pc, #176]	; (c1a4 <list_device+0xc8>)
    info = rt_object_get_information(RT_Object_Class_Device);
    c0f2:	4680      	mov	r8, r0
    return _list_device(&info->object_list);
    c0f4:	1d07      	adds	r7, r0, #4
    char *const device_type_str[] =
    c0f6:	0028      	movs	r0, r5
    c0f8:	f002 fccc 	bl	ea94 <memcpy>
    int max_length = rt_strlen(type_name), length;
    c0fc:	4b2a      	ldr	r3, [pc, #168]	; (c1a8 <list_device+0xcc>)
    c0fe:	0018      	movs	r0, r3
    c100:	4699      	mov	r9, r3
    c102:	f7fd fe93 	bl	9e2c <rt_strlen>
    c106:	0006      	movs	r6, r0
    rt_enter_critical();
    c108:	f7fe fe9c 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c10c:	4643      	mov	r3, r8
    c10e:	685c      	ldr	r4, [r3, #4]
    c110:	42a7      	cmp	r7, r4
    c112:	d009      	beq.n	c128 <list_device+0x4c>
        length = rt_strlen(object->name);
    c114:	0020      	movs	r0, r4
    c116:	380c      	subs	r0, #12
    c118:	f7fd fe88 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c11c:	4286      	cmp	r6, r0
    c11e:	da00      	bge.n	c122 <list_device+0x46>
    c120:	0006      	movs	r6, r0
    for (node = list->next; node != list; node = node->next)
    c122:	6824      	ldr	r4, [r4, #0]
    c124:	42a7      	cmp	r7, r4
    c126:	d1f5      	bne.n	c114 <list_device+0x38>
    rt_exit_critical();
    c128:	f7fe fe98 	bl	ae5c <rt_exit_critical>
    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title); object_split(maxlen);
    c12c:	464a      	mov	r2, r9
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c12e:	2e08      	cmp	r6, #8
    c130:	dc07      	bgt.n	c142 <list_device+0x66>
    c132:	2e00      	cmp	r6, #0
    c134:	d005      	beq.n	c142 <list_device+0x66>
    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title); object_split(maxlen);
    c136:	0031      	movs	r1, r6
    c138:	481c      	ldr	r0, [pc, #112]	; (c1ac <list_device+0xd0>)
    c13a:	f7fe f87f 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c13e:	1e74      	subs	r4, r6, #1
    c140:	e005      	b.n	c14e <list_device+0x72>
    rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title); object_split(maxlen);
    c142:	2108      	movs	r1, #8
    c144:	4819      	ldr	r0, [pc, #100]	; (c1ac <list_device+0xd0>)
    c146:	f7fe f879 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c14a:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c14c:	2608      	movs	r6, #8
    c14e:	4b18      	ldr	r3, [pc, #96]	; (c1b0 <list_device+0xd4>)
    c150:	4699      	mov	r9, r3
    while (len--) rt_kprintf("-");
    c152:	4648      	mov	r0, r9
    c154:	f7fe f872 	bl	a23c <rt_kprintf>
    c158:	3c01      	subs	r4, #1
    c15a:	d2fa      	bcs.n	c152 <list_device+0x76>
    rt_kprintf(     " -------------------- ----------\n");
    c15c:	4815      	ldr	r0, [pc, #84]	; (c1b4 <list_device+0xd8>)
    c15e:	f7fe f86d 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c162:	4643      	mov	r3, r8
    c164:	685c      	ldr	r4, [r3, #4]
    c166:	42a7      	cmp	r7, r4
    c168:	d016      	beq.n	c198 <list_device+0xbc>
    c16a:	4b13      	ldr	r3, [pc, #76]	; (c1b8 <list_device+0xdc>)
    c16c:	4699      	mov	r9, r3
        rt_kprintf("%-*.*s %-20s %-8d\n",
    c16e:	4b13      	ldr	r3, [pc, #76]	; (c1bc <list_device+0xe0>)
    c170:	4698      	mov	r8, r3
                   device->parent.name,
    c172:	0023      	movs	r3, r4
                   (device->type <= RT_Device_Class_Unknown) ?
    c174:	7a22      	ldrb	r2, [r4, #8]
        rt_kprintf("%-*.*s %-20s %-8d\n",
    c176:	4641      	mov	r1, r8
                   device->parent.name,
    c178:	3b0c      	subs	r3, #12
        rt_kprintf("%-*.*s %-20s %-8d\n",
    c17a:	2a15      	cmp	r2, #21
    c17c:	d801      	bhi.n	c182 <list_device+0xa6>
    c17e:	0092      	lsls	r2, r2, #2
    c180:	58a9      	ldr	r1, [r5, r2]
    c182:	7e9a      	ldrb	r2, [r3, #26]
    c184:	4648      	mov	r0, r9
    c186:	9201      	str	r2, [sp, #4]
    c188:	9100      	str	r1, [sp, #0]
    c18a:	2208      	movs	r2, #8
    c18c:	0031      	movs	r1, r6
    c18e:	f7fe f855 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c192:	6824      	ldr	r4, [r4, #0]
    c194:	42a7      	cmp	r7, r4
    c196:	d1ec      	bne.n	c172 <list_device+0x96>
}
    c198:	2000      	movs	r0, #0
    c19a:	b019      	add	sp, #100	; 0x64
    c19c:	bcc0      	pop	{r6, r7}
    c19e:	46b9      	mov	r9, r7
    c1a0:	46b0      	mov	r8, r6
    c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1a4:	00014268 	.word	0x00014268
    c1a8:	00015ddc 	.word	0x00015ddc
    c1ac:	00015de4 	.word	0x00015de4
    c1b0:	00016990 	.word	0x00016990
    c1b4:	00015e0c 	.word	0x00015e0c
    c1b8:	00015e30 	.word	0x00015e30
    c1bc:	00015c48 	.word	0x00015c48

0000c1c0 <list_timer>:
{
    c1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1c2:	46de      	mov	lr, fp
    c1c4:	4645      	mov	r5, r8
    c1c6:	4657      	mov	r7, sl
    c1c8:	464e      	mov	r6, r9
    c1ca:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_Timer);
    c1cc:	2009      	movs	r0, #9
{
    c1ce:	b083      	sub	sp, #12
    info = rt_object_get_information(RT_Object_Class_Timer);
    c1d0:	f7fe fc00 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c1d4:	4d34      	ldr	r5, [pc, #208]	; (c2a8 <list_timer+0xe8>)
    info = rt_object_get_information(RT_Object_Class_Timer);
    c1d6:	4680      	mov	r8, r0
    return _list_timer(&info->object_list);
    c1d8:	1d07      	adds	r7, r0, #4
    int max_length = rt_strlen(type_name), length;
    c1da:	0028      	movs	r0, r5
    c1dc:	f7fd fe26 	bl	9e2c <rt_strlen>
    c1e0:	0006      	movs	r6, r0
    rt_enter_critical();
    c1e2:	f7fe fe2f 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c1e6:	4643      	mov	r3, r8
    c1e8:	685c      	ldr	r4, [r3, #4]
    c1ea:	42a7      	cmp	r7, r4
    c1ec:	d009      	beq.n	c202 <list_timer+0x42>
        length = rt_strlen(object->name);
    c1ee:	0020      	movs	r0, r4
    c1f0:	380c      	subs	r0, #12
    c1f2:	f7fd fe1b 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c1f6:	4286      	cmp	r6, r0
    c1f8:	da00      	bge.n	c1fc <list_timer+0x3c>
    c1fa:	0006      	movs	r6, r0
    for (node = list->next; node != list; node = node->next)
    c1fc:	6824      	ldr	r4, [r4, #0]
    c1fe:	42a7      	cmp	r7, r4
    c200:	d1f5      	bne.n	c1ee <list_timer+0x2e>
    rt_exit_critical();
    c202:	f7fe fe2b 	bl	ae5c <rt_exit_critical>
    rt_kprintf("%-*.s  periodic   timeout       flag\n", maxlen, item_title); object_split(maxlen);
    c206:	002a      	movs	r2, r5
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c208:	2e08      	cmp	r6, #8
    c20a:	dc46      	bgt.n	c29a <list_timer+0xda>
    c20c:	2e00      	cmp	r6, #0
    c20e:	d044      	beq.n	c29a <list_timer+0xda>
    rt_kprintf("%-*.s  periodic   timeout       flag\n", maxlen, item_title); object_split(maxlen);
    c210:	0031      	movs	r1, r6
    c212:	4826      	ldr	r0, [pc, #152]	; (c2ac <list_timer+0xec>)
    c214:	f7fe f812 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c218:	1e74      	subs	r4, r6, #1
    c21a:	4d25      	ldr	r5, [pc, #148]	; (c2b0 <list_timer+0xf0>)
    c21c:	0028      	movs	r0, r5
    c21e:	f7fe f80d 	bl	a23c <rt_kprintf>
    c222:	3c01      	subs	r4, #1
    c224:	d2fa      	bcs.n	c21c <list_timer+0x5c>
    rt_kprintf(     " ---------- ---------- -----------\n");
    c226:	4823      	ldr	r0, [pc, #140]	; (c2b4 <list_timer+0xf4>)
    c228:	f7fe f808 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c22c:	4643      	mov	r3, r8
    c22e:	685d      	ldr	r5, [r3, #4]
    c230:	42af      	cmp	r7, r5
    c232:	d024      	beq.n	c27e <list_timer+0xbe>
    c234:	4b20      	ldr	r3, [pc, #128]	; (c2b8 <list_timer+0xf8>)
    c236:	4699      	mov	r9, r3
        if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
    c238:	2301      	movs	r3, #1
    c23a:	4698      	mov	r8, r3
            rt_kprintf("deactivated\n");
    c23c:	4b1f      	ldr	r3, [pc, #124]	; (c2bc <list_timer+0xfc>)
    c23e:	469b      	mov	fp, r3
            rt_kprintf("activated\n");
    c240:	4b1f      	ldr	r3, [pc, #124]	; (c2c0 <list_timer+0x100>)
    c242:	469a      	mov	sl, r3
    c244:	e005      	b.n	c252 <list_timer+0x92>
    c246:	4650      	mov	r0, sl
    c248:	f7fd fff8 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c24c:	682d      	ldr	r5, [r5, #0]
    c24e:	42af      	cmp	r7, r5
    c250:	d015      	beq.n	c27e <list_timer+0xbe>
                   timer->parent.name,
    c252:	002c      	movs	r4, r5
        rt_kprintf("%-*.*s 0x%08x 0x%08x ",
    c254:	69eb      	ldr	r3, [r5, #28]
                   timer->parent.name,
    c256:	3c0c      	subs	r4, #12
        rt_kprintf("%-*.*s 0x%08x 0x%08x ",
    c258:	9301      	str	r3, [sp, #4]
    c25a:	69ab      	ldr	r3, [r5, #24]
    c25c:	2208      	movs	r2, #8
    c25e:	9300      	str	r3, [sp, #0]
    c260:	0031      	movs	r1, r6
    c262:	0023      	movs	r3, r4
    c264:	4648      	mov	r0, r9
    c266:	f7fd ffe9 	bl	a23c <rt_kprintf>
        if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
    c26a:	4642      	mov	r2, r8
    c26c:	7a63      	ldrb	r3, [r4, #9]
    c26e:	421a      	tst	r2, r3
    c270:	d1e9      	bne.n	c246 <list_timer+0x86>
            rt_kprintf("deactivated\n");
    c272:	4658      	mov	r0, fp
    c274:	f7fd ffe2 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c278:	682d      	ldr	r5, [r5, #0]
    c27a:	42af      	cmp	r7, r5
    c27c:	d1e9      	bne.n	c252 <list_timer+0x92>
    rt_kprintf("current tick:0x%08x\n", rt_tick_get());
    c27e:	f7fc ffcb 	bl	9218 <rt_tick_get>
    c282:	0001      	movs	r1, r0
    c284:	480f      	ldr	r0, [pc, #60]	; (c2c4 <list_timer+0x104>)
    c286:	f7fd ffd9 	bl	a23c <rt_kprintf>
}
    c28a:	2000      	movs	r0, #0
    c28c:	b003      	add	sp, #12
    c28e:	bcf0      	pop	{r4, r5, r6, r7}
    c290:	46bb      	mov	fp, r7
    c292:	46b2      	mov	sl, r6
    c294:	46a9      	mov	r9, r5
    c296:	46a0      	mov	r8, r4
    c298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s  periodic   timeout       flag\n", maxlen, item_title); object_split(maxlen);
    c29a:	2108      	movs	r1, #8
    c29c:	4803      	ldr	r0, [pc, #12]	; (c2ac <list_timer+0xec>)
    c29e:	f7fd ffcd 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c2a2:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c2a4:	2608      	movs	r6, #8
    c2a6:	e7b8      	b.n	c21a <list_timer+0x5a>
    c2a8:	000144cc 	.word	0x000144cc
    c2ac:	00015e44 	.word	0x00015e44
    c2b0:	00016990 	.word	0x00016990
    c2b4:	00015e6c 	.word	0x00015e6c
    c2b8:	00015e90 	.word	0x00015e90
    c2bc:	00015eb4 	.word	0x00015eb4
    c2c0:	00015ea8 	.word	0x00015ea8
    c2c4:	00015ec4 	.word	0x00015ec4

0000c2c8 <list_event>:
{
    c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2ca:	46de      	mov	lr, fp
    c2cc:	464e      	mov	r6, r9
    c2ce:	4645      	mov	r5, r8
    c2d0:	4657      	mov	r7, sl
    c2d2:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_Event);
    c2d4:	2003      	movs	r0, #3
{
    c2d6:	b083      	sub	sp, #12
    info = rt_object_get_information(RT_Object_Class_Event);
    c2d8:	f7fe fb7c 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c2dc:	4e3c      	ldr	r6, [pc, #240]	; (c3d0 <list_event+0x108>)
    return _list_event(&info->object_list);
    c2de:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_Event);
    c2e0:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    c2e2:	0030      	movs	r0, r6
    return _list_event(&info->object_list);
    c2e4:	4699      	mov	r9, r3
    int max_length = rt_strlen(type_name), length;
    c2e6:	f7fd fda1 	bl	9e2c <rt_strlen>
    c2ea:	4680      	mov	r8, r0
    rt_enter_critical();
    c2ec:	f7fe fdaa 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c2f0:	686c      	ldr	r4, [r5, #4]
    c2f2:	45a1      	cmp	r9, r4
    c2f4:	d009      	beq.n	c30a <list_event+0x42>
        length = rt_strlen(object->name);
    c2f6:	0020      	movs	r0, r4
    c2f8:	380c      	subs	r0, #12
    c2fa:	f7fd fd97 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c2fe:	4580      	cmp	r8, r0
    c300:	da00      	bge.n	c304 <list_event+0x3c>
    c302:	4680      	mov	r8, r0
    for (node = list->next; node != list; node = node->next)
    c304:	6824      	ldr	r4, [r4, #0]
    c306:	45a1      	cmp	r9, r4
    c308:	d1f5      	bne.n	c2f6 <list_event+0x2e>
    rt_exit_critical();
    c30a:	f7fe fda7 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c30e:	4643      	mov	r3, r8
    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title); object_split(maxlen);
    c310:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c312:	2b08      	cmp	r3, #8
    c314:	dc4c      	bgt.n	c3b0 <list_event+0xe8>
    c316:	2b00      	cmp	r3, #0
    c318:	d04a      	beq.n	c3b0 <list_event+0xe8>
    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title); object_split(maxlen);
    c31a:	4641      	mov	r1, r8
    c31c:	482d      	ldr	r0, [pc, #180]	; (c3d4 <list_event+0x10c>)
    c31e:	f7fd ff8d 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c322:	4643      	mov	r3, r8
    c324:	1e5c      	subs	r4, r3, #1
    c326:	4e2c      	ldr	r6, [pc, #176]	; (c3d8 <list_event+0x110>)
    c328:	0030      	movs	r0, r6
    c32a:	f7fd ff87 	bl	a23c <rt_kprintf>
    c32e:	3c01      	subs	r4, #1
    c330:	d2fa      	bcs.n	c328 <list_event+0x60>
    rt_kprintf(     "  ---------- --------------\n");
    c332:	482a      	ldr	r0, [pc, #168]	; (c3dc <list_event+0x114>)
    c334:	f7fd ff82 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c338:	686e      	ldr	r6, [r5, #4]
    c33a:	45b1      	cmp	r9, r6
    c33c:	d030      	beq.n	c3a0 <list_event+0xd8>
            rt_kprintf("%-*.*s  0x%08x 0\n",
    c33e:	4b28      	ldr	r3, [pc, #160]	; (c3e0 <list_event+0x118>)
            rt_kprintf("/");
    c340:	4f28      	ldr	r7, [pc, #160]	; (c3e4 <list_event+0x11c>)
            rt_kprintf("%-*.*s  0x%08x 0\n",
    c342:	469a      	mov	sl, r3
        if (!rt_list_isempty(&e->parent.suspend_thread))
    c344:	0031      	movs	r1, r6
    c346:	0033      	movs	r3, r6
    return l->next == l;
    c348:	68b4      	ldr	r4, [r6, #8]
    c34a:	3108      	adds	r1, #8
    c34c:	3b0c      	subs	r3, #12
    c34e:	42a1      	cmp	r1, r4
    c350:	d036      	beq.n	c3c0 <list_event+0xf8>
    unsigned int len = 0;
    c352:	2200      	movs	r2, #0
            rt_kprintf("%-*.*s  0x%08x %03d:",
    c354:	69d8      	ldr	r0, [r3, #28]
    while (p->next != l)
    c356:	6824      	ldr	r4, [r4, #0]
        len ++;
    c358:	3201      	adds	r2, #1
    while (p->next != l)
    c35a:	42a1      	cmp	r1, r4
    c35c:	d1fb      	bne.n	c356 <list_event+0x8e>
    c35e:	9201      	str	r2, [sp, #4]
    c360:	9000      	str	r0, [sp, #0]
    c362:	2208      	movs	r2, #8
    c364:	4641      	mov	r1, r8
    c366:	4820      	ldr	r0, [pc, #128]	; (c3e8 <list_event+0x120>)
    c368:	f7fd ff68 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c36c:	68b5      	ldr	r5, [r6, #8]
    c36e:	42ac      	cmp	r4, r5
    c370:	d010      	beq.n	c394 <list_event+0xcc>
    c372:	4b1e      	ldr	r3, [pc, #120]	; (c3ec <list_event+0x124>)
    c374:	469b      	mov	fp, r3
    c376:	e005      	b.n	c384 <list_event+0xbc>
            rt_kprintf("/");
    c378:	0038      	movs	r0, r7
    c37a:	f7fd ff5f 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c37e:	682d      	ldr	r5, [r5, #0]
    c380:	42ac      	cmp	r4, r5
    c382:	d007      	beq.n	c394 <list_event+0xcc>
        rt_kprintf("%s", thread->name);
    c384:	0029      	movs	r1, r5
    c386:	4658      	mov	r0, fp
    c388:	3914      	subs	r1, #20
    c38a:	f7fd ff57 	bl	a23c <rt_kprintf>
        if (node->next != list)
    c38e:	682b      	ldr	r3, [r5, #0]
    c390:	429c      	cmp	r4, r3
    c392:	d1f1      	bne.n	c378 <list_event+0xb0>
            rt_kprintf("\n");
    c394:	4816      	ldr	r0, [pc, #88]	; (c3f0 <list_event+0x128>)
    c396:	f7fd ff51 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c39a:	6836      	ldr	r6, [r6, #0]
    c39c:	45b1      	cmp	r9, r6
    c39e:	d1d1      	bne.n	c344 <list_event+0x7c>
}
    c3a0:	2000      	movs	r0, #0
    c3a2:	b003      	add	sp, #12
    c3a4:	bcf0      	pop	{r4, r5, r6, r7}
    c3a6:	46bb      	mov	fp, r7
    c3a8:	46b2      	mov	sl, r6
    c3aa:	46a9      	mov	r9, r5
    c3ac:	46a0      	mov	r8, r4
    c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s      set    suspend thread\n", maxlen, item_title); object_split(maxlen);
    c3b0:	2108      	movs	r1, #8
    c3b2:	4808      	ldr	r0, [pc, #32]	; (c3d4 <list_event+0x10c>)
    c3b4:	f7fd ff42 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c3b8:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    c3ba:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c3bc:	4698      	mov	r8, r3
    c3be:	e7b2      	b.n	c326 <list_event+0x5e>
            rt_kprintf("%-*.*s  0x%08x 0\n",
    c3c0:	69da      	ldr	r2, [r3, #28]
    c3c2:	4641      	mov	r1, r8
    c3c4:	9200      	str	r2, [sp, #0]
    c3c6:	4650      	mov	r0, sl
    c3c8:	2208      	movs	r2, #8
    c3ca:	f7fd ff37 	bl	a23c <rt_kprintf>
    c3ce:	e7e4      	b.n	c39a <list_event+0xd2>
    c3d0:	00015edc 	.word	0x00015edc
    c3d4:	00015ee4 	.word	0x00015ee4
    c3d8:	00016990 	.word	0x00016990
    c3dc:	00015f08 	.word	0x00015f08
    c3e0:	00015f44 	.word	0x00015f44
    c3e4:	00015f40 	.word	0x00015f40
    c3e8:	00015f28 	.word	0x00015f28
    c3ec:	00014414 	.word	0x00014414
    c3f0:	00015c60 	.word	0x00015c60

0000c3f4 <list_msgqueue>:
{
    c3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3f6:	46de      	mov	lr, fp
    c3f8:	464e      	mov	r6, r9
    c3fa:	4645      	mov	r5, r8
    c3fc:	4657      	mov	r7, sl
    c3fe:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_MessageQueue);
    c400:	2005      	movs	r0, #5
{
    c402:	b083      	sub	sp, #12
    info = rt_object_get_information(RT_Object_Class_MessageQueue);
    c404:	f7fe fae6 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c408:	4e3d      	ldr	r6, [pc, #244]	; (c500 <list_msgqueue+0x10c>)
    return _list_msgqueue(&info->object_list);
    c40a:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_MessageQueue);
    c40c:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    c40e:	0030      	movs	r0, r6
    return _list_msgqueue(&info->object_list);
    c410:	4699      	mov	r9, r3
    int max_length = rt_strlen(type_name), length;
    c412:	f7fd fd0b 	bl	9e2c <rt_strlen>
    c416:	4680      	mov	r8, r0
    rt_enter_critical();
    c418:	f7fe fd14 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c41c:	686c      	ldr	r4, [r5, #4]
    c41e:	45a1      	cmp	r9, r4
    c420:	d009      	beq.n	c436 <list_msgqueue+0x42>
        length = rt_strlen(object->name);
    c422:	0020      	movs	r0, r4
    c424:	380c      	subs	r0, #12
    c426:	f7fd fd01 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c42a:	4580      	cmp	r8, r0
    c42c:	da00      	bge.n	c430 <list_msgqueue+0x3c>
    c42e:	4680      	mov	r8, r0
    for (node = list->next; node != list; node = node->next)
    c430:	6824      	ldr	r4, [r4, #0]
    c432:	45a1      	cmp	r9, r4
    c434:	d1f5      	bne.n	c422 <list_msgqueue+0x2e>
    rt_exit_critical();
    c436:	f7fe fd11 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c43a:	4643      	mov	r3, r8
    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title); object_split(maxlen);
    c43c:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c43e:	2b08      	cmp	r3, #8
    c440:	dc4c      	bgt.n	c4dc <list_msgqueue+0xe8>
    c442:	2b00      	cmp	r3, #0
    c444:	d04a      	beq.n	c4dc <list_msgqueue+0xe8>
    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title); object_split(maxlen);
    c446:	4641      	mov	r1, r8
    c448:	482e      	ldr	r0, [pc, #184]	; (c504 <list_msgqueue+0x110>)
    c44a:	f7fd fef7 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c44e:	4643      	mov	r3, r8
    c450:	1e5c      	subs	r4, r3, #1
    c452:	4e2d      	ldr	r6, [pc, #180]	; (c508 <list_msgqueue+0x114>)
    c454:	0030      	movs	r0, r6
    c456:	f7fd fef1 	bl	a23c <rt_kprintf>
    c45a:	3c01      	subs	r4, #1
    c45c:	d2fa      	bcs.n	c454 <list_msgqueue+0x60>
    rt_kprintf(     " ----  --------------\n");
    c45e:	482b      	ldr	r0, [pc, #172]	; (c50c <list_msgqueue+0x118>)
    c460:	f7fd feec 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c464:	686e      	ldr	r6, [r5, #4]
    c466:	45b1      	cmp	r9, r6
    c468:	d030      	beq.n	c4cc <list_msgqueue+0xd8>
            rt_kprintf("%-*.*s %04d  %d\n",
    c46a:	4b29      	ldr	r3, [pc, #164]	; (c510 <list_msgqueue+0x11c>)
            rt_kprintf("/");
    c46c:	4f29      	ldr	r7, [pc, #164]	; (c514 <list_msgqueue+0x120>)
            rt_kprintf("%-*.*s %04d  %d\n",
    c46e:	469a      	mov	sl, r3
        if (!rt_list_isempty(&m->parent.suspend_thread))
    c470:	0031      	movs	r1, r6
    c472:	0033      	movs	r3, r6
    return l->next == l;
    c474:	68b4      	ldr	r4, [r6, #8]
    c476:	3108      	adds	r1, #8
    c478:	3b0c      	subs	r3, #12
    c47a:	42a1      	cmp	r1, r4
    c47c:	d036      	beq.n	c4ec <list_msgqueue+0xf8>
    unsigned int len = 0;
    c47e:	2200      	movs	r2, #0
            rt_kprintf("%-*.*s %04d  %d:",
    c480:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    while (p->next != l)
    c482:	6824      	ldr	r4, [r4, #0]
        len ++;
    c484:	3201      	adds	r2, #1
    while (p->next != l)
    c486:	42a1      	cmp	r1, r4
    c488:	d1fb      	bne.n	c482 <list_msgqueue+0x8e>
    c48a:	9201      	str	r2, [sp, #4]
    c48c:	9000      	str	r0, [sp, #0]
    c48e:	2208      	movs	r2, #8
    c490:	4641      	mov	r1, r8
    c492:	4821      	ldr	r0, [pc, #132]	; (c518 <list_msgqueue+0x124>)
    c494:	f7fd fed2 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c498:	68b5      	ldr	r5, [r6, #8]
    c49a:	42ac      	cmp	r4, r5
    c49c:	d010      	beq.n	c4c0 <list_msgqueue+0xcc>
    c49e:	4b1f      	ldr	r3, [pc, #124]	; (c51c <list_msgqueue+0x128>)
    c4a0:	469b      	mov	fp, r3
    c4a2:	e005      	b.n	c4b0 <list_msgqueue+0xbc>
            rt_kprintf("/");
    c4a4:	0038      	movs	r0, r7
    c4a6:	f7fd fec9 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c4aa:	682d      	ldr	r5, [r5, #0]
    c4ac:	42ac      	cmp	r4, r5
    c4ae:	d007      	beq.n	c4c0 <list_msgqueue+0xcc>
        rt_kprintf("%s", thread->name);
    c4b0:	0029      	movs	r1, r5
    c4b2:	4658      	mov	r0, fp
    c4b4:	3914      	subs	r1, #20
    c4b6:	f7fd fec1 	bl	a23c <rt_kprintf>
        if (node->next != list)
    c4ba:	682b      	ldr	r3, [r5, #0]
    c4bc:	429c      	cmp	r4, r3
    c4be:	d1f1      	bne.n	c4a4 <list_msgqueue+0xb0>
            rt_kprintf("\n");
    c4c0:	4817      	ldr	r0, [pc, #92]	; (c520 <list_msgqueue+0x12c>)
    c4c2:	f7fd febb 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c4c6:	6836      	ldr	r6, [r6, #0]
    c4c8:	45b1      	cmp	r9, r6
    c4ca:	d1d1      	bne.n	c470 <list_msgqueue+0x7c>
}
    c4cc:	2000      	movs	r0, #0
    c4ce:	b003      	add	sp, #12
    c4d0:	bcf0      	pop	{r4, r5, r6, r7}
    c4d2:	46bb      	mov	fp, r7
    c4d4:	46b2      	mov	sl, r6
    c4d6:	46a9      	mov	r9, r5
    c4d8:	46a0      	mov	r8, r4
    c4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title); object_split(maxlen);
    c4dc:	2108      	movs	r1, #8
    c4de:	4809      	ldr	r0, [pc, #36]	; (c504 <list_msgqueue+0x110>)
    c4e0:	f7fd feac 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c4e4:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    c4e6:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c4e8:	4698      	mov	r8, r3
    c4ea:	e7b2      	b.n	c452 <list_msgqueue+0x5e>
            rt_kprintf("%-*.*s %04d  %d\n",
    c4ec:	2200      	movs	r2, #0
    c4ee:	9201      	str	r2, [sp, #4]
    c4f0:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    c4f2:	4641      	mov	r1, r8
    c4f4:	9200      	str	r2, [sp, #0]
    c4f6:	4650      	mov	r0, sl
    c4f8:	2208      	movs	r2, #8
    c4fa:	f7fd fe9f 	bl	a23c <rt_kprintf>
    c4fe:	e7e2      	b.n	c4c6 <list_msgqueue+0xd2>
    c500:	00015f58 	.word	0x00015f58
    c504:	00015f64 	.word	0x00015f64
    c508:	00016990 	.word	0x00016990
    c50c:	00015f80 	.word	0x00015f80
    c510:	00015fac 	.word	0x00015fac
    c514:	00015f40 	.word	0x00015f40
    c518:	00015f98 	.word	0x00015f98
    c51c:	00014414 	.word	0x00014414
    c520:	00015c60 	.word	0x00015c60

0000c524 <list_sem>:
{
    c524:	b5f0      	push	{r4, r5, r6, r7, lr}
    c526:	46de      	mov	lr, fp
    c528:	464e      	mov	r6, r9
    c52a:	4645      	mov	r5, r8
    c52c:	4657      	mov	r7, sl
    c52e:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_Semaphore);
    c530:	2001      	movs	r0, #1
{
    c532:	b083      	sub	sp, #12
    info = rt_object_get_information(RT_Object_Class_Semaphore);
    c534:	f7fe fa4e 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c538:	4e3d      	ldr	r6, [pc, #244]	; (c630 <list_sem+0x10c>)
    return _list_sem(&info->object_list);
    c53a:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_Semaphore);
    c53c:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    c53e:	0030      	movs	r0, r6
    return _list_sem(&info->object_list);
    c540:	4699      	mov	r9, r3
    int max_length = rt_strlen(type_name), length;
    c542:	f7fd fc73 	bl	9e2c <rt_strlen>
    c546:	4680      	mov	r8, r0
    rt_enter_critical();
    c548:	f7fe fc7c 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c54c:	686c      	ldr	r4, [r5, #4]
    c54e:	45a1      	cmp	r9, r4
    c550:	d009      	beq.n	c566 <list_sem+0x42>
        length = rt_strlen(object->name);
    c552:	0020      	movs	r0, r4
    c554:	380c      	subs	r0, #12
    c556:	f7fd fc69 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c55a:	4580      	cmp	r8, r0
    c55c:	da00      	bge.n	c560 <list_sem+0x3c>
    c55e:	4680      	mov	r8, r0
    for (node = list->next; node != list; node = node->next)
    c560:	6824      	ldr	r4, [r4, #0]
    c562:	45a1      	cmp	r9, r4
    c564:	d1f5      	bne.n	c552 <list_sem+0x2e>
    rt_exit_critical();
    c566:	f7fe fc79 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c56a:	4643      	mov	r3, r8
    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title); object_split(maxlen);
    c56c:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c56e:	2b08      	cmp	r3, #8
    c570:	dc4c      	bgt.n	c60c <list_sem+0xe8>
    c572:	2b00      	cmp	r3, #0
    c574:	d04a      	beq.n	c60c <list_sem+0xe8>
    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title); object_split(maxlen);
    c576:	4641      	mov	r1, r8
    c578:	482e      	ldr	r0, [pc, #184]	; (c634 <list_sem+0x110>)
    c57a:	f7fd fe5f 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c57e:	4643      	mov	r3, r8
    c580:	1e5c      	subs	r4, r3, #1
    c582:	4e2d      	ldr	r6, [pc, #180]	; (c638 <list_sem+0x114>)
    c584:	0030      	movs	r0, r6
    c586:	f7fd fe59 	bl	a23c <rt_kprintf>
    c58a:	3c01      	subs	r4, #1
    c58c:	d2fa      	bcs.n	c584 <list_sem+0x60>
    rt_kprintf(     " --- --------------\n");
    c58e:	482b      	ldr	r0, [pc, #172]	; (c63c <list_sem+0x118>)
    c590:	f7fd fe54 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c594:	686e      	ldr	r6, [r5, #4]
    c596:	45b1      	cmp	r9, r6
    c598:	d030      	beq.n	c5fc <list_sem+0xd8>
            rt_kprintf("%-*.*s %03d %d\n",
    c59a:	4b29      	ldr	r3, [pc, #164]	; (c640 <list_sem+0x11c>)
            rt_kprintf("/");
    c59c:	4f29      	ldr	r7, [pc, #164]	; (c644 <list_sem+0x120>)
            rt_kprintf("%-*.*s %03d %d\n",
    c59e:	469a      	mov	sl, r3
        if (!rt_list_isempty(&sem->parent.suspend_thread))
    c5a0:	0031      	movs	r1, r6
    c5a2:	0033      	movs	r3, r6
    return l->next == l;
    c5a4:	68b4      	ldr	r4, [r6, #8]
    c5a6:	3108      	adds	r1, #8
    c5a8:	3b0c      	subs	r3, #12
    c5aa:	42a1      	cmp	r1, r4
    c5ac:	d036      	beq.n	c61c <list_sem+0xf8>
    unsigned int len = 0;
    c5ae:	2200      	movs	r2, #0
            rt_kprintf("%-*.*s %03d %d:",
    c5b0:	8b98      	ldrh	r0, [r3, #28]
    while (p->next != l)
    c5b2:	6824      	ldr	r4, [r4, #0]
        len ++;
    c5b4:	3201      	adds	r2, #1
    while (p->next != l)
    c5b6:	42a1      	cmp	r1, r4
    c5b8:	d1fb      	bne.n	c5b2 <list_sem+0x8e>
    c5ba:	9201      	str	r2, [sp, #4]
    c5bc:	9000      	str	r0, [sp, #0]
    c5be:	2208      	movs	r2, #8
    c5c0:	4641      	mov	r1, r8
    c5c2:	4821      	ldr	r0, [pc, #132]	; (c648 <list_sem+0x124>)
    c5c4:	f7fd fe3a 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c5c8:	68b5      	ldr	r5, [r6, #8]
    c5ca:	42ac      	cmp	r4, r5
    c5cc:	d010      	beq.n	c5f0 <list_sem+0xcc>
    c5ce:	4b1f      	ldr	r3, [pc, #124]	; (c64c <list_sem+0x128>)
    c5d0:	469b      	mov	fp, r3
    c5d2:	e005      	b.n	c5e0 <list_sem+0xbc>
            rt_kprintf("/");
    c5d4:	0038      	movs	r0, r7
    c5d6:	f7fd fe31 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c5da:	682d      	ldr	r5, [r5, #0]
    c5dc:	42ac      	cmp	r4, r5
    c5de:	d007      	beq.n	c5f0 <list_sem+0xcc>
        rt_kprintf("%s", thread->name);
    c5e0:	0029      	movs	r1, r5
    c5e2:	4658      	mov	r0, fp
    c5e4:	3914      	subs	r1, #20
    c5e6:	f7fd fe29 	bl	a23c <rt_kprintf>
        if (node->next != list)
    c5ea:	682b      	ldr	r3, [r5, #0]
    c5ec:	429c      	cmp	r4, r3
    c5ee:	d1f1      	bne.n	c5d4 <list_sem+0xb0>
            rt_kprintf("\n");
    c5f0:	4817      	ldr	r0, [pc, #92]	; (c650 <list_sem+0x12c>)
    c5f2:	f7fd fe23 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c5f6:	6836      	ldr	r6, [r6, #0]
    c5f8:	45b1      	cmp	r9, r6
    c5fa:	d1d1      	bne.n	c5a0 <list_sem+0x7c>
}
    c5fc:	2000      	movs	r0, #0
    c5fe:	b003      	add	sp, #12
    c600:	bcf0      	pop	{r4, r5, r6, r7}
    c602:	46bb      	mov	fp, r7
    c604:	46b2      	mov	sl, r6
    c606:	46a9      	mov	r9, r5
    c608:	46a0      	mov	r8, r4
    c60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s v   suspend thread\n", maxlen, item_title); object_split(maxlen);
    c60c:	2108      	movs	r1, #8
    c60e:	4809      	ldr	r0, [pc, #36]	; (c634 <list_sem+0x110>)
    c610:	f7fd fe14 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c614:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    c616:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c618:	4698      	mov	r8, r3
    c61a:	e7b2      	b.n	c582 <list_sem+0x5e>
            rt_kprintf("%-*.*s %03d %d\n",
    c61c:	2200      	movs	r2, #0
    c61e:	9201      	str	r2, [sp, #4]
    c620:	8b9a      	ldrh	r2, [r3, #28]
    c622:	4641      	mov	r1, r8
    c624:	9200      	str	r2, [sp, #0]
    c626:	4650      	mov	r0, sl
    c628:	2208      	movs	r2, #8
    c62a:	f7fd fe07 	bl	a23c <rt_kprintf>
    c62e:	e7e2      	b.n	c5f6 <list_sem+0xd2>
    c630:	00015fc0 	.word	0x00015fc0
    c634:	00015fcc 	.word	0x00015fcc
    c638:	00016990 	.word	0x00016990
    c63c:	00015fe8 	.word	0x00015fe8
    c640:	00016010 	.word	0x00016010
    c644:	00015f40 	.word	0x00015f40
    c648:	00016000 	.word	0x00016000
    c64c:	00014414 	.word	0x00014414
    c650:	00015c60 	.word	0x00015c60

0000c654 <list_mailbox>:
{
    c654:	b5f0      	push	{r4, r5, r6, r7, lr}
    c656:	46de      	mov	lr, fp
    c658:	464e      	mov	r6, r9
    c65a:	4645      	mov	r5, r8
    c65c:	4657      	mov	r7, sl
    c65e:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_MailBox);
    c660:	2004      	movs	r0, #4
{
    c662:	b085      	sub	sp, #20
    info = rt_object_get_information(RT_Object_Class_MailBox);
    c664:	f7fe f9b6 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c668:	4e3f      	ldr	r6, [pc, #252]	; (c768 <list_mailbox+0x114>)
    return _list_mailbox(&info->object_list);
    c66a:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_MailBox);
    c66c:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    c66e:	0030      	movs	r0, r6
    return _list_mailbox(&info->object_list);
    c670:	4699      	mov	r9, r3
    int max_length = rt_strlen(type_name), length;
    c672:	f7fd fbdb 	bl	9e2c <rt_strlen>
    c676:	4680      	mov	r8, r0
    rt_enter_critical();
    c678:	f7fe fbe4 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c67c:	686c      	ldr	r4, [r5, #4]
    c67e:	45a1      	cmp	r9, r4
    c680:	d009      	beq.n	c696 <list_mailbox+0x42>
        length = rt_strlen(object->name);
    c682:	0020      	movs	r0, r4
    c684:	380c      	subs	r0, #12
    c686:	f7fd fbd1 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c68a:	4580      	cmp	r8, r0
    c68c:	da00      	bge.n	c690 <list_mailbox+0x3c>
    c68e:	4680      	mov	r8, r0
    for (node = list->next; node != list; node = node->next)
    c690:	6824      	ldr	r4, [r4, #0]
    c692:	45a1      	cmp	r9, r4
    c694:	d1f5      	bne.n	c682 <list_mailbox+0x2e>
    rt_exit_critical();
    c696:	f7fe fbe1 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c69a:	4643      	mov	r3, r8
    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title); object_split(maxlen);
    c69c:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c69e:	2b08      	cmp	r3, #8
    c6a0:	dc4e      	bgt.n	c740 <list_mailbox+0xec>
    c6a2:	2b00      	cmp	r3, #0
    c6a4:	d04c      	beq.n	c740 <list_mailbox+0xec>
    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title); object_split(maxlen);
    c6a6:	4641      	mov	r1, r8
    c6a8:	4830      	ldr	r0, [pc, #192]	; (c76c <list_mailbox+0x118>)
    c6aa:	f7fd fdc7 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c6ae:	4643      	mov	r3, r8
    c6b0:	1e5c      	subs	r4, r3, #1
    c6b2:	4e2f      	ldr	r6, [pc, #188]	; (c770 <list_mailbox+0x11c>)
    c6b4:	0030      	movs	r0, r6
    c6b6:	f7fd fdc1 	bl	a23c <rt_kprintf>
    c6ba:	3c01      	subs	r4, #1
    c6bc:	d2fa      	bcs.n	c6b4 <list_mailbox+0x60>
    rt_kprintf(     " ----  ---- --------------\n");
    c6be:	482d      	ldr	r0, [pc, #180]	; (c774 <list_mailbox+0x120>)
    c6c0:	f7fd fdbc 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c6c4:	686e      	ldr	r6, [r5, #4]
    c6c6:	45b1      	cmp	r9, r6
    c6c8:	d032      	beq.n	c730 <list_mailbox+0xdc>
            rt_kprintf("%-*.*s %04d  %04d %d\n",
    c6ca:	4b2b      	ldr	r3, [pc, #172]	; (c778 <list_mailbox+0x124>)
            rt_kprintf("/");
    c6cc:	4f2b      	ldr	r7, [pc, #172]	; (c77c <list_mailbox+0x128>)
            rt_kprintf("%-*.*s %04d  %04d %d\n",
    c6ce:	469a      	mov	sl, r3
        if (!rt_list_isempty(&m->parent.suspend_thread))
    c6d0:	0031      	movs	r1, r6
    c6d2:	0033      	movs	r3, r6
    return l->next == l;
    c6d4:	68b4      	ldr	r4, [r6, #8]
    c6d6:	3108      	adds	r1, #8
    c6d8:	3b0c      	subs	r3, #12
    c6da:	42a1      	cmp	r1, r4
    c6dc:	d038      	beq.n	c750 <list_mailbox+0xfc>
    unsigned int len = 0;
    c6de:	2200      	movs	r2, #0
            rt_kprintf("%-*.*s %04d  %04d %d:",
    c6e0:	8c58      	ldrh	r0, [r3, #34]	; 0x22
    c6e2:	8c1d      	ldrh	r5, [r3, #32]
    while (p->next != l)
    c6e4:	6824      	ldr	r4, [r4, #0]
        len ++;
    c6e6:	3201      	adds	r2, #1
    while (p->next != l)
    c6e8:	42a1      	cmp	r1, r4
    c6ea:	d1fb      	bne.n	c6e4 <list_mailbox+0x90>
    c6ec:	9202      	str	r2, [sp, #8]
    c6ee:	9501      	str	r5, [sp, #4]
    c6f0:	9000      	str	r0, [sp, #0]
    c6f2:	2208      	movs	r2, #8
    c6f4:	4641      	mov	r1, r8
    c6f6:	4822      	ldr	r0, [pc, #136]	; (c780 <list_mailbox+0x12c>)
    c6f8:	f7fd fda0 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c6fc:	68b5      	ldr	r5, [r6, #8]
    c6fe:	42ac      	cmp	r4, r5
    c700:	d010      	beq.n	c724 <list_mailbox+0xd0>
    c702:	4b20      	ldr	r3, [pc, #128]	; (c784 <list_mailbox+0x130>)
    c704:	469b      	mov	fp, r3
    c706:	e005      	b.n	c714 <list_mailbox+0xc0>
            rt_kprintf("/");
    c708:	0038      	movs	r0, r7
    c70a:	f7fd fd97 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c70e:	682d      	ldr	r5, [r5, #0]
    c710:	42ac      	cmp	r4, r5
    c712:	d007      	beq.n	c724 <list_mailbox+0xd0>
        rt_kprintf("%s", thread->name);
    c714:	0029      	movs	r1, r5
    c716:	4658      	mov	r0, fp
    c718:	3914      	subs	r1, #20
    c71a:	f7fd fd8f 	bl	a23c <rt_kprintf>
        if (node->next != list)
    c71e:	682b      	ldr	r3, [r5, #0]
    c720:	429c      	cmp	r4, r3
    c722:	d1f1      	bne.n	c708 <list_mailbox+0xb4>
            rt_kprintf("\n");
    c724:	4818      	ldr	r0, [pc, #96]	; (c788 <list_mailbox+0x134>)
    c726:	f7fd fd89 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c72a:	6836      	ldr	r6, [r6, #0]
    c72c:	45b1      	cmp	r9, r6
    c72e:	d1cf      	bne.n	c6d0 <list_mailbox+0x7c>
}
    c730:	2000      	movs	r0, #0
    c732:	b005      	add	sp, #20
    c734:	bcf0      	pop	{r4, r5, r6, r7}
    c736:	46bb      	mov	fp, r7
    c738:	46b2      	mov	sl, r6
    c73a:	46a9      	mov	r9, r5
    c73c:	46a0      	mov	r8, r4
    c73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title); object_split(maxlen);
    c740:	2108      	movs	r1, #8
    c742:	480a      	ldr	r0, [pc, #40]	; (c76c <list_mailbox+0x118>)
    c744:	f7fd fd7a 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c748:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    c74a:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c74c:	4698      	mov	r8, r3
    c74e:	e7b0      	b.n	c6b2 <list_mailbox+0x5e>
            rt_kprintf("%-*.*s %04d  %04d %d\n",
    c750:	2200      	movs	r2, #0
    c752:	9202      	str	r2, [sp, #8]
    c754:	8c1a      	ldrh	r2, [r3, #32]
    c756:	4641      	mov	r1, r8
    c758:	9201      	str	r2, [sp, #4]
    c75a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    c75c:	4650      	mov	r0, sl
    c75e:	9200      	str	r2, [sp, #0]
    c760:	2208      	movs	r2, #8
    c762:	f7fd fd6b 	bl	a23c <rt_kprintf>
    c766:	e7e0      	b.n	c72a <list_mailbox+0xd6>
    c768:	00016020 	.word	0x00016020
    c76c:	00016028 	.word	0x00016028
    c770:	00016990 	.word	0x00016990
    c774:	0001604c 	.word	0x0001604c
    c778:	00016080 	.word	0x00016080
    c77c:	00015f40 	.word	0x00015f40
    c780:	00016068 	.word	0x00016068
    c784:	00014414 	.word	0x00014414
    c788:	00015c60 	.word	0x00015c60

0000c78c <list_mempool>:
{
    c78c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78e:	46de      	mov	lr, fp
    c790:	464e      	mov	r6, r9
    c792:	4657      	mov	r7, sl
    c794:	4645      	mov	r5, r8
    c796:	b5e0      	push	{r5, r6, r7, lr}
    info = rt_object_get_information(RT_Object_Class_MemPool);
    c798:	2007      	movs	r0, #7
{
    c79a:	b085      	sub	sp, #20
    info = rt_object_get_information(RT_Object_Class_MemPool);
    c79c:	f7fe f91a 	bl	a9d4 <rt_object_get_information>
    int max_length = rt_strlen(type_name), length;
    c7a0:	4e3e      	ldr	r6, [pc, #248]	; (c89c <list_mempool+0x110>)
    return _list_mempool(&info->object_list);
    c7a2:	1d03      	adds	r3, r0, #4
    info = rt_object_get_information(RT_Object_Class_MemPool);
    c7a4:	0005      	movs	r5, r0
    int max_length = rt_strlen(type_name), length;
    c7a6:	0030      	movs	r0, r6
    return _list_mempool(&info->object_list);
    c7a8:	469a      	mov	sl, r3
    int max_length = rt_strlen(type_name), length;
    c7aa:	f7fd fb3f 	bl	9e2c <rt_strlen>
    c7ae:	4681      	mov	r9, r0
    rt_enter_critical();
    c7b0:	f7fe fb48 	bl	ae44 <rt_enter_critical>
    for (node = list->next; node != list; node = node->next)
    c7b4:	686c      	ldr	r4, [r5, #4]
    c7b6:	45a2      	cmp	sl, r4
    c7b8:	d009      	beq.n	c7ce <list_mempool+0x42>
        length = rt_strlen(object->name);
    c7ba:	0020      	movs	r0, r4
    c7bc:	380c      	subs	r0, #12
    c7be:	f7fd fb35 	bl	9e2c <rt_strlen>
        if (length > max_length) max_length = length;
    c7c2:	4581      	cmp	r9, r0
    c7c4:	da00      	bge.n	c7c8 <list_mempool+0x3c>
    c7c6:	4681      	mov	r9, r0
    for (node = list->next; node != list; node = node->next)
    c7c8:	6824      	ldr	r4, [r4, #0]
    c7ca:	45a2      	cmp	sl, r4
    c7cc:	d1f5      	bne.n	c7ba <list_mempool+0x2e>
    rt_exit_critical();
    c7ce:	f7fe fb45 	bl	ae5c <rt_exit_critical>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c7d2:	464b      	mov	r3, r9
    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title); object_split(maxlen);
    c7d4:	0032      	movs	r2, r6
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c7d6:	2b08      	cmp	r3, #8
    c7d8:	dc4b      	bgt.n	c872 <list_mempool+0xe6>
    c7da:	2b00      	cmp	r3, #0
    c7dc:	d049      	beq.n	c872 <list_mempool+0xe6>
    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title); object_split(maxlen);
    c7de:	4649      	mov	r1, r9
    c7e0:	482f      	ldr	r0, [pc, #188]	; (c8a0 <list_mempool+0x114>)
    c7e2:	f7fd fd2b 	bl	a23c <rt_kprintf>
    while (len--) rt_kprintf("-");
    c7e6:	464b      	mov	r3, r9
    c7e8:	1e5c      	subs	r4, r3, #1
    c7ea:	4e2e      	ldr	r6, [pc, #184]	; (c8a4 <list_mempool+0x118>)
    c7ec:	0030      	movs	r0, r6
    c7ee:	f7fd fd25 	bl	a23c <rt_kprintf>
    c7f2:	3c01      	subs	r4, #1
    c7f4:	d2fa      	bcs.n	c7ec <list_mempool+0x60>
    rt_kprintf(     " ----  ----  ---- --------------\n");
    c7f6:	482c      	ldr	r0, [pc, #176]	; (c8a8 <list_mempool+0x11c>)
    c7f8:	f7fd fd20 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c7fc:	686e      	ldr	r6, [r5, #4]
    c7fe:	45b2      	cmp	sl, r6
    c800:	d02f      	beq.n	c862 <list_mempool+0xd6>
            rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
    c802:	4b2a      	ldr	r3, [pc, #168]	; (c8ac <list_mempool+0x120>)
    c804:	469b      	mov	fp, r3
            rt_kprintf("/");
    c806:	4b2a      	ldr	r3, [pc, #168]	; (c8b0 <list_mempool+0x124>)
    c808:	4698      	mov	r8, r3
        if (mp->suspend_thread_count > 0)
    c80a:	0033      	movs	r3, r6
    c80c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c80e:	3b0c      	subs	r3, #12
            rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
    c810:	9203      	str	r2, [sp, #12]
        if (mp->suspend_thread_count > 0)
    c812:	2a00      	cmp	r2, #0
    c814:	d035      	beq.n	c882 <list_mempool+0xf6>
            show_wait_queue(&(mp->suspend_thread));
    c816:	0035      	movs	r5, r6
            rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
    c818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c81a:	4649      	mov	r1, r9
    c81c:	9202      	str	r2, [sp, #8]
    c81e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c820:	4824      	ldr	r0, [pc, #144]	; (c8b4 <list_mempool+0x128>)
    c822:	9201      	str	r2, [sp, #4]
    c824:	69da      	ldr	r2, [r3, #28]
            show_wait_queue(&(mp->suspend_thread));
    c826:	3520      	adds	r5, #32
            rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
    c828:	9200      	str	r2, [sp, #0]
    c82a:	2208      	movs	r2, #8
    c82c:	f7fd fd06 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c830:	6a34      	ldr	r4, [r6, #32]
    c832:	42a5      	cmp	r5, r4
    c834:	d00f      	beq.n	c856 <list_mempool+0xca>
    c836:	4f20      	ldr	r7, [pc, #128]	; (c8b8 <list_mempool+0x12c>)
    c838:	e005      	b.n	c846 <list_mempool+0xba>
            rt_kprintf("/");
    c83a:	4640      	mov	r0, r8
    c83c:	f7fd fcfe 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c840:	6824      	ldr	r4, [r4, #0]
    c842:	42a5      	cmp	r5, r4
    c844:	d007      	beq.n	c856 <list_mempool+0xca>
        rt_kprintf("%s", thread->name);
    c846:	0021      	movs	r1, r4
    c848:	0038      	movs	r0, r7
    c84a:	3914      	subs	r1, #20
    c84c:	f7fd fcf6 	bl	a23c <rt_kprintf>
        if (node->next != list)
    c850:	6823      	ldr	r3, [r4, #0]
    c852:	429d      	cmp	r5, r3
    c854:	d1f1      	bne.n	c83a <list_mempool+0xae>
            rt_kprintf("\n");
    c856:	4819      	ldr	r0, [pc, #100]	; (c8bc <list_mempool+0x130>)
    c858:	f7fd fcf0 	bl	a23c <rt_kprintf>
    for (node = list->next; node != list; node = node->next)
    c85c:	6836      	ldr	r6, [r6, #0]
    c85e:	45b2      	cmp	sl, r6
    c860:	d1d3      	bne.n	c80a <list_mempool+0x7e>
}
    c862:	2000      	movs	r0, #0
    c864:	b005      	add	sp, #20
    c866:	bcf0      	pop	{r4, r5, r6, r7}
    c868:	46bb      	mov	fp, r7
    c86a:	46b2      	mov	sl, r6
    c86c:	46a9      	mov	r9, r5
    c86e:	46a0      	mov	r8, r4
    c870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rt_kprintf("%-*.s block total free suspend thread\n", maxlen, item_title); object_split(maxlen);
    c872:	2108      	movs	r1, #8
    c874:	480a      	ldr	r0, [pc, #40]	; (c8a0 <list_mempool+0x114>)
    c876:	f7fd fce1 	bl	a23c <rt_kprintf>
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c87a:	2308      	movs	r3, #8
    while (len--) rt_kprintf("-");
    c87c:	2407      	movs	r4, #7
    if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
    c87e:	4699      	mov	r9, r3
    c880:	e7b3      	b.n	c7ea <list_mempool+0x5e>
            rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
    c882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c884:	4649      	mov	r1, r9
    c886:	9202      	str	r2, [sp, #8]
    c888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c88a:	4658      	mov	r0, fp
    c88c:	9201      	str	r2, [sp, #4]
    c88e:	69da      	ldr	r2, [r3, #28]
    c890:	9200      	str	r2, [sp, #0]
    c892:	2208      	movs	r2, #8
    c894:	f7fd fcd2 	bl	a23c <rt_kprintf>
    c898:	e7e0      	b.n	c85c <list_mempool+0xd0>
    c89a:	46c0      	nop			; (mov r8, r8)
    c89c:	00016098 	.word	0x00016098
    c8a0:	000160a0 	.word	0x000160a0
    c8a4:	00016990 	.word	0x00016990
    c8a8:	000160c8 	.word	0x000160c8
    c8ac:	00016108 	.word	0x00016108
    c8b0:	00015f40 	.word	0x00015f40
    c8b4:	000160ec 	.word	0x000160ec
    c8b8:	00014414 	.word	0x00014414
    c8bc:	00015c60 	.word	0x00015c60

0000c8c0 <msh_help>:
}
FINSH_FUNCTION_EXPORT_ALIAS(msh_enter, msh, use module shell);
#endif

int msh_help(int argc, char **argv)
{
    c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8c2:	46c6      	mov	lr, r8
    rt_kprintf("RT-Thread shell commands:\n");
    c8c4:	4812      	ldr	r0, [pc, #72]	; (c910 <msh_help+0x50>)
{
    c8c6:	b500      	push	{lr}
    rt_kprintf("RT-Thread shell commands:\n");
    c8c8:	f7fd fcb8 	bl	a23c <rt_kprintf>
    {
        struct finsh_syscall *index;

        for (index = _syscall_table_begin;
    c8cc:	4b11      	ldr	r3, [pc, #68]	; (c914 <msh_help+0x54>)
                index < _syscall_table_end;
    c8ce:	4e12      	ldr	r6, [pc, #72]	; (c918 <msh_help+0x58>)
        for (index = _syscall_table_begin;
    c8d0:	681c      	ldr	r4, [r3, #0]
    c8d2:	6833      	ldr	r3, [r6, #0]
    c8d4:	429c      	cmp	r4, r3
    c8d6:	d213      	bcs.n	c900 <msh_help+0x40>
                FINSH_NEXT_SYSCALL(index))
        {
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
#if defined(FINSH_USING_DESCRIPTION) && defined(FINSH_USING_SYMTAB)
            rt_kprintf("%-16s - %s\n", &index->name[6], index->desc);
    c8d8:	4b10      	ldr	r3, [pc, #64]	; (c91c <msh_help+0x5c>)
    c8da:	4f11      	ldr	r7, [pc, #68]	; (c920 <msh_help+0x60>)
    c8dc:	4698      	mov	r8, r3
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
    c8de:	6825      	ldr	r5, [r4, #0]
    c8e0:	2206      	movs	r2, #6
    c8e2:	0039      	movs	r1, r7
    c8e4:	0028      	movs	r0, r5
    c8e6:	f002 fed7 	bl	f698 <strncmp>
    c8ea:	2800      	cmp	r0, #0
    c8ec:	d104      	bne.n	c8f8 <msh_help+0x38>
            rt_kprintf("%-16s - %s\n", &index->name[6], index->desc);
    c8ee:	4640      	mov	r0, r8
    c8f0:	6862      	ldr	r2, [r4, #4]
    c8f2:	1da9      	adds	r1, r5, #6
    c8f4:	f7fd fca2 	bl	a23c <rt_kprintf>
        for (index = _syscall_table_begin;
    c8f8:	6833      	ldr	r3, [r6, #0]
                FINSH_NEXT_SYSCALL(index))
    c8fa:	340c      	adds	r4, #12
        for (index = _syscall_table_begin;
    c8fc:	42a3      	cmp	r3, r4
    c8fe:	d8ee      	bhi.n	c8de <msh_help+0x1e>
#else
            rt_kprintf("%s ", &index->name[6]);
#endif
        }
    }
    rt_kprintf("\n");
    c900:	4808      	ldr	r0, [pc, #32]	; (c924 <msh_help+0x64>)
    c902:	f7fd fc9b 	bl	a23c <rt_kprintf>

    return 0;
}
    c906:	2000      	movs	r0, #0
    c908:	bc80      	pop	{r7}
    c90a:	46b8      	mov	r8, r7
    c90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c90e:	46c0      	nop			; (mov r8, r8)
    c910:	000164a0 	.word	0x000164a0
    c914:	00018744 	.word	0x00018744
    c918:	00018748 	.word	0x00018748
    c91c:	000164c4 	.word	0x000164c4
    c920:	000164bc 	.word	0x000164bc
    c924:	00015c60 	.word	0x00015c60

0000c928 <msh_is_used>:
}
    c928:	2001      	movs	r0, #1
    c92a:	4770      	bx	lr

0000c92c <msh_exec>:
    return 0;
}
#endif

int msh_exec(char *cmd, rt_size_t length)
{
    c92c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c92e:	464e      	mov	r6, r9
    c930:	46de      	mov	lr, fp
    c932:	4657      	mov	r7, sl
    c934:	4645      	mov	r5, r8
    c936:	b5e0      	push	{r5, r6, r7, lr}
    int cmd_ret;

    /* strim the beginning of command */
    while (*cmd  == ' ' || *cmd == '\t')
    c938:	0006      	movs	r6, r0
{
    c93a:	b08d      	sub	sp, #52	; 0x34
    c93c:	1841      	adds	r1, r0, r1
    while (*cmd  == ' ' || *cmd == '\t')
    c93e:	7834      	ldrb	r4, [r6, #0]
    c940:	1b8d      	subs	r5, r1, r6
    c942:	2c20      	cmp	r4, #32
    c944:	d001      	beq.n	c94a <msh_exec+0x1e>
    c946:	2c09      	cmp	r4, #9
    c948:	d101      	bne.n	c94e <msh_exec+0x22>
    {
        cmd++;
    c94a:	3601      	adds	r6, #1
        length--;
    c94c:	e7f7      	b.n	c93e <msh_exec+0x12>
    }

    if (length == 0)
        return 0;
    c94e:	2000      	movs	r0, #0
    if (length == 0)
    c950:	2d00      	cmp	r5, #0
    c952:	d106      	bne.n	c962 <msh_exec+0x36>
        }
        *tcmd = '\0';
    }
    rt_kprintf("%s: command not found.\n", cmd);
    return -1;
}
    c954:	b00d      	add	sp, #52	; 0x34
    c956:	bcf0      	pop	{r4, r5, r6, r7}
    c958:	46bb      	mov	fp, r7
    c95a:	46b2      	mov	sl, r6
    c95c:	46a9      	mov	r9, r5
    c95e:	46a0      	mov	r8, r4
    c960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c962:	2300      	movs	r3, #0
    c964:	4698      	mov	r8, r3
    c966:	e001      	b.n	c96c <msh_exec+0x40>
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
    c968:	45a8      	cmp	r8, r5
    c96a:	d00a      	beq.n	c982 <msh_exec+0x56>
        cmd0_size ++;
    c96c:	4643      	mov	r3, r8
    c96e:	9301      	str	r3, [sp, #4]
    c970:	2301      	movs	r3, #1
    c972:	469c      	mov	ip, r3
    c974:	44e0      	add	r8, ip
    while ((cmd[cmd0_size] != ' ' && cmd[cmd0_size] != '\t') && cmd0_size < length)
    c976:	4643      	mov	r3, r8
    c978:	5cf3      	ldrb	r3, [r6, r3]
    c97a:	2b20      	cmp	r3, #32
    c97c:	d001      	beq.n	c982 <msh_exec+0x56>
    c97e:	2b09      	cmp	r3, #9
    c980:	d1f2      	bne.n	c968 <msh_exec+0x3c>
    for (index = _syscall_table_begin;
    c982:	4b59      	ldr	r3, [pc, #356]	; (cae8 <msh_exec+0x1bc>)
    c984:	681f      	ldr	r7, [r3, #0]
            index < _syscall_table_end;
    c986:	4b59      	ldr	r3, [pc, #356]	; (caec <msh_exec+0x1c0>)
    c988:	681b      	ldr	r3, [r3, #0]
    c98a:	469a      	mov	sl, r3
    for (index = _syscall_table_begin;
    c98c:	42bb      	cmp	r3, r7
    c98e:	d91a      	bls.n	c9c6 <msh_exec+0x9a>
    c990:	4b57      	ldr	r3, [pc, #348]	; (caf0 <msh_exec+0x1c4>)
    c992:	469b      	mov	fp, r3
        if (strncmp(index->name, "__cmd_", 6) != 0) continue;
    c994:	683b      	ldr	r3, [r7, #0]
    c996:	2206      	movs	r2, #6
    c998:	4659      	mov	r1, fp
    c99a:	0018      	movs	r0, r3
    c99c:	4699      	mov	r9, r3
    c99e:	f002 fe7b 	bl	f698 <strncmp>
    c9a2:	2800      	cmp	r0, #0
    c9a4:	d10c      	bne.n	c9c0 <msh_exec+0x94>
        if (strncmp(&index->name[6], cmd, size) == 0 &&
    c9a6:	464b      	mov	r3, r9
    c9a8:	4642      	mov	r2, r8
    c9aa:	0031      	movs	r1, r6
    c9ac:	1d98      	adds	r0, r3, #6
    c9ae:	f002 fe73 	bl	f698 <strncmp>
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d104      	bne.n	c9c0 <msh_exec+0x94>
                index->name[6 + size] == '\0')
    c9b6:	9b01      	ldr	r3, [sp, #4]
    c9b8:	444b      	add	r3, r9
        if (strncmp(&index->name[6], cmd, size) == 0 &&
    c9ba:	79db      	ldrb	r3, [r3, #7]
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d013      	beq.n	c9e8 <msh_exec+0xbc>
            FINSH_NEXT_SYSCALL(index))
    c9c0:	370c      	adds	r7, #12
    for (index = _syscall_table_begin;
    c9c2:	45ba      	cmp	sl, r7
    c9c4:	d8e6      	bhi.n	c994 <msh_exec+0x68>
    return argc;
    c9c6:	0033      	movs	r3, r6
    c9c8:	e003      	b.n	c9d2 <msh_exec+0xa6>
        while (*tcmd != ' ' && *tcmd != '\0')
    c9ca:	785c      	ldrb	r4, [r3, #1]
            tcmd++;
    c9cc:	3301      	adds	r3, #1
        while (*tcmd != ' ' && *tcmd != '\0')
    c9ce:	2c20      	cmp	r4, #32
    c9d0:	d001      	beq.n	c9d6 <msh_exec+0xaa>
    c9d2:	2c00      	cmp	r4, #0
    c9d4:	d1f9      	bne.n	c9ca <msh_exec+0x9e>
        *tcmd = '\0';
    c9d6:	2200      	movs	r2, #0
    rt_kprintf("%s: command not found.\n", cmd);
    c9d8:	4846      	ldr	r0, [pc, #280]	; (caf4 <msh_exec+0x1c8>)
    c9da:	0031      	movs	r1, r6
        *tcmd = '\0';
    c9dc:	701a      	strb	r2, [r3, #0]
    rt_kprintf("%s: command not found.\n", cmd);
    c9de:	f7fd fc2d 	bl	a23c <rt_kprintf>
    return -1;
    c9e2:	2001      	movs	r0, #1
    c9e4:	4240      	negs	r0, r0
    c9e6:	e7b5      	b.n	c954 <msh_exec+0x28>
            cmd_func = (cmd_function_t)index->func;
    c9e8:	68bb      	ldr	r3, [r7, #8]
    c9ea:	4698      	mov	r8, r3
    if (cmd_func == RT_NULL)
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	d0ea      	beq.n	c9c6 <msh_exec+0x9a>
    memset(argv, 0x00, sizeof(argv));
    c9f0:	2228      	movs	r2, #40	; 0x28
    c9f2:	2100      	movs	r1, #0
    c9f4:	a802      	add	r0, sp, #8
    c9f6:	f002 f8f5 	bl	ebe4 <memset>
    c9fa:	2201      	movs	r2, #1
    c9fc:	af02      	add	r7, sp, #8
    c9fe:	4694      	mov	ip, r2
    ca00:	46b9      	mov	r9, r7
    ca02:	0033      	movs	r3, r6
    position = 0; argc = 0;
    ca04:	2200      	movs	r2, #0
            *ptr = '\0';
    ca06:	2000      	movs	r0, #0
    ca08:	4661      	mov	r1, ip
    ca0a:	3901      	subs	r1, #1
    ca0c:	468a      	mov	sl, r1
    ca0e:	e003      	b.n	ca18 <msh_exec+0xec>
    ca10:	7018      	strb	r0, [r3, #0]
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
    ca12:	785c      	ldrb	r4, [r3, #1]
            ptr ++; position ++;
    ca14:	3301      	adds	r3, #1
    ca16:	3201      	adds	r2, #1
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
    ca18:	2c20      	cmp	r4, #32
    ca1a:	d001      	beq.n	ca20 <msh_exec+0xf4>
    ca1c:	2c09      	cmp	r4, #9
    ca1e:	d116      	bne.n	ca4e <msh_exec+0x122>
    ca20:	42aa      	cmp	r2, r5
    ca22:	d3f5      	bcc.n	ca10 <msh_exec+0xe4>
        if(argc >= FINSH_ARG_MAX)
    ca24:	4653      	mov	r3, sl
    ca26:	2b0a      	cmp	r3, #10
    ca28:	d155      	bne.n	cad6 <msh_exec+0x1aa>
            rt_kprintf("Too many args ! We only Use:\n");
    ca2a:	4833      	ldr	r0, [pc, #204]	; (caf8 <msh_exec+0x1cc>)
    ca2c:	f7fd fc06 	bl	a23c <rt_kprintf>
            for(i = 0; i < argc; i++)
    ca30:	4c32      	ldr	r4, [pc, #200]	; (cafc <msh_exec+0x1d0>)
    ca32:	ad0c      	add	r5, sp, #48	; 0x30
                rt_kprintf("%s ", argv[i]);
    ca34:	cf02      	ldmia	r7!, {r1}
    ca36:	0020      	movs	r0, r4
    ca38:	f7fd fc00 	bl	a23c <rt_kprintf>
            for(i = 0; i < argc; i++)
    ca3c:	42bd      	cmp	r5, r7
    ca3e:	d1f9      	bne.n	ca34 <msh_exec+0x108>
            rt_kprintf("\n");
    ca40:	482f      	ldr	r0, [pc, #188]	; (cb00 <msh_exec+0x1d4>)
    ca42:	f7fd fbfb 	bl	a23c <rt_kprintf>
    return argc;
    ca46:	200a      	movs	r0, #10
    *retp = cmd_func(argc, argv);
    ca48:	a902      	add	r1, sp, #8
    ca4a:	47c0      	blx	r8
    return 0;
    ca4c:	e782      	b.n	c954 <msh_exec+0x28>
        if(argc >= FINSH_ARG_MAX)
    ca4e:	4661      	mov	r1, ip
    ca50:	290b      	cmp	r1, #11
    ca52:	d0ea      	beq.n	ca2a <msh_exec+0xfe>
        if (position >= length) break;
    ca54:	42aa      	cmp	r2, r5
    ca56:	d23e      	bcs.n	cad6 <msh_exec+0x1aa>
        if (*ptr == '"')
    ca58:	2c22      	cmp	r4, #34	; 0x22
    ca5a:	d016      	beq.n	ca8a <msh_exec+0x15e>
            argv[argc] = ptr;
    ca5c:	4649      	mov	r1, r9
    ca5e:	1aac      	subs	r4, r5, r2
    ca60:	600b      	str	r3, [r1, #0]
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
    ca62:	191c      	adds	r4, r3, r4
    ca64:	42a3      	cmp	r3, r4
    ca66:	d030      	beq.n	caca <msh_exec+0x19e>
    ca68:	7859      	ldrb	r1, [r3, #1]
                ptr ++; position ++;
    ca6a:	3301      	adds	r3, #1
    ca6c:	3201      	adds	r2, #1
            while ((*ptr != ' ' && *ptr != '\t') && position < length)
    ca6e:	2920      	cmp	r1, #32
    ca70:	d001      	beq.n	ca76 <msh_exec+0x14a>
    ca72:	2909      	cmp	r1, #9
    ca74:	d1f6      	bne.n	ca64 <msh_exec+0x138>
            if (position >= length) break;
    ca76:	42aa      	cmp	r2, r5
    ca78:	d227      	bcs.n	caca <msh_exec+0x19e>
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
    ca7a:	781c      	ldrb	r4, [r3, #0]
    while (position < length)
    ca7c:	2101      	movs	r1, #1
    ca7e:	468a      	mov	sl, r1
    ca80:	3103      	adds	r1, #3
    ca82:	44d4      	add	ip, sl
    ca84:	468a      	mov	sl, r1
    ca86:	44d1      	add	r9, sl
    ca88:	e7be      	b.n	ca08 <msh_exec+0xdc>
            argv[argc] = ptr; argc ++;
    ca8a:	464c      	mov	r4, r9
            ptr ++; position ++;
    ca8c:	1c59      	adds	r1, r3, #1
            while (*ptr != '"' && position < length)
    ca8e:	785b      	ldrb	r3, [r3, #1]
            ptr ++; position ++;
    ca90:	3201      	adds	r2, #1
            argv[argc] = ptr; argc ++;
    ca92:	6021      	str	r1, [r4, #0]
            while (*ptr != '"' && position < length)
    ca94:	2b22      	cmp	r3, #34	; 0x22
    ca96:	d008      	beq.n	caaa <msh_exec+0x17e>
    ca98:	42aa      	cmp	r2, r5
    ca9a:	d216      	bcs.n	caca <msh_exec+0x19e>
                if (*ptr == '\\')
    ca9c:	2b5c      	cmp	r3, #92	; 0x5c
    ca9e:	d00d      	beq.n	cabc <msh_exec+0x190>
            while (*ptr != '"' && position < length)
    caa0:	784b      	ldrb	r3, [r1, #1]
                ptr ++; position ++;
    caa2:	3101      	adds	r1, #1
    caa4:	3201      	adds	r2, #1
            while (*ptr != '"' && position < length)
    caa6:	2b22      	cmp	r3, #34	; 0x22
    caa8:	d1f6      	bne.n	ca98 <msh_exec+0x16c>
            if (position >= length) break;
    caaa:	42aa      	cmp	r2, r5
    caac:	d20d      	bcs.n	caca <msh_exec+0x19e>
            *ptr = '\0'; ptr ++; position ++;
    caae:	3201      	adds	r2, #1
    cab0:	7008      	strb	r0, [r1, #0]
    cab2:	1c4b      	adds	r3, r1, #1
    while (position < length)
    cab4:	42aa      	cmp	r2, r5
    cab6:	d208      	bcs.n	caca <msh_exec+0x19e>
        while ((*ptr == ' ' || *ptr == '\t') && position < length)
    cab8:	784c      	ldrb	r4, [r1, #1]
    caba:	e7df      	b.n	ca7c <msh_exec+0x150>
                    if (*(ptr + 1) == '"')
    cabc:	784b      	ldrb	r3, [r1, #1]
    cabe:	2b22      	cmp	r3, #34	; 0x22
    cac0:	d005      	beq.n	cace <msh_exec+0x1a2>
                ptr ++; position ++;
    cac2:	3201      	adds	r2, #1
    cac4:	3101      	adds	r1, #1
            while (*ptr != '"' && position < length)
    cac6:	42aa      	cmp	r2, r5
    cac8:	d3e8      	bcc.n	ca9c <msh_exec+0x170>
    return argc;
    caca:	4660      	mov	r0, ip
    if (argc == 0)
    cacc:	e7bc      	b.n	ca48 <msh_exec+0x11c>
            while (*ptr != '"' && position < length)
    cace:	788b      	ldrb	r3, [r1, #2]
                        ptr ++; position ++;
    cad0:	3201      	adds	r2, #1
    cad2:	3101      	adds	r1, #1
    cad4:	e7e5      	b.n	caa2 <msh_exec+0x176>
    return argc;
    cad6:	4650      	mov	r0, sl
    if (argc == 0)
    cad8:	2800      	cmp	r0, #0
    cada:	d1b5      	bne.n	ca48 <msh_exec+0x11c>
        while (*tcmd != ' ' && *tcmd != '\0')
    cadc:	7834      	ldrb	r4, [r6, #0]
    cade:	0033      	movs	r3, r6
    cae0:	2c20      	cmp	r4, #32
    cae2:	d000      	beq.n	cae6 <msh_exec+0x1ba>
    cae4:	e76f      	b.n	c9c6 <msh_exec+0x9a>
    cae6:	e776      	b.n	c9d6 <msh_exec+0xaa>
    cae8:	00018744 	.word	0x00018744
    caec:	00018748 	.word	0x00018748
    caf0:	000164bc 	.word	0x000164bc
    caf4:	000164f4 	.word	0x000164f4
    caf8:	000164d0 	.word	0x000164d0
    cafc:	000164f0 	.word	0x000164f0
    cb00:	00015c60 	.word	0x00015c60

0000cb04 <msh_auto_complete>:
    rt_free(full_path);
}
#endif

void msh_auto_complete(char *prefix)
{
    cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb06:	4657      	mov	r7, sl
    cb08:	46de      	mov	lr, fp
    cb0a:	464e      	mov	r6, r9
    cb0c:	4645      	mov	r5, r8
    cb0e:	b5e0      	push	{r5, r6, r7, lr}
    struct finsh_syscall *index;

    min_length = 0;
    name_ptr = RT_NULL;

    if (*prefix == '\0')
    cb10:	7803      	ldrb	r3, [r0, #0]
{
    cb12:	0007      	movs	r7, r0
    if (*prefix == '\0')
    cb14:	2b00      	cmp	r3, #0
    cb16:	d053      	beq.n	cbc0 <msh_auto_complete+0xbc>
    }
#endif

    /* checks in internal command */
    {
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
    cb18:	4b2c      	ldr	r3, [pc, #176]	; (cbcc <msh_auto_complete+0xc8>)
    cb1a:	681d      	ldr	r5, [r3, #0]
    cb1c:	4b2c      	ldr	r3, [pc, #176]	; (cbd0 <msh_auto_complete+0xcc>)
    cb1e:	469a      	mov	sl, r3
    cb20:	681b      	ldr	r3, [r3, #0]
    cb22:	429d      	cmp	r5, r3
    cb24:	d246      	bcs.n	cbb4 <msh_auto_complete+0xb0>
    name_ptr = RT_NULL;
    cb26:	2300      	movs	r3, #0
    cb28:	4699      	mov	r9, r3
    min_length = 0;
    cb2a:	4698      	mov	r8, r3
    cb2c:	4b29      	ldr	r3, [pc, #164]	; (cbd4 <msh_auto_complete+0xd0>)
    cb2e:	469b      	mov	fp, r3
        {
            /* skip finsh shell function */
            if (strncmp(index->name, "__cmd_", 6) != 0) continue;
    cb30:	682c      	ldr	r4, [r5, #0]
    cb32:	2206      	movs	r2, #6
    cb34:	4659      	mov	r1, fp
    cb36:	0020      	movs	r0, r4
    cb38:	f002 fdae 	bl	f698 <strncmp>
    cb3c:	2800      	cmp	r0, #0
    cb3e:	d12c      	bne.n	cb9a <msh_auto_complete+0x96>

            cmd_name = (const char *) &index->name[6];
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
    cb40:	0038      	movs	r0, r7
    cb42:	f002 fd7b 	bl	f63c <strlen>
            cmd_name = (const char *) &index->name[6];
    cb46:	3406      	adds	r4, #6
            if (strncmp(prefix, cmd_name, strlen(prefix)) == 0)
    cb48:	0002      	movs	r2, r0
    cb4a:	0021      	movs	r1, r4
    cb4c:	0038      	movs	r0, r7
    cb4e:	f002 fda3 	bl	f698 <strncmp>
    cb52:	1e06      	subs	r6, r0, #0
    cb54:	d121      	bne.n	cb9a <msh_auto_complete+0x96>
            {
                if (min_length == 0)
    cb56:	4643      	mov	r3, r8
    cb58:	2b00      	cmp	r3, #0
    cb5a:	d104      	bne.n	cb66 <msh_auto_complete+0x62>
                {
                    /* set name_ptr */
                    name_ptr = cmd_name;
                    /* set initial length */
                    min_length = strlen(name_ptr);
    cb5c:	0020      	movs	r0, r4
    cb5e:	f002 fd6d 	bl	f63c <strlen>
    cb62:	46a1      	mov	r9, r4
    cb64:	4680      	mov	r8, r0
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
    cb66:	464b      	mov	r3, r9
    cb68:	781b      	ldrb	r3, [r3, #0]
    cb6a:	0021      	movs	r1, r4
    cb6c:	464a      	mov	r2, r9
    cb6e:	2b00      	cmp	r3, #0
    cb70:	d107      	bne.n	cb82 <msh_auto_complete+0x7e>
    cb72:	e00b      	b.n	cb8c <msh_auto_complete+0x88>
    cb74:	4298      	cmp	r0, r3
    cb76:	d107      	bne.n	cb88 <msh_auto_complete+0x84>
    cb78:	7853      	ldrb	r3, [r2, #1]
        str ++;
    cb7a:	3201      	adds	r2, #1
        str2 ++;
    cb7c:	3101      	adds	r1, #1
    while ((*str != 0) && (*str2 != 0) && (*str == *str2))
    cb7e:	2b00      	cmp	r3, #0
    cb80:	d002      	beq.n	cb88 <msh_auto_complete+0x84>
    cb82:	7808      	ldrb	r0, [r1, #0]
    cb84:	2800      	cmp	r0, #0
    cb86:	d1f5      	bne.n	cb74 <msh_auto_complete+0x70>
    return (str - str1);
    cb88:	464b      	mov	r3, r9
    cb8a:	1ad6      	subs	r6, r2, r3
                }

                length = str_common(name_ptr, cmd_name);
                if (length < min_length)
    cb8c:	45b0      	cmp	r8, r6
    cb8e:	dd00      	ble.n	cb92 <msh_auto_complete+0x8e>
    cb90:	46b0      	mov	r8, r6
                    min_length = length;

                rt_kprintf("%s\n", cmd_name);
    cb92:	0021      	movs	r1, r4
    cb94:	4810      	ldr	r0, [pc, #64]	; (cbd8 <msh_auto_complete+0xd4>)
    cb96:	f7fd fb51 	bl	a23c <rt_kprintf>
        for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
    cb9a:	4653      	mov	r3, sl
    cb9c:	681b      	ldr	r3, [r3, #0]
    cb9e:	350c      	adds	r5, #12
    cba0:	42ab      	cmp	r3, r5
    cba2:	d8c5      	bhi.n	cb30 <msh_auto_complete+0x2c>
            }
        }
    }

    /* auto complete string */
    if (name_ptr != NULL)
    cba4:	464b      	mov	r3, r9
    cba6:	2b00      	cmp	r3, #0
    cba8:	d004      	beq.n	cbb4 <msh_auto_complete+0xb0>
    {
        rt_strncpy(prefix, name_ptr, min_length);
    cbaa:	4642      	mov	r2, r8
    cbac:	4649      	mov	r1, r9
    cbae:	0038      	movs	r0, r7
    cbb0:	f7fd f90e 	bl	9dd0 <rt_strncpy>
    }

    return ;
}
    cbb4:	bcf0      	pop	{r4, r5, r6, r7}
    cbb6:	46bb      	mov	fp, r7
    cbb8:	46b2      	mov	sl, r6
    cbba:	46a9      	mov	r9, r5
    cbbc:	46a0      	mov	r8, r4
    cbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        msh_help(0, RT_NULL);
    cbc0:	2100      	movs	r1, #0
    cbc2:	2000      	movs	r0, #0
    cbc4:	f7ff fe7c 	bl	c8c0 <msh_help>
        return;
    cbc8:	e7f4      	b.n	cbb4 <msh_auto_complete+0xb0>
    cbca:	46c0      	nop			; (mov r8, r8)
    cbcc:	00018744 	.word	0x00018744
    cbd0:	00018748 	.word	0x00018748
    cbd4:	000164bc 	.word	0x000164bc
    cbd8:	000164cc 	.word	0x000164cc

0000cbdc <cmd_time>:
FINSH_FUNCTION_EXPORT_ALIAS(cmd_ps, __cmd_ps, List threads in the system.);

int cmd_time(int argc, char **argv)
{
    return 0;
}
    cbdc:	2000      	movs	r0, #0
    cbde:	4770      	bx	lr

0000cbe0 <cmd_ps>:
{
    cbe0:	b510      	push	{r4, lr}
        list_thread();
    cbe2:	f7ff f931 	bl	be48 <list_thread>
}
    cbe6:	2000      	movs	r0, #0
    cbe8:	bd10      	pop	{r4, pc}
    cbea:	46c0      	nop			; (mov r8, r8)

0000cbec <cmd_free>:
FINSH_FUNCTION_EXPORT_ALIAS(cmd_time, __cmd_time, Execute command with time.);

#ifdef RT_USING_HEAP
int cmd_free(int argc, char **argv)
{
    cbec:	b510      	push	{r4, lr}
    extern void list_memheap(void);

#ifdef RT_USING_MEMHEAP_AS_HEAP
    list_memheap();
#else
    list_mem();
    cbee:	f7fd fbbf 	bl	a370 <list_mem>
#endif
    return 0;
}
    cbf2:	2000      	movs	r0, #0
    cbf4:	bd10      	pop	{r4, pc}
    cbf6:	46c0      	nop			; (mov r8, r8)

0000cbf8 <rt_completion_init>:

#define RT_COMPLETED    1
#define RT_UNCOMPLETED  0

void rt_completion_init(struct rt_completion *completion)
{
    cbf8:	b510      	push	{r4, lr}
    cbfa:	1e04      	subs	r4, r0, #0
    rt_base_t level;
    RT_ASSERT(completion != RT_NULL);
    cbfc:	d009      	beq.n	cc12 <rt_completion_init+0x1a>

    level = rt_hw_interrupt_disable();
    cbfe:	f7f7 fa57 	bl	40b0 <rt_hw_interrupt_disable>
    completion->flag = RT_UNCOMPLETED;
    cc02:	0023      	movs	r3, r4
    cc04:	2200      	movs	r2, #0
    cc06:	c304      	stmia	r3!, {r2}
    l->next = l->prev = l;
    cc08:	60a3      	str	r3, [r4, #8]
    cc0a:	6063      	str	r3, [r4, #4]
    rt_list_init(&completion->suspended_list);
    rt_hw_interrupt_enable(level);
    cc0c:	f7f7 fa54 	bl	40b8 <rt_hw_interrupt_enable>
}
    cc10:	bd10      	pop	{r4, pc}
    RT_ASSERT(completion != RT_NULL);
    cc12:	2215      	movs	r2, #21
    cc14:	4902      	ldr	r1, [pc, #8]	; (cc20 <rt_completion_init+0x28>)
    cc16:	4803      	ldr	r0, [pc, #12]	; (cc24 <rt_completion_init+0x2c>)
    cc18:	f7fd fb8e 	bl	a338 <rt_assert_handler>
    cc1c:	e7ef      	b.n	cbfe <rt_completion_init+0x6>
    cc1e:	46c0      	nop			; (mov r8, r8)
    cc20:	00016624 	.word	0x00016624
    cc24:	000165b4 	.word	0x000165b4

0000cc28 <rt_completion_wait>:
RTM_EXPORT(rt_completion_init);

rt_err_t rt_completion_wait(struct rt_completion *completion,
                            rt_int32_t            timeout)
{
    cc28:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc2a:	46c6      	mov	lr, r8
    cc2c:	b500      	push	{lr}
    cc2e:	b082      	sub	sp, #8
    cc30:	1e04      	subs	r4, r0, #0
    cc32:	9101      	str	r1, [sp, #4]
    rt_err_t result;
    rt_base_t level;
    rt_thread_t thread;
    RT_ASSERT(completion != RT_NULL);
    cc34:	d05f      	beq.n	ccf6 <rt_completion_wait+0xce>

    result = RT_EOK;
    thread = rt_thread_self();
    cc36:	f7fe fa1d 	bl	b074 <rt_thread_self>
    cc3a:	0005      	movs	r5, r0

    level = rt_hw_interrupt_disable();
    cc3c:	f7f7 fa38 	bl	40b0 <rt_hw_interrupt_disable>
    if (completion->flag != RT_COMPLETED)
    cc40:	6823      	ldr	r3, [r4, #0]
    level = rt_hw_interrupt_disable();
    cc42:	0007      	movs	r7, r0
    if (completion->flag != RT_COMPLETED)
    cc44:	2b01      	cmp	r3, #1
    cc46:	d054      	beq.n	ccf2 <rt_completion_wait+0xca>
    {
        /* only one thread can suspend on complete */
        RT_ASSERT(rt_list_isempty(&(completion->suspended_list)));
    cc48:	6863      	ldr	r3, [r4, #4]
    cc4a:	1d26      	adds	r6, r4, #4
    cc4c:	429e      	cmp	r6, r3
    cc4e:	d004      	beq.n	cc5a <rt_completion_wait+0x32>
    cc50:	222d      	movs	r2, #45	; 0x2d
    cc52:	492d      	ldr	r1, [pc, #180]	; (cd08 <rt_completion_wait+0xe0>)
    cc54:	482d      	ldr	r0, [pc, #180]	; (cd0c <rt_completion_wait+0xe4>)
    cc56:	f7fd fb6f 	bl	a338 <rt_assert_handler>

        if (timeout == 0)
    cc5a:	9b01      	ldr	r3, [sp, #4]
    cc5c:	2b00      	cmp	r3, #0
    cc5e:	d050      	beq.n	cd02 <rt_completion_wait+0xda>
            goto __exit;
        }
        else
        {
            /* reset thread error number */
            thread->error = RT_EOK;
    cc60:	2300      	movs	r3, #0

            /* suspend thread */
            rt_thread_suspend(thread);
    cc62:	0028      	movs	r0, r5
            thread->error = RT_EOK;
    cc64:	632b      	str	r3, [r5, #48]	; 0x30
            rt_thread_suspend(thread);
    cc66:	f7fe fa61 	bl	b12c <rt_thread_suspend>
    l->prev->next = n;
    cc6a:	002b      	movs	r3, r5
    cc6c:	68a2      	ldr	r2, [r4, #8]
    cc6e:	3314      	adds	r3, #20
    cc70:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
    cc72:	61aa      	str	r2, [r5, #24]
    l->prev = n;
    cc74:	60a3      	str	r3, [r4, #8]
    n->next = l;
    cc76:	616e      	str	r6, [r5, #20]
            /* add to suspended list */
            rt_list_insert_before(&(completion->suspended_list),
                                  &(thread->tlist));

            /* current context checking */
            RT_DEBUG_NOT_IN_INTERRUPT;
    cc78:	f7f7 fa1a 	bl	40b0 <rt_hw_interrupt_disable>
    cc7c:	0006      	movs	r6, r0
    cc7e:	f7fc fedd 	bl	9a3c <rt_interrupt_get_nest>
    cc82:	2800      	cmp	r0, #0
    cc84:	d123      	bne.n	ccce <rt_completion_wait+0xa6>
    cc86:	0030      	movs	r0, r6
    cc88:	f7f7 fa16 	bl	40b8 <rt_hw_interrupt_enable>

            /* start timer */
            if (timeout > 0)
    cc8c:	9b01      	ldr	r3, [sp, #4]
    cc8e:	2b00      	cmp	r3, #0
    cc90:	dc12      	bgt.n	ccb8 <rt_completion_wait+0x90>
                                 RT_TIMER_CTRL_SET_TIME,
                                 &timeout);
                rt_timer_start(&(thread->thread_timer));
            }
            /* enable interrupt */
            rt_hw_interrupt_enable(level);
    cc92:	0038      	movs	r0, r7
    cc94:	f7f7 fa10 	bl	40b8 <rt_hw_interrupt_enable>

            /* do schedule */
            rt_schedule();
    cc98:	f7fe f812 	bl	acc0 <rt_schedule>

            /* thread is waked up */
            result = thread->error;
    cc9c:	6b2d      	ldr	r5, [r5, #48]	; 0x30

            level = rt_hw_interrupt_disable();
    cc9e:	f7f7 fa07 	bl	40b0 <rt_hw_interrupt_disable>
    cca2:	0007      	movs	r7, r0
        }
    }
    /* clean completed flag */
    completion->flag = RT_UNCOMPLETED;
    cca4:	2300      	movs	r3, #0
    cca6:	6023      	str	r3, [r4, #0]

__exit:
    rt_hw_interrupt_enable(level);
    cca8:	0038      	movs	r0, r7
    ccaa:	f7f7 fa05 	bl	40b8 <rt_hw_interrupt_enable>

    return result;
}
    ccae:	0028      	movs	r0, r5
    ccb0:	b002      	add	sp, #8
    ccb2:	bc80      	pop	{r7}
    ccb4:	46b8      	mov	r8, r7
    ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rt_timer_control(&(thread->thread_timer),
    ccb8:	002e      	movs	r6, r5
    ccba:	364c      	adds	r6, #76	; 0x4c
    ccbc:	2100      	movs	r1, #0
    ccbe:	0030      	movs	r0, r6
    ccc0:	aa01      	add	r2, sp, #4
    ccc2:	f7fe fc5f 	bl	b584 <rt_timer_control>
                rt_timer_start(&(thread->thread_timer));
    ccc6:	0030      	movs	r0, r6
    ccc8:	f7fe fbaa 	bl	b420 <rt_timer_start>
    cccc:	e7e1      	b.n	cc92 <rt_completion_wait+0x6a>
            RT_DEBUG_NOT_IN_INTERRUPT;
    ccce:	4b0e      	ldr	r3, [pc, #56]	; (cd08 <rt_completion_wait+0xe0>)
    ccd0:	480f      	ldr	r0, [pc, #60]	; (cd10 <rt_completion_wait+0xe8>)
    ccd2:	4698      	mov	r8, r3
    ccd4:	0019      	movs	r1, r3
    ccd6:	f7fd fab1 	bl	a23c <rt_kprintf>
    ccda:	2240      	movs	r2, #64	; 0x40
    ccdc:	4641      	mov	r1, r8
    ccde:	480d      	ldr	r0, [pc, #52]	; (cd14 <rt_completion_wait+0xec>)
    cce0:	f7fd fb2a 	bl	a338 <rt_assert_handler>
    cce4:	0030      	movs	r0, r6
    cce6:	f7f7 f9e7 	bl	40b8 <rt_hw_interrupt_enable>
            if (timeout > 0)
    ccea:	9b01      	ldr	r3, [sp, #4]
    ccec:	2b00      	cmp	r3, #0
    ccee:	ddd0      	ble.n	cc92 <rt_completion_wait+0x6a>
    ccf0:	e7e2      	b.n	ccb8 <rt_completion_wait+0x90>
    result = RT_EOK;
    ccf2:	2500      	movs	r5, #0
    ccf4:	e7d6      	b.n	cca4 <rt_completion_wait+0x7c>
    RT_ASSERT(completion != RT_NULL);
    ccf6:	2224      	movs	r2, #36	; 0x24
    ccf8:	4903      	ldr	r1, [pc, #12]	; (cd08 <rt_completion_wait+0xe0>)
    ccfa:	4807      	ldr	r0, [pc, #28]	; (cd18 <rt_completion_wait+0xf0>)
    ccfc:	f7fd fb1c 	bl	a338 <rt_assert_handler>
    cd00:	e799      	b.n	cc36 <rt_completion_wait+0xe>
            result = -RT_ETIMEOUT;
    cd02:	2502      	movs	r5, #2
    cd04:	426d      	negs	r5, r5
    cd06:	e7cf      	b.n	cca8 <rt_completion_wait+0x80>
    cd08:	00016610 	.word	0x00016610
    cd0c:	000165cc 	.word	0x000165cc
    cd10:	00014f10 	.word	0x00014f10
    cd14:	00015530 	.word	0x00015530
    cd18:	000165b4 	.word	0x000165b4

0000cd1c <rt_completion_done>:
RTM_EXPORT(rt_completion_wait);

void rt_completion_done(struct rt_completion *completion)
{
    cd1c:	b570      	push	{r4, r5, r6, lr}
    cd1e:	1e04      	subs	r4, r0, #0
    rt_base_t level;
    RT_ASSERT(completion != RT_NULL);
    cd20:	d018      	beq.n	cd54 <rt_completion_done+0x38>

    if (completion->flag == RT_COMPLETED)
    cd22:	6823      	ldr	r3, [r4, #0]
    cd24:	2b01      	cmp	r3, #1
    cd26:	d010      	beq.n	cd4a <rt_completion_done+0x2e>
        return;

    level = rt_hw_interrupt_disable();
    cd28:	f7f7 f9c2 	bl	40b0 <rt_hw_interrupt_disable>
    completion->flag = RT_COMPLETED;
    cd2c:	2301      	movs	r3, #1
    level = rt_hw_interrupt_disable();
    cd2e:	0005      	movs	r5, r0
    return l->next == l;
    cd30:	6860      	ldr	r0, [r4, #4]
    completion->flag = RT_COMPLETED;
    cd32:	6023      	str	r3, [r4, #0]

    if (!rt_list_isempty(&(completion->suspended_list)))
    cd34:	3404      	adds	r4, #4
    cd36:	42a0      	cmp	r0, r4
    cd38:	d008      	beq.n	cd4c <rt_completion_done+0x30>
    {
        /* there is one thread in suspended list */
        struct rt_thread *thread;

        /* get thread entry */
        thread = rt_list_entry(completion->suspended_list.next,
    cd3a:	3814      	subs	r0, #20
                               struct rt_thread,
                               tlist);

        /* resume it */
        rt_thread_resume(thread);
    cd3c:	f7fe fa7e 	bl	b23c <rt_thread_resume>
        rt_hw_interrupt_enable(level);
    cd40:	0028      	movs	r0, r5
    cd42:	f7f7 f9b9 	bl	40b8 <rt_hw_interrupt_enable>

        /* perform a schedule */
        rt_schedule();
    cd46:	f7fd ffbb 	bl	acc0 <rt_schedule>
    }
    else
    {
        rt_hw_interrupt_enable(level);
    }
}
    cd4a:	bd70      	pop	{r4, r5, r6, pc}
        rt_hw_interrupt_enable(level);
    cd4c:	0028      	movs	r0, r5
    cd4e:	f7f7 f9b3 	bl	40b8 <rt_hw_interrupt_enable>
    cd52:	e7fa      	b.n	cd4a <rt_completion_done+0x2e>
    RT_ASSERT(completion != RT_NULL);
    cd54:	2264      	movs	r2, #100	; 0x64
    cd56:	4902      	ldr	r1, [pc, #8]	; (cd60 <rt_completion_done+0x44>)
    cd58:	4802      	ldr	r0, [pc, #8]	; (cd64 <rt_completion_done+0x48>)
    cd5a:	f7fd faed 	bl	a338 <rt_assert_handler>
    cd5e:	e7e0      	b.n	cd22 <rt_completion_done+0x6>
    cd60:	000165fc 	.word	0x000165fc
    cd64:	000165b4 	.word	0x000165b4

0000cd68 <rt_data_queue_init>:
rt_err_t
rt_data_queue_init(struct rt_data_queue *queue,
                   rt_uint16_t size,
                   rt_uint16_t lwm,
                   void (*evt_notify)(struct rt_data_queue *queue, rt_uint32_t event))
{
    cd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd6a:	0004      	movs	r4, r0
    cd6c:	000d      	movs	r5, r1
    cd6e:	0016      	movs	r6, r2
    cd70:	001f      	movs	r7, r3
    RT_ASSERT(queue != RT_NULL);
    cd72:	2800      	cmp	r0, #0
    cd74:	d016      	beq.n	cda4 <rt_data_queue_init+0x3c>
    queue->evt_notify = evt_notify;

    queue->size = size;
    queue->lwm = lwm;

    queue->get_index = 0;
    cd76:	2300      	movs	r3, #0
    cd78:	60a3      	str	r3, [r4, #8]
    queue->put_index = 0;

    rt_list_init(&(queue->suspended_push_list));
    cd7a:	0023      	movs	r3, r4
    cd7c:	3310      	adds	r3, #16
    l->next = l->prev = l;
    cd7e:	6163      	str	r3, [r4, #20]
    cd80:	6123      	str	r3, [r4, #16]
    rt_list_init(&(queue->suspended_pop_list));
    cd82:	3308      	adds	r3, #8
    cd84:	61e3      	str	r3, [r4, #28]
    cd86:	61a3      	str	r3, [r4, #24]
    queue->evt_notify = evt_notify;
    cd88:	6227      	str	r7, [r4, #32]
    queue->size = size;
    cd8a:	8025      	strh	r5, [r4, #0]
    queue->lwm = lwm;
    cd8c:	8066      	strh	r6, [r4, #2]

    queue->queue = (struct rt_data_item *)rt_malloc(sizeof(struct rt_data_item) * size);
    cd8e:	00e8      	lsls	r0, r5, #3
    cd90:	f7fd fc7a 	bl	a688 <rt_malloc>
    cd94:	60e0      	str	r0, [r4, #12]
    if (queue->queue == RT_NULL)
    {
        return -RT_ENOMEM;
    cd96:	1e43      	subs	r3, r0, #1
    cd98:	4198      	sbcs	r0, r3
    cd9a:	2305      	movs	r3, #5
    cd9c:	4240      	negs	r0, r0
    cd9e:	4018      	ands	r0, r3
    cda0:	3805      	subs	r0, #5
    }

    return RT_EOK;
}
    cda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(queue != RT_NULL);
    cda4:	221c      	movs	r2, #28
    cda6:	4902      	ldr	r1, [pc, #8]	; (cdb0 <rt_data_queue_init+0x48>)
    cda8:	4802      	ldr	r0, [pc, #8]	; (cdb4 <rt_data_queue_init+0x4c>)
    cdaa:	f7fd fac5 	bl	a338 <rt_assert_handler>
    cdae:	e7e2      	b.n	cd76 <rt_data_queue_init+0xe>
    cdb0:	000166ac 	.word	0x000166ac
    cdb4:	00016638 	.word	0x00016638

0000cdb8 <rt_data_queue_push>:

rt_err_t rt_data_queue_push(struct rt_data_queue *queue,
                            const void *data_ptr,
                            rt_size_t data_size,
                            rt_int32_t timeout)
{
    cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdba:	46de      	mov	lr, fp
    cdbc:	4657      	mov	r7, sl
    cdbe:	464e      	mov	r6, r9
    cdc0:	4645      	mov	r5, r8
    cdc2:	b5e0      	push	{r5, r6, r7, lr}
    cdc4:	b083      	sub	sp, #12
    cdc6:	1e04      	subs	r4, r0, #0
    cdc8:	468b      	mov	fp, r1
    cdca:	9200      	str	r2, [sp, #0]
    cdcc:	9301      	str	r3, [sp, #4]
    rt_ubase_t  level;
    rt_thread_t thread;
    rt_err_t    result;
    
    RT_ASSERT(queue != RT_NULL);
    cdce:	d100      	bne.n	cdd2 <rt_data_queue_push+0x1a>
    cdd0:	e07d      	b.n	cece <rt_data_queue_push+0x116>

    result = RT_EOK;
    thread = rt_thread_self();
    cdd2:	f7fe f94f 	bl	b074 <rt_thread_self>
    cdd6:	0005      	movs	r5, r0

    level = rt_hw_interrupt_disable();
    cdd8:	f7f7 f96a 	bl	40b0 <rt_hw_interrupt_disable>

            goto __exit;
        }

        /* current context checking */
        RT_DEBUG_NOT_IN_INTERRUPT;
    cddc:	4b44      	ldr	r3, [pc, #272]	; (cef0 <rt_data_queue_push+0x138>)
    level = rt_hw_interrupt_disable();
    cdde:	0006      	movs	r6, r0
        RT_DEBUG_NOT_IN_INTERRUPT;
    cde0:	4698      	mov	r8, r3
    cde2:	4b44      	ldr	r3, [pc, #272]	; (cef4 <rt_data_queue_push+0x13c>)
    cde4:	469a      	mov	sl, r3
    cde6:	4b44      	ldr	r3, [pc, #272]	; (cef8 <rt_data_queue_push+0x140>)
    cde8:	4699      	mov	r9, r3
    while (queue->put_index - queue->get_index == queue->size)
    cdea:	e028      	b.n	ce3e <rt_data_queue_push+0x86>
        RT_DEBUG_NOT_IN_INTERRUPT;
    cdec:	0038      	movs	r0, r7
    cdee:	f7f7 f963 	bl	40b8 <rt_hw_interrupt_enable>

        /* reset thread error number */
        thread->error = RT_EOK;
    cdf2:	2300      	movs	r3, #0
        
        /* suspend thread on the push list */
        rt_thread_suspend(thread);
    cdf4:	0028      	movs	r0, r5
        thread->error = RT_EOK;
    cdf6:	632b      	str	r3, [r5, #48]	; 0x30
        rt_thread_suspend(thread);
    cdf8:	f7fe f998 	bl	b12c <rt_thread_suspend>
    l->prev->next = n;
    cdfc:	002b      	movs	r3, r5
    cdfe:	6962      	ldr	r2, [r4, #20]
    ce00:	3314      	adds	r3, #20
    ce02:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
    ce04:	61aa      	str	r2, [r5, #24]
    l->prev = n;
    ce06:	6163      	str	r3, [r4, #20]
        rt_list_insert_before(&(queue->suspended_push_list), &(thread->tlist));
    ce08:	0023      	movs	r3, r4
    ce0a:	3310      	adds	r3, #16
    n->next = l;
    ce0c:	616b      	str	r3, [r5, #20]
        /* start timer */
        if (timeout > 0)
    ce0e:	9b01      	ldr	r3, [sp, #4]
    ce10:	2b00      	cmp	r3, #0
    ce12:	dd09      	ble.n	ce28 <rt_data_queue_push+0x70>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
    ce14:	002f      	movs	r7, r5
    ce16:	374c      	adds	r7, #76	; 0x4c
    ce18:	2100      	movs	r1, #0
    ce1a:	0038      	movs	r0, r7
    ce1c:	aa01      	add	r2, sp, #4
    ce1e:	f7fe fbb1 	bl	b584 <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
    ce22:	0038      	movs	r0, r7
    ce24:	f7fe fafc 	bl	b420 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    ce28:	0030      	movs	r0, r6
    ce2a:	f7f7 f945 	bl	40b8 <rt_hw_interrupt_enable>

        /* do schedule */
        rt_schedule();
    ce2e:	f7fd ff47 	bl	acc0 <rt_schedule>

        /* thread is waked up */
        result = thread->error;
    ce32:	6b2f      	ldr	r7, [r5, #48]	; 0x30
        level = rt_hw_interrupt_disable();
    ce34:	f7f7 f93c 	bl	40b0 <rt_hw_interrupt_disable>
    ce38:	0006      	movs	r6, r0
        if (result != RT_EOK) goto __exit;
    ce3a:	2f00      	cmp	r7, #0
    ce3c:	d144      	bne.n	cec8 <rt_data_queue_push+0x110>
    while (queue->put_index - queue->get_index == queue->size)
    ce3e:	8967      	ldrh	r7, [r4, #10]
    ce40:	8923      	ldrh	r3, [r4, #8]
    ce42:	8821      	ldrh	r1, [r4, #0]
    ce44:	1afb      	subs	r3, r7, r3
    ce46:	428b      	cmp	r3, r1
    ce48:	d113      	bne.n	ce72 <rt_data_queue_push+0xba>
        if (timeout == 0)
    ce4a:	9b01      	ldr	r3, [sp, #4]
    ce4c:	2b00      	cmp	r3, #0
    ce4e:	d035      	beq.n	cebc <rt_data_queue_push+0x104>
        RT_DEBUG_NOT_IN_INTERRUPT;
    ce50:	f7f7 f92e 	bl	40b0 <rt_hw_interrupt_disable>
    ce54:	0007      	movs	r7, r0
    ce56:	f7fc fdf1 	bl	9a3c <rt_interrupt_get_nest>
    ce5a:	2800      	cmp	r0, #0
    ce5c:	d0c6      	beq.n	cdec <rt_data_queue_push+0x34>
    ce5e:	4641      	mov	r1, r8
    ce60:	4650      	mov	r0, sl
    ce62:	f7fd f9eb 	bl	a23c <rt_kprintf>
    ce66:	224d      	movs	r2, #77	; 0x4d
    ce68:	4641      	mov	r1, r8
    ce6a:	4648      	mov	r0, r9
    ce6c:	f7fd fa64 	bl	a338 <rt_assert_handler>
    ce70:	e7bc      	b.n	cdec <rt_data_queue_push+0x34>
    }

    queue->queue[queue->put_index % queue->size].data_ptr  = data_ptr;
    ce72:	0038      	movs	r0, r7
    ce74:	f7f7 fa72 	bl	435c <__aeabi_uidivmod>
    ce78:	68e3      	ldr	r3, [r4, #12]
    ce7a:	b289      	uxth	r1, r1
    ce7c:	469c      	mov	ip, r3
    ce7e:	465b      	mov	r3, fp
    ce80:	00c9      	lsls	r1, r1, #3
    ce82:	4461      	add	r1, ip
    ce84:	600b      	str	r3, [r1, #0]
    queue->queue[queue->put_index % queue->size].data_size = data_size;
    ce86:	9b00      	ldr	r3, [sp, #0]
    return l->next == l;
    ce88:	69a0      	ldr	r0, [r4, #24]
    ce8a:	604b      	str	r3, [r1, #4]
    queue->put_index += 1;

    /* there is at least one thread in suspended list */
    if (!rt_list_isempty(&(queue->suspended_pop_list)))
    ce8c:	0023      	movs	r3, r4
    queue->put_index += 1;
    ce8e:	3701      	adds	r7, #1
    if (!rt_list_isempty(&(queue->suspended_pop_list)))
    ce90:	3318      	adds	r3, #24
    queue->put_index += 1;
    ce92:	8167      	strh	r7, [r4, #10]
    if (!rt_list_isempty(&(queue->suspended_pop_list)))
    ce94:	4298      	cmp	r0, r3
    ce96:	d120      	bne.n	ceda <rt_data_queue_push+0x122>

        return result;
    }

__exit:
    rt_hw_interrupt_enable(level);
    ce98:	0030      	movs	r0, r6
    ce9a:	f7f7 f90d 	bl	40b8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && queue->evt_notify != RT_NULL)
    ce9e:	6a23      	ldr	r3, [r4, #32]
    cea0:	2b00      	cmp	r3, #0
    cea2:	d002      	beq.n	ceaa <rt_data_queue_push+0xf2>
    {
        queue->evt_notify(queue, RT_DATAQUEUE_EVENT_PUSH);
    cea4:	2102      	movs	r1, #2
    cea6:	0020      	movs	r0, r4
    cea8:	4798      	blx	r3
    ceaa:	2700      	movs	r7, #0
    }

    return result;
}
    ceac:	0038      	movs	r0, r7
    ceae:	b003      	add	sp, #12
    ceb0:	bcf0      	pop	{r4, r5, r6, r7}
    ceb2:	46bb      	mov	fp, r7
    ceb4:	46b2      	mov	sl, r6
    ceb6:	46a9      	mov	r9, r5
    ceb8:	46a0      	mov	r8, r4
    ceba:	bdf0      	pop	{r4, r5, r6, r7, pc}
            result = -RT_ETIMEOUT;
    cebc:	2702      	movs	r7, #2
    rt_hw_interrupt_enable(level);
    cebe:	0030      	movs	r0, r6
    cec0:	f7f7 f8fa 	bl	40b8 <rt_hw_interrupt_enable>
            result = -RT_ETIMEOUT;
    cec4:	427f      	negs	r7, r7
    cec6:	e7f1      	b.n	ceac <rt_data_queue_push+0xf4>
    rt_hw_interrupt_enable(level);
    cec8:	f7f7 f8f6 	bl	40b8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && queue->evt_notify != RT_NULL)
    cecc:	e7ee      	b.n	ceac <rt_data_queue_push+0xf4>
    RT_ASSERT(queue != RT_NULL);
    cece:	223c      	movs	r2, #60	; 0x3c
    ced0:	4907      	ldr	r1, [pc, #28]	; (cef0 <rt_data_queue_push+0x138>)
    ced2:	480a      	ldr	r0, [pc, #40]	; (cefc <rt_data_queue_push+0x144>)
    ced4:	f7fd fa30 	bl	a338 <rt_assert_handler>
    ced8:	e77b      	b.n	cdd2 <rt_data_queue_push+0x1a>
        thread = rt_list_entry(queue->suspended_pop_list.next,
    ceda:	3814      	subs	r0, #20
        rt_thread_resume(thread);
    cedc:	f7fe f9ae 	bl	b23c <rt_thread_resume>
        rt_hw_interrupt_enable(level);
    cee0:	0030      	movs	r0, r6
    cee2:	f7f7 f8e9 	bl	40b8 <rt_hw_interrupt_enable>
        return result;
    cee6:	2700      	movs	r7, #0
        rt_schedule();
    cee8:	f7fd feea 	bl	acc0 <rt_schedule>
        return result;
    ceec:	e7de      	b.n	ceac <rt_data_queue_push+0xf4>
    ceee:	46c0      	nop			; (mov r8, r8)
    cef0:	00016698 	.word	0x00016698
    cef4:	00014f10 	.word	0x00014f10
    cef8:	00015530 	.word	0x00015530
    cefc:	00016638 	.word	0x00016638

0000cf00 <rt_data_queue_pop>:

rt_err_t rt_data_queue_pop(struct rt_data_queue *queue,
                           const void** data_ptr,
                           rt_size_t *size, 
                           rt_int32_t timeout)
{
    cf00:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf02:	4645      	mov	r5, r8
    cf04:	46de      	mov	lr, fp
    cf06:	4657      	mov	r7, sl
    cf08:	464e      	mov	r6, r9
    cf0a:	b5e0      	push	{r5, r6, r7, lr}
    cf0c:	b085      	sub	sp, #20
    cf0e:	1e05      	subs	r5, r0, #0
    cf10:	9100      	str	r1, [sp, #0]
    cf12:	9201      	str	r2, [sp, #4]
    cf14:	9303      	str	r3, [sp, #12]
    rt_ubase_t  level;
    rt_thread_t thread;
    rt_err_t    result;

    RT_ASSERT(queue != RT_NULL);
    cf16:	d100      	bne.n	cf1a <rt_data_queue_pop+0x1a>
    cf18:	e093      	b.n	d042 <rt_data_queue_pop+0x142>
    RT_ASSERT(data_ptr != RT_NULL);
    cf1a:	9b00      	ldr	r3, [sp, #0]
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	d100      	bne.n	cf22 <rt_data_queue_pop+0x22>
    cf20:	e098      	b.n	d054 <rt_data_queue_pop+0x154>
    RT_ASSERT(size != RT_NULL);
    cf22:	9b01      	ldr	r3, [sp, #4]
    cf24:	2b00      	cmp	r3, #0
    cf26:	d100      	bne.n	cf2a <rt_data_queue_pop+0x2a>
    cf28:	e085      	b.n	d036 <rt_data_queue_pop+0x136>

    result = RT_EOK;
    thread = rt_thread_self();
    cf2a:	f7fe f8a3 	bl	b074 <rt_thread_self>
    cf2e:	0004      	movs	r4, r0

    level = rt_hw_interrupt_disable();
    cf30:	f7f7 f8be 	bl	40b0 <rt_hw_interrupt_disable>
            result = -RT_ETIMEOUT;
            goto __exit;
        }

        /* current context checking */
        RT_DEBUG_NOT_IN_INTERRUPT;
    cf34:	4b57      	ldr	r3, [pc, #348]	; (d094 <rt_data_queue_pop+0x194>)
    level = rt_hw_interrupt_disable();
    cf36:	0006      	movs	r6, r0
        RT_DEBUG_NOT_IN_INTERRUPT;
    cf38:	4699      	mov	r9, r3
    cf3a:	4b57      	ldr	r3, [pc, #348]	; (d098 <rt_data_queue_pop+0x198>)
    cf3c:	469b      	mov	fp, r3
    cf3e:	4b57      	ldr	r3, [pc, #348]	; (d09c <rt_data_queue_pop+0x19c>)
    cf40:	469a      	mov	sl, r3
    while (queue->get_index == queue->put_index)
    cf42:	e028      	b.n	cf96 <rt_data_queue_pop+0x96>
        RT_DEBUG_NOT_IN_INTERRUPT;
    cf44:	0038      	movs	r0, r7
    cf46:	f7f7 f8b7 	bl	40b8 <rt_hw_interrupt_enable>

        /* reset thread error number */
        thread->error = RT_EOK;
    cf4a:	2300      	movs	r3, #0
        
        /* suspend thread on the pop list */
        rt_thread_suspend(thread);
    cf4c:	0020      	movs	r0, r4
        thread->error = RT_EOK;
    cf4e:	6323      	str	r3, [r4, #48]	; 0x30
        rt_thread_suspend(thread);
    cf50:	f7fe f8ec 	bl	b12c <rt_thread_suspend>
    l->prev->next = n;
    cf54:	0023      	movs	r3, r4
    cf56:	69ea      	ldr	r2, [r5, #28]
    cf58:	3314      	adds	r3, #20
    cf5a:	6013      	str	r3, [r2, #0]
    n->prev = l->prev;
    cf5c:	61a2      	str	r2, [r4, #24]
    l->prev = n;
    cf5e:	61eb      	str	r3, [r5, #28]
        rt_list_insert_before(&(queue->suspended_pop_list), &(thread->tlist));
    cf60:	002b      	movs	r3, r5
    cf62:	3318      	adds	r3, #24
    n->next = l;
    cf64:	6163      	str	r3, [r4, #20]
        /* start timer */
        if (timeout > 0)
    cf66:	9b03      	ldr	r3, [sp, #12]
    cf68:	2b00      	cmp	r3, #0
    cf6a:	dd09      	ble.n	cf80 <rt_data_queue_pop+0x80>
        {
            /* reset the timeout of thread timer and start it */
            rt_timer_control(&(thread->thread_timer),
    cf6c:	0027      	movs	r7, r4
    cf6e:	374c      	adds	r7, #76	; 0x4c
    cf70:	2100      	movs	r1, #0
    cf72:	0038      	movs	r0, r7
    cf74:	aa03      	add	r2, sp, #12
    cf76:	f7fe fb05 	bl	b584 <rt_timer_control>
                             RT_TIMER_CTRL_SET_TIME,
                             &timeout);
            rt_timer_start(&(thread->thread_timer));
    cf7a:	0038      	movs	r0, r7
    cf7c:	f7fe fa50 	bl	b420 <rt_timer_start>
        }

        /* enable interrupt */
        rt_hw_interrupt_enable(level);
    cf80:	0030      	movs	r0, r6
    cf82:	f7f7 f899 	bl	40b8 <rt_hw_interrupt_enable>

        /* do schedule */
        rt_schedule();
    cf86:	f7fd fe9b 	bl	acc0 <rt_schedule>

        /* thread is waked up */
        result = thread->error;
    cf8a:	6b27      	ldr	r7, [r4, #48]	; 0x30
        level  = rt_hw_interrupt_disable();
    cf8c:	f7f7 f890 	bl	40b0 <rt_hw_interrupt_disable>
    cf90:	0006      	movs	r6, r0
        if (result != RT_EOK)
    cf92:	2f00      	cmp	r7, #0
    cf94:	d14c      	bne.n	d030 <rt_data_queue_pop+0x130>
    while (queue->get_index == queue->put_index)
    cf96:	896b      	ldrh	r3, [r5, #10]
    cf98:	892f      	ldrh	r7, [r5, #8]
    cf9a:	4698      	mov	r8, r3
    cf9c:	429f      	cmp	r7, r3
    cf9e:	d113      	bne.n	cfc8 <rt_data_queue_pop+0xc8>
        if (timeout == 0)
    cfa0:	9b03      	ldr	r3, [sp, #12]
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d03e      	beq.n	d024 <rt_data_queue_pop+0x124>
        RT_DEBUG_NOT_IN_INTERRUPT;
    cfa6:	f7f7 f883 	bl	40b0 <rt_hw_interrupt_disable>
    cfaa:	0007      	movs	r7, r0
    cfac:	f7fc fd46 	bl	9a3c <rt_interrupt_get_nest>
    cfb0:	2800      	cmp	r0, #0
    cfb2:	d0c7      	beq.n	cf44 <rt_data_queue_pop+0x44>
    cfb4:	4649      	mov	r1, r9
    cfb6:	4658      	mov	r0, fp
    cfb8:	f7fd f940 	bl	a23c <rt_kprintf>
    cfbc:	22a7      	movs	r2, #167	; 0xa7
    cfbe:	4649      	mov	r1, r9
    cfc0:	4650      	mov	r0, sl
    cfc2:	f7fd f9b9 	bl	a338 <rt_assert_handler>
    cfc6:	e7bd      	b.n	cf44 <rt_data_queue_pop+0x44>
            goto __exit;
    }

    *data_ptr = queue->queue[queue->get_index % queue->size].data_ptr;
    cfc8:	8829      	ldrh	r1, [r5, #0]
    cfca:	0038      	movs	r0, r7
    cfcc:	f7f7 f9c6 	bl	435c <__aeabi_uidivmod>
    cfd0:	68eb      	ldr	r3, [r5, #12]
    cfd2:	b289      	uxth	r1, r1
    cfd4:	00c9      	lsls	r1, r1, #3
    cfd6:	585b      	ldr	r3, [r3, r1]
    *size     = queue->queue[queue->get_index % queue->size].data_size;

    queue->get_index += 1;
    cfd8:	3701      	adds	r7, #1
    *data_ptr = queue->queue[queue->get_index % queue->size].data_ptr;
    cfda:	9302      	str	r3, [sp, #8]
    cfdc:	9a02      	ldr	r2, [sp, #8]
    cfde:	9b00      	ldr	r3, [sp, #0]
    queue->get_index += 1;
    cfe0:	b2bf      	uxth	r7, r7
    *data_ptr = queue->queue[queue->get_index % queue->size].data_ptr;
    cfe2:	601a      	str	r2, [r3, #0]
    *size     = queue->queue[queue->get_index % queue->size].data_size;
    cfe4:	68eb      	ldr	r3, [r5, #12]
    cfe6:	469c      	mov	ip, r3
    cfe8:	4461      	add	r1, ip
    cfea:	684b      	ldr	r3, [r1, #4]
    cfec:	9300      	str	r3, [sp, #0]
    cfee:	9a00      	ldr	r2, [sp, #0]
    cff0:	9b01      	ldr	r3, [sp, #4]
    cff2:	601a      	str	r2, [r3, #0]

    if ((queue->put_index - queue->get_index) <= queue->lwm)
    cff4:	4643      	mov	r3, r8
    queue->get_index += 1;
    cff6:	812f      	strh	r7, [r5, #8]
    if ((queue->put_index - queue->get_index) <= queue->lwm)
    cff8:	1bdf      	subs	r7, r3, r7
    cffa:	886b      	ldrh	r3, [r5, #2]
    cffc:	429f      	cmp	r7, r3
    cffe:	dd2f      	ble.n	d060 <rt_data_queue_pop+0x160>

        return result;
    }

__exit:
    rt_hw_interrupt_enable(level);
    d000:	0030      	movs	r0, r6
    d002:	f7f7 f859 	bl	40b8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && (queue->evt_notify != RT_NULL))
    d006:	6a2b      	ldr	r3, [r5, #32]
    d008:	2b00      	cmp	r3, #0
    d00a:	d002      	beq.n	d012 <rt_data_queue_pop+0x112>
    {
        queue->evt_notify(queue, RT_DATAQUEUE_EVENT_POP);
    d00c:	2101      	movs	r1, #1
    d00e:	0028      	movs	r0, r5
    d010:	4798      	blx	r3
    d012:	2700      	movs	r7, #0
    }

    return result;
}
    d014:	0038      	movs	r0, r7
    d016:	b005      	add	sp, #20
    d018:	bcf0      	pop	{r4, r5, r6, r7}
    d01a:	46bb      	mov	fp, r7
    d01c:	46b2      	mov	sl, r6
    d01e:	46a9      	mov	r9, r5
    d020:	46a0      	mov	r8, r4
    d022:	bdf0      	pop	{r4, r5, r6, r7, pc}
            result = -RT_ETIMEOUT;
    d024:	2702      	movs	r7, #2
    rt_hw_interrupt_enable(level);
    d026:	0030      	movs	r0, r6
    d028:	f7f7 f846 	bl	40b8 <rt_hw_interrupt_enable>
            result = -RT_ETIMEOUT;
    d02c:	427f      	negs	r7, r7
    d02e:	e7f1      	b.n	d014 <rt_data_queue_pop+0x114>
    rt_hw_interrupt_enable(level);
    d030:	f7f7 f842 	bl	40b8 <rt_hw_interrupt_enable>
    if ((result == RT_EOK) && (queue->evt_notify != RT_NULL))
    d034:	e7ee      	b.n	d014 <rt_data_queue_pop+0x114>
    RT_ASSERT(size != RT_NULL);
    d036:	2297      	movs	r2, #151	; 0x97
    d038:	4916      	ldr	r1, [pc, #88]	; (d094 <rt_data_queue_pop+0x194>)
    d03a:	4819      	ldr	r0, [pc, #100]	; (d0a0 <rt_data_queue_pop+0x1a0>)
    d03c:	f7fd f97c 	bl	a338 <rt_assert_handler>
    d040:	e773      	b.n	cf2a <rt_data_queue_pop+0x2a>
    RT_ASSERT(queue != RT_NULL);
    d042:	2295      	movs	r2, #149	; 0x95
    d044:	4913      	ldr	r1, [pc, #76]	; (d094 <rt_data_queue_pop+0x194>)
    d046:	4817      	ldr	r0, [pc, #92]	; (d0a4 <rt_data_queue_pop+0x1a4>)
    d048:	f7fd f976 	bl	a338 <rt_assert_handler>
    RT_ASSERT(data_ptr != RT_NULL);
    d04c:	9b00      	ldr	r3, [sp, #0]
    d04e:	2b00      	cmp	r3, #0
    d050:	d000      	beq.n	d054 <rt_data_queue_pop+0x154>
    d052:	e766      	b.n	cf22 <rt_data_queue_pop+0x22>
    d054:	2296      	movs	r2, #150	; 0x96
    d056:	490f      	ldr	r1, [pc, #60]	; (d094 <rt_data_queue_pop+0x194>)
    d058:	4813      	ldr	r0, [pc, #76]	; (d0a8 <rt_data_queue_pop+0x1a8>)
    d05a:	f7fd f96d 	bl	a338 <rt_assert_handler>
    d05e:	e760      	b.n	cf22 <rt_data_queue_pop+0x22>
        if (!rt_list_isempty(&(queue->suspended_push_list)))
    d060:	002b      	movs	r3, r5
    return l->next == l;
    d062:	6928      	ldr	r0, [r5, #16]
    d064:	3310      	adds	r3, #16
    d066:	4298      	cmp	r0, r3
    d068:	d00f      	beq.n	d08a <rt_data_queue_pop+0x18a>
            thread = rt_list_entry(queue->suspended_push_list.next,
    d06a:	3814      	subs	r0, #20
            rt_thread_resume(thread);
    d06c:	f7fe f8e6 	bl	b23c <rt_thread_resume>
            rt_hw_interrupt_enable(level);
    d070:	0030      	movs	r0, r6
    d072:	f7f7 f821 	bl	40b8 <rt_hw_interrupt_enable>
            rt_schedule();
    d076:	f7fd fe23 	bl	acc0 <rt_schedule>
        if (queue->evt_notify != RT_NULL)
    d07a:	6a2b      	ldr	r3, [r5, #32]
    d07c:	2b00      	cmp	r3, #0
    d07e:	d0c8      	beq.n	d012 <rt_data_queue_pop+0x112>
            queue->evt_notify(queue, RT_DATAQUEUE_EVENT_LWM);
    d080:	2103      	movs	r1, #3
    d082:	0028      	movs	r0, r5
    d084:	4798      	blx	r3
    d086:	2700      	movs	r7, #0
    d088:	e7c4      	b.n	d014 <rt_data_queue_pop+0x114>
            rt_hw_interrupt_enable(level);
    d08a:	0030      	movs	r0, r6
    d08c:	f7f7 f814 	bl	40b8 <rt_hw_interrupt_enable>
    d090:	e7f3      	b.n	d07a <rt_data_queue_pop+0x17a>
    d092:	46c0      	nop			; (mov r8, r8)
    d094:	00016684 	.word	0x00016684
    d098:	00014f10 	.word	0x00014f10
    d09c:	00015530 	.word	0x00015530
    d0a0:	00016660 	.word	0x00016660
    d0a4:	00016638 	.word	0x00016638
    d0a8:	0001664c 	.word	0x0001664c

0000d0ac <rt_data_queue_peak>:
RTM_EXPORT(rt_data_queue_pop);

rt_err_t rt_data_queue_peak(struct rt_data_queue *queue,
                            const void** data_ptr,
                            rt_size_t *size)
{
    d0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0ae:	0004      	movs	r4, r0
    d0b0:	000f      	movs	r7, r1
    d0b2:	0016      	movs	r6, r2
    rt_ubase_t  level;

    RT_ASSERT(queue != RT_NULL);
    d0b4:	2800      	cmp	r0, #0
    d0b6:	d017      	beq.n	d0e8 <rt_data_queue_peak+0x3c>

    level = rt_hw_interrupt_disable();
    d0b8:	f7f6 fffa 	bl	40b0 <rt_hw_interrupt_disable>

    if (queue->get_index == queue->put_index) 
    d0bc:	8963      	ldrh	r3, [r4, #10]
    level = rt_hw_interrupt_disable();
    d0be:	0005      	movs	r5, r0
    if (queue->get_index == queue->put_index) 
    d0c0:	8920      	ldrh	r0, [r4, #8]
    d0c2:	4283      	cmp	r3, r0
    d0c4:	d016      	beq.n	d0f4 <rt_data_queue_peak+0x48>
        rt_hw_interrupt_enable(level);
        
        return -RT_EEMPTY;
    }

    *data_ptr = queue->queue[queue->get_index % queue->size].data_ptr;
    d0c6:	8821      	ldrh	r1, [r4, #0]
    d0c8:	f7f7 f948 	bl	435c <__aeabi_uidivmod>
    d0cc:	68e2      	ldr	r2, [r4, #12]
    d0ce:	b28b      	uxth	r3, r1
    d0d0:	00db      	lsls	r3, r3, #3
    d0d2:	58d2      	ldr	r2, [r2, r3]
    *size     = queue->queue[queue->get_index % queue->size].data_size;

    rt_hw_interrupt_enable(level);
    d0d4:	0028      	movs	r0, r5
    *data_ptr = queue->queue[queue->get_index % queue->size].data_ptr;
    d0d6:	603a      	str	r2, [r7, #0]
    *size     = queue->queue[queue->get_index % queue->size].data_size;
    d0d8:	68e1      	ldr	r1, [r4, #12]
    d0da:	18cb      	adds	r3, r1, r3
    d0dc:	685b      	ldr	r3, [r3, #4]
    d0de:	6033      	str	r3, [r6, #0]
    rt_hw_interrupt_enable(level);
    d0e0:	f7f6 ffea 	bl	40b8 <rt_hw_interrupt_enable>

    return RT_EOK;
    d0e4:	2000      	movs	r0, #0
}
    d0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(queue != RT_NULL);
    d0e8:	22f8      	movs	r2, #248	; 0xf8
    d0ea:	4905      	ldr	r1, [pc, #20]	; (d100 <rt_data_queue_peak+0x54>)
    d0ec:	4805      	ldr	r0, [pc, #20]	; (d104 <rt_data_queue_peak+0x58>)
    d0ee:	f7fd f923 	bl	a338 <rt_assert_handler>
    d0f2:	e7e1      	b.n	d0b8 <rt_data_queue_peak+0xc>
        rt_hw_interrupt_enable(level);
    d0f4:	0028      	movs	r0, r5
    d0f6:	f7f6 ffdf 	bl	40b8 <rt_hw_interrupt_enable>
        return -RT_EEMPTY;
    d0fa:	2004      	movs	r0, #4
    d0fc:	4240      	negs	r0, r0
    d0fe:	e7f2      	b.n	d0e6 <rt_data_queue_peak+0x3a>
    d100:	00016670 	.word	0x00016670
    d104:	00016638 	.word	0x00016638

0000d108 <rt_serial_control>:
#endif

static rt_err_t rt_serial_control(struct rt_device *dev,
                                  int              cmd,
                                  void             *args)
{
    d108:	b570      	push	{r4, r5, r6, lr}
    d10a:	0004      	movs	r4, r0
    d10c:	000d      	movs	r5, r1
    d10e:	0016      	movs	r6, r2
    rt_err_t ret = RT_EOK;
    struct rt_serial_device *serial;

    RT_ASSERT(dev != RT_NULL);
    d110:	2800      	cmp	r0, #0
    d112:	d02a      	beq.n	d16a <rt_serial_control+0x62>
    serial = (struct rt_serial_device *)dev;

    switch (cmd)
    d114:	2d02      	cmp	r5, #2
    d116:	d00a      	beq.n	d12e <rt_serial_control+0x26>
    d118:	2d03      	cmp	r5, #3
    d11a:	d014      	beq.n	d146 <rt_serial_control+0x3e>
    d11c:	2d01      	cmp	r5, #1
    d11e:	d00c      	beq.n	d13a <rt_serial_control+0x32>
            }
            break;
#endif
        default :
            /* control device */
            ret = serial->ops->control(serial, cmd, args);
    d120:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d122:	0032      	movs	r2, r6
    d124:	0029      	movs	r1, r5
    d126:	0020      	movs	r0, r4
    d128:	685b      	ldr	r3, [r3, #4]
    d12a:	4798      	blx	r3
            break;
    }

    return ret;
}
    d12c:	bd70      	pop	{r4, r5, r6, pc}
            dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
    d12e:	2220      	movs	r2, #32
    d130:	8ae3      	ldrh	r3, [r4, #22]
    rt_err_t ret = RT_EOK;
    d132:	2000      	movs	r0, #0
            dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
    d134:	4313      	orrs	r3, r2
    d136:	82e3      	strh	r3, [r4, #22]
            break;
    d138:	e7f8      	b.n	d12c <rt_serial_control+0x24>
            dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
    d13a:	2220      	movs	r2, #32
    d13c:	8ae3      	ldrh	r3, [r4, #22]
    rt_err_t ret = RT_EOK;
    d13e:	2000      	movs	r0, #0
            dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
    d140:	4393      	bics	r3, r2
    d142:	82e3      	strh	r3, [r4, #22]
            break;
    d144:	e7f2      	b.n	d12c <rt_serial_control+0x24>
            if (args)
    d146:	2e00      	cmp	r6, #0
    d148:	d00d      	beq.n	d166 <rt_serial_control+0x5e>
                if (pconfig->bufsz != serial->config.bufsz && serial->parent.ref_count)
    d14a:	6873      	ldr	r3, [r6, #4]
    d14c:	019a      	lsls	r2, r3, #6
    d14e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d150:	0c12      	lsrs	r2, r2, #16
    d152:	019b      	lsls	r3, r3, #6
    d154:	0c1b      	lsrs	r3, r3, #16
    d156:	429a      	cmp	r2, r3
    d158:	d00d      	beq.n	d176 <rt_serial_control+0x6e>
    d15a:	7ea3      	ldrb	r3, [r4, #26]
    d15c:	2b00      	cmp	r3, #0
    d15e:	d119      	bne.n	d194 <rt_serial_control+0x8c>
                serial->config = *pconfig;
    d160:	3444      	adds	r4, #68	; 0x44
    d162:	ce0c      	ldmia	r6!, {r2, r3}
    d164:	c40c      	stmia	r4!, {r2, r3}
    rt_err_t ret = RT_EOK;
    d166:	2000      	movs	r0, #0
    d168:	e7e0      	b.n	d12c <rt_serial_control+0x24>
    RT_ASSERT(dev != RT_NULL);
    d16a:	4a0b      	ldr	r2, [pc, #44]	; (d198 <rt_serial_control+0x90>)
    d16c:	490b      	ldr	r1, [pc, #44]	; (d19c <rt_serial_control+0x94>)
    d16e:	480c      	ldr	r0, [pc, #48]	; (d1a0 <rt_serial_control+0x98>)
    d170:	f7fd f8e2 	bl	a338 <rt_assert_handler>
    d174:	e7ce      	b.n	d114 <rt_serial_control+0xc>
                serial->config = *pconfig;
    d176:	0023      	movs	r3, r4
    d178:	0032      	movs	r2, r6
    d17a:	3344      	adds	r3, #68	; 0x44
    d17c:	ca03      	ldmia	r2!, {r0, r1}
    d17e:	c303      	stmia	r3!, {r0, r1}
                if (serial->parent.ref_count)
    d180:	7ea3      	ldrb	r3, [r4, #26]
    d182:	2b00      	cmp	r3, #0
    d184:	d0ef      	beq.n	d166 <rt_serial_control+0x5e>
                    serial->ops->configure(serial, (struct serial_configure *) args);
    d186:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d188:	0031      	movs	r1, r6
    d18a:	0020      	movs	r0, r4
    d18c:	681b      	ldr	r3, [r3, #0]
    d18e:	4798      	blx	r3
    rt_err_t ret = RT_EOK;
    d190:	2000      	movs	r0, #0
    d192:	e7cb      	b.n	d12c <rt_serial_control+0x24>
                    return RT_EBUSY;
    d194:	2007      	movs	r0, #7
    d196:	e7c9      	b.n	d12c <rt_serial_control+0x24>
    d198:	000003b1 	.word	0x000003b1
    d19c:	00016828 	.word	0x00016828
    d1a0:	00014dcc 	.word	0x00014dcc

0000d1a4 <_serial_fifo_calc_recved_len>:
{
    d1a4:	b570      	push	{r4, r5, r6, lr}
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    d1a6:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
{
    d1a8:	0004      	movs	r4, r0
    RT_ASSERT(rx_fifo != RT_NULL);
    d1aa:	2d00      	cmp	r5, #0
    d1ac:	d014      	beq.n	d1d8 <_serial_fifo_calc_recved_len+0x34>
    if (rx_fifo->put_index == rx_fifo->get_index)
    d1ae:	88aa      	ldrh	r2, [r5, #4]
    d1b0:	88e8      	ldrh	r0, [r5, #6]
    d1b2:	4282      	cmp	r2, r0
    d1b4:	d008      	beq.n	d1c8 <_serial_fifo_calc_recved_len+0x24>
        if (rx_fifo->put_index > rx_fifo->get_index)
    d1b6:	d805      	bhi.n	d1c4 <_serial_fifo_calc_recved_len+0x20>
            return serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index);
    d1b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d1ba:	1a80      	subs	r0, r0, r2
    d1bc:	019b      	lsls	r3, r3, #6
    d1be:	0c1b      	lsrs	r3, r3, #16
    d1c0:	1a18      	subs	r0, r3, r0
}
    d1c2:	bd70      	pop	{r4, r5, r6, pc}
            return rx_fifo->put_index - rx_fifo->get_index;
    d1c4:	1a10      	subs	r0, r2, r0
    d1c6:	e7fc      	b.n	d1c2 <_serial_fifo_calc_recved_len+0x1e>
        return (rx_fifo->is_full == RT_FALSE ? 0 : serial->config.bufsz);
    d1c8:	68ab      	ldr	r3, [r5, #8]
    d1ca:	2000      	movs	r0, #0
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d0f8      	beq.n	d1c2 <_serial_fifo_calc_recved_len+0x1e>
    d1d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d1d2:	0180      	lsls	r0, r0, #6
    d1d4:	0c00      	lsrs	r0, r0, #16
    d1d6:	e7f4      	b.n	d1c2 <_serial_fifo_calc_recved_len+0x1e>
    RT_ASSERT(rx_fifo != RT_NULL);
    d1d8:	2250      	movs	r2, #80	; 0x50
    d1da:	4903      	ldr	r1, [pc, #12]	; (d1e8 <_serial_fifo_calc_recved_len+0x44>)
    d1dc:	4803      	ldr	r0, [pc, #12]	; (d1ec <_serial_fifo_calc_recved_len+0x48>)
    d1de:	32ff      	adds	r2, #255	; 0xff
    d1e0:	f7fd f8aa 	bl	a338 <rt_assert_handler>
    d1e4:	e7e3      	b.n	d1ae <_serial_fifo_calc_recved_len+0xa>
    d1e6:	46c0      	nop			; (mov r8, r8)
    d1e8:	000168a4 	.word	0x000168a4
    d1ec:	000166c0 	.word	0x000166c0

0000d1f0 <rt_serial_init>:
{
    d1f0:	b510      	push	{r4, lr}
    d1f2:	1e04      	subs	r4, r0, #0
    RT_ASSERT(dev != RT_NULL);
    d1f4:	d00d      	beq.n	d212 <rt_serial_init+0x22>
    serial->serial_rx = RT_NULL;
    d1f6:	2300      	movs	r3, #0
    d1f8:	64e3      	str	r3, [r4, #76]	; 0x4c
    serial->serial_tx = RT_NULL;
    d1fa:	6523      	str	r3, [r4, #80]	; 0x50
    if (serial->ops->configure)
    d1fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d1fe:	681b      	ldr	r3, [r3, #0]
    d200:	2b00      	cmp	r3, #0
    d202:	d004      	beq.n	d20e <rt_serial_init+0x1e>
        result = serial->ops->configure(serial, &serial->config);
    d204:	0021      	movs	r1, r4
    d206:	0020      	movs	r0, r4
    d208:	3144      	adds	r1, #68	; 0x44
    d20a:	4798      	blx	r3
}
    d20c:	bd10      	pop	{r4, pc}
    rt_err_t result = RT_EOK;
    d20e:	2000      	movs	r0, #0
    return result;
    d210:	e7fc      	b.n	d20c <rt_serial_init+0x1c>
    RT_ASSERT(dev != RT_NULL);
    d212:	4a03      	ldr	r2, [pc, #12]	; (d220 <rt_serial_init+0x30>)
    d214:	4903      	ldr	r1, [pc, #12]	; (d224 <rt_serial_init+0x34>)
    d216:	4804      	ldr	r0, [pc, #16]	; (d228 <rt_serial_init+0x38>)
    d218:	f7fd f88e 	bl	a338 <rt_assert_handler>
    d21c:	e7eb      	b.n	d1f6 <rt_serial_init+0x6>
    d21e:	46c0      	nop			; (mov r8, r8)
    d220:	0000021f 	.word	0x0000021f
    d224:	00016854 	.word	0x00016854
    d228:	00014dcc 	.word	0x00014dcc

0000d22c <rt_serial_open>:
{
    d22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d22e:	46c6      	mov	lr, r8
    d230:	0004      	movs	r4, r0
    d232:	000d      	movs	r5, r1
    d234:	b500      	push	{lr}
    RT_ASSERT(dev != RT_NULL);
    d236:	2800      	cmp	r0, #0
    d238:	d100      	bne.n	d23c <rt_serial_open+0x10>
    d23a:	e0e0      	b.n	d3fe <rt_serial_open+0x1d2>
    if ((oflag & RT_DEVICE_FLAG_DMA_RX) && !(dev->flag & RT_DEVICE_FLAG_DMA_RX))
    d23c:	2380      	movs	r3, #128	; 0x80
    d23e:	0028      	movs	r0, r5
    d240:	009b      	lsls	r3, r3, #2
    d242:	4018      	ands	r0, r3
    d244:	421d      	tst	r5, r3
    d246:	d003      	beq.n	d250 <rt_serial_open+0x24>
    d248:	8ae2      	ldrh	r2, [r4, #22]
    d24a:	421a      	tst	r2, r3
    d24c:	d100      	bne.n	d250 <rt_serial_open+0x24>
    d24e:	e0e5      	b.n	d41c <rt_serial_open+0x1f0>
    if ((oflag & RT_DEVICE_FLAG_DMA_TX) && !(dev->flag & RT_DEVICE_FLAG_DMA_TX))
    d250:	2380      	movs	r3, #128	; 0x80
    d252:	002f      	movs	r7, r5
    d254:	011b      	lsls	r3, r3, #4
    d256:	401f      	ands	r7, r3
    d258:	421d      	tst	r5, r3
    d25a:	d003      	beq.n	d264 <rt_serial_open+0x38>
    d25c:	8ae2      	ldrh	r2, [r4, #22]
    d25e:	421a      	tst	r2, r3
    d260:	d100      	bne.n	d264 <rt_serial_open+0x38>
    d262:	e0db      	b.n	d41c <rt_serial_open+0x1f0>
    if ((oflag & RT_DEVICE_FLAG_INT_RX) && !(dev->flag & RT_DEVICE_FLAG_INT_RX))
    d264:	2380      	movs	r3, #128	; 0x80
    d266:	002a      	movs	r2, r5
    d268:	005b      	lsls	r3, r3, #1
    d26a:	401a      	ands	r2, r3
    d26c:	421d      	tst	r5, r3
    d26e:	d003      	beq.n	d278 <rt_serial_open+0x4c>
    d270:	8ae1      	ldrh	r1, [r4, #22]
    d272:	4219      	tst	r1, r3
    d274:	d100      	bne.n	d278 <rt_serial_open+0x4c>
    d276:	e0d1      	b.n	d41c <rt_serial_open+0x1f0>
    if ((oflag & RT_DEVICE_FLAG_INT_TX) && !(dev->flag & RT_DEVICE_FLAG_INT_TX))
    d278:	2380      	movs	r3, #128	; 0x80
    d27a:	0029      	movs	r1, r5
    d27c:	00db      	lsls	r3, r3, #3
    d27e:	4019      	ands	r1, r3
    d280:	4688      	mov	r8, r1
    d282:	421d      	tst	r5, r3
    d284:	d003      	beq.n	d28e <rt_serial_open+0x62>
    d286:	8ae1      	ldrh	r1, [r4, #22]
    d288:	4219      	tst	r1, r3
    d28a:	d100      	bne.n	d28e <rt_serial_open+0x62>
    d28c:	e0c6      	b.n	d41c <rt_serial_open+0x1f0>
        stream_flag = RT_DEVICE_FLAG_STREAM;
    d28e:	2640      	movs	r6, #64	; 0x40
    if ((oflag & RT_DEVICE_FLAG_STREAM) || (dev->open_flag & RT_DEVICE_FLAG_STREAM))
    d290:	066b      	lsls	r3, r5, #25
    d292:	d521      	bpl.n	d2d8 <rt_serial_open+0xac>
    dev->open_flag = oflag & 0xff;
    d294:	21ff      	movs	r1, #255	; 0xff
    if (serial->serial_rx == RT_NULL)
    d296:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    dev->open_flag = oflag & 0xff;
    d298:	400d      	ands	r5, r1
    d29a:	8325      	strh	r5, [r4, #24]
    if (serial->serial_rx == RT_NULL)
    d29c:	2b00      	cmp	r3, #0
    d29e:	d025      	beq.n	d2ec <rt_serial_open+0xc0>
        if (oflag & RT_DEVICE_FLAG_INT_RX)
    d2a0:	2a00      	cmp	r2, #0
    d2a2:	d04e      	beq.n	d342 <rt_serial_open+0x116>
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
    d2a4:	2180      	movs	r1, #128	; 0x80
    d2a6:	0049      	lsls	r1, r1, #1
    d2a8:	430d      	orrs	r5, r1
    d2aa:	8325      	strh	r5, [r4, #24]
    if (serial->serial_tx == RT_NULL)
    d2ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d2ae:	2b00      	cmp	r3, #0
    d2b0:	d050      	beq.n	d354 <rt_serial_open+0x128>
        if (oflag & RT_DEVICE_FLAG_INT_TX)
    d2b2:	4643      	mov	r3, r8
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d064      	beq.n	d382 <rt_serial_open+0x156>
            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
    d2b8:	2380      	movs	r3, #128	; 0x80
    d2ba:	8b22      	ldrh	r2, [r4, #24]
    d2bc:	00db      	lsls	r3, r3, #3
    d2be:	4313      	orrs	r3, r2
    dev->open_flag |= stream_flag;
    d2c0:	431e      	orrs	r6, r3
    serial->ops->control(serial, RT_DEVICE_CTRL_HW_OPEN, RT_NULL);
    d2c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d2c4:	2200      	movs	r2, #0
    d2c6:	2120      	movs	r1, #32
    d2c8:	0020      	movs	r0, r4
    d2ca:	685b      	ldr	r3, [r3, #4]
    dev->open_flag |= stream_flag;
    d2cc:	8326      	strh	r6, [r4, #24]
    serial->ops->control(serial, RT_DEVICE_CTRL_HW_OPEN, RT_NULL);
    d2ce:	4798      	blx	r3
    return RT_EOK;
    d2d0:	2000      	movs	r0, #0
}
    d2d2:	bc80      	pop	{r7}
    d2d4:	46b8      	mov	r8, r7
    d2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2d8:	8b23      	ldrh	r3, [r4, #24]
    d2da:	401e      	ands	r6, r3
    if ((oflag & RT_DEVICE_FLAG_STREAM) || (dev->open_flag & RT_DEVICE_FLAG_STREAM))
    d2dc:	d0da      	beq.n	d294 <rt_serial_open+0x68>
    dev->open_flag = oflag & 0xff;
    d2de:	21ff      	movs	r1, #255	; 0xff
    if (serial->serial_rx == RT_NULL)
    d2e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    dev->open_flag = oflag & 0xff;
    d2e2:	400d      	ands	r5, r1
        stream_flag = RT_DEVICE_FLAG_STREAM;
    d2e4:	2640      	movs	r6, #64	; 0x40
    dev->open_flag = oflag & 0xff;
    d2e6:	8325      	strh	r5, [r4, #24]
    if (serial->serial_rx == RT_NULL)
    d2e8:	2b00      	cmp	r3, #0
    d2ea:	d1d9      	bne.n	d2a0 <rt_serial_open+0x74>
        if (oflag & RT_DEVICE_FLAG_INT_RX)
    d2ec:	2a00      	cmp	r2, #0
    d2ee:	d151      	bne.n	d394 <rt_serial_open+0x168>
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
    d2f0:	2800      	cmp	r0, #0
    d2f2:	d0db      	beq.n	d2ac <rt_serial_open+0x80>
            if (serial->config.bufsz == 0) {
    d2f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    d2f6:	4a5b      	ldr	r2, [pc, #364]	; (d464 <rt_serial_open+0x238>)
    d2f8:	4210      	tst	r0, r2
    d2fa:	d100      	bne.n	d2fe <rt_serial_open+0xd2>
    d2fc:	e085      	b.n	d40a <rt_serial_open+0x1de>
                    serial->config.bufsz);
    d2fe:	0180      	lsls	r0, r0, #6
    d300:	0c00      	lsrs	r0, r0, #16
                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
    d302:	300c      	adds	r0, #12
    d304:	f7fd f9c0 	bl	a688 <rt_malloc>
    d308:	1e05      	subs	r5, r0, #0
                RT_ASSERT(rx_fifo != RT_NULL);
    d30a:	d100      	bne.n	d30e <rt_serial_open+0xe2>
    d30c:	e0a3      	b.n	d456 <rt_serial_open+0x22a>
                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d30e:	0028      	movs	r0, r5
                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d310:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d312:	300c      	adds	r0, #12
                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d314:	019a      	lsls	r2, r3, #6
    d316:	2100      	movs	r1, #0
    d318:	0c12      	lsrs	r2, r2, #16
                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d31a:	6028      	str	r0, [r5, #0]
                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d31c:	f7fc fca8 	bl	9c70 <rt_memset>
                rx_fifo->put_index = 0;
    d320:	2300      	movs	r3, #0
                serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
    d322:	2280      	movs	r2, #128	; 0x80
                rx_fifo->put_index = 0;
    d324:	606b      	str	r3, [r5, #4]
                rx_fifo->is_full = RT_FALSE;
    d326:	60ab      	str	r3, [r5, #8]
                serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
    d328:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d32a:	2103      	movs	r1, #3
    d32c:	0020      	movs	r0, r4
    d32e:	685b      	ldr	r3, [r3, #4]
                serial->serial_rx = rx_fifo;
    d330:	64e5      	str	r5, [r4, #76]	; 0x4c
                serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
    d332:	0092      	lsls	r2, r2, #2
    d334:	4798      	blx	r3
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
    d336:	2380      	movs	r3, #128	; 0x80
    d338:	8b22      	ldrh	r2, [r4, #24]
    d33a:	009b      	lsls	r3, r3, #2
    d33c:	4313      	orrs	r3, r2
    d33e:	8323      	strh	r3, [r4, #24]
    d340:	e7b4      	b.n	d2ac <rt_serial_open+0x80>
        else if (oflag & RT_DEVICE_FLAG_DMA_RX)
    d342:	2800      	cmp	r0, #0
    d344:	d0b2      	beq.n	d2ac <rt_serial_open+0x80>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
    d346:	2180      	movs	r1, #128	; 0x80
    if (serial->serial_tx == RT_NULL)
    d348:	6d23      	ldr	r3, [r4, #80]	; 0x50
            dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
    d34a:	0089      	lsls	r1, r1, #2
    d34c:	430d      	orrs	r5, r1
    d34e:	8325      	strh	r5, [r4, #24]
    if (serial->serial_tx == RT_NULL)
    d350:	2b00      	cmp	r3, #0
    d352:	d1ae      	bne.n	d2b2 <rt_serial_open+0x86>
        if (oflag & RT_DEVICE_FLAG_INT_TX)
    d354:	4643      	mov	r3, r8
    d356:	2b00      	cmp	r3, #0
    d358:	d13c      	bne.n	d3d4 <rt_serial_open+0x1a8>
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
    d35a:	2f00      	cmp	r7, #0
    d35c:	d018      	beq.n	d390 <rt_serial_open+0x164>
            tx_dma = (struct rt_serial_tx_dma*) rt_malloc (sizeof(struct rt_serial_tx_dma));
    d35e:	2028      	movs	r0, #40	; 0x28
    d360:	f7fd f992 	bl	a688 <rt_malloc>
    d364:	1e05      	subs	r5, r0, #0
            RT_ASSERT(tx_dma != RT_NULL);
    d366:	d069      	beq.n	d43c <rt_serial_open+0x210>
            tx_dma->activated = RT_FALSE;
    d368:	2300      	movs	r3, #0
    d36a:	0028      	movs	r0, r5
            rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
    d36c:	2204      	movs	r2, #4
            tx_dma->activated = RT_FALSE;
    d36e:	c008      	stmia	r0!, {r3}
            rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
    d370:	2108      	movs	r1, #8
    d372:	f7ff fcf9 	bl	cd68 <rt_data_queue_init>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
    d376:	2380      	movs	r3, #128	; 0x80
    d378:	8b22      	ldrh	r2, [r4, #24]
    d37a:	011b      	lsls	r3, r3, #4
            serial->serial_tx = tx_dma;
    d37c:	6525      	str	r5, [r4, #80]	; 0x50
            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
    d37e:	4313      	orrs	r3, r2
    d380:	e79e      	b.n	d2c0 <rt_serial_open+0x94>
        else if (oflag & RT_DEVICE_FLAG_DMA_TX)
    d382:	2f00      	cmp	r7, #0
    d384:	d004      	beq.n	d390 <rt_serial_open+0x164>
            dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
    d386:	2380      	movs	r3, #128	; 0x80
    d388:	8b22      	ldrh	r2, [r4, #24]
    d38a:	011b      	lsls	r3, r3, #4
    d38c:	4313      	orrs	r3, r2
    d38e:	e797      	b.n	d2c0 <rt_serial_open+0x94>
    dev->open_flag |= stream_flag;
    d390:	8b23      	ldrh	r3, [r4, #24]
    d392:	e795      	b.n	d2c0 <rt_serial_open+0x94>
                serial->config.bufsz);
    d394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d396:	0198      	lsls	r0, r3, #6
    d398:	0c00      	lsrs	r0, r0, #16
            rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
    d39a:	300c      	adds	r0, #12
    d39c:	f7fd f974 	bl	a688 <rt_malloc>
    d3a0:	1e05      	subs	r5, r0, #0
            RT_ASSERT(rx_fifo != RT_NULL);
    d3a2:	d03e      	beq.n	d422 <rt_serial_open+0x1f6>
            rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d3a4:	0028      	movs	r0, r5
            rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d3a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d3a8:	300c      	adds	r0, #12
            rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d3aa:	019a      	lsls	r2, r3, #6
    d3ac:	2100      	movs	r1, #0
            rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
    d3ae:	6028      	str	r0, [r5, #0]
            rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
    d3b0:	0c12      	lsrs	r2, r2, #16
    d3b2:	f7fc fc5d 	bl	9c70 <rt_memset>
            rx_fifo->put_index = 0;
    d3b6:	2300      	movs	r3, #0
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
    d3b8:	2280      	movs	r2, #128	; 0x80
            rx_fifo->put_index = 0;
    d3ba:	606b      	str	r3, [r5, #4]
            rx_fifo->is_full = RT_FALSE;
    d3bc:	60ab      	str	r3, [r5, #8]
            dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
    d3be:	8b23      	ldrh	r3, [r4, #24]
    d3c0:	0052      	lsls	r2, r2, #1
    d3c2:	4313      	orrs	r3, r2
    d3c4:	8323      	strh	r3, [r4, #24]
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    d3c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d3c8:	2110      	movs	r1, #16
    d3ca:	0020      	movs	r0, r4
    d3cc:	685b      	ldr	r3, [r3, #4]
            serial->serial_rx = rx_fifo;
    d3ce:	64e5      	str	r5, [r4, #76]	; 0x4c
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
    d3d0:	4798      	blx	r3
    d3d2:	e76b      	b.n	d2ac <rt_serial_open+0x80>
            tx_fifo = (struct rt_serial_tx_fifo*) rt_malloc(sizeof(struct rt_serial_tx_fifo));
    d3d4:	200c      	movs	r0, #12
    d3d6:	f7fd f957 	bl	a688 <rt_malloc>
    d3da:	1e05      	subs	r5, r0, #0
            RT_ASSERT(tx_fifo != RT_NULL);
    d3dc:	d027      	beq.n	d42e <rt_serial_open+0x202>
            rt_completion_init(&(tx_fifo->completion));
    d3de:	0028      	movs	r0, r5
    d3e0:	f7ff fc0a 	bl	cbf8 <rt_completion_init>
            dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
    d3e4:	2280      	movs	r2, #128	; 0x80
    d3e6:	8b23      	ldrh	r3, [r4, #24]
    d3e8:	00d2      	lsls	r2, r2, #3
    d3ea:	4313      	orrs	r3, r2
    d3ec:	8323      	strh	r3, [r4, #24]
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
    d3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d3f0:	2110      	movs	r1, #16
    d3f2:	685b      	ldr	r3, [r3, #4]
    d3f4:	0020      	movs	r0, r4
            serial->serial_tx = tx_fifo;
    d3f6:	6525      	str	r5, [r4, #80]	; 0x50
            serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
    d3f8:	4798      	blx	r3
    dev->open_flag |= stream_flag;
    d3fa:	8b23      	ldrh	r3, [r4, #24]
    d3fc:	e760      	b.n	d2c0 <rt_serial_open+0x94>
    RT_ASSERT(dev != RT_NULL);
    d3fe:	4a1a      	ldr	r2, [pc, #104]	; (d468 <rt_serial_open+0x23c>)
    d400:	491a      	ldr	r1, [pc, #104]	; (d46c <rt_serial_open+0x240>)
    d402:	481b      	ldr	r0, [pc, #108]	; (d470 <rt_serial_open+0x244>)
    d404:	f7fc ff98 	bl	a338 <rt_assert_handler>
    d408:	e718      	b.n	d23c <rt_serial_open+0x10>
                rx_dma = (struct rt_serial_rx_dma*) rt_malloc (sizeof(struct rt_serial_rx_dma));
    d40a:	2004      	movs	r0, #4
    d40c:	f7fd f93c 	bl	a688 <rt_malloc>
    d410:	1e05      	subs	r5, r0, #0
                RT_ASSERT(rx_dma != RT_NULL);
    d412:	d019      	beq.n	d448 <rt_serial_open+0x21c>
                rx_dma->activated = RT_FALSE;
    d414:	2300      	movs	r3, #0
    d416:	602b      	str	r3, [r5, #0]
                serial->serial_rx = rx_dma;
    d418:	64e5      	str	r5, [r4, #76]	; 0x4c
    d41a:	e78c      	b.n	d336 <rt_serial_open+0x10a>
        return -RT_EIO;
    d41c:	2008      	movs	r0, #8
    d41e:	4240      	negs	r0, r0
    d420:	e757      	b.n	d2d2 <rt_serial_open+0xa6>
            RT_ASSERT(rx_fifo != RT_NULL);
    d422:	4a14      	ldr	r2, [pc, #80]	; (d474 <rt_serial_open+0x248>)
    d424:	4911      	ldr	r1, [pc, #68]	; (d46c <rt_serial_open+0x240>)
    d426:	4814      	ldr	r0, [pc, #80]	; (d478 <rt_serial_open+0x24c>)
    d428:	f7fc ff86 	bl	a338 <rt_assert_handler>
    d42c:	e7ba      	b.n	d3a4 <rt_serial_open+0x178>
            RT_ASSERT(tx_fifo != RT_NULL);
    d42e:	22a4      	movs	r2, #164	; 0xa4
    d430:	490e      	ldr	r1, [pc, #56]	; (d46c <rt_serial_open+0x240>)
    d432:	4812      	ldr	r0, [pc, #72]	; (d47c <rt_serial_open+0x250>)
    d434:	0092      	lsls	r2, r2, #2
    d436:	f7fc ff7f 	bl	a338 <rt_assert_handler>
    d43a:	e7d0      	b.n	d3de <rt_serial_open+0x1b2>
            RT_ASSERT(tx_dma != RT_NULL);
    d43c:	4a10      	ldr	r2, [pc, #64]	; (d480 <rt_serial_open+0x254>)
    d43e:	490b      	ldr	r1, [pc, #44]	; (d46c <rt_serial_open+0x240>)
    d440:	4810      	ldr	r0, [pc, #64]	; (d484 <rt_serial_open+0x258>)
    d442:	f7fc ff79 	bl	a338 <rt_assert_handler>
    d446:	e78f      	b.n	d368 <rt_serial_open+0x13c>
                RT_ASSERT(rx_dma != RT_NULL);
    d448:	2299      	movs	r2, #153	; 0x99
    d44a:	4908      	ldr	r1, [pc, #32]	; (d46c <rt_serial_open+0x240>)
    d44c:	480e      	ldr	r0, [pc, #56]	; (d488 <rt_serial_open+0x25c>)
    d44e:	0092      	lsls	r2, r2, #2
    d450:	f7fc ff72 	bl	a338 <rt_assert_handler>
    d454:	e7de      	b.n	d414 <rt_serial_open+0x1e8>
                RT_ASSERT(rx_fifo != RT_NULL);
    d456:	4a0d      	ldr	r2, [pc, #52]	; (d48c <rt_serial_open+0x260>)
    d458:	4904      	ldr	r1, [pc, #16]	; (d46c <rt_serial_open+0x240>)
    d45a:	4807      	ldr	r0, [pc, #28]	; (d478 <rt_serial_open+0x24c>)
    d45c:	f7fc ff6c 	bl	a338 <rt_assert_handler>
    d460:	e755      	b.n	d30e <rt_serial_open+0xe2>
    d462:	46c0      	nop			; (mov r8, r8)
    d464:	03fffc00 	.word	0x03fffc00
    d468:	00000232 	.word	0x00000232
    d46c:	00016864 	.word	0x00016864
    d470:	00014dcc 	.word	0x00014dcc
    d474:	00000251 	.word	0x00000251
    d478:	000166c0 	.word	0x000166c0
    d47c:	000166e8 	.word	0x000166e8
    d480:	0000029f 	.word	0x0000029f
    d484:	000166fc 	.word	0x000166fc
    d488:	000166d4 	.word	0x000166d4
    d48c:	0000026d 	.word	0x0000026d

0000d490 <rt_serial_write>:
{
    d490:	b5f0      	push	{r4, r5, r6, r7, lr}
    d492:	46c6      	mov	lr, r8
    d494:	0005      	movs	r5, r0
    d496:	0014      	movs	r4, r2
    d498:	001e      	movs	r6, r3
    d49a:	b500      	push	{lr}
    RT_ASSERT(dev != RT_NULL);
    d49c:	2800      	cmp	r0, #0
    d49e:	d048      	beq.n	d532 <rt_serial_write+0xa2>
    if (size == 0) return 0;
    d4a0:	2e00      	cmp	r6, #0
    d4a2:	d023      	beq.n	d4ec <rt_serial_write+0x5c>
    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
    d4a4:	8b2b      	ldrh	r3, [r5, #24]
    d4a6:	055a      	lsls	r2, r3, #21
    d4a8:	d449      	bmi.n	d53e <rt_serial_write+0xae>
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
    d4aa:	051b      	lsls	r3, r3, #20
    d4ac:	d422      	bmi.n	d4f4 <rt_serial_write+0x64>
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
    d4ae:	2340      	movs	r3, #64	; 0x40
    d4b0:	19a7      	adds	r7, r4, r6
    d4b2:	4698      	mov	r8, r3
    d4b4:	e006      	b.n	d4c4 <rt_serial_write+0x34>
        serial->ops->putc(serial, *data);
    d4b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d4b8:	0028      	movs	r0, r5
    d4ba:	689b      	ldr	r3, [r3, #8]
        ++ data;
    d4bc:	3401      	adds	r4, #1
        serial->ops->putc(serial, *data);
    d4be:	4798      	blx	r3
    while (length)
    d4c0:	42bc      	cmp	r4, r7
    d4c2:	d013      	beq.n	d4ec <rt_serial_write+0x5c>
        if (*data == '\n' && (serial->parent.open_flag & RT_DEVICE_FLAG_STREAM))
    d4c4:	7821      	ldrb	r1, [r4, #0]
    d4c6:	290a      	cmp	r1, #10
    d4c8:	d1f5      	bne.n	d4b6 <rt_serial_write+0x26>
    d4ca:	4642      	mov	r2, r8
    d4cc:	8b2b      	ldrh	r3, [r5, #24]
    d4ce:	421a      	tst	r2, r3
    d4d0:	d0f1      	beq.n	d4b6 <rt_serial_write+0x26>
            serial->ops->putc(serial, '\r');
    d4d2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d4d4:	3103      	adds	r1, #3
    d4d6:	689b      	ldr	r3, [r3, #8]
    d4d8:	0028      	movs	r0, r5
    d4da:	4798      	blx	r3
        serial->ops->putc(serial, *data);
    d4dc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d4de:	7821      	ldrb	r1, [r4, #0]
    d4e0:	0028      	movs	r0, r5
    d4e2:	689b      	ldr	r3, [r3, #8]
        ++ data;
    d4e4:	3401      	adds	r4, #1
        serial->ops->putc(serial, *data);
    d4e6:	4798      	blx	r3
    while (length)
    d4e8:	42bc      	cmp	r4, r7
    d4ea:	d1eb      	bne.n	d4c4 <rt_serial_write+0x34>
}
    d4ec:	0030      	movs	r0, r6
    d4ee:	bc80      	pop	{r7}
    d4f0:	46b8      	mov	r8, r7
    d4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    result = rt_data_queue_push(&(tx_dma->data_queue), data, length, RT_WAITING_FOREVER);
    d4f4:	2301      	movs	r3, #1
    tx_dma = (struct rt_serial_tx_dma*)(serial->serial_tx);
    d4f6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    result = rt_data_queue_push(&(tx_dma->data_queue), data, length, RT_WAITING_FOREVER);
    d4f8:	0032      	movs	r2, r6
    d4fa:	0021      	movs	r1, r4
    d4fc:	1d38      	adds	r0, r7, #4
    d4fe:	425b      	negs	r3, r3
    d500:	f7ff fc5a 	bl	cdb8 <rt_data_queue_push>
    if (result == RT_EOK)
    d504:	2800      	cmp	r0, #0
    d506:	d110      	bne.n	d52a <rt_serial_write+0x9a>
        level = rt_hw_interrupt_disable();
    d508:	f7f6 fdd2 	bl	40b0 <rt_hw_interrupt_disable>
        if (tx_dma->activated != RT_TRUE)
    d50c:	683b      	ldr	r3, [r7, #0]
    d50e:	2b01      	cmp	r3, #1
    d510:	d031      	beq.n	d576 <rt_serial_write+0xe6>
            tx_dma->activated = RT_TRUE;
    d512:	2301      	movs	r3, #1
    d514:	603b      	str	r3, [r7, #0]
            rt_hw_interrupt_enable(level);
    d516:	f7f6 fdcf 	bl	40b8 <rt_hw_interrupt_enable>
            serial->ops->dma_transmit(serial, (rt_uint8_t *)data, length, RT_SERIAL_DMA_TX);
    d51a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d51c:	0032      	movs	r2, r6
    d51e:	691f      	ldr	r7, [r3, #16]
    d520:	0021      	movs	r1, r4
    d522:	2302      	movs	r3, #2
    d524:	0028      	movs	r0, r5
    d526:	47b8      	blx	r7
    d528:	e7e0      	b.n	d4ec <rt_serial_write+0x5c>
        rt_set_errno(result);
    d52a:	f7fc fb8f 	bl	9c4c <rt_set_errno>
        return 0;
    d52e:	2600      	movs	r6, #0
        return _serial_dma_tx(serial, buffer, size);
    d530:	e7dc      	b.n	d4ec <rt_serial_write+0x5c>
    RT_ASSERT(dev != RT_NULL);
    d532:	4a16      	ldr	r2, [pc, #88]	; (d58c <rt_serial_write+0xfc>)
    d534:	4916      	ldr	r1, [pc, #88]	; (d590 <rt_serial_write+0x100>)
    d536:	4817      	ldr	r0, [pc, #92]	; (d594 <rt_serial_write+0x104>)
    d538:	f7fc fefe 	bl	a338 <rt_assert_handler>
    d53c:	e7b0      	b.n	d4a0 <rt_serial_write+0x10>
    tx = (struct rt_serial_tx_fifo*) serial->serial_tx;
    d53e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
        return _serial_int_tx(serial, buffer, size);
    d540:	0037      	movs	r7, r6
    tx = (struct rt_serial_tx_fifo*) serial->serial_tx;
    d542:	4698      	mov	r8, r3
    RT_ASSERT(tx != RT_NULL);
    d544:	2b00      	cmp	r3, #0
    d546:	d019      	beq.n	d57c <rt_serial_write+0xec>
        if (serial->ops->putc(serial, *(char*)data) == -1)
    d548:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d54a:	0028      	movs	r0, r5
    d54c:	689b      	ldr	r3, [r3, #8]
    d54e:	7821      	ldrb	r1, [r4, #0]
    d550:	4798      	blx	r3
    d552:	1c43      	adds	r3, r0, #1
    d554:	d00a      	beq.n	d56c <rt_serial_write+0xdc>
        data ++; length --;
    d556:	3f01      	subs	r7, #1
    d558:	3401      	adds	r4, #1
    while (length)
    d55a:	2f00      	cmp	r7, #0
    d55c:	d0c6      	beq.n	d4ec <rt_serial_write+0x5c>
        if (serial->ops->putc(serial, *(char*)data) == -1)
    d55e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d560:	0028      	movs	r0, r5
    d562:	689b      	ldr	r3, [r3, #8]
    d564:	7821      	ldrb	r1, [r4, #0]
    d566:	4798      	blx	r3
    d568:	1c43      	adds	r3, r0, #1
    d56a:	d1f4      	bne.n	d556 <rt_serial_write+0xc6>
            rt_completion_wait(&(tx->completion), RT_WAITING_FOREVER);
    d56c:	0001      	movs	r1, r0
    d56e:	4640      	mov	r0, r8
    d570:	f7ff fb5a 	bl	cc28 <rt_completion_wait>
    while (length)
    d574:	e7e8      	b.n	d548 <rt_serial_write+0xb8>
            rt_hw_interrupt_enable(level);
    d576:	f7f6 fd9f 	bl	40b8 <rt_hw_interrupt_enable>
    d57a:	e7b7      	b.n	d4ec <rt_serial_write+0x5c>
    RT_ASSERT(tx != RT_NULL);
    d57c:	229d      	movs	r2, #157	; 0x9d
    d57e:	4906      	ldr	r1, [pc, #24]	; (d598 <rt_serial_write+0x108>)
    d580:	4806      	ldr	r0, [pc, #24]	; (d59c <rt_serial_write+0x10c>)
    d582:	0052      	lsls	r2, r2, #1
    d584:	f7fc fed8 	bl	a338 <rt_assert_handler>
    d588:	e7de      	b.n	d548 <rt_serial_write+0xb8>
    d58a:	46c0      	nop			; (mov r8, r8)
    d58c:	00000332 	.word	0x00000332
    d590:	00016818 	.word	0x00016818
    d594:	00014dcc 	.word	0x00014dcc
    d598:	00016808 	.word	0x00016808
    d59c:	00016710 	.word	0x00016710

0000d5a0 <rt_serial_read>:
{
    d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5a2:	464f      	mov	r7, r9
    d5a4:	46d6      	mov	lr, sl
    d5a6:	4646      	mov	r6, r8
    d5a8:	0005      	movs	r5, r0
    d5aa:	b5c0      	push	{r6, r7, lr}
    d5ac:	0014      	movs	r4, r2
    d5ae:	001f      	movs	r7, r3
    RT_ASSERT(dev != RT_NULL);
    d5b0:	2800      	cmp	r0, #0
    d5b2:	d04b      	beq.n	d64c <rt_serial_read+0xac>
    if (size == 0) return 0;
    d5b4:	2f00      	cmp	r7, #0
    d5b6:	d019      	beq.n	d5ec <rt_serial_read+0x4c>
    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
    d5b8:	8b2b      	ldrh	r3, [r5, #24]
    d5ba:	05da      	lsls	r2, r3, #23
    d5bc:	d44d      	bmi.n	d65a <rt_serial_read+0xba>
    return _serial_poll_rx(serial, buffer, size);
    d5be:	003e      	movs	r6, r7
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
    d5c0:	059b      	lsls	r3, r3, #22
    d5c2:	d417      	bmi.n	d5f4 <rt_serial_read+0x54>
        ch = serial->ops->getc(serial);
    d5c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d5c6:	0028      	movs	r0, r5
    d5c8:	68db      	ldr	r3, [r3, #12]
    d5ca:	4798      	blx	r3
        if (ch == -1) break;
    d5cc:	1c43      	adds	r3, r0, #1
    d5ce:	d00f      	beq.n	d5f0 <rt_serial_read+0x50>
        *data = ch;
    d5d0:	7020      	strb	r0, [r4, #0]
        data ++; length --;
    d5d2:	3e01      	subs	r6, #1
    d5d4:	3401      	adds	r4, #1
        if (ch == '\n') break;
    d5d6:	280a      	cmp	r0, #10
    d5d8:	d00a      	beq.n	d5f0 <rt_serial_read+0x50>
    while (length)
    d5da:	2e00      	cmp	r6, #0
    d5dc:	d1f2      	bne.n	d5c4 <rt_serial_read+0x24>
    d5de:	003e      	movs	r6, r7
}
    d5e0:	0030      	movs	r0, r6
    d5e2:	bce0      	pop	{r5, r6, r7}
    d5e4:	46ba      	mov	sl, r7
    d5e6:	46b1      	mov	r9, r6
    d5e8:	46a8      	mov	r8, r5
    d5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size == 0) return 0;
    d5ec:	2600      	movs	r6, #0
    d5ee:	e7f7      	b.n	d5e0 <rt_serial_read+0x40>
    return size - length;
    d5f0:	1bbe      	subs	r6, r7, r6
    return _serial_poll_rx(serial, buffer, size);
    d5f2:	e7f5      	b.n	d5e0 <rt_serial_read+0x40>
    RT_ASSERT((serial != RT_NULL) && (data != RT_NULL));
    d5f4:	2c00      	cmp	r4, #0
    d5f6:	d105      	bne.n	d604 <rt_serial_read+0x64>
    d5f8:	22df      	movs	r2, #223	; 0xdf
    d5fa:	4973      	ldr	r1, [pc, #460]	; (d7c8 <rt_serial_read+0x228>)
    d5fc:	4873      	ldr	r0, [pc, #460]	; (d7cc <rt_serial_read+0x22c>)
    d5fe:	0052      	lsls	r2, r2, #1
    d600:	f7fc fe9a 	bl	a338 <rt_assert_handler>
    level = rt_hw_interrupt_disable();
    d604:	f7f6 fd54 	bl	40b0 <rt_hw_interrupt_disable>
    if (serial->config.bufsz == 0)
    d608:	6caa      	ldr	r2, [r5, #72]	; 0x48
    d60a:	4b71      	ldr	r3, [pc, #452]	; (d7d0 <rt_serial_read+0x230>)
    d60c:	0016      	movs	r6, r2
    level = rt_hw_interrupt_disable();
    d60e:	4680      	mov	r8, r0
    if (serial->config.bufsz == 0)
    d610:	401e      	ands	r6, r3
    d612:	421a      	tst	r2, r3
    d614:	d15b      	bne.n	d6ce <rt_serial_read+0x12e>
        rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
    d616:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    d618:	4699      	mov	r9, r3
        RT_ASSERT(rx_dma != RT_NULL);
    d61a:	2b00      	cmp	r3, #0
    d61c:	d100      	bne.n	d620 <rt_serial_read+0x80>
    d61e:	e090      	b.n	d742 <rt_serial_read+0x1a2>
        if (rx_dma->activated != RT_TRUE)
    d620:	464b      	mov	r3, r9
    d622:	681b      	ldr	r3, [r3, #0]
    d624:	2b01      	cmp	r3, #1
    d626:	d04a      	beq.n	d6be <rt_serial_read+0x11e>
            rx_dma->activated = RT_TRUE;
    d628:	2301      	movs	r3, #1
    d62a:	464a      	mov	r2, r9
    d62c:	6013      	str	r3, [r2, #0]
            RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
    d62e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d630:	691e      	ldr	r6, [r3, #16]
    d632:	2e00      	cmp	r6, #0
    d634:	d100      	bne.n	d638 <rt_serial_read+0x98>
    d636:	e0a8      	b.n	d78a <rt_serial_read+0x1ea>
            serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
    d638:	2301      	movs	r3, #1
    d63a:	003a      	movs	r2, r7
    d63c:	0021      	movs	r1, r4
    d63e:	0028      	movs	r0, r5
    d640:	47b0      	blx	r6
        rt_hw_interrupt_enable(level);
    d642:	4640      	mov	r0, r8
    d644:	f7f6 fd38 	bl	40b8 <rt_hw_interrupt_enable>
    d648:	003e      	movs	r6, r7
    d64a:	e7c9      	b.n	d5e0 <rt_serial_read+0x40>
    RT_ASSERT(dev != RT_NULL);
    d64c:	22c6      	movs	r2, #198	; 0xc6
    d64e:	4961      	ldr	r1, [pc, #388]	; (d7d4 <rt_serial_read+0x234>)
    d650:	4861      	ldr	r0, [pc, #388]	; (d7d8 <rt_serial_read+0x238>)
    d652:	0092      	lsls	r2, r2, #2
    d654:	f7fc fe70 	bl	a338 <rt_assert_handler>
    d658:	e7ac      	b.n	d5b4 <rt_serial_read+0x14>
    rx_fifo = (struct rt_serial_rx_fifo*) serial->serial_rx;
    d65a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
    RT_ASSERT(rx_fifo != RT_NULL);
    d65c:	2e00      	cmp	r6, #0
    d65e:	d077      	beq.n	d750 <rt_serial_read+0x1b0>
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    d660:	2300      	movs	r3, #0
{
    d662:	46b8      	mov	r8, r7
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    d664:	469a      	mov	sl, r3
    d666:	e01c      	b.n	d6a2 <rt_serial_read+0x102>
        ch = rx_fifo->buffer[rx_fifo->get_index];
    d668:	6833      	ldr	r3, [r6, #0]
    d66a:	5c5b      	ldrb	r3, [r3, r1]
        rx_fifo->get_index += 1;
    d66c:	3101      	adds	r1, #1
        ch = rx_fifo->buffer[rx_fifo->get_index];
    d66e:	4699      	mov	r9, r3
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    d670:	6cab      	ldr	r3, [r5, #72]	; 0x48
        rx_fifo->get_index += 1;
    d672:	b289      	uxth	r1, r1
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    d674:	019b      	lsls	r3, r3, #6
        rx_fifo->get_index += 1;
    d676:	80f1      	strh	r1, [r6, #6]
        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    d678:	0c1b      	lsrs	r3, r3, #16
    d67a:	428b      	cmp	r3, r1
    d67c:	d801      	bhi.n	d682 <rt_serial_read+0xe2>
    d67e:	4653      	mov	r3, sl
    d680:	80f3      	strh	r3, [r6, #6]
        if (rx_fifo->is_full == RT_TRUE)
    d682:	2a01      	cmp	r2, #1
    d684:	d101      	bne.n	d68a <rt_serial_read+0xea>
            rx_fifo->is_full = RT_FALSE;
    d686:	4653      	mov	r3, sl
    d688:	60b3      	str	r3, [r6, #8]
        rt_hw_interrupt_enable(level);
    d68a:	f7f6 fd15 	bl	40b8 <rt_hw_interrupt_enable>
        *data = ch & 0xff;
    d68e:	464b      	mov	r3, r9
    d690:	7023      	strb	r3, [r4, #0]
        data ++; length --;
    d692:	2301      	movs	r3, #1
    d694:	425b      	negs	r3, r3
    d696:	469c      	mov	ip, r3
    d698:	44e0      	add	r8, ip
    while (length)
    d69a:	4643      	mov	r3, r8
        data ++; length --;
    d69c:	3401      	adds	r4, #1
    while (length)
    d69e:	2b00      	cmp	r3, #0
    d6a0:	d09d      	beq.n	d5de <rt_serial_read+0x3e>
        level = rt_hw_interrupt_disable();
    d6a2:	f7f6 fd05 	bl	40b0 <rt_hw_interrupt_disable>
        if ((rx_fifo->get_index == rx_fifo->put_index) && (rx_fifo->is_full == RT_FALSE))
    d6a6:	88f1      	ldrh	r1, [r6, #6]
    d6a8:	88b3      	ldrh	r3, [r6, #4]
    d6aa:	68b2      	ldr	r2, [r6, #8]
    d6ac:	428b      	cmp	r3, r1
    d6ae:	d1db      	bne.n	d668 <rt_serial_read+0xc8>
    d6b0:	2a00      	cmp	r2, #0
    d6b2:	d1d9      	bne.n	d668 <rt_serial_read+0xc8>
            rt_hw_interrupt_enable(level);
    d6b4:	f7f6 fd00 	bl	40b8 <rt_hw_interrupt_enable>
    return size - length;
    d6b8:	4643      	mov	r3, r8
    d6ba:	1aff      	subs	r7, r7, r3
            break;
    d6bc:	e78f      	b.n	d5de <rt_serial_read+0x3e>
        rt_hw_interrupt_enable(level);
    d6be:	4640      	mov	r0, r8
    d6c0:	f7f6 fcfa 	bl	40b8 <rt_hw_interrupt_enable>
        rt_set_errno(result);
    d6c4:	2007      	movs	r0, #7
    d6c6:	4240      	negs	r0, r0
    d6c8:	f7fc fac0 	bl	9c4c <rt_set_errno>
        return 0;
    d6cc:	e788      	b.n	d5e0 <rt_serial_read+0x40>
        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    d6ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    return _serial_fifo_calc_recved_len(serial);
    d6d0:	0028      	movs	r0, r5
        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    d6d2:	4699      	mov	r9, r3
    return _serial_fifo_calc_recved_len(serial);
    d6d4:	f7ff fd66 	bl	d1a4 <_serial_fifo_calc_recved_len>
        RT_ASSERT(rx_fifo != RT_NULL);
    d6d8:	464b      	mov	r3, r9
    return _serial_fifo_calc_recved_len(serial);
    d6da:	0006      	movs	r6, r0
        RT_ASSERT(rx_fifo != RT_NULL);
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d06b      	beq.n	d7b8 <rt_serial_read+0x218>
        if (length < (int)fifo_recved_len)
    d6e0:	42b7      	cmp	r7, r6
    d6e2:	da00      	bge.n	d6e6 <rt_serial_read+0x146>
    d6e4:	003e      	movs	r6, r7
        if (rx_fifo->get_index + recv_len < serial->config.bufsz)
    d6e6:	464b      	mov	r3, r9
    d6e8:	88d9      	ldrh	r1, [r3, #6]
    d6ea:	6cab      	ldr	r3, [r5, #72]	; 0x48
    d6ec:	019a      	lsls	r2, r3, #6
    d6ee:	198b      	adds	r3, r1, r6
    d6f0:	0c12      	lsrs	r2, r2, #16
    d6f2:	4293      	cmp	r3, r2
    d6f4:	d233      	bcs.n	d75e <rt_serial_read+0x1be>
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index, recv_len);
    d6f6:	464b      	mov	r3, r9
    d6f8:	681b      	ldr	r3, [r3, #0]
    d6fa:	0032      	movs	r2, r6
    d6fc:	0020      	movs	r0, r4
    d6fe:	1859      	adds	r1, r3, r1
    d700:	f7fc fafc 	bl	9cfc <rt_memcpy>
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
    d704:	6cec      	ldr	r4, [r5, #76]	; 0x4c
    RT_ASSERT(rx_fifo != RT_NULL);
    d706:	2c00      	cmp	r4, #0
    d708:	d04f      	beq.n	d7aa <rt_serial_read+0x20a>
    return _serial_fifo_calc_recved_len(serial);
    d70a:	0028      	movs	r0, r5
    d70c:	f7ff fd4a 	bl	d1a4 <_serial_fifo_calc_recved_len>
    RT_ASSERT(len <= rt_dma_calc_recved_len(serial));
    d710:	4286      	cmp	r6, r0
    d712:	d843      	bhi.n	d79c <rt_serial_read+0x1fc>
    if (rx_fifo->is_full && len != 0) rx_fifo->is_full = RT_FALSE;
    d714:	68a3      	ldr	r3, [r4, #8]
    d716:	2b00      	cmp	r3, #0
    d718:	d003      	beq.n	d722 <rt_serial_read+0x182>
    d71a:	2e00      	cmp	r6, #0
    d71c:	d001      	beq.n	d722 <rt_serial_read+0x182>
    d71e:	2300      	movs	r3, #0
    d720:	60a3      	str	r3, [r4, #8]
    rx_fifo->get_index += len;
    d722:	88e0      	ldrh	r0, [r4, #6]
    if (rx_fifo->get_index >= serial->config.bufsz)
    d724:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    rx_fifo->get_index += len;
    d726:	1980      	adds	r0, r0, r6
    d728:	b280      	uxth	r0, r0
    if (rx_fifo->get_index >= serial->config.bufsz)
    d72a:	0189      	lsls	r1, r1, #6
    rx_fifo->get_index += len;
    d72c:	80e0      	strh	r0, [r4, #6]
    if (rx_fifo->get_index >= serial->config.bufsz)
    d72e:	0c09      	lsrs	r1, r1, #16
    d730:	4288      	cmp	r0, r1
    d732:	d302      	bcc.n	d73a <rt_serial_read+0x19a>
        rx_fifo->get_index %= serial->config.bufsz;
    d734:	f7f6 fe12 	bl	435c <__aeabi_uidivmod>
    d738:	80e1      	strh	r1, [r4, #6]
        rt_hw_interrupt_enable(level);
    d73a:	4640      	mov	r0, r8
    d73c:	f7f6 fcbc 	bl	40b8 <rt_hw_interrupt_enable>
        return _serial_dma_rx(serial, buffer, size);
    d740:	e74e      	b.n	d5e0 <rt_serial_read+0x40>
        RT_ASSERT(rx_dma != RT_NULL);
    d742:	22e4      	movs	r2, #228	; 0xe4
    d744:	4920      	ldr	r1, [pc, #128]	; (d7c8 <rt_serial_read+0x228>)
    d746:	4825      	ldr	r0, [pc, #148]	; (d7dc <rt_serial_read+0x23c>)
    d748:	0052      	lsls	r2, r2, #1
    d74a:	f7fc fdf5 	bl	a338 <rt_assert_handler>
    d74e:	e767      	b.n	d620 <rt_serial_read+0x80>
    RT_ASSERT(rx_fifo != RT_NULL);
    d750:	2285      	movs	r2, #133	; 0x85
    d752:	4923      	ldr	r1, [pc, #140]	; (d7e0 <rt_serial_read+0x240>)
    d754:	4823      	ldr	r0, [pc, #140]	; (d7e4 <rt_serial_read+0x244>)
    d756:	0052      	lsls	r2, r2, #1
    d758:	f7fc fdee 	bl	a338 <rt_assert_handler>
    d75c:	e780      	b.n	d660 <rt_serial_read+0xc0>
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
    d75e:	464b      	mov	r3, r9
    d760:	681b      	ldr	r3, [r3, #0]
                    serial->config.bufsz - rx_fifo->get_index);
    d762:	1a52      	subs	r2, r2, r1
            rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
    d764:	469c      	mov	ip, r3
    d766:	0020      	movs	r0, r4
    d768:	4461      	add	r1, ip
    d76a:	f7fc fac7 	bl	9cfc <rt_memcpy>
            rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
    d76e:	464a      	mov	r2, r9
    d770:	4649      	mov	r1, r9
    d772:	6cab      	ldr	r3, [r5, #72]	; 0x48
    d774:	88d0      	ldrh	r0, [r2, #6]
    d776:	019b      	lsls	r3, r3, #6
    d778:	0c1b      	lsrs	r3, r3, #16
    d77a:	1ac2      	subs	r2, r0, r3
    d77c:	1a18      	subs	r0, r3, r0
    d77e:	6809      	ldr	r1, [r1, #0]
    d780:	1992      	adds	r2, r2, r6
    d782:	1820      	adds	r0, r4, r0
    d784:	f7fc faba 	bl	9cfc <rt_memcpy>
    d788:	e7bc      	b.n	d704 <rt_serial_read+0x164>
            RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
    d78a:	22ce      	movs	r2, #206	; 0xce
    d78c:	490e      	ldr	r1, [pc, #56]	; (d7c8 <rt_serial_read+0x228>)
    d78e:	4816      	ldr	r0, [pc, #88]	; (d7e8 <rt_serial_read+0x248>)
    d790:	32ff      	adds	r2, #255	; 0xff
    d792:	f7fc fdd1 	bl	a338 <rt_assert_handler>
            serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
    d796:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    d798:	691e      	ldr	r6, [r3, #16]
    d79a:	e74d      	b.n	d638 <rt_serial_read+0x98>
    RT_ASSERT(len <= rt_dma_calc_recved_len(serial));
    d79c:	227c      	movs	r2, #124	; 0x7c
    d79e:	4913      	ldr	r1, [pc, #76]	; (d7ec <rt_serial_read+0x24c>)
    d7a0:	4813      	ldr	r0, [pc, #76]	; (d7f0 <rt_serial_read+0x250>)
    d7a2:	32ff      	adds	r2, #255	; 0xff
    d7a4:	f7fc fdc8 	bl	a338 <rt_assert_handler>
    d7a8:	e7b4      	b.n	d714 <rt_serial_read+0x174>
    RT_ASSERT(rx_fifo != RT_NULL);
    d7aa:	22bd      	movs	r2, #189	; 0xbd
    d7ac:	490f      	ldr	r1, [pc, #60]	; (d7ec <rt_serial_read+0x24c>)
    d7ae:	480d      	ldr	r0, [pc, #52]	; (d7e4 <rt_serial_read+0x244>)
    d7b0:	0052      	lsls	r2, r2, #1
    d7b2:	f7fc fdc1 	bl	a338 <rt_assert_handler>
    d7b6:	e7a8      	b.n	d70a <rt_serial_read+0x16a>
        RT_ASSERT(rx_fifo != RT_NULL);
    d7b8:	22de      	movs	r2, #222	; 0xde
    d7ba:	4903      	ldr	r1, [pc, #12]	; (d7c8 <rt_serial_read+0x228>)
    d7bc:	4809      	ldr	r0, [pc, #36]	; (d7e4 <rt_serial_read+0x244>)
    d7be:	32ff      	adds	r2, #255	; 0xff
    d7c0:	f7fc fdba 	bl	a338 <rt_assert_handler>
    d7c4:	e78c      	b.n	d6e0 <rt_serial_read+0x140>
    d7c6:	46c0      	nop			; (mov r8, r8)
    d7c8:	000168c4 	.word	0x000168c4
    d7cc:	00016720 	.word	0x00016720
    d7d0:	03fffc00 	.word	0x03fffc00
    d7d4:	000167f8 	.word	0x000167f8
    d7d8:	00014dcc 	.word	0x00014dcc
    d7dc:	000166d4 	.word	0x000166d4
    d7e0:	000168d4 	.word	0x000168d4
    d7e4:	000166c0 	.word	0x000166c0
    d7e8:	0001674c 	.word	0x0001674c
    d7ec:	00016884 	.word	0x00016884
    d7f0:	00016774 	.word	0x00016774

0000d7f4 <rt_serial_close>:
{
    d7f4:	b570      	push	{r4, r5, r6, lr}
    d7f6:	1e04      	subs	r4, r0, #0
    RT_ASSERT(dev != RT_NULL);
    d7f8:	d061      	beq.n	d8be <rt_serial_close+0xca>
    if (dev->ref_count > 1) return RT_EOK;
    d7fa:	7ea3      	ldrb	r3, [r4, #26]
    d7fc:	2b01      	cmp	r3, #1
    d7fe:	d832      	bhi.n	d866 <rt_serial_close+0x72>
    if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
    d800:	8b23      	ldrh	r3, [r4, #24]
    d802:	05da      	lsls	r2, r3, #23
    d804:	d531      	bpl.n	d86a <rt_serial_close+0x76>
        rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
    d806:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        RT_ASSERT(rx_fifo != RT_NULL);
    d808:	2d00      	cmp	r5, #0
    d80a:	d100      	bne.n	d80e <rt_serial_close+0x1a>
    d80c:	e06c      	b.n	d8e8 <rt_serial_close+0xf4>
        rt_free(rx_fifo);
    d80e:	0028      	movs	r0, r5
    d810:	f7fd f8da 	bl	a9c8 <rt_free>
        serial->serial_rx = RT_NULL;
    d814:	2300      	movs	r3, #0
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
    d816:	4a3d      	ldr	r2, [pc, #244]	; (d90c <rt_serial_close+0x118>)
        serial->serial_rx = RT_NULL;
    d818:	64e3      	str	r3, [r4, #76]	; 0x4c
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
    d81a:	8b23      	ldrh	r3, [r4, #24]
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
    d81c:	2111      	movs	r1, #17
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
    d81e:	4013      	ands	r3, r2
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
    d820:	2280      	movs	r2, #128	; 0x80
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
    d822:	8323      	strh	r3, [r4, #24]
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
    d824:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d826:	0020      	movs	r0, r4
    d828:	685b      	ldr	r3, [r3, #4]
    d82a:	0052      	lsls	r2, r2, #1
    d82c:	4798      	blx	r3
    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
    d82e:	8b23      	ldrh	r3, [r4, #24]
    d830:	055a      	lsls	r2, r3, #21
    d832:	d535      	bpl.n	d8a0 <rt_serial_close+0xac>
        tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
    d834:	6d25      	ldr	r5, [r4, #80]	; 0x50
        RT_ASSERT(tx_fifo != RT_NULL);
    d836:	2d00      	cmp	r5, #0
    d838:	d050      	beq.n	d8dc <rt_serial_close+0xe8>
        rt_free(tx_fifo);
    d83a:	0028      	movs	r0, r5
    d83c:	f7fd f8c4 	bl	a9c8 <rt_free>
        serial->serial_tx = RT_NULL;
    d840:	2300      	movs	r3, #0
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
    d842:	4a33      	ldr	r2, [pc, #204]	; (d910 <rt_serial_close+0x11c>)
        serial->serial_tx = RT_NULL;
    d844:	6523      	str	r3, [r4, #80]	; 0x50
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
    d846:	8b23      	ldrh	r3, [r4, #24]
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
    d848:	2111      	movs	r1, #17
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
    d84a:	4013      	ands	r3, r2
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
    d84c:	2280      	movs	r2, #128	; 0x80
        dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
    d84e:	8323      	strh	r3, [r4, #24]
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
    d850:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d852:	0020      	movs	r0, r4
    d854:	685b      	ldr	r3, [r3, #4]
    d856:	00d2      	lsls	r2, r2, #3
    d858:	4798      	blx	r3
    serial->ops->control(serial, RT_DEVICE_CTRL_HW_CLOSE, RT_NULL);
    d85a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d85c:	2200      	movs	r2, #0
    d85e:	2121      	movs	r1, #33	; 0x21
    d860:	0020      	movs	r0, r4
    d862:	685b      	ldr	r3, [r3, #4]
    d864:	4798      	blx	r3
}
    d866:	2000      	movs	r0, #0
    d868:	bd70      	pop	{r4, r5, r6, pc}
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
    d86a:	059a      	lsls	r2, r3, #22
    d86c:	d5e0      	bpl.n	d830 <rt_serial_close+0x3c>
        if (serial->config.bufsz == 0) {
    d86e:	4b29      	ldr	r3, [pc, #164]	; (d914 <rt_serial_close+0x120>)
    d870:	6ca2      	ldr	r2, [r4, #72]	; 0x48
            rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
    d872:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
        if (serial->config.bufsz == 0) {
    d874:	421a      	tst	r2, r3
    d876:	d129      	bne.n	d8cc <rt_serial_close+0xd8>
            RT_ASSERT(rx_dma != RT_NULL);
    d878:	2d00      	cmp	r5, #0
    d87a:	d041      	beq.n	d900 <rt_serial_close+0x10c>
            rt_free(rx_fifo);
    d87c:	0028      	movs	r0, r5
    d87e:	f7fd f8a3 	bl	a9c8 <rt_free>
        serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_RX);
    d882:	2280      	movs	r2, #128	; 0x80
    d884:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d886:	0092      	lsls	r2, r2, #2
    d888:	685b      	ldr	r3, [r3, #4]
    d88a:	2111      	movs	r1, #17
    d88c:	0020      	movs	r0, r4
    d88e:	4798      	blx	r3
        serial->serial_rx = RT_NULL;
    d890:	2300      	movs	r3, #0
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
    d892:	4a21      	ldr	r2, [pc, #132]	; (d918 <rt_serial_close+0x124>)
        serial->serial_rx = RT_NULL;
    d894:	64e3      	str	r3, [r4, #76]	; 0x4c
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
    d896:	8b23      	ldrh	r3, [r4, #24]
    d898:	4013      	ands	r3, r2
    d89a:	8323      	strh	r3, [r4, #24]
    if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
    d89c:	055a      	lsls	r2, r3, #21
    d89e:	d4c9      	bmi.n	d834 <rt_serial_close+0x40>
    else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
    d8a0:	051b      	lsls	r3, r3, #20
    d8a2:	d5da      	bpl.n	d85a <rt_serial_close+0x66>
        tx_dma = (struct rt_serial_tx_dma*)serial->serial_tx;
    d8a4:	6d25      	ldr	r5, [r4, #80]	; 0x50
        RT_ASSERT(tx_dma != RT_NULL);
    d8a6:	2d00      	cmp	r5, #0
    d8a8:	d024      	beq.n	d8f4 <rt_serial_close+0x100>
        rt_free(tx_dma);
    d8aa:	0028      	movs	r0, r5
    d8ac:	f7fd f88c 	bl	a9c8 <rt_free>
        serial->serial_tx = RT_NULL;
    d8b0:	2300      	movs	r3, #0
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
    d8b2:	4a1a      	ldr	r2, [pc, #104]	; (d91c <rt_serial_close+0x128>)
        serial->serial_tx = RT_NULL;
    d8b4:	6523      	str	r3, [r4, #80]	; 0x50
        dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
    d8b6:	8b23      	ldrh	r3, [r4, #24]
    d8b8:	4013      	ands	r3, r2
    d8ba:	8323      	strh	r3, [r4, #24]
    d8bc:	e7cd      	b.n	d85a <rt_serial_close+0x66>
    RT_ASSERT(dev != RT_NULL);
    d8be:	22b1      	movs	r2, #177	; 0xb1
    d8c0:	4917      	ldr	r1, [pc, #92]	; (d920 <rt_serial_close+0x12c>)
    d8c2:	4818      	ldr	r0, [pc, #96]	; (d924 <rt_serial_close+0x130>)
    d8c4:	0092      	lsls	r2, r2, #2
    d8c6:	f7fc fd37 	bl	a338 <rt_assert_handler>
    d8ca:	e796      	b.n	d7fa <rt_serial_close+0x6>
            RT_ASSERT(rx_fifo != RT_NULL);
    d8cc:	2d00      	cmp	r5, #0
    d8ce:	d1d5      	bne.n	d87c <rt_serial_close+0x88>
    d8d0:	4a15      	ldr	r2, [pc, #84]	; (d928 <rt_serial_close+0x134>)
    d8d2:	4913      	ldr	r1, [pc, #76]	; (d920 <rt_serial_close+0x12c>)
    d8d4:	4815      	ldr	r0, [pc, #84]	; (d92c <rt_serial_close+0x138>)
    d8d6:	f7fc fd2f 	bl	a338 <rt_assert_handler>
    d8da:	e7cf      	b.n	d87c <rt_serial_close+0x88>
        RT_ASSERT(tx_fifo != RT_NULL);
    d8dc:	4a14      	ldr	r2, [pc, #80]	; (d930 <rt_serial_close+0x13c>)
    d8de:	4910      	ldr	r1, [pc, #64]	; (d920 <rt_serial_close+0x12c>)
    d8e0:	4814      	ldr	r0, [pc, #80]	; (d934 <rt_serial_close+0x140>)
    d8e2:	f7fc fd29 	bl	a338 <rt_assert_handler>
    d8e6:	e7a8      	b.n	d83a <rt_serial_close+0x46>
        RT_ASSERT(rx_fifo != RT_NULL);
    d8e8:	4a13      	ldr	r2, [pc, #76]	; (d938 <rt_serial_close+0x144>)
    d8ea:	490d      	ldr	r1, [pc, #52]	; (d920 <rt_serial_close+0x12c>)
    d8ec:	480f      	ldr	r0, [pc, #60]	; (d92c <rt_serial_close+0x138>)
    d8ee:	f7fc fd23 	bl	a338 <rt_assert_handler>
    d8f2:	e78c      	b.n	d80e <rt_serial_close+0x1a>
        RT_ASSERT(tx_dma != RT_NULL);
    d8f4:	4a11      	ldr	r2, [pc, #68]	; (d93c <rt_serial_close+0x148>)
    d8f6:	490a      	ldr	r1, [pc, #40]	; (d920 <rt_serial_close+0x12c>)
    d8f8:	4811      	ldr	r0, [pc, #68]	; (d940 <rt_serial_close+0x14c>)
    d8fa:	f7fc fd1d 	bl	a338 <rt_assert_handler>
    d8fe:	e7d4      	b.n	d8aa <rt_serial_close+0xb6>
            RT_ASSERT(rx_dma != RT_NULL);
    d900:	4a10      	ldr	r2, [pc, #64]	; (d944 <rt_serial_close+0x150>)
    d902:	4907      	ldr	r1, [pc, #28]	; (d920 <rt_serial_close+0x12c>)
    d904:	4810      	ldr	r0, [pc, #64]	; (d948 <rt_serial_close+0x154>)
    d906:	f7fc fd17 	bl	a338 <rt_assert_handler>
            rt_free(rx_dma);
    d90a:	e7b7      	b.n	d87c <rt_serial_close+0x88>
    d90c:	fffffeff 	.word	0xfffffeff
    d910:	fffffbff 	.word	0xfffffbff
    d914:	03fffc00 	.word	0x03fffc00
    d918:	fffffdff 	.word	0xfffffdff
    d91c:	fffff7ff 	.word	0xfffff7ff
    d920:	00016874 	.word	0x00016874
    d924:	00014dcc 	.word	0x00014dcc
    d928:	000002e5 	.word	0x000002e5
    d92c:	000166c0 	.word	0x000166c0
    d930:	000002f5 	.word	0x000002f5
    d934:	000166e8 	.word	0x000166e8
    d938:	000002cf 	.word	0x000002cf
    d93c:	00000303 	.word	0x00000303
    d940:	000166fc 	.word	0x000166fc
    d944:	000002de 	.word	0x000002de
    d948:	000166d4 	.word	0x000166d4

0000d94c <rt_hw_serial_register>:
 */
rt_err_t rt_hw_serial_register(struct rt_serial_device *serial,
                               const char              *name,
                               rt_uint32_t              flag,
                               void                    *data)
{
    d94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d94e:	0004      	movs	r4, r0
    d950:	000e      	movs	r6, r1
    d952:	0015      	movs	r5, r2
    d954:	001f      	movs	r7, r3
    rt_err_t ret;
    struct rt_device *device;
    RT_ASSERT(serial != RT_NULL);
    d956:	2800      	cmp	r0, #0
    d958:	d016      	beq.n	d988 <rt_hw_serial_register+0x3c>

    device = &(serial->parent);

    device->type        = RT_Device_Class_Char;
    d95a:	2300      	movs	r3, #0
    d95c:	7523      	strb	r3, [r4, #20]
    device->rx_indicate = RT_NULL;
    d95e:	61e3      	str	r3, [r4, #28]
    device->tx_complete = RT_NULL;
    d960:	6223      	str	r3, [r4, #32]

#ifdef RT_USING_DEVICE_OPS
    device->ops         = &serial_ops;
#else
    device->init        = rt_serial_init;
    d962:	4b0c      	ldr	r3, [pc, #48]	; (d994 <rt_hw_serial_register+0x48>)
    device->control     = rt_serial_control;
#endif
    device->user_data   = data;

    /* register a character device */
    ret = rt_device_register(device, name, flag);
    d964:	0031      	movs	r1, r6
    device->init        = rt_serial_init;
    d966:	6263      	str	r3, [r4, #36]	; 0x24
    device->open        = rt_serial_open;
    d968:	4b0b      	ldr	r3, [pc, #44]	; (d998 <rt_hw_serial_register+0x4c>)
    device->user_data   = data;
    d96a:	63e7      	str	r7, [r4, #60]	; 0x3c
    device->open        = rt_serial_open;
    d96c:	62a3      	str	r3, [r4, #40]	; 0x28
    device->close       = rt_serial_close;
    d96e:	4b0b      	ldr	r3, [pc, #44]	; (d99c <rt_hw_serial_register+0x50>)
    ret = rt_device_register(device, name, flag);
    d970:	b2aa      	uxth	r2, r5
    device->close       = rt_serial_close;
    d972:	62e3      	str	r3, [r4, #44]	; 0x2c
    device->read        = rt_serial_read;
    d974:	4b0a      	ldr	r3, [pc, #40]	; (d9a0 <rt_hw_serial_register+0x54>)
    ret = rt_device_register(device, name, flag);
    d976:	0020      	movs	r0, r4
    device->read        = rt_serial_read;
    d978:	6323      	str	r3, [r4, #48]	; 0x30
    device->write       = rt_serial_write;
    d97a:	4b0a      	ldr	r3, [pc, #40]	; (d9a4 <rt_hw_serial_register+0x58>)
    d97c:	6363      	str	r3, [r4, #52]	; 0x34
    device->control     = rt_serial_control;
    d97e:	4b0a      	ldr	r3, [pc, #40]	; (d9a8 <rt_hw_serial_register+0x5c>)
    d980:	63a3      	str	r3, [r4, #56]	; 0x38
    ret = rt_device_register(device, name, flag);
    d982:	f7fb fd11 	bl	93a8 <rt_device_register>
    /* set fops */
    device->fops        = &_serial_fops;
#endif

    return ret;
}
    d986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RT_ASSERT(serial != RT_NULL);
    d988:	4a08      	ldr	r2, [pc, #32]	; (d9ac <rt_hw_serial_register+0x60>)
    d98a:	4909      	ldr	r1, [pc, #36]	; (d9b0 <rt_hw_serial_register+0x64>)
    d98c:	4809      	ldr	r0, [pc, #36]	; (d9b4 <rt_hw_serial_register+0x68>)
    d98e:	f7fc fcd3 	bl	a338 <rt_assert_handler>
    d992:	e7e2      	b.n	d95a <rt_hw_serial_register+0xe>
    d994:	0000d1f1 	.word	0x0000d1f1
    d998:	0000d22d 	.word	0x0000d22d
    d99c:	0000d7f5 	.word	0x0000d7f5
    d9a0:	0000d5a1 	.word	0x0000d5a1
    d9a4:	0000d491 	.word	0x0000d491
    d9a8:	0000d109 	.word	0x0000d109
    d9ac:	00000462 	.word	0x00000462
    d9b0:	0001683c 	.word	0x0001683c
    d9b4:	0001457c 	.word	0x0001457c

0000d9b8 <rt_hw_serial_isr>:

/* ISR for serial interrupt */
void rt_hw_serial_isr(struct rt_serial_device *serial, int event)
{
    d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9ba:	46c6      	mov	lr, r8
    switch (event & 0xff)
    d9bc:	23ff      	movs	r3, #255	; 0xff
{
    d9be:	b500      	push	{lr}
    d9c0:	0005      	movs	r5, r0
    d9c2:	b084      	sub	sp, #16
    switch (event & 0xff)
    d9c4:	400b      	ands	r3, r1
    d9c6:	2b03      	cmp	r3, #3
    d9c8:	d100      	bne.n	d9cc <rt_hw_serial_isr+0x14>
    d9ca:	e06e      	b.n	daaa <rt_hw_serial_isr+0xf2>
    d9cc:	22fc      	movs	r2, #252	; 0xfc
    d9ce:	420a      	tst	r2, r1
    d9d0:	d10a      	bne.n	d9e8 <rt_hw_serial_isr+0x30>
    d9d2:	2b01      	cmp	r3, #1
    d9d4:	d029      	beq.n	da2a <rt_hw_serial_isr+0x72>
    d9d6:	2b02      	cmp	r3, #2
    d9d8:	d102      	bne.n	d9e0 <rt_hw_serial_isr+0x28>
        case RT_SERIAL_EVENT_TX_DONE:
        {
            struct rt_serial_tx_fifo* tx_fifo;

            tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
            rt_completion_done(&(tx_fifo->completion));
    d9da:	6d00      	ldr	r0, [r0, #80]	; 0x50
    d9dc:	f7ff f99e 	bl	cd1c <rt_completion_done>
            }
            break;
        }
#endif /* RT_SERIAL_USING_DMA */
    }
}
    d9e0:	b004      	add	sp, #16
    d9e2:	bc80      	pop	{r7}
    d9e4:	46b8      	mov	r8, r7
    d9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (event & 0xff)
    d9e8:	2b04      	cmp	r3, #4
    d9ea:	d1f9      	bne.n	d9e0 <rt_hw_serial_isr+0x28>
            tx_dma = (struct rt_serial_tx_dma*) serial->serial_tx;
    d9ec:	6d04      	ldr	r4, [r0, #80]	; 0x50
            rt_data_queue_pop(&(tx_dma->data_queue), &last_data_ptr, &data_size, 0);
    d9ee:	aa02      	add	r2, sp, #8
    d9f0:	1d26      	adds	r6, r4, #4
    d9f2:	a903      	add	r1, sp, #12
    d9f4:	2300      	movs	r3, #0
    d9f6:	0030      	movs	r0, r6
    d9f8:	f7ff fa82 	bl	cf00 <rt_data_queue_pop>
            if (rt_data_queue_peak(&(tx_dma->data_queue), &data_ptr, &data_size) == RT_EOK)
    d9fc:	0030      	movs	r0, r6
    d9fe:	aa02      	add	r2, sp, #8
    da00:	a901      	add	r1, sp, #4
    da02:	f7ff fb53 	bl	d0ac <rt_data_queue_peak>
    da06:	2800      	cmp	r0, #0
    da08:	d160      	bne.n	dacc <rt_hw_serial_isr+0x114>
                tx_dma->activated = RT_TRUE;
    da0a:	2301      	movs	r3, #1
    da0c:	6023      	str	r3, [r4, #0]
                serial->ops->dma_transmit(serial, (rt_uint8_t *)data_ptr, data_size, RT_SERIAL_DMA_TX);
    da0e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    da10:	0028      	movs	r0, r5
    da12:	691c      	ldr	r4, [r3, #16]
    da14:	9a02      	ldr	r2, [sp, #8]
    da16:	2302      	movs	r3, #2
    da18:	9901      	ldr	r1, [sp, #4]
    da1a:	47a0      	blx	r4
            if (serial->parent.tx_complete != RT_NULL)
    da1c:	6a2b      	ldr	r3, [r5, #32]
    da1e:	2b00      	cmp	r3, #0
    da20:	d0de      	beq.n	d9e0 <rt_hw_serial_isr+0x28>
                serial->parent.tx_complete(&serial->parent, (void*)last_data_ptr);
    da22:	0028      	movs	r0, r5
    da24:	9903      	ldr	r1, [sp, #12]
    da26:	4798      	blx	r3
            break;
    da28:	e7da      	b.n	d9e0 <rt_hw_serial_isr+0x28>
            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
    da2a:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
            RT_ASSERT(rx_fifo != RT_NULL);
    da2c:	2c00      	cmp	r4, #0
    da2e:	d100      	bne.n	da32 <rt_hw_serial_isr+0x7a>
    da30:	e086      	b.n	db40 <rt_hw_serial_isr+0x188>
                    rx_fifo->is_full = RT_TRUE;
    da32:	2301      	movs	r3, #1
                if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
    da34:	2600      	movs	r6, #0
                    rx_fifo->is_full = RT_TRUE;
    da36:	4698      	mov	r8, r3
    da38:	e001      	b.n	da3e <rt_hw_serial_isr+0x86>
                rt_hw_interrupt_enable(level);
    da3a:	f7f6 fb3d 	bl	40b8 <rt_hw_interrupt_enable>
                ch = serial->ops->getc(serial);
    da3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    da40:	0028      	movs	r0, r5
    da42:	68db      	ldr	r3, [r3, #12]
    da44:	4798      	blx	r3
    da46:	0007      	movs	r7, r0
                if (ch == -1) break;
    da48:	1c43      	adds	r3, r0, #1
    da4a:	d01b      	beq.n	da84 <rt_hw_serial_isr+0xcc>
                level = rt_hw_interrupt_disable();
    da4c:	f7f6 fb30 	bl	40b0 <rt_hw_interrupt_disable>
                rx_fifo->buffer[rx_fifo->put_index] = ch;
    da50:	88a3      	ldrh	r3, [r4, #4]
    da52:	6822      	ldr	r2, [r4, #0]
    da54:	54d7      	strb	r7, [r2, r3]
                rx_fifo->put_index += 1;
    da56:	88a3      	ldrh	r3, [r4, #4]
                if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
    da58:	6caa      	ldr	r2, [r5, #72]	; 0x48
                rx_fifo->put_index += 1;
    da5a:	3301      	adds	r3, #1
    da5c:	b29b      	uxth	r3, r3
                if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
    da5e:	0192      	lsls	r2, r2, #6
                rx_fifo->put_index += 1;
    da60:	80a3      	strh	r3, [r4, #4]
                if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
    da62:	0c12      	lsrs	r2, r2, #16
    da64:	4293      	cmp	r3, r2
    da66:	d301      	bcc.n	da6c <rt_hw_serial_isr+0xb4>
    da68:	2300      	movs	r3, #0
    da6a:	80a6      	strh	r6, [r4, #4]
                if (rx_fifo->put_index == rx_fifo->get_index)
    da6c:	88e1      	ldrh	r1, [r4, #6]
    da6e:	4299      	cmp	r1, r3
    da70:	d1e3      	bne.n	da3a <rt_hw_serial_isr+0x82>
                    rx_fifo->is_full = RT_TRUE;
    da72:	4641      	mov	r1, r8
                    rx_fifo->get_index += 1;
    da74:	3301      	adds	r3, #1
    da76:	b29b      	uxth	r3, r3
    da78:	80e3      	strh	r3, [r4, #6]
                    rx_fifo->is_full = RT_TRUE;
    da7a:	60a1      	str	r1, [r4, #8]
                    if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    da7c:	429a      	cmp	r2, r3
    da7e:	d8dc      	bhi.n	da3a <rt_hw_serial_isr+0x82>
    da80:	80e6      	strh	r6, [r4, #6]
    da82:	e7da      	b.n	da3a <rt_hw_serial_isr+0x82>
            if (serial->parent.rx_indicate != RT_NULL)
    da84:	69eb      	ldr	r3, [r5, #28]
    da86:	2b00      	cmp	r3, #0
    da88:	d0aa      	beq.n	d9e0 <rt_hw_serial_isr+0x28>
                level = rt_hw_interrupt_disable();
    da8a:	f7f6 fb11 	bl	40b0 <rt_hw_interrupt_disable>
                rx_length = (rx_fifo->put_index >= rx_fifo->get_index)? (rx_fifo->put_index - rx_fifo->get_index):
    da8e:	88a2      	ldrh	r2, [r4, #4]
    da90:	88e4      	ldrh	r4, [r4, #6]
    da92:	42a2      	cmp	r2, r4
    da94:	d34e      	bcc.n	db34 <rt_hw_serial_isr+0x17c>
    da96:	1b14      	subs	r4, r2, r4
                rt_hw_interrupt_enable(level);
    da98:	f7f6 fb0e 	bl	40b8 <rt_hw_interrupt_enable>
                if (rx_length)
    da9c:	2c00      	cmp	r4, #0
    da9e:	d09f      	beq.n	d9e0 <rt_hw_serial_isr+0x28>
                    serial->parent.rx_indicate(&serial->parent, rx_length);
    daa0:	0021      	movs	r1, r4
    daa2:	0028      	movs	r0, r5
    daa4:	69eb      	ldr	r3, [r5, #28]
    daa6:	4798      	blx	r3
    daa8:	e79a      	b.n	d9e0 <rt_hw_serial_isr+0x28>
            if (serial->config.bufsz == 0)
    daaa:	4b3e      	ldr	r3, [pc, #248]	; (dba4 <rt_hw_serial_isr+0x1ec>)
    daac:	6c82      	ldr	r2, [r0, #72]	; 0x48
            length = (event & (~0xff)) >> 8;
    daae:	120c      	asrs	r4, r1, #8
            if (serial->config.bufsz == 0)
    dab0:	421a      	tst	r2, r3
    dab2:	d10e      	bne.n	dad2 <rt_hw_serial_isr+0x11a>
                rx_dma = (struct rt_serial_rx_dma*) serial->serial_rx;
    dab4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
                RT_ASSERT(rx_dma != RT_NULL);
    dab6:	2e00      	cmp	r6, #0
    dab8:	d067      	beq.n	db8a <rt_hw_serial_isr+0x1d2>
                RT_ASSERT(serial->parent.rx_indicate != RT_NULL);
    daba:	69eb      	ldr	r3, [r5, #28]
    dabc:	2b00      	cmp	r3, #0
    dabe:	d05d      	beq.n	db7c <rt_hw_serial_isr+0x1c4>
                serial->parent.rx_indicate(&(serial->parent), length);
    dac0:	0021      	movs	r1, r4
    dac2:	0028      	movs	r0, r5
    dac4:	4798      	blx	r3
                rx_dma->activated = RT_FALSE;
    dac6:	2300      	movs	r3, #0
    dac8:	6033      	str	r3, [r6, #0]
    daca:	e789      	b.n	d9e0 <rt_hw_serial_isr+0x28>
                tx_dma->activated = RT_FALSE;
    dacc:	2300      	movs	r3, #0
    dace:	6023      	str	r3, [r4, #0]
    dad0:	e7a4      	b.n	da1c <rt_hw_serial_isr+0x64>
                level = rt_hw_interrupt_disable();
    dad2:	f7f6 faed 	bl	40b0 <rt_hw_interrupt_disable>
    struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *)serial->serial_rx;
    dad6:	6cee      	ldr	r6, [r5, #76]	; 0x4c
                level = rt_hw_interrupt_disable();
    dad8:	4680      	mov	r8, r0
    RT_ASSERT(rx_fifo != RT_NULL);
    dada:	2e00      	cmp	r6, #0
    dadc:	d05b      	beq.n	db96 <rt_hw_serial_isr+0x1de>
    if (rx_fifo->get_index <= rx_fifo->put_index)
    dade:	88f7      	ldrh	r7, [r6, #6]
    dae0:	88b1      	ldrh	r1, [r6, #4]
    dae2:	428f      	cmp	r7, r1
    dae4:	d932      	bls.n	db4c <rt_hw_serial_isr+0x194>
            if (rx_fifo->put_index >= serial->config.bufsz)
    dae6:	6cab      	ldr	r3, [r5, #72]	; 0x48
        rx_fifo->put_index += len;
    dae8:	1909      	adds	r1, r1, r4
    daea:	b289      	uxth	r1, r1
            if (rx_fifo->put_index >= serial->config.bufsz)
    daec:	019c      	lsls	r4, r3, #6
        rx_fifo->put_index += len;
    daee:	80b1      	strh	r1, [r6, #4]
            if (rx_fifo->put_index >= serial->config.bufsz)
    daf0:	0c24      	lsrs	r4, r4, #16
        if (rx_fifo->put_index >= rx_fifo->get_index)
    daf2:	428f      	cmp	r7, r1
    daf4:	d83d      	bhi.n	db72 <rt_hw_serial_isr+0x1ba>
            if (rx_fifo->put_index >= serial->config.bufsz)
    daf6:	000f      	movs	r7, r1
    daf8:	42a1      	cmp	r1, r4
    dafa:	d305      	bcc.n	db08 <rt_hw_serial_isr+0x150>
                rx_fifo->put_index %= serial->config.bufsz;
    dafc:	0038      	movs	r0, r7
    dafe:	0021      	movs	r1, r4
    db00:	f7f6 fc2c 	bl	435c <__aeabi_uidivmod>
    db04:	b28f      	uxth	r7, r1
    db06:	80b7      	strh	r7, [r6, #4]
            rx_fifo->is_full = RT_TRUE;
    db08:	2301      	movs	r3, #1
    db0a:	60b3      	str	r3, [r6, #8]
        rx_fifo->get_index = rx_fifo->put_index; 
    db0c:	80f7      	strh	r7, [r6, #6]
    if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
    db0e:	42bc      	cmp	r4, r7
    db10:	d801      	bhi.n	db16 <rt_hw_serial_isr+0x15e>
    db12:	2300      	movs	r3, #0
    db14:	80f3      	strh	r3, [r6, #6]
    return _serial_fifo_calc_recved_len(serial);
    db16:	0028      	movs	r0, r5
    db18:	f7ff fb44 	bl	d1a4 <_serial_fifo_calc_recved_len>
    db1c:	0004      	movs	r4, r0
                rt_hw_interrupt_enable(level);
    db1e:	4640      	mov	r0, r8
    db20:	f7f6 faca 	bl	40b8 <rt_hw_interrupt_enable>
                if (serial->parent.rx_indicate != RT_NULL)
    db24:	69eb      	ldr	r3, [r5, #28]
    db26:	2b00      	cmp	r3, #0
    db28:	d100      	bne.n	db2c <rt_hw_serial_isr+0x174>
    db2a:	e759      	b.n	d9e0 <rt_hw_serial_isr+0x28>
                    serial->parent.rx_indicate(&(serial->parent), length);
    db2c:	0021      	movs	r1, r4
    db2e:	0028      	movs	r0, r5
    db30:	4798      	blx	r3
}
    db32:	e755      	b.n	d9e0 <rt_hw_serial_isr+0x28>
                    (serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index));
    db34:	6cab      	ldr	r3, [r5, #72]	; 0x48
    db36:	1aa4      	subs	r4, r4, r2
    db38:	019b      	lsls	r3, r3, #6
    db3a:	0c1b      	lsrs	r3, r3, #16
    db3c:	1b1c      	subs	r4, r3, r4
    db3e:	e7ab      	b.n	da98 <rt_hw_serial_isr+0xe0>
            RT_ASSERT(rx_fifo != RT_NULL);
    db40:	4a19      	ldr	r2, [pc, #100]	; (dba8 <rt_hw_serial_isr+0x1f0>)
    db42:	491a      	ldr	r1, [pc, #104]	; (dbac <rt_hw_serial_isr+0x1f4>)
    db44:	481a      	ldr	r0, [pc, #104]	; (dbb0 <rt_hw_serial_isr+0x1f8>)
    db46:	f7fc fbf7 	bl	a338 <rt_assert_handler>
    db4a:	e772      	b.n	da32 <rt_hw_serial_isr+0x7a>
        if (rx_fifo->put_index >= serial->config.bufsz)
    db4c:	6cab      	ldr	r3, [r5, #72]	; 0x48
        rx_fifo->put_index += len;
    db4e:	1909      	adds	r1, r1, r4
    db50:	b288      	uxth	r0, r1
        if (rx_fifo->put_index >= serial->config.bufsz)
    db52:	019c      	lsls	r4, r3, #6
        rx_fifo->put_index += len;
    db54:	80b0      	strh	r0, [r6, #4]
        if (rx_fifo->put_index >= serial->config.bufsz)
    db56:	0c24      	lsrs	r4, r4, #16
    db58:	42a0      	cmp	r0, r4
    db5a:	d30a      	bcc.n	db72 <rt_hw_serial_isr+0x1ba>
            rx_fifo->put_index %= serial->config.bufsz;
    db5c:	0021      	movs	r1, r4
    db5e:	f7f6 fbfd 	bl	435c <__aeabi_uidivmod>
    db62:	b289      	uxth	r1, r1
    db64:	80b1      	strh	r1, [r6, #4]
            if (rx_fifo->put_index >= rx_fifo->get_index)
    db66:	428f      	cmp	r7, r1
    db68:	d803      	bhi.n	db72 <rt_hw_serial_isr+0x1ba>
                rx_fifo->is_full = RT_TRUE;
    db6a:	2301      	movs	r3, #1
    db6c:	000f      	movs	r7, r1
    db6e:	60b3      	str	r3, [r6, #8]
    db70:	e7cc      	b.n	db0c <rt_hw_serial_isr+0x154>
    if(rx_fifo->is_full == RT_TRUE) 
    db72:	68b3      	ldr	r3, [r6, #8]
    db74:	2b01      	cmp	r3, #1
    db76:	d1ca      	bne.n	db0e <rt_hw_serial_isr+0x156>
        rx_fifo->get_index = rx_fifo->put_index; 
    db78:	88b7      	ldrh	r7, [r6, #4]
    db7a:	e7c7      	b.n	db0c <rt_hw_serial_isr+0x154>
                RT_ASSERT(serial->parent.rx_indicate != RT_NULL);
    db7c:	4a0d      	ldr	r2, [pc, #52]	; (dbb4 <rt_hw_serial_isr+0x1fc>)
    db7e:	490b      	ldr	r1, [pc, #44]	; (dbac <rt_hw_serial_isr+0x1f4>)
    db80:	480d      	ldr	r0, [pc, #52]	; (dbb8 <rt_hw_serial_isr+0x200>)
    db82:	f7fc fbd9 	bl	a338 <rt_assert_handler>
                serial->parent.rx_indicate(&(serial->parent), length);
    db86:	69eb      	ldr	r3, [r5, #28]
    db88:	e79a      	b.n	dac0 <rt_hw_serial_isr+0x108>
                RT_ASSERT(rx_dma != RT_NULL);
    db8a:	4a0c      	ldr	r2, [pc, #48]	; (dbbc <rt_hw_serial_isr+0x204>)
    db8c:	4907      	ldr	r1, [pc, #28]	; (dbac <rt_hw_serial_isr+0x1f4>)
    db8e:	480c      	ldr	r0, [pc, #48]	; (dbc0 <rt_hw_serial_isr+0x208>)
    db90:	f7fc fbd2 	bl	a338 <rt_assert_handler>
    db94:	e791      	b.n	daba <rt_hw_serial_isr+0x102>
    RT_ASSERT(rx_fifo != RT_NULL);
    db96:	22c8      	movs	r2, #200	; 0xc8
    db98:	490a      	ldr	r1, [pc, #40]	; (dbc4 <rt_hw_serial_isr+0x20c>)
    db9a:	4805      	ldr	r0, [pc, #20]	; (dbb0 <rt_hw_serial_isr+0x1f8>)
    db9c:	0052      	lsls	r2, r2, #1
    db9e:	f7fc fbcb 	bl	a338 <rt_assert_handler>
    dba2:	e79c      	b.n	dade <rt_hw_serial_isr+0x126>
    dba4:	03fffc00 	.word	0x03fffc00
    dba8:	0000048e 	.word	0x0000048e
    dbac:	000167e4 	.word	0x000167e4
    dbb0:	000166c0 	.word	0x000166c0
    dbb4:	000004ef 	.word	0x000004ef
    dbb8:	0001679c 	.word	0x0001679c
    dbbc:	000004ed 	.word	0x000004ed
    dbc0:	000166d4 	.word	0x000166d4
    dbc4:	000167c4 	.word	0x000167c4

0000dbc8 <benchmark>:
#ifdef RT_USING_COREMARK
extern void coremark_main(void);
#endif

void benchmark(void)
{
    dbc8:	b510      	push	{r4, lr}
#ifdef RT_USING_WHETSTONE
    whetstone_main(1, NULL);
#endif

#ifdef RT_USING_COREMARK
    coremark_main();
    dbca:	f006 fb45 	bl	14258 <__coremark_main_veneer>
#endif
}
    dbce:	bd10      	pop	{r4, pc}

0000dbd0 <libc_system_init>:
#if defined RT_USING_PTHREADS && !defined RT_USING_COMPONENTS_INIT
    pthread_system_init();
#endif

    return 0;
}
    dbd0:	2000      	movs	r0, #0
    dbd2:	4770      	bx	lr

0000dbd4 <_close_r>:
#ifndef RT_USING_DFS
    return 0;
#else
    return close(fd);
#endif
}
    dbd4:	2000      	movs	r0, #0
    dbd6:	4770      	bx	lr

0000dbd8 <_fstat_r>:

int
_fstat_r(struct _reent *ptr, int fd, struct stat *pstat)
{
    /* return "not supported" */
    ptr->_errno = ENOTSUP;
    dbd8:	2386      	movs	r3, #134	; 0x86
    dbda:	6003      	str	r3, [r0, #0]
    return -1;
    dbdc:	2001      	movs	r0, #1
}
    dbde:	4240      	negs	r0, r0
    dbe0:	4770      	bx	lr
    dbe2:	46c0      	nop			; (mov r8, r8)

0000dbe4 <_isatty_r>:
}

int
_isatty_r(struct _reent *ptr, int fd)
{
    if (fd >=0 && fd < 3) return 1;
    dbe4:	2902      	cmp	r1, #2
    dbe6:	d904      	bls.n	dbf2 <_isatty_r+0xe>

    /* return "not supported" */
    ptr->_errno = ENOTSUP;
    dbe8:	2386      	movs	r3, #134	; 0x86
    dbea:	6003      	str	r3, [r0, #0]
    return -1;
    dbec:	2001      	movs	r0, #1
    dbee:	4240      	negs	r0, r0
}
    dbf0:	4770      	bx	lr
    if (fd >=0 && fd < 3) return 1;
    dbf2:	2001      	movs	r0, #1
    dbf4:	e7fc      	b.n	dbf0 <_isatty_r+0xc>
    dbf6:	46c0      	nop			; (mov r8, r8)

0000dbf8 <_lseek_r>:
    _off_t rc;

    rc = lseek(fd, pos, whence);
    return rc;
#endif
}
    dbf8:	2000      	movs	r0, #0
    dbfa:	4770      	bx	lr

0000dbfc <_read_r>:
    _ssize_t rc;

    rc = read(fd, buf, nbytes);
    return rc;
#endif
}
    dbfc:	2000      	movs	r0, #0
    dbfe:	4770      	bx	lr

0000dc00 <_write_r>:
}

#ifdef RT_USING_DEVICE
_ssize_t
_write_r(struct _reent *ptr, int fd, const void *buf, size_t nbytes)
{
    dc00:	b570      	push	{r4, r5, r6, lr}
    dc02:	000c      	movs	r4, r1
#ifndef RT_USING_DFS
    if (fileno(stdout) == fd)
    dc04:	490a      	ldr	r1, [pc, #40]	; (dc30 <_write_r+0x30>)
{
    dc06:	0016      	movs	r6, r2
    if (fileno(stdout) == fd)
    dc08:	6809      	ldr	r1, [r1, #0]
{
    dc0a:	001d      	movs	r5, r3
    if (fileno(stdout) == fd)
    dc0c:	6888      	ldr	r0, [r1, #8]
    dc0e:	f000 f9f9 	bl	e004 <fileno>
    dc12:	42a0      	cmp	r0, r4
    dc14:	d001      	beq.n	dc1a <_write_r+0x1a>

        console = rt_console_get_device();
        if (console) return rt_device_write(console, -1, buf, nbytes);
    }

    return 0;
    dc16:	2000      	movs	r0, #0
    _ssize_t rc;

    rc = write(fd, buf, nbytes);
    return rc;
#endif
}
    dc18:	bd70      	pop	{r4, r5, r6, pc}
        console = rt_console_get_device();
    dc1a:	f7fc facf 	bl	a1bc <rt_console_get_device>
        if (console) return rt_device_write(console, -1, buf, nbytes);
    dc1e:	2800      	cmp	r0, #0
    dc20:	d0f9      	beq.n	dc16 <_write_r+0x16>
    dc22:	2101      	movs	r1, #1
    dc24:	002b      	movs	r3, r5
    dc26:	0032      	movs	r2, r6
    dc28:	4249      	negs	r1, r1
    dc2a:	f7fb fca7 	bl	957c <rt_device_write>
    dc2e:	e7f3      	b.n	dc18 <_write_r+0x18>
    dc30:	0001737c 	.word	0x0001737c

0000dc34 <_malloc_r>:
#endif

/* Memory routine */
void *
_malloc_r (struct _reent *ptr, size_t size)
{
    dc34:	b510      	push	{r4, lr}
    dc36:	0004      	movs	r4, r0
    dc38:	0008      	movs	r0, r1
    void* result;

    result = (void*)rt_malloc (size);
    dc3a:	f7fc fd25 	bl	a688 <rt_malloc>
    if (result == RT_NULL)
    dc3e:	2800      	cmp	r0, #0
    dc40:	d000      	beq.n	dc44 <_malloc_r+0x10>
    {
        ptr->_errno = ENOMEM;
    }

    return result;
}
    dc42:	bd10      	pop	{r4, pc}
        ptr->_errno = ENOMEM;
    dc44:	230c      	movs	r3, #12
    dc46:	6023      	str	r3, [r4, #0]
    return result;
    dc48:	e7fb      	b.n	dc42 <_malloc_r+0xe>
    dc4a:	46c0      	nop			; (mov r8, r8)

0000dc4c <_realloc_r>:

void *
_realloc_r (struct _reent *ptr, void *old, size_t newlen)
{
    dc4c:	b510      	push	{r4, lr}
    dc4e:	0004      	movs	r4, r0
    dc50:	0008      	movs	r0, r1
    dc52:	0011      	movs	r1, r2
    void* result;

    result = (void*)rt_realloc (old, newlen);
    dc54:	f7fc fe0a 	bl	a86c <rt_realloc>
    if (result == RT_NULL)
    dc58:	2800      	cmp	r0, #0
    dc5a:	d000      	beq.n	dc5e <_realloc_r+0x12>
    {
        ptr->_errno = ENOMEM;
    }

    return result;
}
    dc5c:	bd10      	pop	{r4, pc}
        ptr->_errno = ENOMEM;
    dc5e:	230c      	movs	r3, #12
    dc60:	6023      	str	r3, [r4, #0]
    return result;
    dc62:	e7fb      	b.n	dc5c <_realloc_r+0x10>

0000dc64 <_calloc_r>:

void *_calloc_r (struct _reent *ptr, size_t size, size_t len)
{
    dc64:	b510      	push	{r4, lr}
    dc66:	0004      	movs	r4, r0
    dc68:	0008      	movs	r0, r1
    dc6a:	0011      	movs	r1, r2
    void* result;

    result = (void*)rt_calloc (size, len);
    dc6c:	f7fc fe9e 	bl	a9ac <rt_calloc>
    if (result == RT_NULL)
    dc70:	2800      	cmp	r0, #0
    dc72:	d000      	beq.n	dc76 <_calloc_r+0x12>
    {
        ptr->_errno = ENOMEM;
    }

    return result;
}
    dc74:	bd10      	pop	{r4, pc}
        ptr->_errno = ENOMEM;
    dc76:	230c      	movs	r3, #12
    dc78:	6023      	str	r3, [r4, #0]
    return result;
    dc7a:	e7fb      	b.n	dc74 <_calloc_r+0x10>

0000dc7c <_free_r>:

void
_free_r (struct _reent *ptr, void *addr)
{
    dc7c:	b510      	push	{r4, lr}
    dc7e:	0008      	movs	r0, r1
    rt_free (addr);
    dc80:	f7fc fea2 	bl	a9c8 <rt_free>
}
    dc84:	bd10      	pop	{r4, pc}
    dc86:	46c0      	nop			; (mov r8, r8)

0000dc88 <abort>:
{
    /* we not use __libc init_aray to initialize C++ objects */
}

void abort(void)
{
    dc88:	b510      	push	{r4, lr}
    if (rt_thread_self())
    dc8a:	f7fd f9f3 	bl	b074 <rt_thread_self>
    dc8e:	2800      	cmp	r0, #0
    dc90:	d00c      	beq.n	dcac <abort+0x24>
    {
        rt_thread_t self = rt_thread_self();
    dc92:	f7fd f9ef 	bl	b074 <rt_thread_self>
    dc96:	0004      	movs	r4, r0

        rt_kprintf("thread:%-8.*s abort!\n", RT_NAME_MAX, self->name);
    dc98:	0002      	movs	r2, r0
    dc9a:	2108      	movs	r1, #8
    dc9c:	4804      	ldr	r0, [pc, #16]	; (dcb0 <abort+0x28>)
    dc9e:	f7fc facd 	bl	a23c <rt_kprintf>
        rt_thread_suspend(self);
    dca2:	0020      	movs	r0, r4
    dca4:	f7fd fa42 	bl	b12c <rt_thread_suspend>

        rt_schedule();
    dca8:	f7fd f80a 	bl	acc0 <rt_schedule>
    }

    while (1);
    dcac:	e7fe      	b.n	dcac <abort+0x24>
    dcae:	46c0      	nop			; (mov r8, r8)
    dcb0:	00016900 	.word	0x00016900

0000dcb4 <fcvtbuf>:
    dcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcb6:	464f      	mov	r7, r9
    dcb8:	4646      	mov	r6, r8
    dcba:	46d6      	mov	lr, sl
    dcbc:	b5c0      	push	{r6, r7, lr}
    dcbe:	4698      	mov	r8, r3
    dcc0:	4b2d      	ldr	r3, [pc, #180]	; (dd78 <fcvtbuf+0xc4>)
    dcc2:	b088      	sub	sp, #32
    dcc4:	681b      	ldr	r3, [r3, #0]
    dcc6:	9c11      	ldr	r4, [sp, #68]	; 0x44
    dcc8:	0006      	movs	r6, r0
    dcca:	000f      	movs	r7, r1
    dccc:	0015      	movs	r5, r2
    dcce:	4699      	mov	r9, r3
    dcd0:	2c00      	cmp	r4, #0
    dcd2:	d034      	beq.n	dd3e <fcvtbuf+0x8a>
    dcd4:	ab07      	add	r3, sp, #28
    dcd6:	9304      	str	r3, [sp, #16]
    dcd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dcda:	0032      	movs	r2, r6
    dcdc:	9303      	str	r3, [sp, #12]
    dcde:	4643      	mov	r3, r8
    dce0:	9302      	str	r3, [sp, #8]
    dce2:	2303      	movs	r3, #3
    dce4:	4648      	mov	r0, r9
    dce6:	9300      	str	r3, [sp, #0]
    dce8:	9501      	str	r5, [sp, #4]
    dcea:	003b      	movs	r3, r7
    dcec:	f003 fe2e 	bl	1194c <_dtoa_r>
    dcf0:	4642      	mov	r2, r8
    dcf2:	0003      	movs	r3, r0
    dcf4:	6810      	ldr	r0, [r2, #0]
    dcf6:	9a07      	ldr	r2, [sp, #28]
    dcf8:	4241      	negs	r1, r0
    dcfa:	4293      	cmp	r3, r2
    dcfc:	d238      	bcs.n	dd70 <fcvtbuf+0xbc>
    dcfe:	1c47      	adds	r7, r0, #1
    dd00:	19e7      	adds	r7, r4, r7
    dd02:	1820      	adds	r0, r4, r0
    dd04:	781a      	ldrb	r2, [r3, #0]
    dd06:	3301      	adds	r3, #1
    dd08:	5442      	strb	r2, [r0, r1]
    dd0a:	9a07      	ldr	r2, [sp, #28]
    dd0c:	187e      	adds	r6, r7, r1
    dd0e:	3101      	adds	r1, #1
    dd10:	429a      	cmp	r2, r3
    dd12:	d8f7      	bhi.n	dd04 <fcvtbuf+0x50>
    dd14:	428d      	cmp	r5, r1
    dd16:	dd09      	ble.n	dd2c <fcvtbuf+0x78>
    dd18:	0033      	movs	r3, r6
    dd1a:	2030      	movs	r0, #48	; 0x30
    dd1c:	1972      	adds	r2, r6, r5
    dd1e:	1a52      	subs	r2, r2, r1
    dd20:	7018      	strb	r0, [r3, #0]
    dd22:	3301      	adds	r3, #1
    dd24:	4293      	cmp	r3, r2
    dd26:	d1fb      	bne.n	dd20 <fcvtbuf+0x6c>
    dd28:	1a69      	subs	r1, r5, r1
    dd2a:	1876      	adds	r6, r6, r1
    dd2c:	2300      	movs	r3, #0
    dd2e:	0020      	movs	r0, r4
    dd30:	7033      	strb	r3, [r6, #0]
    dd32:	b008      	add	sp, #32
    dd34:	bce0      	pop	{r5, r6, r7}
    dd36:	46ba      	mov	sl, r7
    dd38:	46b1      	mov	r9, r6
    dd3a:	46a8      	mov	r8, r5
    dd3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd3e:	0013      	movs	r3, r2
    dd40:	464a      	mov	r2, r9
    dd42:	6d12      	ldr	r2, [r2, #80]	; 0x50
    dd44:	3323      	adds	r3, #35	; 0x23
    dd46:	429a      	cmp	r2, r3
    dd48:	dd02      	ble.n	dd50 <fcvtbuf+0x9c>
    dd4a:	464b      	mov	r3, r9
    dd4c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    dd4e:	e7c1      	b.n	dcd4 <fcvtbuf+0x20>
    dd50:	2324      	movs	r3, #36	; 0x24
    dd52:	469a      	mov	sl, r3
    dd54:	464b      	mov	r3, r9
    dd56:	44aa      	add	sl, r5
    dd58:	4652      	mov	r2, sl
    dd5a:	4648      	mov	r0, r9
    dd5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
    dd5e:	f7ff ff75 	bl	dc4c <_realloc_r>
    dd62:	1e04      	subs	r4, r0, #0
    dd64:	d006      	beq.n	dd74 <fcvtbuf+0xc0>
    dd66:	464b      	mov	r3, r9
    dd68:	4652      	mov	r2, sl
    dd6a:	6558      	str	r0, [r3, #84]	; 0x54
    dd6c:	651a      	str	r2, [r3, #80]	; 0x50
    dd6e:	e7b1      	b.n	dcd4 <fcvtbuf+0x20>
    dd70:	0026      	movs	r6, r4
    dd72:	e7cf      	b.n	dd14 <fcvtbuf+0x60>
    dd74:	2000      	movs	r0, #0
    dd76:	e7dc      	b.n	dd32 <fcvtbuf+0x7e>
    dd78:	0001737c 	.word	0x0001737c

0000dd7c <_fclose_r>:
    dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd7e:	0006      	movs	r6, r0
    dd80:	1e0c      	subs	r4, r1, #0
    dd82:	d04d      	beq.n	de20 <_fclose_r+0xa4>
    dd84:	2800      	cmp	r0, #0
    dd86:	d002      	beq.n	dd8e <_fclose_r+0x12>
    dd88:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dd8a:	2b00      	cmp	r3, #0
    dd8c:	d04a      	beq.n	de24 <_fclose_r+0xa8>
    dd8e:	2701      	movs	r7, #1
    dd90:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dd92:	423b      	tst	r3, r7
    dd94:	d035      	beq.n	de02 <_fclose_r+0x86>
    dd96:	220c      	movs	r2, #12
    dd98:	5ea3      	ldrsh	r3, [r4, r2]
    dd9a:	2b00      	cmp	r3, #0
    dd9c:	d040      	beq.n	de20 <_fclose_r+0xa4>
    dd9e:	0021      	movs	r1, r4
    dda0:	0030      	movs	r0, r6
    dda2:	f000 f859 	bl	de58 <__sflush_r>
    dda6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    dda8:	0005      	movs	r5, r0
    ddaa:	2b00      	cmp	r3, #0
    ddac:	d004      	beq.n	ddb8 <_fclose_r+0x3c>
    ddae:	0030      	movs	r0, r6
    ddb0:	69e1      	ldr	r1, [r4, #28]
    ddb2:	4798      	blx	r3
    ddb4:	2800      	cmp	r0, #0
    ddb6:	db3c      	blt.n	de32 <_fclose_r+0xb6>
    ddb8:	89a3      	ldrh	r3, [r4, #12]
    ddba:	061b      	lsls	r3, r3, #24
    ddbc:	d43e      	bmi.n	de3c <_fclose_r+0xc0>
    ddbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
    ddc0:	2900      	cmp	r1, #0
    ddc2:	d008      	beq.n	ddd6 <_fclose_r+0x5a>
    ddc4:	0023      	movs	r3, r4
    ddc6:	3340      	adds	r3, #64	; 0x40
    ddc8:	4299      	cmp	r1, r3
    ddca:	d002      	beq.n	ddd2 <_fclose_r+0x56>
    ddcc:	0030      	movs	r0, r6
    ddce:	f7ff ff55 	bl	dc7c <_free_r>
    ddd2:	2300      	movs	r3, #0
    ddd4:	6323      	str	r3, [r4, #48]	; 0x30
    ddd6:	6c61      	ldr	r1, [r4, #68]	; 0x44
    ddd8:	2900      	cmp	r1, #0
    ddda:	d004      	beq.n	dde6 <_fclose_r+0x6a>
    dddc:	0030      	movs	r0, r6
    ddde:	f7ff ff4d 	bl	dc7c <_free_r>
    dde2:	2300      	movs	r3, #0
    dde4:	6463      	str	r3, [r4, #68]	; 0x44
    dde6:	f000 f9e1 	bl	e1ac <__sfp_lock_acquire>
    ddea:	2300      	movs	r3, #0
    ddec:	81a3      	strh	r3, [r4, #12]
    ddee:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ddf0:	07db      	lsls	r3, r3, #31
    ddf2:	d52c      	bpl.n	de4e <_fclose_r+0xd2>
    ddf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ddf6:	f000 fdb1 	bl	e95c <__retarget_lock_close_recursive>
    ddfa:	f000 f9df 	bl	e1bc <__sfp_lock_release>
    ddfe:	0028      	movs	r0, r5
    de00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    de02:	89a3      	ldrh	r3, [r4, #12]
    de04:	059b      	lsls	r3, r3, #22
    de06:	d4ca      	bmi.n	dd9e <_fclose_r+0x22>
    de08:	6da0      	ldr	r0, [r4, #88]	; 0x58
    de0a:	f000 fda9 	bl	e960 <__retarget_lock_acquire_recursive>
    de0e:	220c      	movs	r2, #12
    de10:	5ea3      	ldrsh	r3, [r4, r2]
    de12:	2b00      	cmp	r3, #0
    de14:	d1c3      	bne.n	dd9e <_fclose_r+0x22>
    de16:	6e63      	ldr	r3, [r4, #100]	; 0x64
    de18:	001d      	movs	r5, r3
    de1a:	403d      	ands	r5, r7
    de1c:	423b      	tst	r3, r7
    de1e:	d012      	beq.n	de46 <_fclose_r+0xca>
    de20:	2500      	movs	r5, #0
    de22:	e7ec      	b.n	ddfe <_fclose_r+0x82>
    de24:	2701      	movs	r7, #1
    de26:	f000 f931 	bl	e08c <__sinit>
    de2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    de2c:	423b      	tst	r3, r7
    de2e:	d1b2      	bne.n	dd96 <_fclose_r+0x1a>
    de30:	e7e7      	b.n	de02 <_fclose_r+0x86>
    de32:	2501      	movs	r5, #1
    de34:	89a3      	ldrh	r3, [r4, #12]
    de36:	426d      	negs	r5, r5
    de38:	061b      	lsls	r3, r3, #24
    de3a:	d5c0      	bpl.n	ddbe <_fclose_r+0x42>
    de3c:	0030      	movs	r0, r6
    de3e:	6921      	ldr	r1, [r4, #16]
    de40:	f7ff ff1c 	bl	dc7c <_free_r>
    de44:	e7bb      	b.n	ddbe <_fclose_r+0x42>
    de46:	6da0      	ldr	r0, [r4, #88]	; 0x58
    de48:	f000 fd8c 	bl	e964 <__retarget_lock_release_recursive>
    de4c:	e7d7      	b.n	ddfe <_fclose_r+0x82>
    de4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    de50:	f000 fd88 	bl	e964 <__retarget_lock_release_recursive>
    de54:	e7ce      	b.n	ddf4 <_fclose_r+0x78>
    de56:	46c0      	nop			; (mov r8, r8)

0000de58 <__sflush_r>:
    de58:	b5f0      	push	{r4, r5, r6, r7, lr}
    de5a:	46c6      	mov	lr, r8
    de5c:	000c      	movs	r4, r1
    de5e:	b500      	push	{lr}
    de60:	89a2      	ldrh	r2, [r4, #12]
    de62:	4680      	mov	r8, r0
    de64:	230c      	movs	r3, #12
    de66:	5ec9      	ldrsh	r1, [r1, r3]
    de68:	0713      	lsls	r3, r2, #28
    de6a:	d44c      	bmi.n	df06 <__sflush_r+0xae>
    de6c:	2380      	movs	r3, #128	; 0x80
    de6e:	6862      	ldr	r2, [r4, #4]
    de70:	011b      	lsls	r3, r3, #4
    de72:	430b      	orrs	r3, r1
    de74:	81a3      	strh	r3, [r4, #12]
    de76:	2a00      	cmp	r2, #0
    de78:	dd66      	ble.n	df48 <__sflush_r+0xf0>
    de7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    de7c:	2e00      	cmp	r6, #0
    de7e:	d03e      	beq.n	defe <__sflush_r+0xa6>
    de80:	4642      	mov	r2, r8
    de82:	4641      	mov	r1, r8
    de84:	6815      	ldr	r5, [r2, #0]
    de86:	2200      	movs	r2, #0
    de88:	600a      	str	r2, [r1, #0]
    de8a:	b29a      	uxth	r2, r3
    de8c:	04db      	lsls	r3, r3, #19
    de8e:	d460      	bmi.n	df52 <__sflush_r+0xfa>
    de90:	2301      	movs	r3, #1
    de92:	2200      	movs	r2, #0
    de94:	4640      	mov	r0, r8
    de96:	69e1      	ldr	r1, [r4, #28]
    de98:	47b0      	blx	r6
    de9a:	1c43      	adds	r3, r0, #1
    de9c:	d068      	beq.n	df70 <__sflush_r+0x118>
    de9e:	89a2      	ldrh	r2, [r4, #12]
    dea0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dea2:	0753      	lsls	r3, r2, #29
    dea4:	d506      	bpl.n	deb4 <__sflush_r+0x5c>
    dea6:	6863      	ldr	r3, [r4, #4]
    dea8:	1ac0      	subs	r0, r0, r3
    deaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    deac:	2b00      	cmp	r3, #0
    deae:	d001      	beq.n	deb4 <__sflush_r+0x5c>
    deb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    deb2:	1ac0      	subs	r0, r0, r3
    deb4:	2300      	movs	r3, #0
    deb6:	0002      	movs	r2, r0
    deb8:	69e1      	ldr	r1, [r4, #28]
    deba:	4640      	mov	r0, r8
    debc:	47b0      	blx	r6
    debe:	1c43      	adds	r3, r0, #1
    dec0:	d149      	bne.n	df56 <__sflush_r+0xfe>
    dec2:	4643      	mov	r3, r8
    dec4:	681b      	ldr	r3, [r3, #0]
    dec6:	2b00      	cmp	r3, #0
    dec8:	d045      	beq.n	df56 <__sflush_r+0xfe>
    deca:	2b1d      	cmp	r3, #29
    decc:	d001      	beq.n	ded2 <__sflush_r+0x7a>
    dece:	2b16      	cmp	r3, #22
    ded0:	d157      	bne.n	df82 <__sflush_r+0x12a>
    ded2:	89a3      	ldrh	r3, [r4, #12]
    ded4:	4a2f      	ldr	r2, [pc, #188]	; (df94 <__sflush_r+0x13c>)
    ded6:	4013      	ands	r3, r2
    ded8:	81a3      	strh	r3, [r4, #12]
    deda:	2300      	movs	r3, #0
    dedc:	6063      	str	r3, [r4, #4]
    dede:	6923      	ldr	r3, [r4, #16]
    dee0:	6023      	str	r3, [r4, #0]
    dee2:	4643      	mov	r3, r8
    dee4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    dee6:	601d      	str	r5, [r3, #0]
    dee8:	2900      	cmp	r1, #0
    deea:	d008      	beq.n	defe <__sflush_r+0xa6>
    deec:	0023      	movs	r3, r4
    deee:	3340      	adds	r3, #64	; 0x40
    def0:	4299      	cmp	r1, r3
    def2:	d002      	beq.n	defa <__sflush_r+0xa2>
    def4:	4640      	mov	r0, r8
    def6:	f7ff fec1 	bl	dc7c <_free_r>
    defa:	2300      	movs	r3, #0
    defc:	6323      	str	r3, [r4, #48]	; 0x30
    defe:	2000      	movs	r0, #0
    df00:	bc80      	pop	{r7}
    df02:	46b8      	mov	r8, r7
    df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df06:	6926      	ldr	r6, [r4, #16]
    df08:	2e00      	cmp	r6, #0
    df0a:	d0f8      	beq.n	defe <__sflush_r+0xa6>
    df0c:	6823      	ldr	r3, [r4, #0]
    df0e:	6026      	str	r6, [r4, #0]
    df10:	1b9d      	subs	r5, r3, r6
    df12:	2300      	movs	r3, #0
    df14:	0792      	lsls	r2, r2, #30
    df16:	d100      	bne.n	df1a <__sflush_r+0xc2>
    df18:	6963      	ldr	r3, [r4, #20]
    df1a:	60a3      	str	r3, [r4, #8]
    df1c:	2d00      	cmp	r5, #0
    df1e:	dc04      	bgt.n	df2a <__sflush_r+0xd2>
    df20:	e7ed      	b.n	defe <__sflush_r+0xa6>
    df22:	1836      	adds	r6, r6, r0
    df24:	1a2d      	subs	r5, r5, r0
    df26:	2d00      	cmp	r5, #0
    df28:	dde9      	ble.n	defe <__sflush_r+0xa6>
    df2a:	002b      	movs	r3, r5
    df2c:	0032      	movs	r2, r6
    df2e:	4640      	mov	r0, r8
    df30:	69e1      	ldr	r1, [r4, #28]
    df32:	6a67      	ldr	r7, [r4, #36]	; 0x24
    df34:	47b8      	blx	r7
    df36:	2800      	cmp	r0, #0
    df38:	dcf3      	bgt.n	df22 <__sflush_r+0xca>
    df3a:	2240      	movs	r2, #64	; 0x40
    df3c:	2001      	movs	r0, #1
    df3e:	89a3      	ldrh	r3, [r4, #12]
    df40:	4240      	negs	r0, r0
    df42:	4313      	orrs	r3, r2
    df44:	81a3      	strh	r3, [r4, #12]
    df46:	e7db      	b.n	df00 <__sflush_r+0xa8>
    df48:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    df4a:	2a00      	cmp	r2, #0
    df4c:	dd00      	ble.n	df50 <__sflush_r+0xf8>
    df4e:	e794      	b.n	de7a <__sflush_r+0x22>
    df50:	e7d5      	b.n	defe <__sflush_r+0xa6>
    df52:	6d20      	ldr	r0, [r4, #80]	; 0x50
    df54:	e7a5      	b.n	dea2 <__sflush_r+0x4a>
    df56:	89a3      	ldrh	r3, [r4, #12]
    df58:	4a0e      	ldr	r2, [pc, #56]	; (df94 <__sflush_r+0x13c>)
    df5a:	4013      	ands	r3, r2
    df5c:	2200      	movs	r2, #0
    df5e:	6062      	str	r2, [r4, #4]
    df60:	6922      	ldr	r2, [r4, #16]
    df62:	b21b      	sxth	r3, r3
    df64:	81a3      	strh	r3, [r4, #12]
    df66:	6022      	str	r2, [r4, #0]
    df68:	04db      	lsls	r3, r3, #19
    df6a:	d5ba      	bpl.n	dee2 <__sflush_r+0x8a>
    df6c:	6520      	str	r0, [r4, #80]	; 0x50
    df6e:	e7b8      	b.n	dee2 <__sflush_r+0x8a>
    df70:	4643      	mov	r3, r8
    df72:	681b      	ldr	r3, [r3, #0]
    df74:	2b00      	cmp	r3, #0
    df76:	d100      	bne.n	df7a <__sflush_r+0x122>
    df78:	e791      	b.n	de9e <__sflush_r+0x46>
    df7a:	2b1d      	cmp	r3, #29
    df7c:	d006      	beq.n	df8c <__sflush_r+0x134>
    df7e:	2b16      	cmp	r3, #22
    df80:	d004      	beq.n	df8c <__sflush_r+0x134>
    df82:	2240      	movs	r2, #64	; 0x40
    df84:	89a3      	ldrh	r3, [r4, #12]
    df86:	4313      	orrs	r3, r2
    df88:	81a3      	strh	r3, [r4, #12]
    df8a:	e7b9      	b.n	df00 <__sflush_r+0xa8>
    df8c:	4643      	mov	r3, r8
    df8e:	2000      	movs	r0, #0
    df90:	601d      	str	r5, [r3, #0]
    df92:	e7b5      	b.n	df00 <__sflush_r+0xa8>
    df94:	fffff7ff 	.word	0xfffff7ff

0000df98 <_fflush_r>:
    df98:	b570      	push	{r4, r5, r6, lr}
    df9a:	0005      	movs	r5, r0
    df9c:	000c      	movs	r4, r1
    df9e:	2800      	cmp	r0, #0
    dfa0:	d002      	beq.n	dfa8 <_fflush_r+0x10>
    dfa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dfa4:	2b00      	cmp	r3, #0
    dfa6:	d015      	beq.n	dfd4 <_fflush_r+0x3c>
    dfa8:	220c      	movs	r2, #12
    dfaa:	5ea3      	ldrsh	r3, [r4, r2]
    dfac:	2b00      	cmp	r3, #0
    dfae:	d017      	beq.n	dfe0 <_fflush_r+0x48>
    dfb0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    dfb2:	07d2      	lsls	r2, r2, #31
    dfb4:	d401      	bmi.n	dfba <_fflush_r+0x22>
    dfb6:	059b      	lsls	r3, r3, #22
    dfb8:	d514      	bpl.n	dfe4 <_fflush_r+0x4c>
    dfba:	0028      	movs	r0, r5
    dfbc:	0021      	movs	r1, r4
    dfbe:	f7ff ff4b 	bl	de58 <__sflush_r>
    dfc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dfc4:	0005      	movs	r5, r0
    dfc6:	07db      	lsls	r3, r3, #31
    dfc8:	d402      	bmi.n	dfd0 <_fflush_r+0x38>
    dfca:	89a3      	ldrh	r3, [r4, #12]
    dfcc:	059b      	lsls	r3, r3, #22
    dfce:	d515      	bpl.n	dffc <_fflush_r+0x64>
    dfd0:	0028      	movs	r0, r5
    dfd2:	bd70      	pop	{r4, r5, r6, pc}
    dfd4:	f000 f85a 	bl	e08c <__sinit>
    dfd8:	220c      	movs	r2, #12
    dfda:	5ea3      	ldrsh	r3, [r4, r2]
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d1e7      	bne.n	dfb0 <_fflush_r+0x18>
    dfe0:	2500      	movs	r5, #0
    dfe2:	e7f5      	b.n	dfd0 <_fflush_r+0x38>
    dfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dfe6:	f000 fcbb 	bl	e960 <__retarget_lock_acquire_recursive>
    dfea:	0028      	movs	r0, r5
    dfec:	0021      	movs	r1, r4
    dfee:	f7ff ff33 	bl	de58 <__sflush_r>
    dff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dff4:	0005      	movs	r5, r0
    dff6:	07db      	lsls	r3, r3, #31
    dff8:	d4ea      	bmi.n	dfd0 <_fflush_r+0x38>
    dffa:	e7e6      	b.n	dfca <_fflush_r+0x32>
    dffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dffe:	f000 fcb1 	bl	e964 <__retarget_lock_release_recursive>
    e002:	e7e5      	b.n	dfd0 <_fflush_r+0x38>

0000e004 <fileno>:
    e004:	b570      	push	{r4, r5, r6, lr}
    e006:	4e1c      	ldr	r6, [pc, #112]	; (e078 <fileno+0x74>)
    e008:	0004      	movs	r4, r0
    e00a:	6830      	ldr	r0, [r6, #0]
    e00c:	2800      	cmp	r0, #0
    e00e:	d002      	beq.n	e016 <fileno+0x12>
    e010:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e012:	2b00      	cmp	r3, #0
    e014:	d017      	beq.n	e046 <fileno+0x42>
    e016:	2501      	movs	r5, #1
    e018:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e01a:	422b      	tst	r3, r5
    e01c:	d007      	beq.n	e02e <fileno+0x2a>
    e01e:	210c      	movs	r1, #12
    e020:	5e62      	ldrsh	r2, [r4, r1]
    e022:	2a00      	cmp	r2, #0
    e024:	d020      	beq.n	e068 <fileno+0x64>
    e026:	230e      	movs	r3, #14
    e028:	5ee6      	ldrsh	r6, [r4, r3]
    e02a:	0030      	movs	r0, r6
    e02c:	bd70      	pop	{r4, r5, r6, pc}
    e02e:	220c      	movs	r2, #12
    e030:	5ea3      	ldrsh	r3, [r4, r2]
    e032:	059a      	lsls	r2, r3, #22
    e034:	d50a      	bpl.n	e04c <fileno+0x48>
    e036:	220e      	movs	r2, #14
    e038:	5ea6      	ldrsh	r6, [r4, r2]
    e03a:	059b      	lsls	r3, r3, #22
    e03c:	d4f5      	bmi.n	e02a <fileno+0x26>
    e03e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e040:	f000 fc90 	bl	e964 <__retarget_lock_release_recursive>
    e044:	e7f1      	b.n	e02a <fileno+0x26>
    e046:	f000 f821 	bl	e08c <__sinit>
    e04a:	e7e4      	b.n	e016 <fileno+0x12>
    e04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e04e:	f000 fc87 	bl	e960 <__retarget_lock_acquire_recursive>
    e052:	220c      	movs	r2, #12
    e054:	5ea3      	ldrsh	r3, [r4, r2]
    e056:	2b00      	cmp	r3, #0
    e058:	d005      	beq.n	e066 <fileno+0x62>
    e05a:	220e      	movs	r2, #14
    e05c:	5ea6      	ldrsh	r6, [r4, r2]
    e05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e060:	422a      	tst	r2, r5
    e062:	d0ea      	beq.n	e03a <fileno+0x36>
    e064:	e7e1      	b.n	e02a <fileno+0x26>
    e066:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e068:	6832      	ldr	r2, [r6, #0]
    e06a:	2109      	movs	r1, #9
    e06c:	2601      	movs	r6, #1
    e06e:	6011      	str	r1, [r2, #0]
    e070:	4276      	negs	r6, r6
    e072:	07db      	lsls	r3, r3, #31
    e074:	d5e3      	bpl.n	e03e <fileno+0x3a>
    e076:	e7d8      	b.n	e02a <fileno+0x26>
    e078:	0001737c 	.word	0x0001737c

0000e07c <_cleanup_r>:
    e07c:	b510      	push	{r4, lr}
    e07e:	4902      	ldr	r1, [pc, #8]	; (e088 <_cleanup_r+0xc>)
    e080:	f000 f8a4 	bl	e1cc <_fwalk_reent>
    e084:	bd10      	pop	{r4, pc}
    e086:	46c0      	nop			; (mov r8, r8)
    e088:	0000dd7d 	.word	0x0000dd7d

0000e08c <__sinit>:
    e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e08e:	46de      	mov	lr, fp
    e090:	4657      	mov	r7, sl
    e092:	464e      	mov	r6, r9
    e094:	4645      	mov	r5, r8
    e096:	b5e0      	push	{r5, r6, r7, lr}
    e098:	0006      	movs	r6, r0
    e09a:	4f3c      	ldr	r7, [pc, #240]	; (e18c <__sinit+0x100>)
    e09c:	0038      	movs	r0, r7
    e09e:	f000 fc5f 	bl	e960 <__retarget_lock_acquire_recursive>
    e0a2:	6bb4      	ldr	r4, [r6, #56]	; 0x38
    e0a4:	2c00      	cmp	r4, #0
    e0a6:	d168      	bne.n	e17a <__sinit+0xee>
    e0a8:	4b39      	ldr	r3, [pc, #228]	; (e190 <__sinit+0x104>)
    e0aa:	2203      	movs	r2, #3
    e0ac:	63f3      	str	r3, [r6, #60]	; 0x3c
    e0ae:	23b8      	movs	r3, #184	; 0xb8
    e0b0:	009b      	lsls	r3, r3, #2
    e0b2:	50f4      	str	r4, [r6, r3]
    e0b4:	3304      	adds	r3, #4
    e0b6:	6875      	ldr	r5, [r6, #4]
    e0b8:	50f2      	str	r2, [r6, r3]
    e0ba:	3308      	adds	r3, #8
    e0bc:	18f2      	adds	r2, r6, r3
    e0be:	3b04      	subs	r3, #4
    e0c0:	50f2      	str	r2, [r6, r3]
    e0c2:	0028      	movs	r0, r5
    e0c4:	2304      	movs	r3, #4
    e0c6:	2208      	movs	r2, #8
    e0c8:	2100      	movs	r1, #0
    e0ca:	60eb      	str	r3, [r5, #12]
    e0cc:	666c      	str	r4, [r5, #100]	; 0x64
    e0ce:	602c      	str	r4, [r5, #0]
    e0d0:	606c      	str	r4, [r5, #4]
    e0d2:	60ac      	str	r4, [r5, #8]
    e0d4:	612c      	str	r4, [r5, #16]
    e0d6:	616c      	str	r4, [r5, #20]
    e0d8:	61ac      	str	r4, [r5, #24]
    e0da:	305c      	adds	r0, #92	; 0x5c
    e0dc:	f000 fd82 	bl	ebe4 <memset>
    e0e0:	0028      	movs	r0, r5
    e0e2:	4b2c      	ldr	r3, [pc, #176]	; (e194 <__sinit+0x108>)
    e0e4:	61ed      	str	r5, [r5, #28]
    e0e6:	469b      	mov	fp, r3
    e0e8:	622b      	str	r3, [r5, #32]
    e0ea:	4b2b      	ldr	r3, [pc, #172]	; (e198 <__sinit+0x10c>)
    e0ec:	3058      	adds	r0, #88	; 0x58
    e0ee:	469a      	mov	sl, r3
    e0f0:	626b      	str	r3, [r5, #36]	; 0x24
    e0f2:	4b2a      	ldr	r3, [pc, #168]	; (e19c <__sinit+0x110>)
    e0f4:	4699      	mov	r9, r3
    e0f6:	62ab      	str	r3, [r5, #40]	; 0x28
    e0f8:	4b29      	ldr	r3, [pc, #164]	; (e1a0 <__sinit+0x114>)
    e0fa:	62eb      	str	r3, [r5, #44]	; 0x2c
    e0fc:	4698      	mov	r8, r3
    e0fe:	f000 fc2b 	bl	e958 <__retarget_lock_init_recursive>
    e102:	68b5      	ldr	r5, [r6, #8]
    e104:	4b27      	ldr	r3, [pc, #156]	; (e1a4 <__sinit+0x118>)
    e106:	0028      	movs	r0, r5
    e108:	2208      	movs	r2, #8
    e10a:	2100      	movs	r1, #0
    e10c:	60eb      	str	r3, [r5, #12]
    e10e:	666c      	str	r4, [r5, #100]	; 0x64
    e110:	602c      	str	r4, [r5, #0]
    e112:	606c      	str	r4, [r5, #4]
    e114:	60ac      	str	r4, [r5, #8]
    e116:	612c      	str	r4, [r5, #16]
    e118:	616c      	str	r4, [r5, #20]
    e11a:	61ac      	str	r4, [r5, #24]
    e11c:	305c      	adds	r0, #92	; 0x5c
    e11e:	f000 fd61 	bl	ebe4 <memset>
    e122:	465b      	mov	r3, fp
    e124:	622b      	str	r3, [r5, #32]
    e126:	4653      	mov	r3, sl
    e128:	626b      	str	r3, [r5, #36]	; 0x24
    e12a:	464b      	mov	r3, r9
    e12c:	0028      	movs	r0, r5
    e12e:	62ab      	str	r3, [r5, #40]	; 0x28
    e130:	4643      	mov	r3, r8
    e132:	61ed      	str	r5, [r5, #28]
    e134:	62eb      	str	r3, [r5, #44]	; 0x2c
    e136:	3058      	adds	r0, #88	; 0x58
    e138:	f000 fc0e 	bl	e958 <__retarget_lock_init_recursive>
    e13c:	68f5      	ldr	r5, [r6, #12]
    e13e:	4b1a      	ldr	r3, [pc, #104]	; (e1a8 <__sinit+0x11c>)
    e140:	0028      	movs	r0, r5
    e142:	2208      	movs	r2, #8
    e144:	2100      	movs	r1, #0
    e146:	60eb      	str	r3, [r5, #12]
    e148:	666c      	str	r4, [r5, #100]	; 0x64
    e14a:	602c      	str	r4, [r5, #0]
    e14c:	606c      	str	r4, [r5, #4]
    e14e:	60ac      	str	r4, [r5, #8]
    e150:	612c      	str	r4, [r5, #16]
    e152:	616c      	str	r4, [r5, #20]
    e154:	61ac      	str	r4, [r5, #24]
    e156:	305c      	adds	r0, #92	; 0x5c
    e158:	f000 fd44 	bl	ebe4 <memset>
    e15c:	465b      	mov	r3, fp
    e15e:	622b      	str	r3, [r5, #32]
    e160:	4653      	mov	r3, sl
    e162:	626b      	str	r3, [r5, #36]	; 0x24
    e164:	464b      	mov	r3, r9
    e166:	0028      	movs	r0, r5
    e168:	62ab      	str	r3, [r5, #40]	; 0x28
    e16a:	4643      	mov	r3, r8
    e16c:	61ed      	str	r5, [r5, #28]
    e16e:	62eb      	str	r3, [r5, #44]	; 0x2c
    e170:	3058      	adds	r0, #88	; 0x58
    e172:	f000 fbf1 	bl	e958 <__retarget_lock_init_recursive>
    e176:	2301      	movs	r3, #1
    e178:	63b3      	str	r3, [r6, #56]	; 0x38
    e17a:	0038      	movs	r0, r7
    e17c:	f000 fbf2 	bl	e964 <__retarget_lock_release_recursive>
    e180:	bcf0      	pop	{r4, r5, r6, r7}
    e182:	46bb      	mov	fp, r7
    e184:	46b2      	mov	sl, r6
    e186:	46a9      	mov	r9, r5
    e188:	46a0      	mov	r8, r4
    e18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e18c:	00018770 	.word	0x00018770
    e190:	0000e07d 	.word	0x0000e07d
    e194:	0000f4dd 	.word	0x0000f4dd
    e198:	0000f505 	.word	0x0000f505
    e19c:	0000f545 	.word	0x0000f545
    e1a0:	0000f571 	.word	0x0000f571
    e1a4:	00010009 	.word	0x00010009
    e1a8:	00020012 	.word	0x00020012

0000e1ac <__sfp_lock_acquire>:
    e1ac:	b510      	push	{r4, lr}
    e1ae:	4802      	ldr	r0, [pc, #8]	; (e1b8 <__sfp_lock_acquire+0xc>)
    e1b0:	f000 fbd6 	bl	e960 <__retarget_lock_acquire_recursive>
    e1b4:	bd10      	pop	{r4, pc}
    e1b6:	46c0      	nop			; (mov r8, r8)
    e1b8:	0001876c 	.word	0x0001876c

0000e1bc <__sfp_lock_release>:
    e1bc:	b510      	push	{r4, lr}
    e1be:	4802      	ldr	r0, [pc, #8]	; (e1c8 <__sfp_lock_release+0xc>)
    e1c0:	f000 fbd0 	bl	e964 <__retarget_lock_release_recursive>
    e1c4:	bd10      	pop	{r4, pc}
    e1c6:	46c0      	nop			; (mov r8, r8)
    e1c8:	0001876c 	.word	0x0001876c

0000e1cc <_fwalk_reent>:
    e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1ce:	4647      	mov	r7, r8
    e1d0:	46ce      	mov	lr, r9
    e1d2:	b580      	push	{r7, lr}
    e1d4:	27b8      	movs	r7, #184	; 0xb8
    e1d6:	4680      	mov	r8, r0
    e1d8:	4689      	mov	r9, r1
    e1da:	2600      	movs	r6, #0
    e1dc:	00bf      	lsls	r7, r7, #2
    e1de:	4447      	add	r7, r8
    e1e0:	687b      	ldr	r3, [r7, #4]
    e1e2:	68bc      	ldr	r4, [r7, #8]
    e1e4:	1e5d      	subs	r5, r3, #1
    e1e6:	d40d      	bmi.n	e204 <_fwalk_reent+0x38>
    e1e8:	89a3      	ldrh	r3, [r4, #12]
    e1ea:	2b01      	cmp	r3, #1
    e1ec:	d907      	bls.n	e1fe <_fwalk_reent+0x32>
    e1ee:	220e      	movs	r2, #14
    e1f0:	5ea3      	ldrsh	r3, [r4, r2]
    e1f2:	3301      	adds	r3, #1
    e1f4:	d003      	beq.n	e1fe <_fwalk_reent+0x32>
    e1f6:	0021      	movs	r1, r4
    e1f8:	4640      	mov	r0, r8
    e1fa:	47c8      	blx	r9
    e1fc:	4306      	orrs	r6, r0
    e1fe:	3468      	adds	r4, #104	; 0x68
    e200:	3d01      	subs	r5, #1
    e202:	d2f1      	bcs.n	e1e8 <_fwalk_reent+0x1c>
    e204:	683f      	ldr	r7, [r7, #0]
    e206:	2f00      	cmp	r7, #0
    e208:	d1ea      	bne.n	e1e0 <_fwalk_reent+0x14>
    e20a:	0030      	movs	r0, r6
    e20c:	bcc0      	pop	{r6, r7}
    e20e:	46b9      	mov	r9, r7
    e210:	46b0      	mov	r8, r6
    e212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e214 <getopt_internal>:
    e214:	b5f0      	push	{r4, r5, r6, r7, lr}
    e216:	464e      	mov	r6, r9
    e218:	4645      	mov	r5, r8
    e21a:	46de      	mov	lr, fp
    e21c:	4657      	mov	r7, sl
    e21e:	b5e0      	push	{r5, r6, r7, lr}
    e220:	b085      	sub	sp, #20
    e222:	4680      	mov	r8, r0
    e224:	000e      	movs	r6, r1
    e226:	0015      	movs	r5, r2
    e228:	4699      	mov	r9, r3
    e22a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e22c:	2800      	cmp	r0, #0
    e22e:	d100      	bne.n	e232 <getopt_internal+0x1e>
    e230:	e0b1      	b.n	e396 <getopt_internal+0x182>
    e232:	2900      	cmp	r1, #0
    e234:	d100      	bne.n	e238 <getopt_internal+0x24>
    e236:	e0ae      	b.n	e396 <getopt_internal+0x182>
    e238:	2a00      	cmp	r2, #0
    e23a:	d100      	bne.n	e23e <getopt_internal+0x2a>
    e23c:	e0a7      	b.n	e38e <getopt_internal+0x17a>
    e23e:	6863      	ldr	r3, [r4, #4]
    e240:	4543      	cmp	r3, r8
    e242:	db00      	blt.n	e246 <getopt_internal+0x32>
    e244:	e0a7      	b.n	e396 <getopt_internal+0x182>
    e246:	009b      	lsls	r3, r3, #2
    e248:	5998      	ldr	r0, [r3, r6]
    e24a:	2800      	cmp	r0, #0
    e24c:	d100      	bne.n	e250 <getopt_internal+0x3c>
    e24e:	e0a2      	b.n	e396 <getopt_internal+0x182>
    e250:	4fb4      	ldr	r7, [pc, #720]	; (e524 <getopt_internal+0x310>)
    e252:	0039      	movs	r1, r7
    e254:	f7f5 ffb8 	bl	41c8 <strcmp>
    e258:	6863      	ldr	r3, [r4, #4]
    e25a:	2800      	cmp	r0, #0
    e25c:	d100      	bne.n	e260 <getopt_internal+0x4c>
    e25e:	e2cf      	b.n	e800 <getopt_internal+0x5ec>
    e260:	2b00      	cmp	r3, #0
    e262:	d100      	bne.n	e266 <getopt_internal+0x52>
    e264:	e079      	b.n	e35a <getopt_internal+0x146>
    e266:	2d00      	cmp	r5, #0
    e268:	d100      	bne.n	e26c <getopt_internal+0x58>
    e26a:	e07e      	b.n	e36a <getopt_internal+0x156>
    e26c:	782b      	ldrb	r3, [r5, #0]
    e26e:	2b2d      	cmp	r3, #45	; 0x2d
    e270:	d100      	bne.n	e274 <getopt_internal+0x60>
    e272:	e093      	b.n	e39c <getopt_internal+0x188>
    e274:	2b2b      	cmp	r3, #43	; 0x2b
    e276:	d100      	bne.n	e27a <getopt_internal+0x66>
    e278:	e116      	b.n	e4a8 <getopt_internal+0x294>
    e27a:	48ab      	ldr	r0, [pc, #684]	; (e528 <getopt_internal+0x314>)
    e27c:	f004 fd56 	bl	12d2c <getenv>
    e280:	1e43      	subs	r3, r0, #1
    e282:	4198      	sbcs	r0, r3
    e284:	0043      	lsls	r3, r0, #1
    e286:	9300      	str	r3, [sp, #0]
    e288:	2200      	movs	r2, #0
    e28a:	782b      	ldrb	r3, [r5, #0]
    e28c:	9201      	str	r2, [sp, #4]
    e28e:	2b3a      	cmp	r3, #58	; 0x3a
    e290:	d102      	bne.n	e298 <getopt_internal+0x84>
    e292:	3b39      	subs	r3, #57	; 0x39
    e294:	3501      	adds	r5, #1
    e296:	9301      	str	r3, [sp, #4]
    e298:	6920      	ldr	r0, [r4, #16]
    e29a:	2801      	cmp	r0, #1
    e29c:	d100      	bne.n	e2a0 <getopt_internal+0x8c>
    e29e:	e0d5      	b.n	e44c <getopt_internal+0x238>
    e2a0:	6862      	ldr	r2, [r4, #4]
    e2a2:	0093      	lsls	r3, r2, #2
    e2a4:	599b      	ldr	r3, [r3, r6]
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	d100      	bne.n	e2ac <getopt_internal+0x98>
    e2aa:	e074      	b.n	e396 <getopt_internal+0x182>
    e2ac:	4649      	mov	r1, r9
    e2ae:	2900      	cmp	r1, #0
    e2b0:	d06a      	beq.n	e388 <getopt_internal+0x174>
    e2b2:	2202      	movs	r2, #2
    e2b4:	0039      	movs	r1, r7
    e2b6:	0018      	movs	r0, r3
    e2b8:	f000 fbc8 	bl	ea4c <memcmp>
    e2bc:	2800      	cmp	r0, #0
    e2be:	d100      	bne.n	e2c2 <getopt_internal+0xae>
    e2c0:	e070      	b.n	e3a4 <getopt_internal+0x190>
    e2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2c4:	6862      	ldr	r2, [r4, #4]
    e2c6:	2b00      	cmp	r3, #0
    e2c8:	d05e      	beq.n	e388 <getopt_internal+0x174>
    e2ca:	0093      	lsls	r3, r2, #2
    e2cc:	599b      	ldr	r3, [r3, r6]
    e2ce:	7819      	ldrb	r1, [r3, #0]
    e2d0:	292b      	cmp	r1, #43	; 0x2b
    e2d2:	d06a      	beq.n	e3aa <getopt_internal+0x196>
    e2d4:	6920      	ldr	r0, [r4, #16]
    e2d6:	2d00      	cmp	r5, #0
    e2d8:	d010      	beq.n	e2fc <getopt_internal+0xe8>
    e2da:	5c19      	ldrb	r1, [r3, r0]
    e2dc:	0028      	movs	r0, r5
    e2de:	f001 f94d 	bl	f57c <strchr>
    e2e2:	1e05      	subs	r5, r0, #0
    e2e4:	d100      	bne.n	e2e8 <getopt_internal+0xd4>
    e2e6:	e1fa      	b.n	e6de <getopt_internal+0x4ca>
    e2e8:	7843      	ldrb	r3, [r0, #1]
    e2ea:	2b3a      	cmp	r3, #58	; 0x3a
    e2ec:	d100      	bne.n	e2f0 <getopt_internal+0xdc>
    e2ee:	e151      	b.n	e594 <getopt_internal+0x380>
    e2f0:	7803      	ldrb	r3, [r0, #0]
    e2f2:	6862      	ldr	r2, [r4, #4]
    e2f4:	60e3      	str	r3, [r4, #12]
    e2f6:	0093      	lsls	r3, r2, #2
    e2f8:	6920      	ldr	r0, [r4, #16]
    e2fa:	599b      	ldr	r3, [r3, r6]
    e2fc:	3001      	adds	r0, #1
    e2fe:	6120      	str	r0, [r4, #16]
    e300:	5c19      	ldrb	r1, [r3, r0]
    e302:	2900      	cmp	r1, #0
    e304:	d000      	beq.n	e308 <getopt_internal+0xf4>
    e306:	e0f9      	b.n	e4fc <getopt_internal+0x2e8>
    e308:	2301      	movs	r3, #1
    e30a:	6123      	str	r3, [r4, #16]
    e30c:	9b00      	ldr	r3, [sp, #0]
    e30e:	6021      	str	r1, [r4, #0]
    e310:	2b00      	cmp	r3, #0
    e312:	d000      	beq.n	e316 <getopt_internal+0x102>
    e314:	e2aa      	b.n	e86c <getopt_internal+0x658>
    e316:	2701      	movs	r7, #1
    e318:	2000      	movs	r0, #0
    e31a:	427f      	negs	r7, r7
    e31c:	69a3      	ldr	r3, [r4, #24]
    e31e:	2b00      	cmp	r3, #0
    e320:	d000      	beq.n	e324 <getopt_internal+0x110>
    e322:	e192      	b.n	e64a <getopt_internal+0x436>
    e324:	6863      	ldr	r3, [r4, #4]
    e326:	3301      	adds	r3, #1
    e328:	181b      	adds	r3, r3, r0
    e32a:	6063      	str	r3, [r4, #4]
    e32c:	1c7b      	adds	r3, r7, #1
    e32e:	d100      	bne.n	e332 <getopt_internal+0x11e>
    e330:	e0ed      	b.n	e50e <getopt_internal+0x2fa>
    e332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e334:	2b00      	cmp	r3, #0
    e336:	d000      	beq.n	e33a <getopt_internal+0x126>
    e338:	601f      	str	r7, [r3, #0]
    e33a:	013b      	lsls	r3, r7, #4
    e33c:	444b      	add	r3, r9
    e33e:	689a      	ldr	r2, [r3, #8]
    e340:	2a00      	cmp	r2, #0
    e342:	d100      	bne.n	e346 <getopt_internal+0x132>
    e344:	e0e5      	b.n	e512 <getopt_internal+0x2fe>
    e346:	2000      	movs	r0, #0
    e348:	68db      	ldr	r3, [r3, #12]
    e34a:	6013      	str	r3, [r2, #0]
    e34c:	b005      	add	sp, #20
    e34e:	bcf0      	pop	{r4, r5, r6, r7}
    e350:	46bb      	mov	fp, r7
    e352:	46b2      	mov	sl, r6
    e354:	46a9      	mov	r9, r5
    e356:	46a0      	mov	r8, r4
    e358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e35a:	2201      	movs	r2, #1
    e35c:	6163      	str	r3, [r4, #20]
    e35e:	6062      	str	r2, [r4, #4]
    e360:	6122      	str	r2, [r4, #16]
    e362:	61a3      	str	r3, [r4, #24]
    e364:	2d00      	cmp	r5, #0
    e366:	d000      	beq.n	e36a <getopt_internal+0x156>
    e368:	e780      	b.n	e26c <getopt_internal+0x58>
    e36a:	486f      	ldr	r0, [pc, #444]	; (e528 <getopt_internal+0x314>)
    e36c:	f004 fcde 	bl	12d2c <getenv>
    e370:	6923      	ldr	r3, [r4, #16]
    e372:	2800      	cmp	r0, #0
    e374:	d100      	bne.n	e378 <getopt_internal+0x164>
    e376:	e0ce      	b.n	e516 <getopt_internal+0x302>
    e378:	2b01      	cmp	r3, #1
    e37a:	d100      	bne.n	e37e <getopt_internal+0x16a>
    e37c:	e162      	b.n	e644 <getopt_internal+0x430>
    e37e:	2302      	movs	r3, #2
    e380:	9300      	str	r3, [sp, #0]
    e382:	2300      	movs	r3, #0
    e384:	9301      	str	r3, [sp, #4]
    e386:	e78b      	b.n	e2a0 <getopt_internal+0x8c>
    e388:	0093      	lsls	r3, r2, #2
    e38a:	599b      	ldr	r3, [r3, r6]
    e38c:	e7a2      	b.n	e2d4 <getopt_internal+0xc0>
    e38e:	464b      	mov	r3, r9
    e390:	2b00      	cmp	r3, #0
    e392:	d000      	beq.n	e396 <getopt_internal+0x182>
    e394:	e753      	b.n	e23e <getopt_internal+0x2a>
    e396:	2001      	movs	r0, #1
    e398:	4240      	negs	r0, r0
    e39a:	e7d7      	b.n	e34c <getopt_internal+0x138>
    e39c:	2301      	movs	r3, #1
    e39e:	3501      	adds	r5, #1
    e3a0:	9300      	str	r3, [sp, #0]
    e3a2:	e771      	b.n	e288 <getopt_internal+0x74>
    e3a4:	6862      	ldr	r2, [r4, #4]
    e3a6:	0093      	lsls	r3, r2, #2
    e3a8:	599b      	ldr	r3, [r3, r6]
    e3aa:	6920      	ldr	r0, [r4, #16]
    e3ac:	2801      	cmp	r0, #1
    e3ae:	d192      	bne.n	e2d6 <getopt_internal+0xc2>
    e3b0:	2202      	movs	r2, #2
    e3b2:	0039      	movs	r1, r7
    e3b4:	0018      	movs	r0, r3
    e3b6:	f000 fb49 	bl	ea4c <memcmp>
    e3ba:	2800      	cmp	r0, #0
    e3bc:	d000      	beq.n	e3c0 <getopt_internal+0x1ac>
    e3be:	e115      	b.n	e5ec <getopt_internal+0x3d8>
    e3c0:	2302      	movs	r3, #2
    e3c2:	2202      	movs	r2, #2
    e3c4:	6123      	str	r3, [r4, #16]
    e3c6:	6863      	ldr	r3, [r4, #4]
    e3c8:	213d      	movs	r1, #61	; 0x3d
    e3ca:	009b      	lsls	r3, r3, #2
    e3cc:	5998      	ldr	r0, [r3, r6]
    e3ce:	1880      	adds	r0, r0, r2
    e3d0:	f001 f8d4 	bl	f57c <strchr>
    e3d4:	4683      	mov	fp, r0
    e3d6:	2800      	cmp	r0, #0
    e3d8:	d100      	bne.n	e3dc <getopt_internal+0x1c8>
    e3da:	e215      	b.n	e808 <getopt_internal+0x5f4>
    e3dc:	4659      	mov	r1, fp
    e3de:	6862      	ldr	r2, [r4, #4]
    e3e0:	6920      	ldr	r0, [r4, #16]
    e3e2:	0093      	lsls	r3, r2, #2
    e3e4:	599b      	ldr	r3, [r3, r6]
    e3e6:	1ac9      	subs	r1, r1, r3
    e3e8:	1a09      	subs	r1, r1, r0
    e3ea:	468c      	mov	ip, r1
    e3ec:	4649      	mov	r1, r9
    e3ee:	6809      	ldr	r1, [r1, #0]
    e3f0:	2900      	cmp	r1, #0
    e3f2:	d100      	bne.n	e3f6 <getopt_internal+0x1e2>
    e3f4:	e76f      	b.n	e2d6 <getopt_internal+0xc2>
    e3f6:	465a      	mov	r2, fp
    e3f8:	2701      	movs	r7, #1
    e3fa:	9202      	str	r2, [sp, #8]
    e3fc:	0002      	movs	r2, r0
    e3fe:	427f      	negs	r7, r7
    e400:	46bb      	mov	fp, r7
    e402:	0018      	movs	r0, r3
    e404:	46b2      	mov	sl, r6
    e406:	9503      	str	r5, [sp, #12]
    e408:	2700      	movs	r7, #0
    e40a:	464d      	mov	r5, r9
    e40c:	4666      	mov	r6, ip
    e40e:	0013      	movs	r3, r2
    e410:	e00a      	b.n	e428 <getopt_internal+0x214>
    e412:	6929      	ldr	r1, [r5, #16]
    e414:	3510      	adds	r5, #16
    e416:	3701      	adds	r7, #1
    e418:	2900      	cmp	r1, #0
    e41a:	d100      	bne.n	e41e <getopt_internal+0x20a>
    e41c:	e153      	b.n	e6c6 <getopt_internal+0x4b2>
    e41e:	4652      	mov	r2, sl
    e420:	6863      	ldr	r3, [r4, #4]
    e422:	009b      	lsls	r3, r3, #2
    e424:	5898      	ldr	r0, [r3, r2]
    e426:	6923      	ldr	r3, [r4, #16]
    e428:	0032      	movs	r2, r6
    e42a:	18c0      	adds	r0, r0, r3
    e42c:	f000 fb0e 	bl	ea4c <memcmp>
    e430:	2800      	cmp	r0, #0
    e432:	d1ee      	bne.n	e412 <getopt_internal+0x1fe>
    e434:	6828      	ldr	r0, [r5, #0]
    e436:	f001 f901 	bl	f63c <strlen>
    e43a:	42b0      	cmp	r0, r6
    e43c:	d100      	bne.n	e440 <getopt_internal+0x22c>
    e43e:	e1a3      	b.n	e788 <getopt_internal+0x574>
    e440:	465b      	mov	r3, fp
    e442:	3301      	adds	r3, #1
    e444:	d000      	beq.n	e448 <getopt_internal+0x234>
    e446:	e1a6      	b.n	e796 <getopt_internal+0x582>
    e448:	46bb      	mov	fp, r7
    e44a:	e7e2      	b.n	e412 <getopt_internal+0x1fe>
    e44c:	9b00      	ldr	r3, [sp, #0]
    e44e:	2b01      	cmp	r3, #1
    e450:	d116      	bne.n	e480 <getopt_internal+0x26c>
    e452:	6862      	ldr	r2, [r4, #4]
    e454:	0093      	lsls	r3, r2, #2
    e456:	599b      	ldr	r3, [r3, r6]
    e458:	2b00      	cmp	r3, #0
    e45a:	d09c      	beq.n	e396 <getopt_internal+0x182>
    e45c:	7819      	ldrb	r1, [r3, #0]
    e45e:	468c      	mov	ip, r1
    e460:	292d      	cmp	r1, #45	; 0x2d
    e462:	d100      	bne.n	e466 <getopt_internal+0x252>
    e464:	e722      	b.n	e2ac <getopt_internal+0x98>
    e466:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e468:	2900      	cmp	r1, #0
    e46a:	d003      	beq.n	e474 <getopt_internal+0x260>
    e46c:	4661      	mov	r1, ip
    e46e:	292b      	cmp	r1, #43	; 0x2b
    e470:	d100      	bne.n	e474 <getopt_internal+0x260>
    e472:	e71b      	b.n	e2ac <getopt_internal+0x98>
    e474:	6023      	str	r3, [r4, #0]
    e476:	2301      	movs	r3, #1
    e478:	3201      	adds	r2, #1
    e47a:	6062      	str	r2, [r4, #4]
    e47c:	60e3      	str	r3, [r4, #12]
    e47e:	e765      	b.n	e34c <getopt_internal+0x138>
    e480:	2b02      	cmp	r3, #2
    e482:	d118      	bne.n	e4b6 <getopt_internal+0x2a2>
    e484:	6862      	ldr	r2, [r4, #4]
    e486:	0093      	lsls	r3, r2, #2
    e488:	599b      	ldr	r3, [r3, r6]
    e48a:	2b00      	cmp	r3, #0
    e48c:	d083      	beq.n	e396 <getopt_internal+0x182>
    e48e:	7819      	ldrb	r1, [r3, #0]
    e490:	292d      	cmp	r1, #45	; 0x2d
    e492:	d006      	beq.n	e4a2 <getopt_internal+0x28e>
    e494:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e496:	2800      	cmp	r0, #0
    e498:	d100      	bne.n	e49c <getopt_internal+0x288>
    e49a:	e77c      	b.n	e396 <getopt_internal+0x182>
    e49c:	292b      	cmp	r1, #43	; 0x2b
    e49e:	d000      	beq.n	e4a2 <getopt_internal+0x28e>
    e4a0:	e779      	b.n	e396 <getopt_internal+0x182>
    e4a2:	2102      	movs	r1, #2
    e4a4:	9100      	str	r1, [sp, #0]
    e4a6:	e701      	b.n	e2ac <getopt_internal+0x98>
    e4a8:	3b29      	subs	r3, #41	; 0x29
    e4aa:	9300      	str	r3, [sp, #0]
    e4ac:	3501      	adds	r5, #1
    e4ae:	e6eb      	b.n	e288 <getopt_internal+0x74>
    e4b0:	2300      	movs	r3, #0
    e4b2:	9300      	str	r3, [sp, #0]
    e4b4:	9301      	str	r3, [sp, #4]
    e4b6:	2200      	movs	r2, #0
    e4b8:	6863      	ldr	r3, [r4, #4]
    e4ba:	61a2      	str	r2, [r4, #24]
    e4bc:	009a      	lsls	r2, r3, #2
    e4be:	5990      	ldr	r0, [r2, r6]
    e4c0:	6163      	str	r3, [r4, #20]
    e4c2:	2800      	cmp	r0, #0
    e4c4:	d016      	beq.n	e4f4 <getopt_internal+0x2e0>
    e4c6:	1f31      	subs	r1, r6, #4
    e4c8:	468c      	mov	ip, r1
    e4ca:	469a      	mov	sl, r3
    e4cc:	1c5a      	adds	r2, r3, #1
    e4ce:	7801      	ldrb	r1, [r0, #0]
    e4d0:	292d      	cmp	r1, #45	; 0x2d
    e4d2:	d02b      	beq.n	e52c <getopt_internal+0x318>
    e4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d001      	beq.n	e4de <getopt_internal+0x2ca>
    e4da:	292b      	cmp	r1, #43	; 0x2b
    e4dc:	d026      	beq.n	e52c <getopt_internal+0x318>
    e4de:	69a3      	ldr	r3, [r4, #24]
    e4e0:	6062      	str	r2, [r4, #4]
    e4e2:	1c59      	adds	r1, r3, #1
    e4e4:	4663      	mov	r3, ip
    e4e6:	3201      	adds	r2, #1
    e4e8:	61a1      	str	r1, [r4, #24]
    e4ea:	0091      	lsls	r1, r2, #2
    e4ec:	5858      	ldr	r0, [r3, r1]
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d1ed      	bne.n	e4ce <getopt_internal+0x2ba>
    e4f2:	4653      	mov	r3, sl
    e4f4:	2001      	movs	r0, #1
    e4f6:	6063      	str	r3, [r4, #4]
    e4f8:	4240      	negs	r0, r0
    e4fa:	e727      	b.n	e34c <getopt_internal+0x138>
    e4fc:	2100      	movs	r1, #0
    e4fe:	9b00      	ldr	r3, [sp, #0]
    e500:	6021      	str	r1, [r4, #0]
    e502:	2b00      	cmp	r3, #0
    e504:	d000      	beq.n	e508 <getopt_internal+0x2f4>
    e506:	e1ae      	b.n	e866 <getopt_internal+0x652>
    e508:	2801      	cmp	r0, #1
    e50a:	d100      	bne.n	e50e <getopt_internal+0x2fa>
    e50c:	e1bf      	b.n	e88e <getopt_internal+0x67a>
    e50e:	68e0      	ldr	r0, [r4, #12]
    e510:	e71c      	b.n	e34c <getopt_internal+0x138>
    e512:	68d8      	ldr	r0, [r3, #12]
    e514:	e71a      	b.n	e34c <getopt_internal+0x138>
    e516:	2b01      	cmp	r3, #1
    e518:	d0ca      	beq.n	e4b0 <getopt_internal+0x29c>
    e51a:	2300      	movs	r3, #0
    e51c:	9300      	str	r3, [sp, #0]
    e51e:	9301      	str	r3, [sp, #4]
    e520:	e6be      	b.n	e2a0 <getopt_internal+0x8c>
    e522:	46c0      	nop			; (mov r8, r8)
    e524:	00016918 	.word	0x00016918
    e528:	00016994 	.word	0x00016994
    e52c:	0039      	movs	r1, r7
    e52e:	f7f5 fe4b 	bl	41c8 <strcmp>
    e532:	2800      	cmp	r0, #0
    e534:	d000      	beq.n	e538 <getopt_internal+0x324>
    e536:	e6b3      	b.n	e2a0 <getopt_internal+0x8c>
    e538:	6961      	ldr	r1, [r4, #20]
    e53a:	008b      	lsls	r3, r1, #2
    e53c:	18f6      	adds	r6, r6, r3
    e53e:	69a3      	ldr	r3, [r4, #24]
    e540:	105f      	asrs	r7, r3, #1
    e542:	2b01      	cmp	r3, #1
    e544:	dc00      	bgt.n	e548 <getopt_internal+0x334>
    e546:	e19b      	b.n	e880 <getopt_internal+0x66c>
    e548:	0035      	movs	r5, r6
    e54a:	4688      	mov	r8, r1
    e54c:	469c      	mov	ip, r3
    e54e:	4ad2      	ldr	r2, [pc, #840]	; (e898 <getopt_internal+0x684>)
    e550:	00bf      	lsls	r7, r7, #2
    e552:	189a      	adds	r2, r3, r2
    e554:	0092      	lsls	r2, r2, #2
    e556:	18b2      	adds	r2, r6, r2
    e558:	19bf      	adds	r7, r7, r6
    e55a:	6811      	ldr	r1, [r2, #0]
    e55c:	682b      	ldr	r3, [r5, #0]
    e55e:	c502      	stmia	r5!, {r1}
    e560:	3a04      	subs	r2, #4
    e562:	6053      	str	r3, [r2, #4]
    e564:	42af      	cmp	r7, r5
    e566:	d1f8      	bne.n	e55a <getopt_internal+0x346>
    e568:	4663      	mov	r3, ip
    e56a:	4641      	mov	r1, r8
    e56c:	3301      	adds	r3, #1
    e56e:	105d      	asrs	r5, r3, #1
    e570:	4ac9      	ldr	r2, [pc, #804]	; (e898 <getopt_internal+0x684>)
    e572:	4694      	mov	ip, r2
    e574:	4463      	add	r3, ip
    e576:	009b      	lsls	r3, r3, #2
    e578:	18f3      	adds	r3, r6, r3
    e57a:	681f      	ldr	r7, [r3, #0]
    e57c:	6832      	ldr	r2, [r6, #0]
    e57e:	3001      	adds	r0, #1
    e580:	c680      	stmia	r6!, {r7}
    e582:	3b04      	subs	r3, #4
    e584:	605a      	str	r2, [r3, #4]
    e586:	42a8      	cmp	r0, r5
    e588:	dbf7      	blt.n	e57a <getopt_internal+0x366>
    e58a:	2001      	movs	r0, #1
    e58c:	3101      	adds	r1, #1
    e58e:	6061      	str	r1, [r4, #4]
    e590:	4240      	negs	r0, r0
    e592:	e6db      	b.n	e34c <getopt_internal+0x138>
    e594:	7883      	ldrb	r3, [r0, #2]
    e596:	2b3a      	cmp	r3, #58	; 0x3a
    e598:	d02a      	beq.n	e5f0 <getopt_internal+0x3dc>
    e59a:	6863      	ldr	r3, [r4, #4]
    e59c:	2701      	movs	r7, #1
    e59e:	009b      	lsls	r3, r3, #2
    e5a0:	599b      	ldr	r3, [r3, r6]
    e5a2:	6922      	ldr	r2, [r4, #16]
    e5a4:	469b      	mov	fp, r3
    e5a6:	782b      	ldrb	r3, [r5, #0]
    e5a8:	1c50      	adds	r0, r2, #1
    e5aa:	4483      	add	fp, r0
    e5ac:	60e3      	str	r3, [r4, #12]
    e5ae:	427f      	negs	r7, r7
    e5b0:	465b      	mov	r3, fp
    e5b2:	781b      	ldrb	r3, [r3, #0]
    e5b4:	2b3d      	cmp	r3, #61	; 0x3d
    e5b6:	d104      	bne.n	e5c2 <getopt_internal+0x3ae>
    e5b8:	2201      	movs	r2, #1
    e5ba:	465b      	mov	r3, fp
    e5bc:	4694      	mov	ip, r2
    e5be:	785b      	ldrb	r3, [r3, #1]
    e5c0:	44e3      	add	fp, ip
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	d12e      	bne.n	e624 <getopt_internal+0x410>
    e5c6:	6863      	ldr	r3, [r4, #4]
    e5c8:	3301      	adds	r3, #1
    e5ca:	4543      	cmp	r3, r8
    e5cc:	da30      	bge.n	e630 <getopt_internal+0x41c>
    e5ce:	009b      	lsls	r3, r3, #2
    e5d0:	599b      	ldr	r3, [r3, r6]
    e5d2:	2001      	movs	r0, #1
    e5d4:	6023      	str	r3, [r4, #0]
    e5d6:	2301      	movs	r3, #1
    e5d8:	6123      	str	r3, [r4, #16]
    e5da:	9b00      	ldr	r3, [sp, #0]
    e5dc:	2b00      	cmp	r3, #0
    e5de:	d100      	bne.n	e5e2 <getopt_internal+0x3ce>
    e5e0:	e69c      	b.n	e31c <getopt_internal+0x108>
    e5e2:	6923      	ldr	r3, [r4, #16]
    e5e4:	2b01      	cmp	r3, #1
    e5e6:	d000      	beq.n	e5ea <getopt_internal+0x3d6>
    e5e8:	e6a0      	b.n	e32c <getopt_internal+0x118>
    e5ea:	e69b      	b.n	e324 <getopt_internal+0x110>
    e5ec:	6922      	ldr	r2, [r4, #16]
    e5ee:	e6ea      	b.n	e3c6 <getopt_internal+0x1b2>
    e5f0:	6863      	ldr	r3, [r4, #4]
    e5f2:	2701      	movs	r7, #1
    e5f4:	009b      	lsls	r3, r3, #2
    e5f6:	599b      	ldr	r3, [r3, r6]
    e5f8:	6922      	ldr	r2, [r4, #16]
    e5fa:	469b      	mov	fp, r3
    e5fc:	782b      	ldrb	r3, [r5, #0]
    e5fe:	1c50      	adds	r0, r2, #1
    e600:	4483      	add	fp, r0
    e602:	60e3      	str	r3, [r4, #12]
    e604:	427f      	negs	r7, r7
    e606:	465b      	mov	r3, fp
    e608:	781b      	ldrb	r3, [r3, #0]
    e60a:	2b3d      	cmp	r3, #61	; 0x3d
    e60c:	d104      	bne.n	e618 <getopt_internal+0x404>
    e60e:	2201      	movs	r2, #1
    e610:	465b      	mov	r3, fp
    e612:	4694      	mov	ip, r2
    e614:	785b      	ldrb	r3, [r3, #1]
    e616:	44e3      	add	fp, ip
    e618:	1e5a      	subs	r2, r3, #1
    e61a:	4193      	sbcs	r3, r2
    e61c:	465a      	mov	r2, fp
    e61e:	425b      	negs	r3, r3
    e620:	401a      	ands	r2, r3
    e622:	4693      	mov	fp, r2
    e624:	465b      	mov	r3, fp
    e626:	6023      	str	r3, [r4, #0]
    e628:	2301      	movs	r3, #1
    e62a:	2000      	movs	r0, #0
    e62c:	6123      	str	r3, [r4, #16]
    e62e:	e7d4      	b.n	e5da <getopt_internal+0x3c6>
    e630:	68a2      	ldr	r2, [r4, #8]
    e632:	2a00      	cmp	r2, #0
    e634:	d168      	bne.n	e708 <getopt_internal+0x4f4>
    e636:	6063      	str	r3, [r4, #4]
    e638:	9b01      	ldr	r3, [sp, #4]
    e63a:	4258      	negs	r0, r3
    e63c:	2304      	movs	r3, #4
    e63e:	4398      	bics	r0, r3
    e640:	303f      	adds	r0, #63	; 0x3f
    e642:	e683      	b.n	e34c <getopt_internal+0x138>
    e644:	2300      	movs	r3, #0
    e646:	9301      	str	r3, [sp, #4]
    e648:	e71c      	b.n	e484 <getopt_internal+0x270>
    e64a:	6962      	ldr	r2, [r4, #20]
    e64c:	0091      	lsls	r1, r2, #2
    e64e:	4693      	mov	fp, r2
    e650:	1c42      	adds	r2, r0, #1
    e652:	1876      	adds	r6, r6, r1
    e654:	4694      	mov	ip, r2
    e656:	1059      	asrs	r1, r3, #1
    e658:	2b01      	cmp	r3, #1
    e65a:	dc00      	bgt.n	e65e <getopt_internal+0x44a>
    e65c:	e10a      	b.n	e874 <getopt_internal+0x660>
    e65e:	4a8e      	ldr	r2, [pc, #568]	; (e898 <getopt_internal+0x684>)
    e660:	0089      	lsls	r1, r1, #2
    e662:	1989      	adds	r1, r1, r6
    e664:	189a      	adds	r2, r3, r2
    e666:	4698      	mov	r8, r3
    e668:	0035      	movs	r5, r6
    e66a:	4682      	mov	sl, r0
    e66c:	000b      	movs	r3, r1
    e66e:	0092      	lsls	r2, r2, #2
    e670:	18b2      	adds	r2, r6, r2
    e672:	6810      	ldr	r0, [r2, #0]
    e674:	6829      	ldr	r1, [r5, #0]
    e676:	c501      	stmia	r5!, {r0}
    e678:	3a04      	subs	r2, #4
    e67a:	6051      	str	r1, [r2, #4]
    e67c:	42ab      	cmp	r3, r5
    e67e:	d1f8      	bne.n	e672 <getopt_internal+0x45e>
    e680:	4643      	mov	r3, r8
    e682:	4650      	mov	r0, sl
    e684:	4463      	add	r3, ip
    e686:	1059      	asrs	r1, r3, #1
    e688:	4d83      	ldr	r5, [pc, #524]	; (e898 <getopt_internal+0x684>)
    e68a:	0032      	movs	r2, r6
    e68c:	46a8      	mov	r8, r5
    e68e:	46a2      	mov	sl, r4
    e690:	4443      	add	r3, r8
    e692:	2500      	movs	r5, #0
    e694:	4680      	mov	r8, r0
    e696:	0008      	movs	r0, r1
    e698:	009b      	lsls	r3, r3, #2
    e69a:	18f3      	adds	r3, r6, r3
    e69c:	681c      	ldr	r4, [r3, #0]
    e69e:	6811      	ldr	r1, [r2, #0]
    e6a0:	3501      	adds	r5, #1
    e6a2:	c210      	stmia	r2!, {r4}
    e6a4:	3b04      	subs	r3, #4
    e6a6:	6059      	str	r1, [r3, #4]
    e6a8:	4285      	cmp	r5, r0
    e6aa:	dbf7      	blt.n	e69c <getopt_internal+0x488>
    e6ac:	4640      	mov	r0, r8
    e6ae:	4654      	mov	r4, sl
    e6b0:	4663      	mov	r3, ip
    e6b2:	2b01      	cmp	r3, #1
    e6b4:	d002      	beq.n	e6bc <getopt_internal+0x4a8>
    e6b6:	6833      	ldr	r3, [r6, #0]
    e6b8:	6872      	ldr	r2, [r6, #4]
    e6ba:	c60c      	stmia	r6!, {r2, r3}
    e6bc:	465b      	mov	r3, fp
    e6be:	3301      	adds	r3, #1
    e6c0:	181b      	adds	r3, r3, r0
    e6c2:	6063      	str	r3, [r4, #4]
    e6c4:	e632      	b.n	e32c <getopt_internal+0x118>
    e6c6:	465f      	mov	r7, fp
    e6c8:	9b02      	ldr	r3, [sp, #8]
    e6ca:	4656      	mov	r6, sl
    e6cc:	469b      	mov	fp, r3
    e6ce:	9d03      	ldr	r5, [sp, #12]
    e6d0:	1c7b      	adds	r3, r7, #1
    e6d2:	d146      	bne.n	e762 <getopt_internal+0x54e>
    e6d4:	6862      	ldr	r2, [r4, #4]
    e6d6:	6920      	ldr	r0, [r4, #16]
    e6d8:	0093      	lsls	r3, r2, #2
    e6da:	599b      	ldr	r3, [r3, r6]
    e6dc:	e5fb      	b.n	e2d6 <getopt_internal+0xc2>
    e6de:	68a3      	ldr	r3, [r4, #8]
    e6e0:	2b00      	cmp	r3, #0
    e6e2:	d000      	beq.n	e6e6 <getopt_internal+0x4d2>
    e6e4:	e09f      	b.n	e826 <getopt_internal+0x612>
    e6e6:	6862      	ldr	r2, [r4, #4]
    e6e8:	6923      	ldr	r3, [r4, #16]
    e6ea:	0091      	lsls	r1, r2, #2
    e6ec:	3301      	adds	r3, #1
    e6ee:	5989      	ldr	r1, [r1, r6]
    e6f0:	6123      	str	r3, [r4, #16]
    e6f2:	5ccb      	ldrb	r3, [r1, r3]
    e6f4:	2b00      	cmp	r3, #0
    e6f6:	d103      	bne.n	e700 <getopt_internal+0x4ec>
    e6f8:	3201      	adds	r2, #1
    e6fa:	3301      	adds	r3, #1
    e6fc:	6062      	str	r2, [r4, #4]
    e6fe:	6123      	str	r3, [r4, #16]
    e700:	233f      	movs	r3, #63	; 0x3f
    e702:	203f      	movs	r0, #63	; 0x3f
    e704:	60e3      	str	r3, [r4, #12]
    e706:	e621      	b.n	e34c <getopt_internal+0x138>
    e708:	4b64      	ldr	r3, [pc, #400]	; (e89c <getopt_internal+0x688>)
    e70a:	6830      	ldr	r0, [r6, #0]
    e70c:	4698      	mov	r8, r3
    e70e:	681b      	ldr	r3, [r3, #0]
    e710:	68d9      	ldr	r1, [r3, #12]
    e712:	f004 f985 	bl	12a20 <fputs>
    e716:	4643      	mov	r3, r8
    e718:	681b      	ldr	r3, [r3, #0]
    e71a:	4861      	ldr	r0, [pc, #388]	; (e8a0 <getopt_internal+0x68c>)
    e71c:	68d9      	ldr	r1, [r3, #12]
    e71e:	f004 f97f 	bl	12a20 <fputs>
    e722:	4643      	mov	r3, r8
    e724:	681b      	ldr	r3, [r3, #0]
    e726:	68d9      	ldr	r1, [r3, #12]
    e728:	1c7b      	adds	r3, r7, #1
    e72a:	d100      	bne.n	e72e <getopt_internal+0x51a>
    e72c:	e095      	b.n	e85a <getopt_internal+0x646>
    e72e:	202d      	movs	r0, #45	; 0x2d
    e730:	f004 f904 	bl	1293c <fputc>
    e734:	4643      	mov	r3, r8
    e736:	681b      	ldr	r3, [r3, #0]
    e738:	013f      	lsls	r7, r7, #4
    e73a:	68d9      	ldr	r1, [r3, #12]
    e73c:	464b      	mov	r3, r9
    e73e:	58f8      	ldr	r0, [r7, r3]
    e740:	f004 f96e 	bl	12a20 <fputs>
    e744:	2204      	movs	r2, #4
    e746:	9b01      	ldr	r3, [sp, #4]
    e748:	425b      	negs	r3, r3
    e74a:	4393      	bics	r3, r2
    e74c:	333f      	adds	r3, #63	; 0x3f
    e74e:	60e3      	str	r3, [r4, #12]
    e750:	4643      	mov	r3, r8
    e752:	681b      	ldr	r3, [r3, #0]
    e754:	4853      	ldr	r0, [pc, #332]	; (e8a4 <getopt_internal+0x690>)
    e756:	68d9      	ldr	r1, [r3, #12]
    e758:	f004 f962 	bl	12a20 <fputs>
    e75c:	6863      	ldr	r3, [r4, #4]
    e75e:	3301      	adds	r3, #1
    e760:	e769      	b.n	e636 <getopt_internal+0x422>
    e762:	013b      	lsls	r3, r7, #4
    e764:	444b      	add	r3, r9
    e766:	685b      	ldr	r3, [r3, #4]
    e768:	2500      	movs	r5, #0
    e76a:	2b01      	cmp	r3, #1
    e76c:	d100      	bne.n	e770 <getopt_internal+0x55c>
    e76e:	e71f      	b.n	e5b0 <getopt_internal+0x39c>
    e770:	2b02      	cmp	r3, #2
    e772:	d100      	bne.n	e776 <getopt_internal+0x562>
    e774:	e747      	b.n	e606 <getopt_internal+0x3f2>
    e776:	2301      	movs	r3, #1
    e778:	6123      	str	r3, [r4, #16]
    e77a:	9b00      	ldr	r3, [sp, #0]
    e77c:	2000      	movs	r0, #0
    e77e:	6025      	str	r5, [r4, #0]
    e780:	2b00      	cmp	r3, #0
    e782:	d100      	bne.n	e786 <getopt_internal+0x572>
    e784:	e5ca      	b.n	e31c <getopt_internal+0x108>
    e786:	e5cd      	b.n	e324 <getopt_internal+0x110>
    e788:	9b02      	ldr	r3, [sp, #8]
    e78a:	4656      	mov	r6, sl
    e78c:	469b      	mov	fp, r3
    e78e:	013b      	lsls	r3, r7, #4
    e790:	444b      	add	r3, r9
    e792:	685b      	ldr	r3, [r3, #4]
    e794:	e7e8      	b.n	e768 <getopt_internal+0x554>
    e796:	68a3      	ldr	r3, [r4, #8]
    e798:	4656      	mov	r6, sl
    e79a:	465f      	mov	r7, fp
    e79c:	46aa      	mov	sl, r5
    e79e:	2b00      	cmp	r3, #0
    e7a0:	d0ae      	beq.n	e700 <getopt_internal+0x4ec>
    e7a2:	4d3e      	ldr	r5, [pc, #248]	; (e89c <getopt_internal+0x688>)
    e7a4:	6830      	ldr	r0, [r6, #0]
    e7a6:	682b      	ldr	r3, [r5, #0]
    e7a8:	013f      	lsls	r7, r7, #4
    e7aa:	68d9      	ldr	r1, [r3, #12]
    e7ac:	f004 f938 	bl	12a20 <fputs>
    e7b0:	682b      	ldr	r3, [r5, #0]
    e7b2:	483d      	ldr	r0, [pc, #244]	; (e8a8 <getopt_internal+0x694>)
    e7b4:	68d9      	ldr	r1, [r3, #12]
    e7b6:	f004 f933 	bl	12a20 <fputs>
    e7ba:	682b      	ldr	r3, [r5, #0]
    e7bc:	68d9      	ldr	r1, [r3, #12]
    e7be:	6863      	ldr	r3, [r4, #4]
    e7c0:	009b      	lsls	r3, r3, #2
    e7c2:	5998      	ldr	r0, [r3, r6]
    e7c4:	f004 f92c 	bl	12a20 <fputs>
    e7c8:	682b      	ldr	r3, [r5, #0]
    e7ca:	4838      	ldr	r0, [pc, #224]	; (e8ac <getopt_internal+0x698>)
    e7cc:	68d9      	ldr	r1, [r3, #12]
    e7ce:	f004 f927 	bl	12a20 <fputs>
    e7d2:	682b      	ldr	r3, [r5, #0]
    e7d4:	68d9      	ldr	r1, [r3, #12]
    e7d6:	464b      	mov	r3, r9
    e7d8:	58f8      	ldr	r0, [r7, r3]
    e7da:	f004 f921 	bl	12a20 <fputs>
    e7de:	682b      	ldr	r3, [r5, #0]
    e7e0:	4833      	ldr	r0, [pc, #204]	; (e8b0 <getopt_internal+0x69c>)
    e7e2:	68d9      	ldr	r1, [r3, #12]
    e7e4:	f004 f91c 	bl	12a20 <fputs>
    e7e8:	682b      	ldr	r3, [r5, #0]
    e7ea:	68d9      	ldr	r1, [r3, #12]
    e7ec:	4653      	mov	r3, sl
    e7ee:	6818      	ldr	r0, [r3, #0]
    e7f0:	f004 f916 	bl	12a20 <fputs>
    e7f4:	682b      	ldr	r3, [r5, #0]
    e7f6:	482f      	ldr	r0, [pc, #188]	; (e8b4 <getopt_internal+0x6a0>)
    e7f8:	68d9      	ldr	r1, [r3, #12]
    e7fa:	f004 f911 	bl	12a20 <fputs>
    e7fe:	e77f      	b.n	e700 <getopt_internal+0x4ec>
    e800:	3301      	adds	r3, #1
    e802:	6063      	str	r3, [r4, #4]
    e804:	3801      	subs	r0, #1
    e806:	e5a1      	b.n	e34c <getopt_internal+0x138>
    e808:	6863      	ldr	r3, [r4, #4]
    e80a:	009b      	lsls	r3, r3, #2
    e80c:	5998      	ldr	r0, [r3, r6]
    e80e:	f000 ff15 	bl	f63c <strlen>
    e812:	0007      	movs	r7, r0
    e814:	6862      	ldr	r2, [r4, #4]
    e816:	0091      	lsls	r1, r2, #2
    e818:	598b      	ldr	r3, [r1, r6]
    e81a:	1819      	adds	r1, r3, r0
    e81c:	6920      	ldr	r0, [r4, #16]
    e81e:	468b      	mov	fp, r1
    e820:	1a39      	subs	r1, r7, r0
    e822:	468c      	mov	ip, r1
    e824:	e5e2      	b.n	e3ec <getopt_internal+0x1d8>
    e826:	4d1d      	ldr	r5, [pc, #116]	; (e89c <getopt_internal+0x688>)
    e828:	6830      	ldr	r0, [r6, #0]
    e82a:	682b      	ldr	r3, [r5, #0]
    e82c:	68d9      	ldr	r1, [r3, #12]
    e82e:	f004 f8f7 	bl	12a20 <fputs>
    e832:	682b      	ldr	r3, [r5, #0]
    e834:	4820      	ldr	r0, [pc, #128]	; (e8b8 <getopt_internal+0x6a4>)
    e836:	68d9      	ldr	r1, [r3, #12]
    e838:	f004 f8f2 	bl	12a20 <fputs>
    e83c:	682b      	ldr	r3, [r5, #0]
    e83e:	6922      	ldr	r2, [r4, #16]
    e840:	68d9      	ldr	r1, [r3, #12]
    e842:	6863      	ldr	r3, [r4, #4]
    e844:	009b      	lsls	r3, r3, #2
    e846:	599b      	ldr	r3, [r3, r6]
    e848:	5c98      	ldrb	r0, [r3, r2]
    e84a:	f004 f877 	bl	1293c <fputc>
    e84e:	682b      	ldr	r3, [r5, #0]
    e850:	4814      	ldr	r0, [pc, #80]	; (e8a4 <getopt_internal+0x690>)
    e852:	68d9      	ldr	r1, [r3, #12]
    e854:	f004 f8e4 	bl	12a20 <fputs>
    e858:	e745      	b.n	e6e6 <getopt_internal+0x4d2>
    e85a:	7828      	ldrb	r0, [r5, #0]
    e85c:	f004 f86e 	bl	1293c <fputc>
    e860:	782b      	ldrb	r3, [r5, #0]
    e862:	60e3      	str	r3, [r4, #12]
    e864:	e774      	b.n	e750 <getopt_internal+0x53c>
    e866:	2801      	cmp	r0, #1
    e868:	d000      	beq.n	e86c <getopt_internal+0x658>
    e86a:	e650      	b.n	e50e <getopt_internal+0x2fa>
    e86c:	3201      	adds	r2, #1
    e86e:	68e0      	ldr	r0, [r4, #12]
    e870:	6062      	str	r2, [r4, #4]
    e872:	e56b      	b.n	e34c <getopt_internal+0x138>
    e874:	4463      	add	r3, ip
    e876:	1059      	asrs	r1, r3, #1
    e878:	2901      	cmp	r1, #1
    e87a:	d000      	beq.n	e87e <getopt_internal+0x66a>
    e87c:	e718      	b.n	e6b0 <getopt_internal+0x49c>
    e87e:	e703      	b.n	e688 <getopt_internal+0x474>
    e880:	3301      	adds	r3, #1
    e882:	105d      	asrs	r5, r3, #1
    e884:	2d01      	cmp	r5, #1
    e886:	d000      	beq.n	e88a <getopt_internal+0x676>
    e888:	e67f      	b.n	e58a <getopt_internal+0x376>
    e88a:	2302      	movs	r3, #2
    e88c:	e670      	b.n	e570 <getopt_internal+0x35c>
    e88e:	2701      	movs	r7, #1
    e890:	0008      	movs	r0, r1
    e892:	427f      	negs	r7, r7
    e894:	e542      	b.n	e31c <getopt_internal+0x108>
    e896:	46c0      	nop			; (mov r8, r8)
    e898:	3fffffff 	.word	0x3fffffff
    e89c:	0001737c 	.word	0x0001737c
    e8a0:	00016970 	.word	0x00016970
    e8a4:	00014928 	.word	0x00014928
    e8a8:	0001691c 	.word	0x0001691c
    e8ac:	00016928 	.word	0x00016928
    e8b0:	00016948 	.word	0x00016948
    e8b4:	00016954 	.word	0x00016954
    e8b8:	00016958 	.word	0x00016958

0000e8bc <getopt>:
    e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8be:	46de      	mov	lr, fp
    e8c0:	4657      	mov	r7, sl
    e8c2:	464e      	mov	r6, r9
    e8c4:	4645      	mov	r5, r8
    e8c6:	b5e0      	push	{r5, r6, r7, lr}
    e8c8:	4b1c      	ldr	r3, [pc, #112]	; (e93c <getopt+0x80>)
    e8ca:	b08d      	sub	sp, #52	; 0x34
    e8cc:	469b      	mov	fp, r3
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	4f1b      	ldr	r7, [pc, #108]	; (e940 <getopt+0x84>)
    e8d2:	9305      	str	r3, [sp, #20]
    e8d4:	4b1b      	ldr	r3, [pc, #108]	; (e944 <getopt+0x88>)
    e8d6:	4e1c      	ldr	r6, [pc, #112]	; (e948 <getopt+0x8c>)
    e8d8:	469a      	mov	sl, r3
    e8da:	681b      	ldr	r3, [r3, #0]
    e8dc:	4d1b      	ldr	r5, [pc, #108]	; (e94c <getopt+0x90>)
    e8de:	9306      	str	r3, [sp, #24]
    e8e0:	4b1b      	ldr	r3, [pc, #108]	; (e950 <getopt+0x94>)
    e8e2:	ac05      	add	r4, sp, #20
    e8e4:	4699      	mov	r9, r3
    e8e6:	681b      	ldr	r3, [r3, #0]
    e8e8:	9307      	str	r3, [sp, #28]
    e8ea:	4b1a      	ldr	r3, [pc, #104]	; (e954 <getopt+0x98>)
    e8ec:	4698      	mov	r8, r3
    e8ee:	681b      	ldr	r3, [r3, #0]
    e8f0:	9308      	str	r3, [sp, #32]
    e8f2:	683b      	ldr	r3, [r7, #0]
    e8f4:	9309      	str	r3, [sp, #36]	; 0x24
    e8f6:	6833      	ldr	r3, [r6, #0]
    e8f8:	930a      	str	r3, [sp, #40]	; 0x28
    e8fa:	682b      	ldr	r3, [r5, #0]
    e8fc:	9402      	str	r4, [sp, #8]
    e8fe:	930b      	str	r3, [sp, #44]	; 0x2c
    e900:	2300      	movs	r3, #0
    e902:	9301      	str	r3, [sp, #4]
    e904:	9300      	str	r3, [sp, #0]
    e906:	f7ff fc85 	bl	e214 <getopt_internal>
    e90a:	465b      	mov	r3, fp
    e90c:	9a05      	ldr	r2, [sp, #20]
    e90e:	601a      	str	r2, [r3, #0]
    e910:	4653      	mov	r3, sl
    e912:	9a06      	ldr	r2, [sp, #24]
    e914:	601a      	str	r2, [r3, #0]
    e916:	464b      	mov	r3, r9
    e918:	9a07      	ldr	r2, [sp, #28]
    e91a:	601a      	str	r2, [r3, #0]
    e91c:	4643      	mov	r3, r8
    e91e:	9a08      	ldr	r2, [sp, #32]
    e920:	601a      	str	r2, [r3, #0]
    e922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e924:	603b      	str	r3, [r7, #0]
    e926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e928:	6033      	str	r3, [r6, #0]
    e92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e92c:	602b      	str	r3, [r5, #0]
    e92e:	b00d      	add	sp, #52	; 0x34
    e930:	bcf0      	pop	{r4, r5, r6, r7}
    e932:	46bb      	mov	fp, r7
    e934:	46b2      	mov	sl, r6
    e936:	46a9      	mov	r9, r5
    e938:	46a0      	mov	r8, r4
    e93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e93c:	00018758 	.word	0x00018758
    e940:	00018760 	.word	0x00018760
    e944:	0001875c 	.word	0x0001875c
    e948:	00018764 	.word	0x00018764
    e94c:	00018754 	.word	0x00018754
    e950:	00017374 	.word	0x00017374
    e954:	00017378 	.word	0x00017378

0000e958 <__retarget_lock_init_recursive>:
    e958:	4770      	bx	lr
    e95a:	46c0      	nop			; (mov r8, r8)

0000e95c <__retarget_lock_close_recursive>:
    e95c:	4770      	bx	lr
    e95e:	46c0      	nop			; (mov r8, r8)

0000e960 <__retarget_lock_acquire_recursive>:
    e960:	4770      	bx	lr
    e962:	46c0      	nop			; (mov r8, r8)

0000e964 <__retarget_lock_release_recursive>:
    e964:	4770      	bx	lr
    e966:	46c0      	nop			; (mov r8, r8)

0000e968 <__smakebuf_r>:
    e968:	b5f0      	push	{r4, r5, r6, r7, lr}
    e96a:	46c6      	mov	lr, r8
    e96c:	b500      	push	{lr}
    e96e:	898b      	ldrh	r3, [r1, #12]
    e970:	0005      	movs	r5, r0
    e972:	000c      	movs	r4, r1
    e974:	b096      	sub	sp, #88	; 0x58
    e976:	079a      	lsls	r2, r3, #30
    e978:	d509      	bpl.n	e98e <__smakebuf_r+0x26>
    e97a:	0023      	movs	r3, r4
    e97c:	3343      	adds	r3, #67	; 0x43
    e97e:	6023      	str	r3, [r4, #0]
    e980:	6123      	str	r3, [r4, #16]
    e982:	2301      	movs	r3, #1
    e984:	6163      	str	r3, [r4, #20]
    e986:	b016      	add	sp, #88	; 0x58
    e988:	bc80      	pop	{r7}
    e98a:	46b8      	mov	r8, r7
    e98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e98e:	220e      	movs	r2, #14
    e990:	5e89      	ldrsh	r1, [r1, r2]
    e992:	2900      	cmp	r1, #0
    e994:	db29      	blt.n	e9ea <__smakebuf_r+0x82>
    e996:	466a      	mov	r2, sp
    e998:	f7ff f91e 	bl	dbd8 <_fstat_r>
    e99c:	2800      	cmp	r0, #0
    e99e:	db23      	blt.n	e9e8 <__smakebuf_r+0x80>
    e9a0:	23f0      	movs	r3, #240	; 0xf0
    e9a2:	9f01      	ldr	r7, [sp, #4]
    e9a4:	021b      	lsls	r3, r3, #8
    e9a6:	401f      	ands	r7, r3
    e9a8:	4b26      	ldr	r3, [pc, #152]	; (ea44 <__smakebuf_r+0xdc>)
    e9aa:	2680      	movs	r6, #128	; 0x80
    e9ac:	469c      	mov	ip, r3
    e9ae:	4467      	add	r7, ip
    e9b0:	427b      	negs	r3, r7
    e9b2:	415f      	adcs	r7, r3
    e9b4:	2380      	movs	r3, #128	; 0x80
    e9b6:	00db      	lsls	r3, r3, #3
    e9b8:	4698      	mov	r8, r3
    e9ba:	0136      	lsls	r6, r6, #4
    e9bc:	4641      	mov	r1, r8
    e9be:	0028      	movs	r0, r5
    e9c0:	f7ff f938 	bl	dc34 <_malloc_r>
    e9c4:	2800      	cmp	r0, #0
    e9c6:	d01c      	beq.n	ea02 <__smakebuf_r+0x9a>
    e9c8:	2280      	movs	r2, #128	; 0x80
    e9ca:	4b1f      	ldr	r3, [pc, #124]	; (ea48 <__smakebuf_r+0xe0>)
    e9cc:	63eb      	str	r3, [r5, #60]	; 0x3c
    e9ce:	89a3      	ldrh	r3, [r4, #12]
    e9d0:	6020      	str	r0, [r4, #0]
    e9d2:	4313      	orrs	r3, r2
    e9d4:	4642      	mov	r2, r8
    e9d6:	b21b      	sxth	r3, r3
    e9d8:	81a3      	strh	r3, [r4, #12]
    e9da:	6120      	str	r0, [r4, #16]
    e9dc:	6162      	str	r2, [r4, #20]
    e9de:	2f00      	cmp	r7, #0
    e9e0:	d11e      	bne.n	ea20 <__smakebuf_r+0xb8>
    e9e2:	4333      	orrs	r3, r6
    e9e4:	81a3      	strh	r3, [r4, #12]
    e9e6:	e7ce      	b.n	e986 <__smakebuf_r+0x1e>
    e9e8:	89a3      	ldrh	r3, [r4, #12]
    e9ea:	2700      	movs	r7, #0
    e9ec:	061b      	lsls	r3, r3, #24
    e9ee:	d512      	bpl.n	ea16 <__smakebuf_r+0xae>
    e9f0:	2340      	movs	r3, #64	; 0x40
    e9f2:	4698      	mov	r8, r3
    e9f4:	0028      	movs	r0, r5
    e9f6:	4641      	mov	r1, r8
    e9f8:	2600      	movs	r6, #0
    e9fa:	f7ff f91b 	bl	dc34 <_malloc_r>
    e9fe:	2800      	cmp	r0, #0
    ea00:	d1e2      	bne.n	e9c8 <__smakebuf_r+0x60>
    ea02:	220c      	movs	r2, #12
    ea04:	5ea3      	ldrsh	r3, [r4, r2]
    ea06:	059a      	lsls	r2, r3, #22
    ea08:	d4bd      	bmi.n	e986 <__smakebuf_r+0x1e>
    ea0a:	2203      	movs	r2, #3
    ea0c:	4393      	bics	r3, r2
    ea0e:	2202      	movs	r2, #2
    ea10:	4313      	orrs	r3, r2
    ea12:	81a3      	strh	r3, [r4, #12]
    ea14:	e7b1      	b.n	e97a <__smakebuf_r+0x12>
    ea16:	2380      	movs	r3, #128	; 0x80
    ea18:	00db      	lsls	r3, r3, #3
    ea1a:	4698      	mov	r8, r3
    ea1c:	2600      	movs	r6, #0
    ea1e:	e7cd      	b.n	e9bc <__smakebuf_r+0x54>
    ea20:	0028      	movs	r0, r5
    ea22:	230e      	movs	r3, #14
    ea24:	5ee1      	ldrsh	r1, [r4, r3]
    ea26:	f7ff f8dd 	bl	dbe4 <_isatty_r>
    ea2a:	2800      	cmp	r0, #0
    ea2c:	d102      	bne.n	ea34 <__smakebuf_r+0xcc>
    ea2e:	220c      	movs	r2, #12
    ea30:	5ea3      	ldrsh	r3, [r4, r2]
    ea32:	e7d6      	b.n	e9e2 <__smakebuf_r+0x7a>
    ea34:	2203      	movs	r2, #3
    ea36:	89a3      	ldrh	r3, [r4, #12]
    ea38:	4393      	bics	r3, r2
    ea3a:	2201      	movs	r2, #1
    ea3c:	4313      	orrs	r3, r2
    ea3e:	b21b      	sxth	r3, r3
    ea40:	e7cf      	b.n	e9e2 <__smakebuf_r+0x7a>
    ea42:	46c0      	nop			; (mov r8, r8)
    ea44:	ffffe000 	.word	0xffffe000
    ea48:	0000e07d 	.word	0x0000e07d

0000ea4c <memcmp>:
    ea4c:	b530      	push	{r4, r5, lr}
    ea4e:	2a03      	cmp	r2, #3
    ea50:	d90c      	bls.n	ea6c <memcmp+0x20>
    ea52:	0003      	movs	r3, r0
    ea54:	430b      	orrs	r3, r1
    ea56:	079b      	lsls	r3, r3, #30
    ea58:	d119      	bne.n	ea8e <memcmp+0x42>
    ea5a:	6803      	ldr	r3, [r0, #0]
    ea5c:	680c      	ldr	r4, [r1, #0]
    ea5e:	42a3      	cmp	r3, r4
    ea60:	d115      	bne.n	ea8e <memcmp+0x42>
    ea62:	3a04      	subs	r2, #4
    ea64:	3004      	adds	r0, #4
    ea66:	3104      	adds	r1, #4
    ea68:	2a03      	cmp	r2, #3
    ea6a:	d8f6      	bhi.n	ea5a <memcmp+0xe>
    ea6c:	1e55      	subs	r5, r2, #1
    ea6e:	2a00      	cmp	r2, #0
    ea70:	d00b      	beq.n	ea8a <memcmp+0x3e>
    ea72:	2300      	movs	r3, #0
    ea74:	e003      	b.n	ea7e <memcmp+0x32>
    ea76:	1c5a      	adds	r2, r3, #1
    ea78:	429d      	cmp	r5, r3
    ea7a:	d006      	beq.n	ea8a <memcmp+0x3e>
    ea7c:	0013      	movs	r3, r2
    ea7e:	5cc2      	ldrb	r2, [r0, r3]
    ea80:	5ccc      	ldrb	r4, [r1, r3]
    ea82:	42a2      	cmp	r2, r4
    ea84:	d0f7      	beq.n	ea76 <memcmp+0x2a>
    ea86:	1b10      	subs	r0, r2, r4
    ea88:	e000      	b.n	ea8c <memcmp+0x40>
    ea8a:	2000      	movs	r0, #0
    ea8c:	bd30      	pop	{r4, r5, pc}
    ea8e:	1e55      	subs	r5, r2, #1
    ea90:	e7ef      	b.n	ea72 <memcmp+0x26>
    ea92:	46c0      	nop			; (mov r8, r8)

0000ea94 <memcpy>:
    ea94:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea96:	46c6      	mov	lr, r8
    ea98:	b500      	push	{lr}
    ea9a:	2a0f      	cmp	r2, #15
    ea9c:	d941      	bls.n	eb22 <memcpy+0x8e>
    ea9e:	2703      	movs	r7, #3
    eaa0:	000d      	movs	r5, r1
    eaa2:	003e      	movs	r6, r7
    eaa4:	4305      	orrs	r5, r0
    eaa6:	000c      	movs	r4, r1
    eaa8:	0003      	movs	r3, r0
    eaaa:	402e      	ands	r6, r5
    eaac:	422f      	tst	r7, r5
    eaae:	d13d      	bne.n	eb2c <memcpy+0x98>
    eab0:	0015      	movs	r5, r2
    eab2:	3d10      	subs	r5, #16
    eab4:	092d      	lsrs	r5, r5, #4
    eab6:	46a8      	mov	r8, r5
    eab8:	012d      	lsls	r5, r5, #4
    eaba:	46ac      	mov	ip, r5
    eabc:	4484      	add	ip, r0
    eabe:	6827      	ldr	r7, [r4, #0]
    eac0:	001d      	movs	r5, r3
    eac2:	601f      	str	r7, [r3, #0]
    eac4:	6867      	ldr	r7, [r4, #4]
    eac6:	605f      	str	r7, [r3, #4]
    eac8:	68a7      	ldr	r7, [r4, #8]
    eaca:	609f      	str	r7, [r3, #8]
    eacc:	68e7      	ldr	r7, [r4, #12]
    eace:	3410      	adds	r4, #16
    ead0:	60df      	str	r7, [r3, #12]
    ead2:	3310      	adds	r3, #16
    ead4:	4565      	cmp	r5, ip
    ead6:	d1f2      	bne.n	eabe <memcpy+0x2a>
    ead8:	4645      	mov	r5, r8
    eada:	230f      	movs	r3, #15
    eadc:	240c      	movs	r4, #12
    eade:	3501      	adds	r5, #1
    eae0:	012d      	lsls	r5, r5, #4
    eae2:	1949      	adds	r1, r1, r5
    eae4:	4013      	ands	r3, r2
    eae6:	1945      	adds	r5, r0, r5
    eae8:	4214      	tst	r4, r2
    eaea:	d022      	beq.n	eb32 <memcpy+0x9e>
    eaec:	598c      	ldr	r4, [r1, r6]
    eaee:	51ac      	str	r4, [r5, r6]
    eaf0:	3604      	adds	r6, #4
    eaf2:	1b9c      	subs	r4, r3, r6
    eaf4:	2c03      	cmp	r4, #3
    eaf6:	d8f9      	bhi.n	eaec <memcpy+0x58>
    eaf8:	3b04      	subs	r3, #4
    eafa:	089b      	lsrs	r3, r3, #2
    eafc:	3301      	adds	r3, #1
    eafe:	009b      	lsls	r3, r3, #2
    eb00:	18ed      	adds	r5, r5, r3
    eb02:	18c9      	adds	r1, r1, r3
    eb04:	2303      	movs	r3, #3
    eb06:	401a      	ands	r2, r3
    eb08:	1e56      	subs	r6, r2, #1
    eb0a:	2a00      	cmp	r2, #0
    eb0c:	d006      	beq.n	eb1c <memcpy+0x88>
    eb0e:	2300      	movs	r3, #0
    eb10:	5ccc      	ldrb	r4, [r1, r3]
    eb12:	001a      	movs	r2, r3
    eb14:	54ec      	strb	r4, [r5, r3]
    eb16:	3301      	adds	r3, #1
    eb18:	4296      	cmp	r6, r2
    eb1a:	d1f9      	bne.n	eb10 <memcpy+0x7c>
    eb1c:	bc80      	pop	{r7}
    eb1e:	46b8      	mov	r8, r7
    eb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb22:	0005      	movs	r5, r0
    eb24:	1e56      	subs	r6, r2, #1
    eb26:	2a00      	cmp	r2, #0
    eb28:	d1f1      	bne.n	eb0e <memcpy+0x7a>
    eb2a:	e7f7      	b.n	eb1c <memcpy+0x88>
    eb2c:	0005      	movs	r5, r0
    eb2e:	1e56      	subs	r6, r2, #1
    eb30:	e7ed      	b.n	eb0e <memcpy+0x7a>
    eb32:	001a      	movs	r2, r3
    eb34:	e7f6      	b.n	eb24 <memcpy+0x90>
    eb36:	46c0      	nop			; (mov r8, r8)

0000eb38 <memmove>:
    eb38:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb3a:	4288      	cmp	r0, r1
    eb3c:	d90a      	bls.n	eb54 <memmove+0x1c>
    eb3e:	188b      	adds	r3, r1, r2
    eb40:	4298      	cmp	r0, r3
    eb42:	d207      	bcs.n	eb54 <memmove+0x1c>
    eb44:	1e53      	subs	r3, r2, #1
    eb46:	2a00      	cmp	r2, #0
    eb48:	d003      	beq.n	eb52 <memmove+0x1a>
    eb4a:	5cca      	ldrb	r2, [r1, r3]
    eb4c:	54c2      	strb	r2, [r0, r3]
    eb4e:	3b01      	subs	r3, #1
    eb50:	d2fb      	bcs.n	eb4a <memmove+0x12>
    eb52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb54:	2a0f      	cmp	r2, #15
    eb56:	d80b      	bhi.n	eb70 <memmove+0x38>
    eb58:	0005      	movs	r5, r0
    eb5a:	1e56      	subs	r6, r2, #1
    eb5c:	2a00      	cmp	r2, #0
    eb5e:	d0f8      	beq.n	eb52 <memmove+0x1a>
    eb60:	2300      	movs	r3, #0
    eb62:	5ccc      	ldrb	r4, [r1, r3]
    eb64:	001a      	movs	r2, r3
    eb66:	54ec      	strb	r4, [r5, r3]
    eb68:	3301      	adds	r3, #1
    eb6a:	4296      	cmp	r6, r2
    eb6c:	d1f9      	bne.n	eb62 <memmove+0x2a>
    eb6e:	e7f0      	b.n	eb52 <memmove+0x1a>
    eb70:	2703      	movs	r7, #3
    eb72:	000d      	movs	r5, r1
    eb74:	003e      	movs	r6, r7
    eb76:	4305      	orrs	r5, r0
    eb78:	000c      	movs	r4, r1
    eb7a:	0003      	movs	r3, r0
    eb7c:	402e      	ands	r6, r5
    eb7e:	422f      	tst	r7, r5
    eb80:	d12b      	bne.n	ebda <memmove+0xa2>
    eb82:	0015      	movs	r5, r2
    eb84:	3d10      	subs	r5, #16
    eb86:	092d      	lsrs	r5, r5, #4
    eb88:	46ac      	mov	ip, r5
    eb8a:	012f      	lsls	r7, r5, #4
    eb8c:	183f      	adds	r7, r7, r0
    eb8e:	6825      	ldr	r5, [r4, #0]
    eb90:	601d      	str	r5, [r3, #0]
    eb92:	6865      	ldr	r5, [r4, #4]
    eb94:	605d      	str	r5, [r3, #4]
    eb96:	68a5      	ldr	r5, [r4, #8]
    eb98:	609d      	str	r5, [r3, #8]
    eb9a:	68e5      	ldr	r5, [r4, #12]
    eb9c:	3410      	adds	r4, #16
    eb9e:	60dd      	str	r5, [r3, #12]
    eba0:	001d      	movs	r5, r3
    eba2:	3310      	adds	r3, #16
    eba4:	42bd      	cmp	r5, r7
    eba6:	d1f2      	bne.n	eb8e <memmove+0x56>
    eba8:	4665      	mov	r5, ip
    ebaa:	230f      	movs	r3, #15
    ebac:	240c      	movs	r4, #12
    ebae:	3501      	adds	r5, #1
    ebb0:	012d      	lsls	r5, r5, #4
    ebb2:	1949      	adds	r1, r1, r5
    ebb4:	4013      	ands	r3, r2
    ebb6:	1945      	adds	r5, r0, r5
    ebb8:	4214      	tst	r4, r2
    ebba:	d011      	beq.n	ebe0 <memmove+0xa8>
    ebbc:	598c      	ldr	r4, [r1, r6]
    ebbe:	51ac      	str	r4, [r5, r6]
    ebc0:	3604      	adds	r6, #4
    ebc2:	1b9c      	subs	r4, r3, r6
    ebc4:	2c03      	cmp	r4, #3
    ebc6:	d8f9      	bhi.n	ebbc <memmove+0x84>
    ebc8:	3b04      	subs	r3, #4
    ebca:	089b      	lsrs	r3, r3, #2
    ebcc:	3301      	adds	r3, #1
    ebce:	009b      	lsls	r3, r3, #2
    ebd0:	18ed      	adds	r5, r5, r3
    ebd2:	18c9      	adds	r1, r1, r3
    ebd4:	2303      	movs	r3, #3
    ebd6:	401a      	ands	r2, r3
    ebd8:	e7bf      	b.n	eb5a <memmove+0x22>
    ebda:	0005      	movs	r5, r0
    ebdc:	1e56      	subs	r6, r2, #1
    ebde:	e7bf      	b.n	eb60 <memmove+0x28>
    ebe0:	001a      	movs	r2, r3
    ebe2:	e7ba      	b.n	eb5a <memmove+0x22>

0000ebe4 <memset>:
    ebe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebe6:	0005      	movs	r5, r0
    ebe8:	0783      	lsls	r3, r0, #30
    ebea:	d049      	beq.n	ec80 <memset+0x9c>
    ebec:	1e54      	subs	r4, r2, #1
    ebee:	2a00      	cmp	r2, #0
    ebf0:	d045      	beq.n	ec7e <memset+0x9a>
    ebf2:	0003      	movs	r3, r0
    ebf4:	2603      	movs	r6, #3
    ebf6:	b2ca      	uxtb	r2, r1
    ebf8:	e002      	b.n	ec00 <memset+0x1c>
    ebfa:	3501      	adds	r5, #1
    ebfc:	3c01      	subs	r4, #1
    ebfe:	d33e      	bcc.n	ec7e <memset+0x9a>
    ec00:	3301      	adds	r3, #1
    ec02:	702a      	strb	r2, [r5, #0]
    ec04:	4233      	tst	r3, r6
    ec06:	d1f8      	bne.n	ebfa <memset+0x16>
    ec08:	2c03      	cmp	r4, #3
    ec0a:	d930      	bls.n	ec6e <memset+0x8a>
    ec0c:	22ff      	movs	r2, #255	; 0xff
    ec0e:	400a      	ands	r2, r1
    ec10:	0215      	lsls	r5, r2, #8
    ec12:	4315      	orrs	r5, r2
    ec14:	042a      	lsls	r2, r5, #16
    ec16:	4315      	orrs	r5, r2
    ec18:	2c0f      	cmp	r4, #15
    ec1a:	d934      	bls.n	ec86 <memset+0xa2>
    ec1c:	0027      	movs	r7, r4
    ec1e:	3f10      	subs	r7, #16
    ec20:	093f      	lsrs	r7, r7, #4
    ec22:	013e      	lsls	r6, r7, #4
    ec24:	46b4      	mov	ip, r6
    ec26:	001e      	movs	r6, r3
    ec28:	001a      	movs	r2, r3
    ec2a:	3610      	adds	r6, #16
    ec2c:	4466      	add	r6, ip
    ec2e:	6015      	str	r5, [r2, #0]
    ec30:	6055      	str	r5, [r2, #4]
    ec32:	6095      	str	r5, [r2, #8]
    ec34:	60d5      	str	r5, [r2, #12]
    ec36:	3210      	adds	r2, #16
    ec38:	42b2      	cmp	r2, r6
    ec3a:	d1f8      	bne.n	ec2e <memset+0x4a>
    ec3c:	3701      	adds	r7, #1
    ec3e:	013f      	lsls	r7, r7, #4
    ec40:	19db      	adds	r3, r3, r7
    ec42:	270f      	movs	r7, #15
    ec44:	220c      	movs	r2, #12
    ec46:	4027      	ands	r7, r4
    ec48:	4022      	ands	r2, r4
    ec4a:	003c      	movs	r4, r7
    ec4c:	2a00      	cmp	r2, #0
    ec4e:	d00e      	beq.n	ec6e <memset+0x8a>
    ec50:	1f3e      	subs	r6, r7, #4
    ec52:	08b6      	lsrs	r6, r6, #2
    ec54:	00b4      	lsls	r4, r6, #2
    ec56:	46a4      	mov	ip, r4
    ec58:	001a      	movs	r2, r3
    ec5a:	1d1c      	adds	r4, r3, #4
    ec5c:	4464      	add	r4, ip
    ec5e:	c220      	stmia	r2!, {r5}
    ec60:	42a2      	cmp	r2, r4
    ec62:	d1fc      	bne.n	ec5e <memset+0x7a>
    ec64:	2403      	movs	r4, #3
    ec66:	3601      	adds	r6, #1
    ec68:	00b6      	lsls	r6, r6, #2
    ec6a:	199b      	adds	r3, r3, r6
    ec6c:	403c      	ands	r4, r7
    ec6e:	2c00      	cmp	r4, #0
    ec70:	d005      	beq.n	ec7e <memset+0x9a>
    ec72:	b2c9      	uxtb	r1, r1
    ec74:	191c      	adds	r4, r3, r4
    ec76:	7019      	strb	r1, [r3, #0]
    ec78:	3301      	adds	r3, #1
    ec7a:	429c      	cmp	r4, r3
    ec7c:	d1fb      	bne.n	ec76 <memset+0x92>
    ec7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec80:	0003      	movs	r3, r0
    ec82:	0014      	movs	r4, r2
    ec84:	e7c0      	b.n	ec08 <memset+0x24>
    ec86:	0027      	movs	r7, r4
    ec88:	e7e2      	b.n	ec50 <memset+0x6c>
    ec8a:	46c0      	nop			; (mov r8, r8)

0000ec8c <_Balloc>:
    ec8c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ec8e:	b570      	push	{r4, r5, r6, lr}
    ec90:	0004      	movs	r4, r0
    ec92:	000d      	movs	r5, r1
    ec94:	2b00      	cmp	r3, #0
    ec96:	d00a      	beq.n	ecae <_Balloc+0x22>
    ec98:	00a8      	lsls	r0, r5, #2
    ec9a:	181b      	adds	r3, r3, r0
    ec9c:	6818      	ldr	r0, [r3, #0]
    ec9e:	2800      	cmp	r0, #0
    eca0:	d00e      	beq.n	ecc0 <_Balloc+0x34>
    eca2:	6802      	ldr	r2, [r0, #0]
    eca4:	601a      	str	r2, [r3, #0]
    eca6:	2300      	movs	r3, #0
    eca8:	6103      	str	r3, [r0, #16]
    ecaa:	60c3      	str	r3, [r0, #12]
    ecac:	bd70      	pop	{r4, r5, r6, pc}
    ecae:	2221      	movs	r2, #33	; 0x21
    ecb0:	2104      	movs	r1, #4
    ecb2:	f7fe ffd7 	bl	dc64 <_calloc_r>
    ecb6:	1e03      	subs	r3, r0, #0
    ecb8:	64e0      	str	r0, [r4, #76]	; 0x4c
    ecba:	d1ed      	bne.n	ec98 <_Balloc+0xc>
    ecbc:	2000      	movs	r0, #0
    ecbe:	e7f5      	b.n	ecac <_Balloc+0x20>
    ecc0:	2601      	movs	r6, #1
    ecc2:	40ae      	lsls	r6, r5
    ecc4:	1d72      	adds	r2, r6, #5
    ecc6:	2101      	movs	r1, #1
    ecc8:	0020      	movs	r0, r4
    ecca:	0092      	lsls	r2, r2, #2
    eccc:	f7fe ffca 	bl	dc64 <_calloc_r>
    ecd0:	2800      	cmp	r0, #0
    ecd2:	d0f3      	beq.n	ecbc <_Balloc+0x30>
    ecd4:	6045      	str	r5, [r0, #4]
    ecd6:	6086      	str	r6, [r0, #8]
    ecd8:	e7e5      	b.n	eca6 <_Balloc+0x1a>
    ecda:	46c0      	nop			; (mov r8, r8)

0000ecdc <_Bfree>:
    ecdc:	2900      	cmp	r1, #0
    ecde:	d006      	beq.n	ecee <_Bfree+0x12>
    ece0:	684b      	ldr	r3, [r1, #4]
    ece2:	009a      	lsls	r2, r3, #2
    ece4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ece6:	189b      	adds	r3, r3, r2
    ece8:	681a      	ldr	r2, [r3, #0]
    ecea:	600a      	str	r2, [r1, #0]
    ecec:	6019      	str	r1, [r3, #0]
    ecee:	4770      	bx	lr

0000ecf0 <__multadd>:
    ecf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecf2:	46c6      	mov	lr, r8
    ecf4:	001f      	movs	r7, r3
    ecf6:	4680      	mov	r8, r0
    ecf8:	2300      	movs	r3, #0
    ecfa:	b500      	push	{lr}
    ecfc:	000e      	movs	r6, r1
    ecfe:	690d      	ldr	r5, [r1, #16]
    ed00:	3114      	adds	r1, #20
    ed02:	680c      	ldr	r4, [r1, #0]
    ed04:	3301      	adds	r3, #1
    ed06:	0420      	lsls	r0, r4, #16
    ed08:	0c00      	lsrs	r0, r0, #16
    ed0a:	4350      	muls	r0, r2
    ed0c:	0c24      	lsrs	r4, r4, #16
    ed0e:	4354      	muls	r4, r2
    ed10:	19c0      	adds	r0, r0, r7
    ed12:	0c07      	lsrs	r7, r0, #16
    ed14:	19e4      	adds	r4, r4, r7
    ed16:	0400      	lsls	r0, r0, #16
    ed18:	0c27      	lsrs	r7, r4, #16
    ed1a:	0c00      	lsrs	r0, r0, #16
    ed1c:	0424      	lsls	r4, r4, #16
    ed1e:	1824      	adds	r4, r4, r0
    ed20:	c110      	stmia	r1!, {r4}
    ed22:	429d      	cmp	r5, r3
    ed24:	dced      	bgt.n	ed02 <__multadd+0x12>
    ed26:	2f00      	cmp	r7, #0
    ed28:	d008      	beq.n	ed3c <__multadd+0x4c>
    ed2a:	68b3      	ldr	r3, [r6, #8]
    ed2c:	42ab      	cmp	r3, r5
    ed2e:	dd09      	ble.n	ed44 <__multadd+0x54>
    ed30:	1d2b      	adds	r3, r5, #4
    ed32:	009b      	lsls	r3, r3, #2
    ed34:	18f3      	adds	r3, r6, r3
    ed36:	3501      	adds	r5, #1
    ed38:	605f      	str	r7, [r3, #4]
    ed3a:	6135      	str	r5, [r6, #16]
    ed3c:	0030      	movs	r0, r6
    ed3e:	bc80      	pop	{r7}
    ed40:	46b8      	mov	r8, r7
    ed42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ed44:	6873      	ldr	r3, [r6, #4]
    ed46:	4640      	mov	r0, r8
    ed48:	1c59      	adds	r1, r3, #1
    ed4a:	f7ff ff9f 	bl	ec8c <_Balloc>
    ed4e:	1e04      	subs	r4, r0, #0
    ed50:	d017      	beq.n	ed82 <__multadd+0x92>
    ed52:	0031      	movs	r1, r6
    ed54:	6933      	ldr	r3, [r6, #16]
    ed56:	310c      	adds	r1, #12
    ed58:	1c9a      	adds	r2, r3, #2
    ed5a:	0092      	lsls	r2, r2, #2
    ed5c:	300c      	adds	r0, #12
    ed5e:	f7ff fe99 	bl	ea94 <memcpy>
    ed62:	6873      	ldr	r3, [r6, #4]
    ed64:	009a      	lsls	r2, r3, #2
    ed66:	4643      	mov	r3, r8
    ed68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ed6a:	189b      	adds	r3, r3, r2
    ed6c:	681a      	ldr	r2, [r3, #0]
    ed6e:	6032      	str	r2, [r6, #0]
    ed70:	601e      	str	r6, [r3, #0]
    ed72:	0026      	movs	r6, r4
    ed74:	1d2b      	adds	r3, r5, #4
    ed76:	009b      	lsls	r3, r3, #2
    ed78:	18f3      	adds	r3, r6, r3
    ed7a:	3501      	adds	r5, #1
    ed7c:	605f      	str	r7, [r3, #4]
    ed7e:	6135      	str	r5, [r6, #16]
    ed80:	e7dc      	b.n	ed3c <__multadd+0x4c>
    ed82:	2200      	movs	r2, #0
    ed84:	21b5      	movs	r1, #181	; 0xb5
    ed86:	4b02      	ldr	r3, [pc, #8]	; (ed90 <__multadd+0xa0>)
    ed88:	4802      	ldr	r0, [pc, #8]	; (ed94 <__multadd+0xa4>)
    ed8a:	f002 fd1b 	bl	117c4 <__assert_func>
    ed8e:	46c0      	nop			; (mov r8, r8)
    ed90:	000169a4 	.word	0x000169a4
    ed94:	000169b8 	.word	0x000169b8

0000ed98 <__hi0bits>:
    ed98:	0003      	movs	r3, r0
    ed9a:	0c02      	lsrs	r2, r0, #16
    ed9c:	2000      	movs	r0, #0
    ed9e:	2a00      	cmp	r2, #0
    eda0:	d101      	bne.n	eda6 <__hi0bits+0xe>
    eda2:	041b      	lsls	r3, r3, #16
    eda4:	3010      	adds	r0, #16
    eda6:	0e1a      	lsrs	r2, r3, #24
    eda8:	d101      	bne.n	edae <__hi0bits+0x16>
    edaa:	3008      	adds	r0, #8
    edac:	021b      	lsls	r3, r3, #8
    edae:	0f1a      	lsrs	r2, r3, #28
    edb0:	d101      	bne.n	edb6 <__hi0bits+0x1e>
    edb2:	3004      	adds	r0, #4
    edb4:	011b      	lsls	r3, r3, #4
    edb6:	0f9a      	lsrs	r2, r3, #30
    edb8:	d101      	bne.n	edbe <__hi0bits+0x26>
    edba:	3002      	adds	r0, #2
    edbc:	009b      	lsls	r3, r3, #2
    edbe:	2b00      	cmp	r3, #0
    edc0:	db02      	blt.n	edc8 <__hi0bits+0x30>
    edc2:	3001      	adds	r0, #1
    edc4:	005b      	lsls	r3, r3, #1
    edc6:	d500      	bpl.n	edca <__hi0bits+0x32>
    edc8:	4770      	bx	lr
    edca:	2020      	movs	r0, #32
    edcc:	e7fc      	b.n	edc8 <__hi0bits+0x30>
    edce:	46c0      	nop			; (mov r8, r8)

0000edd0 <__lo0bits>:
    edd0:	6803      	ldr	r3, [r0, #0]
    edd2:	0002      	movs	r2, r0
    edd4:	0759      	lsls	r1, r3, #29
    edd6:	d007      	beq.n	ede8 <__lo0bits+0x18>
    edd8:	07d9      	lsls	r1, r3, #31
    edda:	d41e      	bmi.n	ee1a <__lo0bits+0x4a>
    eddc:	0799      	lsls	r1, r3, #30
    edde:	d520      	bpl.n	ee22 <__lo0bits+0x52>
    ede0:	085b      	lsrs	r3, r3, #1
    ede2:	6003      	str	r3, [r0, #0]
    ede4:	2001      	movs	r0, #1
    ede6:	4770      	bx	lr
    ede8:	2000      	movs	r0, #0
    edea:	0419      	lsls	r1, r3, #16
    edec:	d101      	bne.n	edf2 <__lo0bits+0x22>
    edee:	0c1b      	lsrs	r3, r3, #16
    edf0:	3010      	adds	r0, #16
    edf2:	21ff      	movs	r1, #255	; 0xff
    edf4:	4219      	tst	r1, r3
    edf6:	d101      	bne.n	edfc <__lo0bits+0x2c>
    edf8:	3008      	adds	r0, #8
    edfa:	0a1b      	lsrs	r3, r3, #8
    edfc:	0719      	lsls	r1, r3, #28
    edfe:	d101      	bne.n	ee04 <__lo0bits+0x34>
    ee00:	3004      	adds	r0, #4
    ee02:	091b      	lsrs	r3, r3, #4
    ee04:	0799      	lsls	r1, r3, #30
    ee06:	d101      	bne.n	ee0c <__lo0bits+0x3c>
    ee08:	3002      	adds	r0, #2
    ee0a:	089b      	lsrs	r3, r3, #2
    ee0c:	07d9      	lsls	r1, r3, #31
    ee0e:	d402      	bmi.n	ee16 <__lo0bits+0x46>
    ee10:	3001      	adds	r0, #1
    ee12:	085b      	lsrs	r3, r3, #1
    ee14:	d003      	beq.n	ee1e <__lo0bits+0x4e>
    ee16:	6013      	str	r3, [r2, #0]
    ee18:	e7e5      	b.n	ede6 <__lo0bits+0x16>
    ee1a:	2000      	movs	r0, #0
    ee1c:	e7e3      	b.n	ede6 <__lo0bits+0x16>
    ee1e:	2020      	movs	r0, #32
    ee20:	e7e1      	b.n	ede6 <__lo0bits+0x16>
    ee22:	089b      	lsrs	r3, r3, #2
    ee24:	6003      	str	r3, [r0, #0]
    ee26:	2002      	movs	r0, #2
    ee28:	e7dd      	b.n	ede6 <__lo0bits+0x16>
    ee2a:	46c0      	nop			; (mov r8, r8)

0000ee2c <__i2b>:
    ee2c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    ee2e:	b570      	push	{r4, r5, r6, lr}
    ee30:	0004      	movs	r4, r0
    ee32:	000d      	movs	r5, r1
    ee34:	2b00      	cmp	r3, #0
    ee36:	d00a      	beq.n	ee4e <__i2b+0x22>
    ee38:	6858      	ldr	r0, [r3, #4]
    ee3a:	2800      	cmp	r0, #0
    ee3c:	d015      	beq.n	ee6a <__i2b+0x3e>
    ee3e:	6802      	ldr	r2, [r0, #0]
    ee40:	605a      	str	r2, [r3, #4]
    ee42:	2300      	movs	r3, #0
    ee44:	60c3      	str	r3, [r0, #12]
    ee46:	3301      	adds	r3, #1
    ee48:	6145      	str	r5, [r0, #20]
    ee4a:	6103      	str	r3, [r0, #16]
    ee4c:	bd70      	pop	{r4, r5, r6, pc}
    ee4e:	2221      	movs	r2, #33	; 0x21
    ee50:	2104      	movs	r1, #4
    ee52:	f7fe ff07 	bl	dc64 <_calloc_r>
    ee56:	1e03      	subs	r3, r0, #0
    ee58:	64e0      	str	r0, [r4, #76]	; 0x4c
    ee5a:	d1ed      	bne.n	ee38 <__i2b+0xc>
    ee5c:	21a0      	movs	r1, #160	; 0xa0
    ee5e:	2200      	movs	r2, #0
    ee60:	4b08      	ldr	r3, [pc, #32]	; (ee84 <__i2b+0x58>)
    ee62:	4809      	ldr	r0, [pc, #36]	; (ee88 <__i2b+0x5c>)
    ee64:	0049      	lsls	r1, r1, #1
    ee66:	f002 fcad 	bl	117c4 <__assert_func>
    ee6a:	221c      	movs	r2, #28
    ee6c:	2101      	movs	r1, #1
    ee6e:	0020      	movs	r0, r4
    ee70:	f7fe fef8 	bl	dc64 <_calloc_r>
    ee74:	2800      	cmp	r0, #0
    ee76:	d0f1      	beq.n	ee5c <__i2b+0x30>
    ee78:	2301      	movs	r3, #1
    ee7a:	6043      	str	r3, [r0, #4]
    ee7c:	3301      	adds	r3, #1
    ee7e:	6083      	str	r3, [r0, #8]
    ee80:	e7df      	b.n	ee42 <__i2b+0x16>
    ee82:	46c0      	nop			; (mov r8, r8)
    ee84:	000169a4 	.word	0x000169a4
    ee88:	000169b8 	.word	0x000169b8

0000ee8c <__multiply>:
    ee8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee8e:	464e      	mov	r6, r9
    ee90:	4645      	mov	r5, r8
    ee92:	46de      	mov	lr, fp
    ee94:	4657      	mov	r7, sl
    ee96:	b5e0      	push	{r5, r6, r7, lr}
    ee98:	690d      	ldr	r5, [r1, #16]
    ee9a:	6916      	ldr	r6, [r2, #16]
    ee9c:	4689      	mov	r9, r1
    ee9e:	0014      	movs	r4, r2
    eea0:	b087      	sub	sp, #28
    eea2:	42b5      	cmp	r5, r6
    eea4:	db04      	blt.n	eeb0 <__multiply+0x24>
    eea6:	0033      	movs	r3, r6
    eea8:	000c      	movs	r4, r1
    eeaa:	002e      	movs	r6, r5
    eeac:	4691      	mov	r9, r2
    eeae:	001d      	movs	r5, r3
    eeb0:	68a3      	ldr	r3, [r4, #8]
    eeb2:	1977      	adds	r7, r6, r5
    eeb4:	6861      	ldr	r1, [r4, #4]
    eeb6:	42bb      	cmp	r3, r7
    eeb8:	da00      	bge.n	eebc <__multiply+0x30>
    eeba:	3101      	adds	r1, #1
    eebc:	f7ff fee6 	bl	ec8c <_Balloc>
    eec0:	9005      	str	r0, [sp, #20]
    eec2:	2800      	cmp	r0, #0
    eec4:	d100      	bne.n	eec8 <__multiply+0x3c>
    eec6:	e0a7      	b.n	f018 <__multiply+0x18c>
    eec8:	2214      	movs	r2, #20
    eeca:	4694      	mov	ip, r2
    eecc:	9b05      	ldr	r3, [sp, #20]
    eece:	2200      	movs	r2, #0
    eed0:	4463      	add	r3, ip
    eed2:	469b      	mov	fp, r3
    eed4:	00bb      	lsls	r3, r7, #2
    eed6:	445b      	add	r3, fp
    eed8:	469a      	mov	sl, r3
    eeda:	465b      	mov	r3, fp
    eedc:	4651      	mov	r1, sl
    eede:	45d3      	cmp	fp, sl
    eee0:	d203      	bcs.n	eeea <__multiply+0x5e>
    eee2:	c304      	stmia	r3!, {r2}
    eee4:	4299      	cmp	r1, r3
    eee6:	d8fc      	bhi.n	eee2 <__multiply+0x56>
    eee8:	468a      	mov	sl, r1
    eeea:	2314      	movs	r3, #20
    eeec:	469c      	mov	ip, r3
    eeee:	44a4      	add	ip, r4
    eef0:	4663      	mov	r3, ip
    eef2:	9304      	str	r3, [sp, #16]
    eef4:	2314      	movs	r3, #20
    eef6:	00b6      	lsls	r6, r6, #2
    eef8:	4466      	add	r6, ip
    eefa:	00ad      	lsls	r5, r5, #2
    eefc:	469c      	mov	ip, r3
    eefe:	002b      	movs	r3, r5
    ef00:	44e1      	add	r9, ip
    ef02:	444b      	add	r3, r9
    ef04:	9302      	str	r3, [sp, #8]
    ef06:	4599      	cmp	r9, r3
    ef08:	d26e      	bcs.n	efe8 <__multiply+0x15c>
    ef0a:	2304      	movs	r3, #4
    ef0c:	9303      	str	r3, [sp, #12]
    ef0e:	0023      	movs	r3, r4
    ef10:	3315      	adds	r3, #21
    ef12:	429e      	cmp	r6, r3
    ef14:	d200      	bcs.n	ef18 <__multiply+0x8c>
    ef16:	e07c      	b.n	f012 <__multiply+0x186>
    ef18:	1b33      	subs	r3, r6, r4
    ef1a:	3b15      	subs	r3, #21
    ef1c:	089b      	lsrs	r3, r3, #2
    ef1e:	3301      	adds	r3, #1
    ef20:	009b      	lsls	r3, r3, #2
    ef22:	46b8      	mov	r8, r7
    ef24:	9303      	str	r3, [sp, #12]
    ef26:	9601      	str	r6, [sp, #4]
    ef28:	e008      	b.n	ef3c <__multiply+0xb0>
    ef2a:	0c00      	lsrs	r0, r0, #16
    ef2c:	d131      	bne.n	ef92 <__multiply+0x106>
    ef2e:	2304      	movs	r3, #4
    ef30:	469c      	mov	ip, r3
    ef32:	9b02      	ldr	r3, [sp, #8]
    ef34:	44e1      	add	r9, ip
    ef36:	44e3      	add	fp, ip
    ef38:	454b      	cmp	r3, r9
    ef3a:	d954      	bls.n	efe6 <__multiply+0x15a>
    ef3c:	464b      	mov	r3, r9
    ef3e:	6818      	ldr	r0, [r3, #0]
    ef40:	0403      	lsls	r3, r0, #16
    ef42:	0c1e      	lsrs	r6, r3, #16
    ef44:	2b00      	cmp	r3, #0
    ef46:	d0f0      	beq.n	ef2a <__multiply+0x9e>
    ef48:	9b01      	ldr	r3, [sp, #4]
    ef4a:	465d      	mov	r5, fp
    ef4c:	2700      	movs	r7, #0
    ef4e:	469c      	mov	ip, r3
    ef50:	9c04      	ldr	r4, [sp, #16]
    ef52:	cc04      	ldmia	r4!, {r2}
    ef54:	6829      	ldr	r1, [r5, #0]
    ef56:	0413      	lsls	r3, r2, #16
    ef58:	0c1b      	lsrs	r3, r3, #16
    ef5a:	4373      	muls	r3, r6
    ef5c:	0408      	lsls	r0, r1, #16
    ef5e:	0c00      	lsrs	r0, r0, #16
    ef60:	181b      	adds	r3, r3, r0
    ef62:	19d8      	adds	r0, r3, r7
    ef64:	0c13      	lsrs	r3, r2, #16
    ef66:	4373      	muls	r3, r6
    ef68:	0c09      	lsrs	r1, r1, #16
    ef6a:	0c02      	lsrs	r2, r0, #16
    ef6c:	185b      	adds	r3, r3, r1
    ef6e:	189b      	adds	r3, r3, r2
    ef70:	0402      	lsls	r2, r0, #16
    ef72:	0c1f      	lsrs	r7, r3, #16
    ef74:	0c12      	lsrs	r2, r2, #16
    ef76:	041b      	lsls	r3, r3, #16
    ef78:	4313      	orrs	r3, r2
    ef7a:	c508      	stmia	r5!, {r3}
    ef7c:	45a4      	cmp	ip, r4
    ef7e:	d8e8      	bhi.n	ef52 <__multiply+0xc6>
    ef80:	4663      	mov	r3, ip
    ef82:	9301      	str	r3, [sp, #4]
    ef84:	465b      	mov	r3, fp
    ef86:	9a03      	ldr	r2, [sp, #12]
    ef88:	509f      	str	r7, [r3, r2]
    ef8a:	464b      	mov	r3, r9
    ef8c:	6818      	ldr	r0, [r3, #0]
    ef8e:	0c00      	lsrs	r0, r0, #16
    ef90:	d0cd      	beq.n	ef2e <__multiply+0xa2>
    ef92:	465b      	mov	r3, fp
    ef94:	2700      	movs	r7, #0
    ef96:	681b      	ldr	r3, [r3, #0]
    ef98:	465c      	mov	r4, fp
    ef9a:	0019      	movs	r1, r3
    ef9c:	003e      	movs	r6, r7
    ef9e:	9d04      	ldr	r5, [sp, #16]
    efa0:	9a01      	ldr	r2, [sp, #4]
    efa2:	882f      	ldrh	r7, [r5, #0]
    efa4:	0c09      	lsrs	r1, r1, #16
    efa6:	4347      	muls	r7, r0
    efa8:	187f      	adds	r7, r7, r1
    efaa:	19bf      	adds	r7, r7, r6
    efac:	041b      	lsls	r3, r3, #16
    efae:	0439      	lsls	r1, r7, #16
    efb0:	0c1b      	lsrs	r3, r3, #16
    efb2:	430b      	orrs	r3, r1
    efb4:	6023      	str	r3, [r4, #0]
    efb6:	cd08      	ldmia	r5!, {r3}
    efb8:	6861      	ldr	r1, [r4, #4]
    efba:	0c1b      	lsrs	r3, r3, #16
    efbc:	4343      	muls	r3, r0
    efbe:	040e      	lsls	r6, r1, #16
    efc0:	0c36      	lsrs	r6, r6, #16
    efc2:	199b      	adds	r3, r3, r6
    efc4:	0c3f      	lsrs	r7, r7, #16
    efc6:	19db      	adds	r3, r3, r7
    efc8:	0c1e      	lsrs	r6, r3, #16
    efca:	3404      	adds	r4, #4
    efcc:	42aa      	cmp	r2, r5
    efce:	d8e8      	bhi.n	efa2 <__multiply+0x116>
    efd0:	9201      	str	r2, [sp, #4]
    efd2:	465a      	mov	r2, fp
    efd4:	9903      	ldr	r1, [sp, #12]
    efd6:	5053      	str	r3, [r2, r1]
    efd8:	2304      	movs	r3, #4
    efda:	469c      	mov	ip, r3
    efdc:	9b02      	ldr	r3, [sp, #8]
    efde:	44e1      	add	r9, ip
    efe0:	44e3      	add	fp, ip
    efe2:	454b      	cmp	r3, r9
    efe4:	d8aa      	bhi.n	ef3c <__multiply+0xb0>
    efe6:	4647      	mov	r7, r8
    efe8:	4653      	mov	r3, sl
    efea:	2f00      	cmp	r7, #0
    efec:	dc03      	bgt.n	eff6 <__multiply+0x16a>
    efee:	e006      	b.n	effe <__multiply+0x172>
    eff0:	3f01      	subs	r7, #1
    eff2:	2f00      	cmp	r7, #0
    eff4:	d003      	beq.n	effe <__multiply+0x172>
    eff6:	3b04      	subs	r3, #4
    eff8:	681a      	ldr	r2, [r3, #0]
    effa:	2a00      	cmp	r2, #0
    effc:	d0f8      	beq.n	eff0 <__multiply+0x164>
    effe:	9b05      	ldr	r3, [sp, #20]
    f000:	0018      	movs	r0, r3
    f002:	611f      	str	r7, [r3, #16]
    f004:	b007      	add	sp, #28
    f006:	bcf0      	pop	{r4, r5, r6, r7}
    f008:	46bb      	mov	fp, r7
    f00a:	46b2      	mov	sl, r6
    f00c:	46a9      	mov	r9, r5
    f00e:	46a0      	mov	r8, r4
    f010:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f012:	46b8      	mov	r8, r7
    f014:	9601      	str	r6, [sp, #4]
    f016:	e791      	b.n	ef3c <__multiply+0xb0>
    f018:	215e      	movs	r1, #94	; 0x5e
    f01a:	2200      	movs	r2, #0
    f01c:	4b02      	ldr	r3, [pc, #8]	; (f028 <__multiply+0x19c>)
    f01e:	4803      	ldr	r0, [pc, #12]	; (f02c <__multiply+0x1a0>)
    f020:	31ff      	adds	r1, #255	; 0xff
    f022:	f002 fbcf 	bl	117c4 <__assert_func>
    f026:	46c0      	nop			; (mov r8, r8)
    f028:	000169a4 	.word	0x000169a4
    f02c:	000169b8 	.word	0x000169b8

0000f030 <__pow5mult>:
    f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f032:	2303      	movs	r3, #3
    f034:	4647      	mov	r7, r8
    f036:	0014      	movs	r4, r2
    f038:	46ce      	mov	lr, r9
    f03a:	001a      	movs	r2, r3
    f03c:	b580      	push	{r7, lr}
    f03e:	000e      	movs	r6, r1
    f040:	0007      	movs	r7, r0
    f042:	4022      	ands	r2, r4
    f044:	4223      	tst	r3, r4
    f046:	d138      	bne.n	f0ba <__pow5mult+0x8a>
    f048:	10a4      	asrs	r4, r4, #2
    f04a:	d025      	beq.n	f098 <__pow5mult+0x68>
    f04c:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    f04e:	2d00      	cmp	r5, #0
    f050:	d03c      	beq.n	f0cc <__pow5mult+0x9c>
    f052:	2301      	movs	r3, #1
    f054:	4698      	mov	r8, r3
    f056:	2300      	movs	r3, #0
    f058:	4699      	mov	r9, r3
    f05a:	4643      	mov	r3, r8
    f05c:	4223      	tst	r3, r4
    f05e:	d108      	bne.n	f072 <__pow5mult+0x42>
    f060:	1064      	asrs	r4, r4, #1
    f062:	d019      	beq.n	f098 <__pow5mult+0x68>
    f064:	6828      	ldr	r0, [r5, #0]
    f066:	2800      	cmp	r0, #0
    f068:	d01b      	beq.n	f0a2 <__pow5mult+0x72>
    f06a:	0005      	movs	r5, r0
    f06c:	4643      	mov	r3, r8
    f06e:	4223      	tst	r3, r4
    f070:	d0f6      	beq.n	f060 <__pow5mult+0x30>
    f072:	002a      	movs	r2, r5
    f074:	0031      	movs	r1, r6
    f076:	0038      	movs	r0, r7
    f078:	f7ff ff08 	bl	ee8c <__multiply>
    f07c:	2e00      	cmp	r6, #0
    f07e:	d01a      	beq.n	f0b6 <__pow5mult+0x86>
    f080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    f082:	6873      	ldr	r3, [r6, #4]
    f084:	4694      	mov	ip, r2
    f086:	009b      	lsls	r3, r3, #2
    f088:	4463      	add	r3, ip
    f08a:	681a      	ldr	r2, [r3, #0]
    f08c:	1064      	asrs	r4, r4, #1
    f08e:	6032      	str	r2, [r6, #0]
    f090:	601e      	str	r6, [r3, #0]
    f092:	0006      	movs	r6, r0
    f094:	2c00      	cmp	r4, #0
    f096:	d1e5      	bne.n	f064 <__pow5mult+0x34>
    f098:	0030      	movs	r0, r6
    f09a:	bcc0      	pop	{r6, r7}
    f09c:	46b9      	mov	r9, r7
    f09e:	46b0      	mov	r8, r6
    f0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0a2:	002a      	movs	r2, r5
    f0a4:	0029      	movs	r1, r5
    f0a6:	0038      	movs	r0, r7
    f0a8:	f7ff fef0 	bl	ee8c <__multiply>
    f0ac:	464b      	mov	r3, r9
    f0ae:	6028      	str	r0, [r5, #0]
    f0b0:	0005      	movs	r5, r0
    f0b2:	6003      	str	r3, [r0, #0]
    f0b4:	e7da      	b.n	f06c <__pow5mult+0x3c>
    f0b6:	0006      	movs	r6, r0
    f0b8:	e7d2      	b.n	f060 <__pow5mult+0x30>
    f0ba:	4b0f      	ldr	r3, [pc, #60]	; (f0f8 <__pow5mult+0xc8>)
    f0bc:	3a01      	subs	r2, #1
    f0be:	0092      	lsls	r2, r2, #2
    f0c0:	58d2      	ldr	r2, [r2, r3]
    f0c2:	2300      	movs	r3, #0
    f0c4:	f7ff fe14 	bl	ecf0 <__multadd>
    f0c8:	0006      	movs	r6, r0
    f0ca:	e7bd      	b.n	f048 <__pow5mult+0x18>
    f0cc:	2101      	movs	r1, #1
    f0ce:	0038      	movs	r0, r7
    f0d0:	f7ff fddc 	bl	ec8c <_Balloc>
    f0d4:	1e05      	subs	r5, r0, #0
    f0d6:	d007      	beq.n	f0e8 <__pow5mult+0xb8>
    f0d8:	4b08      	ldr	r3, [pc, #32]	; (f0fc <__pow5mult+0xcc>)
    f0da:	6143      	str	r3, [r0, #20]
    f0dc:	2301      	movs	r3, #1
    f0de:	6103      	str	r3, [r0, #16]
    f0e0:	2300      	movs	r3, #0
    f0e2:	64b8      	str	r0, [r7, #72]	; 0x48
    f0e4:	6003      	str	r3, [r0, #0]
    f0e6:	e7b4      	b.n	f052 <__pow5mult+0x22>
    f0e8:	21a0      	movs	r1, #160	; 0xa0
    f0ea:	2200      	movs	r2, #0
    f0ec:	4b04      	ldr	r3, [pc, #16]	; (f100 <__pow5mult+0xd0>)
    f0ee:	4805      	ldr	r0, [pc, #20]	; (f104 <__pow5mult+0xd4>)
    f0f0:	0049      	lsls	r1, r1, #1
    f0f2:	f002 fb67 	bl	117c4 <__assert_func>
    f0f6:	46c0      	nop			; (mov r8, r8)
    f0f8:	00016b28 	.word	0x00016b28
    f0fc:	00000271 	.word	0x00000271
    f100:	000169a4 	.word	0x000169a4
    f104:	000169b8 	.word	0x000169b8

0000f108 <__lshift>:
    f108:	b5f0      	push	{r4, r5, r6, r7, lr}
    f10a:	000c      	movs	r4, r1
    f10c:	6923      	ldr	r3, [r4, #16]
    f10e:	4645      	mov	r5, r8
    f110:	46de      	mov	lr, fp
    f112:	4657      	mov	r7, sl
    f114:	464e      	mov	r6, r9
    f116:	4698      	mov	r8, r3
    f118:	b5e0      	push	{r5, r6, r7, lr}
    f11a:	1157      	asrs	r7, r2, #5
    f11c:	44b8      	add	r8, r7
    f11e:	4643      	mov	r3, r8
    f120:	1c5d      	adds	r5, r3, #1
    f122:	68a3      	ldr	r3, [r4, #8]
    f124:	4683      	mov	fp, r0
    f126:	0016      	movs	r6, r2
    f128:	6849      	ldr	r1, [r1, #4]
    f12a:	b083      	sub	sp, #12
    f12c:	429d      	cmp	r5, r3
    f12e:	dd03      	ble.n	f138 <__lshift+0x30>
    f130:	3101      	adds	r1, #1
    f132:	005b      	lsls	r3, r3, #1
    f134:	429d      	cmp	r5, r3
    f136:	dcfb      	bgt.n	f130 <__lshift+0x28>
    f138:	4658      	mov	r0, fp
    f13a:	f7ff fda7 	bl	ec8c <_Balloc>
    f13e:	4684      	mov	ip, r0
    f140:	2800      	cmp	r0, #0
    f142:	d053      	beq.n	f1ec <__lshift+0xe4>
    f144:	3014      	adds	r0, #20
    f146:	0003      	movs	r3, r0
    f148:	9001      	str	r0, [sp, #4]
    f14a:	2f00      	cmp	r7, #0
    f14c:	dd0c      	ble.n	f168 <__lshift+0x60>
    f14e:	00bf      	lsls	r7, r7, #2
    f150:	003a      	movs	r2, r7
    f152:	2100      	movs	r1, #0
    f154:	3214      	adds	r2, #20
    f156:	4462      	add	r2, ip
    f158:	c302      	stmia	r3!, {r1}
    f15a:	4293      	cmp	r3, r2
    f15c:	d1fc      	bne.n	f158 <__lshift+0x50>
    f15e:	9b01      	ldr	r3, [sp, #4]
    f160:	4699      	mov	r9, r3
    f162:	44b9      	add	r9, r7
    f164:	464b      	mov	r3, r9
    f166:	9301      	str	r3, [sp, #4]
    f168:	6922      	ldr	r2, [r4, #16]
    f16a:	0023      	movs	r3, r4
    f16c:	0091      	lsls	r1, r2, #2
    f16e:	221f      	movs	r2, #31
    f170:	0010      	movs	r0, r2
    f172:	3314      	adds	r3, #20
    f174:	4030      	ands	r0, r6
    f176:	4681      	mov	r9, r0
    f178:	1859      	adds	r1, r3, r1
    f17a:	4232      	tst	r2, r6
    f17c:	d030      	beq.n	f1e0 <__lshift+0xd8>
    f17e:	3201      	adds	r2, #1
    f180:	1a12      	subs	r2, r2, r0
    f182:	4692      	mov	sl, r2
    f184:	2600      	movs	r6, #0
    f186:	9f01      	ldr	r7, [sp, #4]
    f188:	4648      	mov	r0, r9
    f18a:	681a      	ldr	r2, [r3, #0]
    f18c:	4082      	lsls	r2, r0
    f18e:	4332      	orrs	r2, r6
    f190:	c704      	stmia	r7!, {r2}
    f192:	4652      	mov	r2, sl
    f194:	cb40      	ldmia	r3!, {r6}
    f196:	40d6      	lsrs	r6, r2
    f198:	4299      	cmp	r1, r3
    f19a:	d8f5      	bhi.n	f188 <__lshift+0x80>
    f19c:	0022      	movs	r2, r4
    f19e:	3215      	adds	r2, #21
    f1a0:	2304      	movs	r3, #4
    f1a2:	4291      	cmp	r1, r2
    f1a4:	d304      	bcc.n	f1b0 <__lshift+0xa8>
    f1a6:	1b0b      	subs	r3, r1, r4
    f1a8:	3b15      	subs	r3, #21
    f1aa:	089b      	lsrs	r3, r3, #2
    f1ac:	3301      	adds	r3, #1
    f1ae:	009b      	lsls	r3, r3, #2
    f1b0:	9a01      	ldr	r2, [sp, #4]
    f1b2:	50d6      	str	r6, [r2, r3]
    f1b4:	2e00      	cmp	r6, #0
    f1b6:	d000      	beq.n	f1ba <__lshift+0xb2>
    f1b8:	46a8      	mov	r8, r5
    f1ba:	4663      	mov	r3, ip
    f1bc:	4642      	mov	r2, r8
    f1be:	611a      	str	r2, [r3, #16]
    f1c0:	6863      	ldr	r3, [r4, #4]
    f1c2:	4660      	mov	r0, ip
    f1c4:	009a      	lsls	r2, r3, #2
    f1c6:	465b      	mov	r3, fp
    f1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f1ca:	189b      	adds	r3, r3, r2
    f1cc:	681a      	ldr	r2, [r3, #0]
    f1ce:	6022      	str	r2, [r4, #0]
    f1d0:	601c      	str	r4, [r3, #0]
    f1d2:	b003      	add	sp, #12
    f1d4:	bcf0      	pop	{r4, r5, r6, r7}
    f1d6:	46bb      	mov	fp, r7
    f1d8:	46b2      	mov	sl, r6
    f1da:	46a9      	mov	r9, r5
    f1dc:	46a0      	mov	r8, r4
    f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1e0:	9801      	ldr	r0, [sp, #4]
    f1e2:	cb04      	ldmia	r3!, {r2}
    f1e4:	c004      	stmia	r0!, {r2}
    f1e6:	4299      	cmp	r1, r3
    f1e8:	d8fb      	bhi.n	f1e2 <__lshift+0xda>
    f1ea:	e7e6      	b.n	f1ba <__lshift+0xb2>
    f1ec:	21da      	movs	r1, #218	; 0xda
    f1ee:	2200      	movs	r2, #0
    f1f0:	4b02      	ldr	r3, [pc, #8]	; (f1fc <__lshift+0xf4>)
    f1f2:	4803      	ldr	r0, [pc, #12]	; (f200 <__lshift+0xf8>)
    f1f4:	31ff      	adds	r1, #255	; 0xff
    f1f6:	f002 fae5 	bl	117c4 <__assert_func>
    f1fa:	46c0      	nop			; (mov r8, r8)
    f1fc:	000169a4 	.word	0x000169a4
    f200:	000169b8 	.word	0x000169b8

0000f204 <__mcmp>:
    f204:	6903      	ldr	r3, [r0, #16]
    f206:	690a      	ldr	r2, [r1, #16]
    f208:	b530      	push	{r4, r5, lr}
    f20a:	0005      	movs	r5, r0
    f20c:	1a98      	subs	r0, r3, r2
    f20e:	4293      	cmp	r3, r2
    f210:	d111      	bne.n	f236 <__mcmp+0x32>
    f212:	0092      	lsls	r2, r2, #2
    f214:	3514      	adds	r5, #20
    f216:	3114      	adds	r1, #20
    f218:	18ab      	adds	r3, r5, r2
    f21a:	1889      	adds	r1, r1, r2
    f21c:	e001      	b.n	f222 <__mcmp+0x1e>
    f21e:	429d      	cmp	r5, r3
    f220:	d209      	bcs.n	f236 <__mcmp+0x32>
    f222:	3b04      	subs	r3, #4
    f224:	3904      	subs	r1, #4
    f226:	681a      	ldr	r2, [r3, #0]
    f228:	680c      	ldr	r4, [r1, #0]
    f22a:	42a2      	cmp	r2, r4
    f22c:	d0f7      	beq.n	f21e <__mcmp+0x1a>
    f22e:	42a2      	cmp	r2, r4
    f230:	4192      	sbcs	r2, r2
    f232:	2001      	movs	r0, #1
    f234:	4310      	orrs	r0, r2
    f236:	bd30      	pop	{r4, r5, pc}

0000f238 <__mdiff>:
    f238:	b5f0      	push	{r4, r5, r6, r7, lr}
    f23a:	464e      	mov	r6, r9
    f23c:	4645      	mov	r5, r8
    f23e:	46de      	mov	lr, fp
    f240:	4657      	mov	r7, sl
    f242:	b5e0      	push	{r5, r6, r7, lr}
    f244:	690b      	ldr	r3, [r1, #16]
    f246:	4688      	mov	r8, r1
    f248:	6911      	ldr	r1, [r2, #16]
    f24a:	4691      	mov	r9, r2
    f24c:	b083      	sub	sp, #12
    f24e:	1a5c      	subs	r4, r3, r1
    f250:	428b      	cmp	r3, r1
    f252:	d000      	beq.n	f256 <__mdiff+0x1e>
    f254:	e095      	b.n	f382 <__mdiff+0x14a>
    f256:	4646      	mov	r6, r8
    f258:	0089      	lsls	r1, r1, #2
    f25a:	3614      	adds	r6, #20
    f25c:	3214      	adds	r2, #20
    f25e:	1873      	adds	r3, r6, r1
    f260:	1852      	adds	r2, r2, r1
    f262:	e002      	b.n	f26a <__mdiff+0x32>
    f264:	429e      	cmp	r6, r3
    f266:	d300      	bcc.n	f26a <__mdiff+0x32>
    f268:	e08f      	b.n	f38a <__mdiff+0x152>
    f26a:	3b04      	subs	r3, #4
    f26c:	3a04      	subs	r2, #4
    f26e:	681d      	ldr	r5, [r3, #0]
    f270:	6811      	ldr	r1, [r2, #0]
    f272:	428d      	cmp	r5, r1
    f274:	d0f6      	beq.n	f264 <__mdiff+0x2c>
    f276:	d200      	bcs.n	f27a <__mdiff+0x42>
    f278:	e07e      	b.n	f378 <__mdiff+0x140>
    f27a:	4643      	mov	r3, r8
    f27c:	6859      	ldr	r1, [r3, #4]
    f27e:	f7ff fd05 	bl	ec8c <_Balloc>
    f282:	2800      	cmp	r0, #0
    f284:	d100      	bne.n	f288 <__mdiff+0x50>
    f286:	e08a      	b.n	f39e <__mdiff+0x166>
    f288:	4643      	mov	r3, r8
    f28a:	691a      	ldr	r2, [r3, #16]
    f28c:	2314      	movs	r3, #20
    f28e:	4443      	add	r3, r8
    f290:	469c      	mov	ip, r3
    f292:	60c4      	str	r4, [r0, #12]
    f294:	001c      	movs	r4, r3
    f296:	464b      	mov	r3, r9
    f298:	691b      	ldr	r3, [r3, #16]
    f29a:	0091      	lsls	r1, r2, #2
    f29c:	009b      	lsls	r3, r3, #2
    f29e:	4461      	add	r1, ip
    f2a0:	469c      	mov	ip, r3
    f2a2:	2314      	movs	r3, #20
    f2a4:	464f      	mov	r7, r9
    f2a6:	469a      	mov	sl, r3
    f2a8:	3714      	adds	r7, #20
    f2aa:	4482      	add	sl, r0
    f2ac:	4653      	mov	r3, sl
    f2ae:	44bc      	add	ip, r7
    f2b0:	468b      	mov	fp, r1
    f2b2:	46a2      	mov	sl, r4
    f2b4:	2614      	movs	r6, #20
    f2b6:	4664      	mov	r4, ip
    f2b8:	2100      	movs	r1, #0
    f2ba:	4694      	mov	ip, r2
    f2bc:	4642      	mov	r2, r8
    f2be:	4680      	mov	r8, r0
    f2c0:	9301      	str	r3, [sp, #4]
    f2c2:	5993      	ldr	r3, [r2, r6]
    f2c4:	cf01      	ldmia	r7!, {r0}
    f2c6:	041d      	lsls	r5, r3, #16
    f2c8:	0c2d      	lsrs	r5, r5, #16
    f2ca:	1869      	adds	r1, r5, r1
    f2cc:	0405      	lsls	r5, r0, #16
    f2ce:	0c2d      	lsrs	r5, r5, #16
    f2d0:	1b4d      	subs	r5, r1, r5
    f2d2:	0c01      	lsrs	r1, r0, #16
    f2d4:	4640      	mov	r0, r8
    f2d6:	0c1b      	lsrs	r3, r3, #16
    f2d8:	1a5b      	subs	r3, r3, r1
    f2da:	1429      	asrs	r1, r5, #16
    f2dc:	185b      	adds	r3, r3, r1
    f2de:	042d      	lsls	r5, r5, #16
    f2e0:	1419      	asrs	r1, r3, #16
    f2e2:	0c2d      	lsrs	r5, r5, #16
    f2e4:	041b      	lsls	r3, r3, #16
    f2e6:	432b      	orrs	r3, r5
    f2e8:	5183      	str	r3, [r0, r6]
    f2ea:	3604      	adds	r6, #4
    f2ec:	42bc      	cmp	r4, r7
    f2ee:	d8e8      	bhi.n	f2c2 <__mdiff+0x8a>
    f2f0:	4662      	mov	r2, ip
    f2f2:	46a4      	mov	ip, r4
    f2f4:	464d      	mov	r5, r9
    f2f6:	001c      	movs	r4, r3
    f2f8:	4663      	mov	r3, ip
    f2fa:	464e      	mov	r6, r9
    f2fc:	1b5d      	subs	r5, r3, r5
    f2fe:	3d15      	subs	r5, #21
    f300:	3615      	adds	r6, #21
    f302:	2300      	movs	r3, #0
    f304:	08ad      	lsrs	r5, r5, #2
    f306:	45b4      	cmp	ip, r6
    f308:	d300      	bcc.n	f30c <__mdiff+0xd4>
    f30a:	00ab      	lsls	r3, r5, #2
    f30c:	9f01      	ldr	r7, [sp, #4]
    f30e:	46b8      	mov	r8, r7
    f310:	2704      	movs	r7, #4
    f312:	4443      	add	r3, r8
    f314:	45b4      	cmp	ip, r6
    f316:	d301      	bcc.n	f31c <__mdiff+0xe4>
    f318:	3501      	adds	r5, #1
    f31a:	00af      	lsls	r7, r5, #2
    f31c:	9d01      	ldr	r5, [sp, #4]
    f31e:	44ba      	add	sl, r7
    f320:	46ac      	mov	ip, r5
    f322:	44bc      	add	ip, r7
    f324:	45d3      	cmp	fp, sl
    f326:	d918      	bls.n	f35a <__mdiff+0x122>
    f328:	4665      	mov	r5, ip
    f32a:	4657      	mov	r7, sl
    f32c:	465e      	mov	r6, fp
    f32e:	cf10      	ldmia	r7!, {r4}
    f330:	0423      	lsls	r3, r4, #16
    f332:	0c1b      	lsrs	r3, r3, #16
    f334:	185b      	adds	r3, r3, r1
    f336:	1419      	asrs	r1, r3, #16
    f338:	0c24      	lsrs	r4, r4, #16
    f33a:	1864      	adds	r4, r4, r1
    f33c:	041b      	lsls	r3, r3, #16
    f33e:	1421      	asrs	r1, r4, #16
    f340:	0c1b      	lsrs	r3, r3, #16
    f342:	0424      	lsls	r4, r4, #16
    f344:	431c      	orrs	r4, r3
    f346:	c510      	stmia	r5!, {r4}
    f348:	42be      	cmp	r6, r7
    f34a:	d8f0      	bhi.n	f32e <__mdiff+0xf6>
    f34c:	0031      	movs	r1, r6
    f34e:	4653      	mov	r3, sl
    f350:	3901      	subs	r1, #1
    f352:	1acb      	subs	r3, r1, r3
    f354:	089b      	lsrs	r3, r3, #2
    f356:	009b      	lsls	r3, r3, #2
    f358:	4463      	add	r3, ip
    f35a:	2c00      	cmp	r4, #0
    f35c:	d104      	bne.n	f368 <__mdiff+0x130>
    f35e:	3b04      	subs	r3, #4
    f360:	6819      	ldr	r1, [r3, #0]
    f362:	3a01      	subs	r2, #1
    f364:	2900      	cmp	r1, #0
    f366:	d0fa      	beq.n	f35e <__mdiff+0x126>
    f368:	6102      	str	r2, [r0, #16]
    f36a:	b003      	add	sp, #12
    f36c:	bcf0      	pop	{r4, r5, r6, r7}
    f36e:	46bb      	mov	fp, r7
    f370:	46b2      	mov	sl, r6
    f372:	46a9      	mov	r9, r5
    f374:	46a0      	mov	r8, r4
    f376:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f378:	4643      	mov	r3, r8
    f37a:	2401      	movs	r4, #1
    f37c:	46c8      	mov	r8, r9
    f37e:	4699      	mov	r9, r3
    f380:	e77b      	b.n	f27a <__mdiff+0x42>
    f382:	2c00      	cmp	r4, #0
    f384:	dbf8      	blt.n	f378 <__mdiff+0x140>
    f386:	2400      	movs	r4, #0
    f388:	e777      	b.n	f27a <__mdiff+0x42>
    f38a:	2100      	movs	r1, #0
    f38c:	f7ff fc7e 	bl	ec8c <_Balloc>
    f390:	2800      	cmp	r0, #0
    f392:	d00b      	beq.n	f3ac <__mdiff+0x174>
    f394:	2301      	movs	r3, #1
    f396:	6103      	str	r3, [r0, #16]
    f398:	2300      	movs	r3, #0
    f39a:	6143      	str	r3, [r0, #20]
    f39c:	e7e5      	b.n	f36a <__mdiff+0x132>
    f39e:	2190      	movs	r1, #144	; 0x90
    f3a0:	2200      	movs	r2, #0
    f3a2:	4b05      	ldr	r3, [pc, #20]	; (f3b8 <__mdiff+0x180>)
    f3a4:	4805      	ldr	r0, [pc, #20]	; (f3bc <__mdiff+0x184>)
    f3a6:	0089      	lsls	r1, r1, #2
    f3a8:	f002 fa0c 	bl	117c4 <__assert_func>
    f3ac:	2200      	movs	r2, #0
    f3ae:	4b02      	ldr	r3, [pc, #8]	; (f3b8 <__mdiff+0x180>)
    f3b0:	4903      	ldr	r1, [pc, #12]	; (f3c0 <__mdiff+0x188>)
    f3b2:	4802      	ldr	r0, [pc, #8]	; (f3bc <__mdiff+0x184>)
    f3b4:	f002 fa06 	bl	117c4 <__assert_func>
    f3b8:	000169a4 	.word	0x000169a4
    f3bc:	000169b8 	.word	0x000169b8
    f3c0:	00000232 	.word	0x00000232

0000f3c4 <__d2b>:
    f3c4:	b570      	push	{r4, r5, r6, lr}
    f3c6:	2101      	movs	r1, #1
    f3c8:	b082      	sub	sp, #8
    f3ca:	0015      	movs	r5, r2
    f3cc:	001c      	movs	r4, r3
    f3ce:	f7ff fc5d 	bl	ec8c <_Balloc>
    f3d2:	1e06      	subs	r6, r0, #0
    f3d4:	d04f      	beq.n	f476 <__d2b+0xb2>
    f3d6:	0323      	lsls	r3, r4, #12
    f3d8:	0064      	lsls	r4, r4, #1
    f3da:	0b1b      	lsrs	r3, r3, #12
    f3dc:	0d64      	lsrs	r4, r4, #21
    f3de:	d002      	beq.n	f3e6 <__d2b+0x22>
    f3e0:	2280      	movs	r2, #128	; 0x80
    f3e2:	0352      	lsls	r2, r2, #13
    f3e4:	4313      	orrs	r3, r2
    f3e6:	9301      	str	r3, [sp, #4]
    f3e8:	2d00      	cmp	r5, #0
    f3ea:	d117      	bne.n	f41c <__d2b+0x58>
    f3ec:	a801      	add	r0, sp, #4
    f3ee:	f7ff fcef 	bl	edd0 <__lo0bits>
    f3f2:	9b01      	ldr	r3, [sp, #4]
    f3f4:	2501      	movs	r5, #1
    f3f6:	6173      	str	r3, [r6, #20]
    f3f8:	2301      	movs	r3, #1
    f3fa:	3020      	adds	r0, #32
    f3fc:	6133      	str	r3, [r6, #16]
    f3fe:	2c00      	cmp	r4, #0
    f400:	d024      	beq.n	f44c <__d2b+0x88>
    f402:	4b20      	ldr	r3, [pc, #128]	; (f484 <__d2b+0xc0>)
    f404:	469c      	mov	ip, r3
    f406:	9b06      	ldr	r3, [sp, #24]
    f408:	4464      	add	r4, ip
    f40a:	1824      	adds	r4, r4, r0
    f40c:	601c      	str	r4, [r3, #0]
    f40e:	2335      	movs	r3, #53	; 0x35
    f410:	1a18      	subs	r0, r3, r0
    f412:	9b07      	ldr	r3, [sp, #28]
    f414:	6018      	str	r0, [r3, #0]
    f416:	0030      	movs	r0, r6
    f418:	b002      	add	sp, #8
    f41a:	bd70      	pop	{r4, r5, r6, pc}
    f41c:	4668      	mov	r0, sp
    f41e:	9500      	str	r5, [sp, #0]
    f420:	f7ff fcd6 	bl	edd0 <__lo0bits>
    f424:	2800      	cmp	r0, #0
    f426:	d022      	beq.n	f46e <__d2b+0xaa>
    f428:	9d01      	ldr	r5, [sp, #4]
    f42a:	2320      	movs	r3, #32
    f42c:	002a      	movs	r2, r5
    f42e:	1a1b      	subs	r3, r3, r0
    f430:	409a      	lsls	r2, r3
    f432:	0013      	movs	r3, r2
    f434:	40c5      	lsrs	r5, r0
    f436:	9a00      	ldr	r2, [sp, #0]
    f438:	9501      	str	r5, [sp, #4]
    f43a:	4313      	orrs	r3, r2
    f43c:	6173      	str	r3, [r6, #20]
    f43e:	61b5      	str	r5, [r6, #24]
    f440:	1e6b      	subs	r3, r5, #1
    f442:	419d      	sbcs	r5, r3
    f444:	3501      	adds	r5, #1
    f446:	6135      	str	r5, [r6, #16]
    f448:	2c00      	cmp	r4, #0
    f44a:	d1da      	bne.n	f402 <__d2b+0x3e>
    f44c:	4b0e      	ldr	r3, [pc, #56]	; (f488 <__d2b+0xc4>)
    f44e:	469c      	mov	ip, r3
    f450:	9b06      	ldr	r3, [sp, #24]
    f452:	4460      	add	r0, ip
    f454:	6018      	str	r0, [r3, #0]
    f456:	4b0d      	ldr	r3, [pc, #52]	; (f48c <__d2b+0xc8>)
    f458:	18eb      	adds	r3, r5, r3
    f45a:	009b      	lsls	r3, r3, #2
    f45c:	18f3      	adds	r3, r6, r3
    f45e:	6958      	ldr	r0, [r3, #20]
    f460:	f7ff fc9a 	bl	ed98 <__hi0bits>
    f464:	016d      	lsls	r5, r5, #5
    f466:	9b07      	ldr	r3, [sp, #28]
    f468:	1a2d      	subs	r5, r5, r0
    f46a:	601d      	str	r5, [r3, #0]
    f46c:	e7d3      	b.n	f416 <__d2b+0x52>
    f46e:	9b00      	ldr	r3, [sp, #0]
    f470:	9d01      	ldr	r5, [sp, #4]
    f472:	6173      	str	r3, [r6, #20]
    f474:	e7e3      	b.n	f43e <__d2b+0x7a>
    f476:	2200      	movs	r2, #0
    f478:	4b05      	ldr	r3, [pc, #20]	; (f490 <__d2b+0xcc>)
    f47a:	4906      	ldr	r1, [pc, #24]	; (f494 <__d2b+0xd0>)
    f47c:	4806      	ldr	r0, [pc, #24]	; (f498 <__d2b+0xd4>)
    f47e:	f002 f9a1 	bl	117c4 <__assert_func>
    f482:	46c0      	nop			; (mov r8, r8)
    f484:	fffffbcd 	.word	0xfffffbcd
    f488:	fffffbce 	.word	0xfffffbce
    f48c:	3fffffff 	.word	0x3fffffff
    f490:	000169a4 	.word	0x000169a4
    f494:	0000030a 	.word	0x0000030a
    f498:	000169b8 	.word	0x000169b8

0000f49c <sprintf>:
    f49c:	b40e      	push	{r1, r2, r3}
    f49e:	b500      	push	{lr}
    f4a0:	490b      	ldr	r1, [pc, #44]	; (f4d0 <sprintf+0x34>)
    f4a2:	b09c      	sub	sp, #112	; 0x70
    f4a4:	9107      	str	r1, [sp, #28]
    f4a6:	9104      	str	r1, [sp, #16]
    f4a8:	490a      	ldr	r1, [pc, #40]	; (f4d4 <sprintf+0x38>)
    f4aa:	ab1d      	add	r3, sp, #116	; 0x74
    f4ac:	9105      	str	r1, [sp, #20]
    f4ae:	490a      	ldr	r1, [pc, #40]	; (f4d8 <sprintf+0x3c>)
    f4b0:	cb04      	ldmia	r3!, {r2}
    f4b2:	9002      	str	r0, [sp, #8]
    f4b4:	9006      	str	r0, [sp, #24]
    f4b6:	6808      	ldr	r0, [r1, #0]
    f4b8:	a902      	add	r1, sp, #8
    f4ba:	9301      	str	r3, [sp, #4]
    f4bc:	f000 fb9c 	bl	fbf8 <_svfprintf_r>
    f4c0:	2300      	movs	r3, #0
    f4c2:	9a02      	ldr	r2, [sp, #8]
    f4c4:	7013      	strb	r3, [r2, #0]
    f4c6:	b01c      	add	sp, #112	; 0x70
    f4c8:	bc08      	pop	{r3}
    f4ca:	b003      	add	sp, #12
    f4cc:	4718      	bx	r3
    f4ce:	46c0      	nop			; (mov r8, r8)
    f4d0:	7fffffff 	.word	0x7fffffff
    f4d4:	ffff0208 	.word	0xffff0208
    f4d8:	0001737c 	.word	0x0001737c

0000f4dc <__sread>:
    f4dc:	b570      	push	{r4, r5, r6, lr}
    f4de:	000c      	movs	r4, r1
    f4e0:	250e      	movs	r5, #14
    f4e2:	5f49      	ldrsh	r1, [r1, r5]
    f4e4:	f7fe fb8a 	bl	dbfc <_read_r>
    f4e8:	2800      	cmp	r0, #0
    f4ea:	db03      	blt.n	f4f4 <__sread+0x18>
    f4ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f4ee:	181b      	adds	r3, r3, r0
    f4f0:	6523      	str	r3, [r4, #80]	; 0x50
    f4f2:	bd70      	pop	{r4, r5, r6, pc}
    f4f4:	89a3      	ldrh	r3, [r4, #12]
    f4f6:	4a02      	ldr	r2, [pc, #8]	; (f500 <__sread+0x24>)
    f4f8:	4013      	ands	r3, r2
    f4fa:	81a3      	strh	r3, [r4, #12]
    f4fc:	e7f9      	b.n	f4f2 <__sread+0x16>
    f4fe:	46c0      	nop			; (mov r8, r8)
    f500:	ffffefff 	.word	0xffffefff

0000f504 <__swrite>:
    f504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f506:	000c      	movs	r4, r1
    f508:	001f      	movs	r7, r3
    f50a:	230c      	movs	r3, #12
    f50c:	5ec9      	ldrsh	r1, [r1, r3]
    f50e:	0005      	movs	r5, r0
    f510:	0016      	movs	r6, r2
    f512:	05cb      	lsls	r3, r1, #23
    f514:	d40a      	bmi.n	f52c <__swrite+0x28>
    f516:	4b0a      	ldr	r3, [pc, #40]	; (f540 <__swrite+0x3c>)
    f518:	0032      	movs	r2, r6
    f51a:	4019      	ands	r1, r3
    f51c:	0028      	movs	r0, r5
    f51e:	81a1      	strh	r1, [r4, #12]
    f520:	230e      	movs	r3, #14
    f522:	5ee1      	ldrsh	r1, [r4, r3]
    f524:	003b      	movs	r3, r7
    f526:	f7fe fb6b 	bl	dc00 <_write_r>
    f52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f52c:	230e      	movs	r3, #14
    f52e:	5ee1      	ldrsh	r1, [r4, r3]
    f530:	2200      	movs	r2, #0
    f532:	2302      	movs	r3, #2
    f534:	f7fe fb60 	bl	dbf8 <_lseek_r>
    f538:	230c      	movs	r3, #12
    f53a:	5ee1      	ldrsh	r1, [r4, r3]
    f53c:	e7eb      	b.n	f516 <__swrite+0x12>
    f53e:	46c0      	nop			; (mov r8, r8)
    f540:	ffffefff 	.word	0xffffefff

0000f544 <__sseek>:
    f544:	b570      	push	{r4, r5, r6, lr}
    f546:	000c      	movs	r4, r1
    f548:	250e      	movs	r5, #14
    f54a:	5f49      	ldrsh	r1, [r1, r5]
    f54c:	f7fe fb54 	bl	dbf8 <_lseek_r>
    f550:	1c43      	adds	r3, r0, #1
    f552:	d006      	beq.n	f562 <__sseek+0x1e>
    f554:	2380      	movs	r3, #128	; 0x80
    f556:	89a2      	ldrh	r2, [r4, #12]
    f558:	015b      	lsls	r3, r3, #5
    f55a:	4313      	orrs	r3, r2
    f55c:	81a3      	strh	r3, [r4, #12]
    f55e:	6520      	str	r0, [r4, #80]	; 0x50
    f560:	bd70      	pop	{r4, r5, r6, pc}
    f562:	89a3      	ldrh	r3, [r4, #12]
    f564:	4a01      	ldr	r2, [pc, #4]	; (f56c <__sseek+0x28>)
    f566:	4013      	ands	r3, r2
    f568:	81a3      	strh	r3, [r4, #12]
    f56a:	e7f9      	b.n	f560 <__sseek+0x1c>
    f56c:	ffffefff 	.word	0xffffefff

0000f570 <__sclose>:
    f570:	b510      	push	{r4, lr}
    f572:	230e      	movs	r3, #14
    f574:	5ec9      	ldrsh	r1, [r1, r3]
    f576:	f7fe fb2d 	bl	dbd4 <_close_r>
    f57a:	bd10      	pop	{r4, pc}

0000f57c <strchr>:
    f57c:	b2ca      	uxtb	r2, r1
    f57e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f580:	2a00      	cmp	r2, #0
    f582:	d035      	beq.n	f5f0 <strchr+0x74>
    f584:	2403      	movs	r4, #3
    f586:	0783      	lsls	r3, r0, #30
    f588:	d12d      	bne.n	f5e6 <strchr+0x6a>
    f58a:	25ff      	movs	r5, #255	; 0xff
    f58c:	4029      	ands	r1, r5
    f58e:	020d      	lsls	r5, r1, #8
    f590:	4329      	orrs	r1, r5
    f592:	040d      	lsls	r5, r1, #16
    f594:	430d      	orrs	r5, r1
    f596:	0029      	movs	r1, r5
    f598:	6804      	ldr	r4, [r0, #0]
    f59a:	4e26      	ldr	r6, [pc, #152]	; (f634 <strchr+0xb8>)
    f59c:	4061      	eors	r1, r4
    f59e:	198b      	adds	r3, r1, r6
    f5a0:	438b      	bics	r3, r1
    f5a2:	19a1      	adds	r1, r4, r6
    f5a4:	43a1      	bics	r1, r4
    f5a6:	4e24      	ldr	r6, [pc, #144]	; (f638 <strchr+0xbc>)
    f5a8:	430b      	orrs	r3, r1
    f5aa:	4233      	tst	r3, r6
    f5ac:	d111      	bne.n	f5d2 <strchr+0x56>
    f5ae:	6841      	ldr	r1, [r0, #4]
    f5b0:	4f20      	ldr	r7, [pc, #128]	; (f634 <strchr+0xb8>)
    f5b2:	000c      	movs	r4, r1
    f5b4:	19cb      	adds	r3, r1, r7
    f5b6:	406c      	eors	r4, r5
    f5b8:	438b      	bics	r3, r1
    f5ba:	19e1      	adds	r1, r4, r7
    f5bc:	43a1      	bics	r1, r4
    f5be:	430b      	orrs	r3, r1
    f5c0:	3004      	adds	r0, #4
    f5c2:	4233      	tst	r3, r6
    f5c4:	d0f3      	beq.n	f5ae <strchr+0x32>
    f5c6:	7803      	ldrb	r3, [r0, #0]
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	d005      	beq.n	f5d8 <strchr+0x5c>
    f5cc:	429a      	cmp	r2, r3
    f5ce:	d004      	beq.n	f5da <strchr+0x5e>
    f5d0:	3001      	adds	r0, #1
    f5d2:	7803      	ldrb	r3, [r0, #0]
    f5d4:	2b00      	cmp	r3, #0
    f5d6:	d1f9      	bne.n	f5cc <strchr+0x50>
    f5d8:	2000      	movs	r0, #0
    f5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f5dc:	4293      	cmp	r3, r2
    f5de:	d0fc      	beq.n	f5da <strchr+0x5e>
    f5e0:	3001      	adds	r0, #1
    f5e2:	4220      	tst	r0, r4
    f5e4:	d0d1      	beq.n	f58a <strchr+0xe>
    f5e6:	7803      	ldrb	r3, [r0, #0]
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	d1f7      	bne.n	f5dc <strchr+0x60>
    f5ec:	2000      	movs	r0, #0
    f5ee:	e7f4      	b.n	f5da <strchr+0x5e>
    f5f0:	0783      	lsls	r3, r0, #30
    f5f2:	d008      	beq.n	f606 <strchr+0x8a>
    f5f4:	2203      	movs	r2, #3
    f5f6:	e002      	b.n	f5fe <strchr+0x82>
    f5f8:	3001      	adds	r0, #1
    f5fa:	4210      	tst	r0, r2
    f5fc:	d003      	beq.n	f606 <strchr+0x8a>
    f5fe:	7803      	ldrb	r3, [r0, #0]
    f600:	2b00      	cmp	r3, #0
    f602:	d1f9      	bne.n	f5f8 <strchr+0x7c>
    f604:	e7e9      	b.n	f5da <strchr+0x5e>
    f606:	6802      	ldr	r2, [r0, #0]
    f608:	4b0a      	ldr	r3, [pc, #40]	; (f634 <strchr+0xb8>)
    f60a:	490b      	ldr	r1, [pc, #44]	; (f638 <strchr+0xbc>)
    f60c:	18d3      	adds	r3, r2, r3
    f60e:	4393      	bics	r3, r2
    f610:	420b      	tst	r3, r1
    f612:	d106      	bne.n	f622 <strchr+0xa6>
    f614:	6842      	ldr	r2, [r0, #4]
    f616:	4b07      	ldr	r3, [pc, #28]	; (f634 <strchr+0xb8>)
    f618:	3004      	adds	r0, #4
    f61a:	18d3      	adds	r3, r2, r3
    f61c:	4393      	bics	r3, r2
    f61e:	420b      	tst	r3, r1
    f620:	d0f8      	beq.n	f614 <strchr+0x98>
    f622:	7803      	ldrb	r3, [r0, #0]
    f624:	2b00      	cmp	r3, #0
    f626:	d0d8      	beq.n	f5da <strchr+0x5e>
    f628:	7843      	ldrb	r3, [r0, #1]
    f62a:	3001      	adds	r0, #1
    f62c:	2b00      	cmp	r3, #0
    f62e:	d1fb      	bne.n	f628 <strchr+0xac>
    f630:	e7d3      	b.n	f5da <strchr+0x5e>
    f632:	46c0      	nop			; (mov r8, r8)
    f634:	fefefeff 	.word	0xfefefeff
    f638:	80808080 	.word	0x80808080

0000f63c <strlen>:
    f63c:	b510      	push	{r4, lr}
    f63e:	0783      	lsls	r3, r0, #30
    f640:	d00a      	beq.n	f658 <strlen+0x1c>
    f642:	0003      	movs	r3, r0
    f644:	2103      	movs	r1, #3
    f646:	e002      	b.n	f64e <strlen+0x12>
    f648:	3301      	adds	r3, #1
    f64a:	420b      	tst	r3, r1
    f64c:	d005      	beq.n	f65a <strlen+0x1e>
    f64e:	781a      	ldrb	r2, [r3, #0]
    f650:	2a00      	cmp	r2, #0
    f652:	d1f9      	bne.n	f648 <strlen+0xc>
    f654:	1a18      	subs	r0, r3, r0
    f656:	bd10      	pop	{r4, pc}
    f658:	0003      	movs	r3, r0
    f65a:	6819      	ldr	r1, [r3, #0]
    f65c:	4a0c      	ldr	r2, [pc, #48]	; (f690 <strlen+0x54>)
    f65e:	4c0d      	ldr	r4, [pc, #52]	; (f694 <strlen+0x58>)
    f660:	188a      	adds	r2, r1, r2
    f662:	438a      	bics	r2, r1
    f664:	4222      	tst	r2, r4
    f666:	d10f      	bne.n	f688 <strlen+0x4c>
    f668:	6859      	ldr	r1, [r3, #4]
    f66a:	4a09      	ldr	r2, [pc, #36]	; (f690 <strlen+0x54>)
    f66c:	3304      	adds	r3, #4
    f66e:	188a      	adds	r2, r1, r2
    f670:	438a      	bics	r2, r1
    f672:	4222      	tst	r2, r4
    f674:	d108      	bne.n	f688 <strlen+0x4c>
    f676:	6859      	ldr	r1, [r3, #4]
    f678:	4a05      	ldr	r2, [pc, #20]	; (f690 <strlen+0x54>)
    f67a:	3304      	adds	r3, #4
    f67c:	188a      	adds	r2, r1, r2
    f67e:	438a      	bics	r2, r1
    f680:	4222      	tst	r2, r4
    f682:	d0f1      	beq.n	f668 <strlen+0x2c>
    f684:	e000      	b.n	f688 <strlen+0x4c>
    f686:	3301      	adds	r3, #1
    f688:	781a      	ldrb	r2, [r3, #0]
    f68a:	2a00      	cmp	r2, #0
    f68c:	d1fb      	bne.n	f686 <strlen+0x4a>
    f68e:	e7e1      	b.n	f654 <strlen+0x18>
    f690:	fefefeff 	.word	0xfefefeff
    f694:	80808080 	.word	0x80808080

0000f698 <strncmp>:
    f698:	b530      	push	{r4, r5, lr}
    f69a:	2a00      	cmp	r2, #0
    f69c:	d026      	beq.n	f6ec <strncmp+0x54>
    f69e:	0003      	movs	r3, r0
    f6a0:	430b      	orrs	r3, r1
    f6a2:	079b      	lsls	r3, r3, #30
    f6a4:	d124      	bne.n	f6f0 <strncmp+0x58>
    f6a6:	2a03      	cmp	r2, #3
    f6a8:	d922      	bls.n	f6f0 <strncmp+0x58>
    f6aa:	4d16      	ldr	r5, [pc, #88]	; (f704 <strncmp+0x6c>)
    f6ac:	e00b      	b.n	f6c6 <strncmp+0x2e>
    f6ae:	3a04      	subs	r2, #4
    f6b0:	2a00      	cmp	r2, #0
    f6b2:	d01b      	beq.n	f6ec <strncmp+0x54>
    f6b4:	4c14      	ldr	r4, [pc, #80]	; (f708 <strncmp+0x70>)
    f6b6:	191c      	adds	r4, r3, r4
    f6b8:	439c      	bics	r4, r3
    f6ba:	422c      	tst	r4, r5
    f6bc:	d116      	bne.n	f6ec <strncmp+0x54>
    f6be:	3004      	adds	r0, #4
    f6c0:	3104      	adds	r1, #4
    f6c2:	2a03      	cmp	r2, #3
    f6c4:	d914      	bls.n	f6f0 <strncmp+0x58>
    f6c6:	6803      	ldr	r3, [r0, #0]
    f6c8:	680c      	ldr	r4, [r1, #0]
    f6ca:	42a3      	cmp	r3, r4
    f6cc:	d0ef      	beq.n	f6ae <strncmp+0x16>
    f6ce:	7804      	ldrb	r4, [r0, #0]
    f6d0:	780d      	ldrb	r5, [r1, #0]
    f6d2:	42ac      	cmp	r4, r5
    f6d4:	d113      	bne.n	f6fe <strncmp+0x66>
    f6d6:	2301      	movs	r3, #1
    f6d8:	e006      	b.n	f6e8 <strncmp+0x50>
    f6da:	5cc4      	ldrb	r4, [r0, r3]
    f6dc:	5ccd      	ldrb	r5, [r1, r3]
    f6de:	42ac      	cmp	r4, r5
    f6e0:	d10d      	bne.n	f6fe <strncmp+0x66>
    f6e2:	3301      	adds	r3, #1
    f6e4:	4293      	cmp	r3, r2
    f6e6:	d001      	beq.n	f6ec <strncmp+0x54>
    f6e8:	2c00      	cmp	r4, #0
    f6ea:	d1f6      	bne.n	f6da <strncmp+0x42>
    f6ec:	2000      	movs	r0, #0
    f6ee:	bd30      	pop	{r4, r5, pc}
    f6f0:	7804      	ldrb	r4, [r0, #0]
    f6f2:	780d      	ldrb	r5, [r1, #0]
    f6f4:	42a5      	cmp	r5, r4
    f6f6:	d102      	bne.n	f6fe <strncmp+0x66>
    f6f8:	2a01      	cmp	r2, #1
    f6fa:	d1ec      	bne.n	f6d6 <strncmp+0x3e>
    f6fc:	e7f6      	b.n	f6ec <strncmp+0x54>
    f6fe:	1b60      	subs	r0, r4, r5
    f700:	e7f5      	b.n	f6ee <strncmp+0x56>
    f702:	46c0      	nop			; (mov r8, r8)
    f704:	80808080 	.word	0x80808080
    f708:	fefefeff 	.word	0xfefefeff

0000f70c <strncpy>:
    f70c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f70e:	000c      	movs	r4, r1
    f710:	4304      	orrs	r4, r0
    f712:	0003      	movs	r3, r0
    f714:	0007      	movs	r7, r0
    f716:	07a4      	lsls	r4, r4, #30
    f718:	d112      	bne.n	f740 <strncpy+0x34>
    f71a:	2a03      	cmp	r2, #3
    f71c:	d910      	bls.n	f740 <strncpy+0x34>
    f71e:	4c14      	ldr	r4, [pc, #80]	; (f770 <strncpy+0x64>)
    f720:	46a4      	mov	ip, r4
    f722:	4667      	mov	r7, ip
    f724:	680d      	ldr	r5, [r1, #0]
    f726:	4c13      	ldr	r4, [pc, #76]	; (f774 <strncpy+0x68>)
    f728:	001e      	movs	r6, r3
    f72a:	192c      	adds	r4, r5, r4
    f72c:	43ac      	bics	r4, r5
    f72e:	423c      	tst	r4, r7
    f730:	d11b      	bne.n	f76a <strncpy+0x5e>
    f732:	3304      	adds	r3, #4
    f734:	3a04      	subs	r2, #4
    f736:	001f      	movs	r7, r3
    f738:	3104      	adds	r1, #4
    f73a:	6035      	str	r5, [r6, #0]
    f73c:	2a03      	cmp	r2, #3
    f73e:	d8f0      	bhi.n	f722 <strncpy+0x16>
    f740:	2400      	movs	r4, #0
    f742:	18be      	adds	r6, r7, r2
    f744:	e006      	b.n	f754 <strncpy+0x48>
    f746:	5d0d      	ldrb	r5, [r1, r4]
    f748:	3a01      	subs	r2, #1
    f74a:	553d      	strb	r5, [r7, r4]
    f74c:	1ab3      	subs	r3, r6, r2
    f74e:	3401      	adds	r4, #1
    f750:	2d00      	cmp	r5, #0
    f752:	d002      	beq.n	f75a <strncpy+0x4e>
    f754:	2a00      	cmp	r2, #0
    f756:	d1f6      	bne.n	f746 <strncpy+0x3a>
    f758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f75a:	2100      	movs	r1, #0
    f75c:	2a00      	cmp	r2, #0
    f75e:	d0fb      	beq.n	f758 <strncpy+0x4c>
    f760:	7019      	strb	r1, [r3, #0]
    f762:	3301      	adds	r3, #1
    f764:	429e      	cmp	r6, r3
    f766:	d1fb      	bne.n	f760 <strncpy+0x54>
    f768:	e7f6      	b.n	f758 <strncpy+0x4c>
    f76a:	001f      	movs	r7, r3
    f76c:	e7e8      	b.n	f740 <strncpy+0x34>
    f76e:	46c0      	nop			; (mov r8, r8)
    f770:	80808080 	.word	0x80808080
    f774:	fefefeff 	.word	0xfefefeff

0000f778 <_strtol_l.part.0>:
    f778:	b5f0      	push	{r4, r5, r6, r7, lr}
    f77a:	4657      	mov	r7, sl
    f77c:	464e      	mov	r6, r9
    f77e:	4645      	mov	r5, r8
    f780:	46de      	mov	lr, fp
    f782:	4682      	mov	sl, r0
    f784:	b5e0      	push	{r5, r6, r7, lr}
    f786:	4691      	mov	r9, r2
    f788:	4688      	mov	r8, r1
    f78a:	001e      	movs	r6, r3
    f78c:	000a      	movs	r2, r1
    f78e:	2008      	movs	r0, #8
    f790:	4f48      	ldr	r7, [pc, #288]	; (f8b4 <_strtol_l.part.0+0x13c>)
    f792:	b083      	sub	sp, #12
    f794:	0013      	movs	r3, r2
    f796:	781c      	ldrb	r4, [r3, #0]
    f798:	1c55      	adds	r5, r2, #1
    f79a:	5d39      	ldrb	r1, [r7, r4]
    f79c:	002a      	movs	r2, r5
    f79e:	4208      	tst	r0, r1
    f7a0:	d1f8      	bne.n	f794 <_strtol_l.part.0+0x1c>
    f7a2:	2c2d      	cmp	r4, #45	; 0x2d
    f7a4:	d066      	beq.n	f874 <_strtol_l.part.0+0xfc>
    f7a6:	2c2b      	cmp	r4, #43	; 0x2b
    f7a8:	d029      	beq.n	f7fe <_strtol_l.part.0+0x86>
    f7aa:	4b43      	ldr	r3, [pc, #268]	; (f8b8 <_strtol_l.part.0+0x140>)
    f7ac:	469b      	mov	fp, r3
    f7ae:	2300      	movs	r3, #0
    f7b0:	9301      	str	r3, [sp, #4]
    f7b2:	2e00      	cmp	r6, #0
    f7b4:	d02b      	beq.n	f80e <_strtol_l.part.0+0x96>
    f7b6:	2e10      	cmp	r6, #16
    f7b8:	d064      	beq.n	f884 <_strtol_l.part.0+0x10c>
    f7ba:	0037      	movs	r7, r6
    f7bc:	0039      	movs	r1, r7
    f7be:	4658      	mov	r0, fp
    f7c0:	f7f4 fdcc 	bl	435c <__aeabi_uidivmod>
    f7c4:	002b      	movs	r3, r5
    f7c6:	468c      	mov	ip, r1
    f7c8:	2200      	movs	r2, #0
    f7ca:	2100      	movs	r1, #0
    f7cc:	e007      	b.n	f7de <_strtol_l.part.0+0x66>
    f7ce:	4288      	cmp	r0, r1
    f7d0:	d312      	bcc.n	f7f8 <_strtol_l.part.0+0x80>
    f7d2:	d03f      	beq.n	f854 <_strtol_l.part.0+0xdc>
    f7d4:	2201      	movs	r2, #1
    f7d6:	4379      	muls	r1, r7
    f7d8:	1869      	adds	r1, r5, r1
    f7da:	781c      	ldrb	r4, [r3, #0]
    f7dc:	3301      	adds	r3, #1
    f7de:	0025      	movs	r5, r4
    f7e0:	3d30      	subs	r5, #48	; 0x30
    f7e2:	2d09      	cmp	r5, #9
    f7e4:	d904      	bls.n	f7f0 <_strtol_l.part.0+0x78>
    f7e6:	3d11      	subs	r5, #17
    f7e8:	2d19      	cmp	r5, #25
    f7ea:	d815      	bhi.n	f818 <_strtol_l.part.0+0xa0>
    f7ec:	3c37      	subs	r4, #55	; 0x37
    f7ee:	0025      	movs	r5, r4
    f7f0:	42ae      	cmp	r6, r5
    f7f2:	dd19      	ble.n	f828 <_strtol_l.part.0+0xb0>
    f7f4:	2a00      	cmp	r2, #0
    f7f6:	daea      	bge.n	f7ce <_strtol_l.part.0+0x56>
    f7f8:	2201      	movs	r2, #1
    f7fa:	4252      	negs	r2, r2
    f7fc:	e7ed      	b.n	f7da <_strtol_l.part.0+0x62>
    f7fe:	782c      	ldrb	r4, [r5, #0]
    f800:	1c9d      	adds	r5, r3, #2
    f802:	4b2d      	ldr	r3, [pc, #180]	; (f8b8 <_strtol_l.part.0+0x140>)
    f804:	469b      	mov	fp, r3
    f806:	2300      	movs	r3, #0
    f808:	9301      	str	r3, [sp, #4]
    f80a:	2e00      	cmp	r6, #0
    f80c:	d1d3      	bne.n	f7b6 <_strtol_l.part.0+0x3e>
    f80e:	2c30      	cmp	r4, #48	; 0x30
    f810:	d046      	beq.n	f8a0 <_strtol_l.part.0+0x128>
    f812:	270a      	movs	r7, #10
    f814:	260a      	movs	r6, #10
    f816:	e7d1      	b.n	f7bc <_strtol_l.part.0+0x44>
    f818:	0025      	movs	r5, r4
    f81a:	3d61      	subs	r5, #97	; 0x61
    f81c:	2d19      	cmp	r5, #25
    f81e:	d803      	bhi.n	f828 <_strtol_l.part.0+0xb0>
    f820:	3c57      	subs	r4, #87	; 0x57
    f822:	0025      	movs	r5, r4
    f824:	42ae      	cmp	r6, r5
    f826:	dce5      	bgt.n	f7f4 <_strtol_l.part.0+0x7c>
    f828:	2a00      	cmp	r2, #0
    f82a:	db18      	blt.n	f85e <_strtol_l.part.0+0xe6>
    f82c:	9801      	ldr	r0, [sp, #4]
    f82e:	2800      	cmp	r0, #0
    f830:	d000      	beq.n	f834 <_strtol_l.part.0+0xbc>
    f832:	4249      	negs	r1, r1
    f834:	4648      	mov	r0, r9
    f836:	2800      	cmp	r0, #0
    f838:	d004      	beq.n	f844 <_strtol_l.part.0+0xcc>
    f83a:	2a00      	cmp	r2, #0
    f83c:	d138      	bne.n	f8b0 <_strtol_l.part.0+0x138>
    f83e:	464b      	mov	r3, r9
    f840:	4642      	mov	r2, r8
    f842:	601a      	str	r2, [r3, #0]
    f844:	0008      	movs	r0, r1
    f846:	b003      	add	sp, #12
    f848:	bcf0      	pop	{r4, r5, r6, r7}
    f84a:	46bb      	mov	fp, r7
    f84c:	46b2      	mov	sl, r6
    f84e:	46a9      	mov	r9, r5
    f850:	46a0      	mov	r8, r4
    f852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f854:	45ac      	cmp	ip, r5
    f856:	dabd      	bge.n	f7d4 <_strtol_l.part.0+0x5c>
    f858:	2201      	movs	r2, #1
    f85a:	4252      	negs	r2, r2
    f85c:	e7bd      	b.n	f7da <_strtol_l.part.0+0x62>
    f85e:	2222      	movs	r2, #34	; 0x22
    f860:	4651      	mov	r1, sl
    f862:	600a      	str	r2, [r1, #0]
    f864:	464a      	mov	r2, r9
    f866:	4659      	mov	r1, fp
    f868:	2a00      	cmp	r2, #0
    f86a:	d0eb      	beq.n	f844 <_strtol_l.part.0+0xcc>
    f86c:	3b01      	subs	r3, #1
    f86e:	4698      	mov	r8, r3
    f870:	4659      	mov	r1, fp
    f872:	e7e4      	b.n	f83e <_strtol_l.part.0+0xc6>
    f874:	782c      	ldrb	r4, [r5, #0]
    f876:	1c9d      	adds	r5, r3, #2
    f878:	2380      	movs	r3, #128	; 0x80
    f87a:	061b      	lsls	r3, r3, #24
    f87c:	469b      	mov	fp, r3
    f87e:	2301      	movs	r3, #1
    f880:	9301      	str	r3, [sp, #4]
    f882:	e796      	b.n	f7b2 <_strtol_l.part.0+0x3a>
    f884:	2c30      	cmp	r4, #48	; 0x30
    f886:	d104      	bne.n	f892 <_strtol_l.part.0+0x11a>
    f888:	2220      	movs	r2, #32
    f88a:	782b      	ldrb	r3, [r5, #0]
    f88c:	4393      	bics	r3, r2
    f88e:	2b58      	cmp	r3, #88	; 0x58
    f890:	d001      	beq.n	f896 <_strtol_l.part.0+0x11e>
    f892:	2710      	movs	r7, #16
    f894:	e792      	b.n	f7bc <_strtol_l.part.0+0x44>
    f896:	786c      	ldrb	r4, [r5, #1]
    f898:	2710      	movs	r7, #16
    f89a:	2610      	movs	r6, #16
    f89c:	3502      	adds	r5, #2
    f89e:	e78d      	b.n	f7bc <_strtol_l.part.0+0x44>
    f8a0:	2220      	movs	r2, #32
    f8a2:	782b      	ldrb	r3, [r5, #0]
    f8a4:	4393      	bics	r3, r2
    f8a6:	2b58      	cmp	r3, #88	; 0x58
    f8a8:	d0f5      	beq.n	f896 <_strtol_l.part.0+0x11e>
    f8aa:	2708      	movs	r7, #8
    f8ac:	2608      	movs	r6, #8
    f8ae:	e785      	b.n	f7bc <_strtol_l.part.0+0x44>
    f8b0:	468b      	mov	fp, r1
    f8b2:	e7db      	b.n	f86c <_strtol_l.part.0+0xf4>
    f8b4:	00016d41 	.word	0x00016d41
    f8b8:	7fffffff 	.word	0x7fffffff

0000f8bc <strtol>:
    f8bc:	0013      	movs	r3, r2
    f8be:	b510      	push	{r4, lr}
    f8c0:	2a01      	cmp	r2, #1
    f8c2:	d009      	beq.n	f8d8 <strtol+0x1c>
    f8c4:	2a24      	cmp	r2, #36	; 0x24
    f8c6:	d807      	bhi.n	f8d8 <strtol+0x1c>
    f8c8:	4a06      	ldr	r2, [pc, #24]	; (f8e4 <strtol+0x28>)
    f8ca:	6814      	ldr	r4, [r2, #0]
    f8cc:	000a      	movs	r2, r1
    f8ce:	0001      	movs	r1, r0
    f8d0:	0020      	movs	r0, r4
    f8d2:	f7ff ff51 	bl	f778 <_strtol_l.part.0>
    f8d6:	e004      	b.n	f8e2 <strtol+0x26>
    f8d8:	f003 f818 	bl	1290c <__errno>
    f8dc:	2316      	movs	r3, #22
    f8de:	6003      	str	r3, [r0, #0]
    f8e0:	2000      	movs	r0, #0
    f8e2:	bd10      	pop	{r4, pc}
    f8e4:	0001737c 	.word	0x0001737c

0000f8e8 <_strtoll_l.constprop.0>:
    f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ea:	46de      	mov	lr, fp
    f8ec:	4657      	mov	r7, sl
    f8ee:	464e      	mov	r6, r9
    f8f0:	4645      	mov	r5, r8
    f8f2:	b5e0      	push	{r5, r6, r7, lr}
    f8f4:	b089      	sub	sp, #36	; 0x24
    f8f6:	4693      	mov	fp, r2
    f8f8:	9007      	str	r0, [sp, #28]
    f8fa:	001e      	movs	r6, r3
    f8fc:	000a      	movs	r2, r1
    f8fe:	2008      	movs	r0, #8
    f900:	4f5d      	ldr	r7, [pc, #372]	; (fa78 <_strtoll_l.constprop.0+0x190>)
    f902:	9105      	str	r1, [sp, #20]
    f904:	0013      	movs	r3, r2
    f906:	781c      	ldrb	r4, [r3, #0]
    f908:	1c55      	adds	r5, r2, #1
    f90a:	5d39      	ldrb	r1, [r7, r4]
    f90c:	002a      	movs	r2, r5
    f90e:	4208      	tst	r0, r1
    f910:	d1f8      	bne.n	f904 <_strtoll_l.constprop.0+0x1c>
    f912:	2c2d      	cmp	r4, #45	; 0x2d
    f914:	d100      	bne.n	f918 <_strtoll_l.constprop.0+0x30>
    f916:	e080      	b.n	fa1a <_strtoll_l.constprop.0+0x132>
    f918:	2c2b      	cmp	r4, #43	; 0x2b
    f91a:	d062      	beq.n	f9e2 <_strtoll_l.constprop.0+0xfa>
    f91c:	2301      	movs	r3, #1
    f91e:	425b      	negs	r3, r3
    f920:	9302      	str	r3, [sp, #8]
    f922:	4b56      	ldr	r3, [pc, #344]	; (fa7c <_strtoll_l.constprop.0+0x194>)
    f924:	9303      	str	r3, [sp, #12]
    f926:	2300      	movs	r3, #0
    f928:	9306      	str	r3, [sp, #24]
    f92a:	2e00      	cmp	r6, #0
    f92c:	d006      	beq.n	f93c <_strtoll_l.constprop.0+0x54>
    f92e:	2e10      	cmp	r6, #16
    f930:	d100      	bne.n	f934 <_strtoll_l.constprop.0+0x4c>
    f932:	e07c      	b.n	fa2e <_strtoll_l.constprop.0+0x146>
    f934:	17f3      	asrs	r3, r6, #31
    f936:	46b2      	mov	sl, r6
    f938:	4699      	mov	r9, r3
    f93a:	e007      	b.n	f94c <_strtoll_l.constprop.0+0x64>
    f93c:	2c30      	cmp	r4, #48	; 0x30
    f93e:	d100      	bne.n	f942 <_strtoll_l.constprop.0+0x5a>
    f940:	e081      	b.n	fa46 <_strtoll_l.constprop.0+0x15e>
    f942:	230a      	movs	r3, #10
    f944:	469a      	mov	sl, r3
    f946:	2300      	movs	r3, #0
    f948:	260a      	movs	r6, #10
    f94a:	4699      	mov	r9, r3
    f94c:	4652      	mov	r2, sl
    f94e:	464b      	mov	r3, r9
    f950:	9802      	ldr	r0, [sp, #8]
    f952:	9903      	ldr	r1, [sp, #12]
    f954:	f7f4 fe6a 	bl	462c <__aeabi_uldivmod>
    f958:	000f      	movs	r7, r1
    f95a:	4680      	mov	r8, r0
    f95c:	9204      	str	r2, [sp, #16]
    f95e:	2000      	movs	r0, #0
    f960:	2200      	movs	r2, #0
    f962:	2100      	movs	r1, #0
    f964:	e019      	b.n	f99a <_strtoll_l.constprop.0+0xb2>
    f966:	001c      	movs	r4, r3
    f968:	42a6      	cmp	r6, r4
    f96a:	dd21      	ble.n	f9b0 <_strtoll_l.constprop.0+0xc8>
    f96c:	1c53      	adds	r3, r2, #1
    f96e:	d012      	beq.n	f996 <_strtoll_l.constprop.0+0xae>
    f970:	42b9      	cmp	r1, r7
    f972:	d83e      	bhi.n	f9f2 <_strtoll_l.constprop.0+0x10a>
    f974:	d101      	bne.n	f97a <_strtoll_l.constprop.0+0x92>
    f976:	4540      	cmp	r0, r8
    f978:	d83b      	bhi.n	f9f2 <_strtoll_l.constprop.0+0x10a>
    f97a:	4580      	cmp	r8, r0
    f97c:	d034      	beq.n	f9e8 <_strtoll_l.constprop.0+0x100>
    f97e:	4652      	mov	r2, sl
    f980:	464b      	mov	r3, r9
    f982:	f7f4 fe73 	bl	466c <__aeabi_lmul>
    f986:	17e3      	asrs	r3, r4, #31
    f988:	9400      	str	r4, [sp, #0]
    f98a:	9301      	str	r3, [sp, #4]
    f98c:	9b00      	ldr	r3, [sp, #0]
    f98e:	9c01      	ldr	r4, [sp, #4]
    f990:	2201      	movs	r2, #1
    f992:	18c0      	adds	r0, r0, r3
    f994:	4161      	adcs	r1, r4
    f996:	782c      	ldrb	r4, [r5, #0]
    f998:	3501      	adds	r5, #1
    f99a:	0023      	movs	r3, r4
    f99c:	3b30      	subs	r3, #48	; 0x30
    f99e:	2b09      	cmp	r3, #9
    f9a0:	d9e1      	bls.n	f966 <_strtoll_l.constprop.0+0x7e>
    f9a2:	0023      	movs	r3, r4
    f9a4:	3b41      	subs	r3, #65	; 0x41
    f9a6:	2b19      	cmp	r3, #25
    f9a8:	d826      	bhi.n	f9f8 <_strtoll_l.constprop.0+0x110>
    f9aa:	3c37      	subs	r4, #55	; 0x37
    f9ac:	42a6      	cmp	r6, r4
    f9ae:	dcdd      	bgt.n	f96c <_strtoll_l.constprop.0+0x84>
    f9b0:	1c53      	adds	r3, r2, #1
    f9b2:	d027      	beq.n	fa04 <_strtoll_l.constprop.0+0x11c>
    f9b4:	9b06      	ldr	r3, [sp, #24]
    f9b6:	2b00      	cmp	r3, #0
    f9b8:	d004      	beq.n	f9c4 <_strtoll_l.constprop.0+0xdc>
    f9ba:	0003      	movs	r3, r0
    f9bc:	000c      	movs	r4, r1
    f9be:	2100      	movs	r1, #0
    f9c0:	4258      	negs	r0, r3
    f9c2:	41a1      	sbcs	r1, r4
    f9c4:	465b      	mov	r3, fp
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d004      	beq.n	f9d4 <_strtoll_l.constprop.0+0xec>
    f9ca:	2a00      	cmp	r2, #0
    f9cc:	d14b      	bne.n	fa66 <_strtoll_l.constprop.0+0x17e>
    f9ce:	465b      	mov	r3, fp
    f9d0:	9a05      	ldr	r2, [sp, #20]
    f9d2:	601a      	str	r2, [r3, #0]
    f9d4:	b009      	add	sp, #36	; 0x24
    f9d6:	bcf0      	pop	{r4, r5, r6, r7}
    f9d8:	46bb      	mov	fp, r7
    f9da:	46b2      	mov	sl, r6
    f9dc:	46a9      	mov	r9, r5
    f9de:	46a0      	mov	r8, r4
    f9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9e2:	782c      	ldrb	r4, [r5, #0]
    f9e4:	1c9d      	adds	r5, r3, #2
    f9e6:	e799      	b.n	f91c <_strtoll_l.constprop.0+0x34>
    f9e8:	428f      	cmp	r7, r1
    f9ea:	d1c8      	bne.n	f97e <_strtoll_l.constprop.0+0x96>
    f9ec:	9b04      	ldr	r3, [sp, #16]
    f9ee:	42a3      	cmp	r3, r4
    f9f0:	dac5      	bge.n	f97e <_strtoll_l.constprop.0+0x96>
    f9f2:	2201      	movs	r2, #1
    f9f4:	4252      	negs	r2, r2
    f9f6:	e7ce      	b.n	f996 <_strtoll_l.constprop.0+0xae>
    f9f8:	0023      	movs	r3, r4
    f9fa:	3b61      	subs	r3, #97	; 0x61
    f9fc:	2b19      	cmp	r3, #25
    f9fe:	d8d7      	bhi.n	f9b0 <_strtoll_l.constprop.0+0xc8>
    fa00:	3c57      	subs	r4, #87	; 0x57
    fa02:	e7b1      	b.n	f968 <_strtoll_l.constprop.0+0x80>
    fa04:	2322      	movs	r3, #34	; 0x22
    fa06:	9a07      	ldr	r2, [sp, #28]
    fa08:	6013      	str	r3, [r2, #0]
    fa0a:	465b      	mov	r3, fp
    fa0c:	2b00      	cmp	r3, #0
    fa0e:	d027      	beq.n	fa60 <_strtoll_l.constprop.0+0x178>
    fa10:	1e6b      	subs	r3, r5, #1
    fa12:	9802      	ldr	r0, [sp, #8]
    fa14:	9903      	ldr	r1, [sp, #12]
    fa16:	9305      	str	r3, [sp, #20]
    fa18:	e7d9      	b.n	f9ce <_strtoll_l.constprop.0+0xe6>
    fa1a:	782c      	ldrb	r4, [r5, #0]
    fa1c:	1c9d      	adds	r5, r3, #2
    fa1e:	2300      	movs	r3, #0
    fa20:	9302      	str	r3, [sp, #8]
    fa22:	2380      	movs	r3, #128	; 0x80
    fa24:	061b      	lsls	r3, r3, #24
    fa26:	9303      	str	r3, [sp, #12]
    fa28:	2301      	movs	r3, #1
    fa2a:	9306      	str	r3, [sp, #24]
    fa2c:	e77d      	b.n	f92a <_strtoll_l.constprop.0+0x42>
    fa2e:	2c30      	cmp	r4, #48	; 0x30
    fa30:	d104      	bne.n	fa3c <_strtoll_l.constprop.0+0x154>
    fa32:	2220      	movs	r2, #32
    fa34:	782b      	ldrb	r3, [r5, #0]
    fa36:	4393      	bics	r3, r2
    fa38:	2b58      	cmp	r3, #88	; 0x58
    fa3a:	d009      	beq.n	fa50 <_strtoll_l.constprop.0+0x168>
    fa3c:	2310      	movs	r3, #16
    fa3e:	469a      	mov	sl, r3
    fa40:	2300      	movs	r3, #0
    fa42:	4699      	mov	r9, r3
    fa44:	e782      	b.n	f94c <_strtoll_l.constprop.0+0x64>
    fa46:	2220      	movs	r2, #32
    fa48:	782b      	ldrb	r3, [r5, #0]
    fa4a:	4393      	bics	r3, r2
    fa4c:	2b58      	cmp	r3, #88	; 0x58
    fa4e:	d10d      	bne.n	fa6c <_strtoll_l.constprop.0+0x184>
    fa50:	2310      	movs	r3, #16
    fa52:	469a      	mov	sl, r3
    fa54:	2300      	movs	r3, #0
    fa56:	786c      	ldrb	r4, [r5, #1]
    fa58:	4699      	mov	r9, r3
    fa5a:	2610      	movs	r6, #16
    fa5c:	3502      	adds	r5, #2
    fa5e:	e775      	b.n	f94c <_strtoll_l.constprop.0+0x64>
    fa60:	9802      	ldr	r0, [sp, #8]
    fa62:	9903      	ldr	r1, [sp, #12]
    fa64:	e7b6      	b.n	f9d4 <_strtoll_l.constprop.0+0xec>
    fa66:	9002      	str	r0, [sp, #8]
    fa68:	9103      	str	r1, [sp, #12]
    fa6a:	e7d1      	b.n	fa10 <_strtoll_l.constprop.0+0x128>
    fa6c:	2308      	movs	r3, #8
    fa6e:	469a      	mov	sl, r3
    fa70:	2300      	movs	r3, #0
    fa72:	2608      	movs	r6, #8
    fa74:	4699      	mov	r9, r3
    fa76:	e769      	b.n	f94c <_strtoll_l.constprop.0+0x64>
    fa78:	00016d41 	.word	0x00016d41
    fa7c:	7fffffff 	.word	0x7fffffff

0000fa80 <strtoll>:
    fa80:	b510      	push	{r4, lr}
    fa82:	0004      	movs	r4, r0
    fa84:	0013      	movs	r3, r2
    fa86:	4a03      	ldr	r2, [pc, #12]	; (fa94 <strtoll+0x14>)
    fa88:	6810      	ldr	r0, [r2, #0]
    fa8a:	000a      	movs	r2, r1
    fa8c:	0021      	movs	r1, r4
    fa8e:	f7ff ff2b 	bl	f8e8 <_strtoll_l.constprop.0>
    fa92:	bd10      	pop	{r4, pc}
    fa94:	0001737c 	.word	0x0001737c

0000fa98 <_strtoul_l.constprop.0>:
    fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa9a:	464e      	mov	r6, r9
    fa9c:	46de      	mov	lr, fp
    fa9e:	4657      	mov	r7, sl
    faa0:	4645      	mov	r5, r8
    faa2:	4683      	mov	fp, r0
    faa4:	b5e0      	push	{r5, r6, r7, lr}
    faa6:	4688      	mov	r8, r1
    faa8:	001e      	movs	r6, r3
    faaa:	4691      	mov	r9, r2
    faac:	000b      	movs	r3, r1
    faae:	2008      	movs	r0, #8
    fab0:	4f47      	ldr	r7, [pc, #284]	; (fbd0 <_strtoul_l.constprop.0+0x138>)
    fab2:	b083      	sub	sp, #12
    fab4:	001a      	movs	r2, r3
    fab6:	7814      	ldrb	r4, [r2, #0]
    fab8:	3301      	adds	r3, #1
    faba:	5d39      	ldrb	r1, [r7, r4]
    fabc:	001d      	movs	r5, r3
    fabe:	4208      	tst	r0, r1
    fac0:	d1f8      	bne.n	fab4 <_strtoul_l.constprop.0+0x1c>
    fac2:	2c2d      	cmp	r4, #45	; 0x2d
    fac4:	d05f      	beq.n	fb86 <_strtoul_l.constprop.0+0xee>
    fac6:	2300      	movs	r3, #0
    fac8:	9301      	str	r3, [sp, #4]
    faca:	2c2b      	cmp	r4, #43	; 0x2b
    facc:	d033      	beq.n	fb36 <_strtoul_l.constprop.0+0x9e>
    face:	2e00      	cmp	r6, #0
    fad0:	d00e      	beq.n	faf0 <_strtoul_l.constprop.0+0x58>
    fad2:	2e10      	cmp	r6, #16
    fad4:	d05c      	beq.n	fb90 <_strtoul_l.constprop.0+0xf8>
    fad6:	2001      	movs	r0, #1
    fad8:	0031      	movs	r1, r6
    fada:	4240      	negs	r0, r0
    fadc:	f7f4 fbb8 	bl	4250 <__udivsi3>
    fae0:	0007      	movs	r7, r0
    fae2:	2001      	movs	r0, #1
    fae4:	0031      	movs	r1, r6
    fae6:	4240      	negs	r0, r0
    fae8:	46b2      	mov	sl, r6
    faea:	f7f4 fc37 	bl	435c <__aeabi_uidivmod>
    faee:	e006      	b.n	fafe <_strtoul_l.constprop.0+0x66>
    faf0:	2c30      	cmp	r4, #48	; 0x30
    faf2:	d059      	beq.n	fba8 <_strtoul_l.constprop.0+0x110>
    faf4:	230a      	movs	r3, #10
    faf6:	2105      	movs	r1, #5
    faf8:	469a      	mov	sl, r3
    fafa:	260a      	movs	r6, #10
    fafc:	4f35      	ldr	r7, [pc, #212]	; (fbd4 <_strtoul_l.constprop.0+0x13c>)
    fafe:	2200      	movs	r2, #0
    fb00:	2000      	movs	r0, #0
    fb02:	0023      	movs	r3, r4
    fb04:	3b30      	subs	r3, #48	; 0x30
    fb06:	2b09      	cmp	r3, #9
    fb08:	d907      	bls.n	fb1a <_strtoul_l.constprop.0+0x82>
    fb0a:	3b11      	subs	r3, #17
    fb0c:	2b19      	cmp	r3, #25
    fb0e:	d903      	bls.n	fb18 <_strtoul_l.constprop.0+0x80>
    fb10:	0023      	movs	r3, r4
    fb12:	3b61      	subs	r3, #97	; 0x61
    fb14:	2b19      	cmp	r3, #25
    fb16:	d811      	bhi.n	fb3c <_strtoul_l.constprop.0+0xa4>
    fb18:	330a      	adds	r3, #10
    fb1a:	429e      	cmp	r6, r3
    fb1c:	dd0e      	ble.n	fb3c <_strtoul_l.constprop.0+0xa4>
    fb1e:	2a00      	cmp	r2, #0
    fb20:	db23      	blt.n	fb6a <_strtoul_l.constprop.0+0xd2>
    fb22:	42b8      	cmp	r0, r7
    fb24:	d821      	bhi.n	fb6a <_strtoul_l.constprop.0+0xd2>
    fb26:	d01e      	beq.n	fb66 <_strtoul_l.constprop.0+0xce>
    fb28:	4652      	mov	r2, sl
    fb2a:	4350      	muls	r0, r2
    fb2c:	2201      	movs	r2, #1
    fb2e:	1818      	adds	r0, r3, r0
    fb30:	782c      	ldrb	r4, [r5, #0]
    fb32:	3501      	adds	r5, #1
    fb34:	e7e5      	b.n	fb02 <_strtoul_l.constprop.0+0x6a>
    fb36:	782c      	ldrb	r4, [r5, #0]
    fb38:	1c95      	adds	r5, r2, #2
    fb3a:	e7c8      	b.n	face <_strtoul_l.constprop.0+0x36>
    fb3c:	2a00      	cmp	r2, #0
    fb3e:	db17      	blt.n	fb70 <_strtoul_l.constprop.0+0xd8>
    fb40:	9b01      	ldr	r3, [sp, #4]
    fb42:	2b00      	cmp	r3, #0
    fb44:	d000      	beq.n	fb48 <_strtoul_l.constprop.0+0xb0>
    fb46:	4240      	negs	r0, r0
    fb48:	464b      	mov	r3, r9
    fb4a:	2b00      	cmp	r3, #0
    fb4c:	d004      	beq.n	fb58 <_strtoul_l.constprop.0+0xc0>
    fb4e:	2a00      	cmp	r2, #0
    fb50:	d116      	bne.n	fb80 <_strtoul_l.constprop.0+0xe8>
    fb52:	464b      	mov	r3, r9
    fb54:	4642      	mov	r2, r8
    fb56:	601a      	str	r2, [r3, #0]
    fb58:	b003      	add	sp, #12
    fb5a:	bcf0      	pop	{r4, r5, r6, r7}
    fb5c:	46bb      	mov	fp, r7
    fb5e:	46b2      	mov	sl, r6
    fb60:	46a9      	mov	r9, r5
    fb62:	46a0      	mov	r8, r4
    fb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb66:	428b      	cmp	r3, r1
    fb68:	ddde      	ble.n	fb28 <_strtoul_l.constprop.0+0x90>
    fb6a:	2201      	movs	r2, #1
    fb6c:	4252      	negs	r2, r2
    fb6e:	e7df      	b.n	fb30 <_strtoul_l.constprop.0+0x98>
    fb70:	2322      	movs	r3, #34	; 0x22
    fb72:	465a      	mov	r2, fp
    fb74:	2001      	movs	r0, #1
    fb76:	6013      	str	r3, [r2, #0]
    fb78:	464b      	mov	r3, r9
    fb7a:	4240      	negs	r0, r0
    fb7c:	2b00      	cmp	r3, #0
    fb7e:	d0eb      	beq.n	fb58 <_strtoul_l.constprop.0+0xc0>
    fb80:	1e6b      	subs	r3, r5, #1
    fb82:	4698      	mov	r8, r3
    fb84:	e7e5      	b.n	fb52 <_strtoul_l.constprop.0+0xba>
    fb86:	781c      	ldrb	r4, [r3, #0]
    fb88:	2301      	movs	r3, #1
    fb8a:	1c95      	adds	r5, r2, #2
    fb8c:	9301      	str	r3, [sp, #4]
    fb8e:	e79e      	b.n	face <_strtoul_l.constprop.0+0x36>
    fb90:	2c30      	cmp	r4, #48	; 0x30
    fb92:	d104      	bne.n	fb9e <_strtoul_l.constprop.0+0x106>
    fb94:	2220      	movs	r2, #32
    fb96:	782b      	ldrb	r3, [r5, #0]
    fb98:	4393      	bics	r3, r2
    fb9a:	2b58      	cmp	r3, #88	; 0x58
    fb9c:	d009      	beq.n	fbb2 <_strtoul_l.constprop.0+0x11a>
    fb9e:	2310      	movs	r3, #16
    fba0:	210f      	movs	r1, #15
    fba2:	469a      	mov	sl, r3
    fba4:	4f0c      	ldr	r7, [pc, #48]	; (fbd8 <_strtoul_l.constprop.0+0x140>)
    fba6:	e7aa      	b.n	fafe <_strtoul_l.constprop.0+0x66>
    fba8:	2220      	movs	r2, #32
    fbaa:	782b      	ldrb	r3, [r5, #0]
    fbac:	4393      	bics	r3, r2
    fbae:	2b58      	cmp	r3, #88	; 0x58
    fbb0:	d107      	bne.n	fbc2 <_strtoul_l.constprop.0+0x12a>
    fbb2:	2310      	movs	r3, #16
    fbb4:	786c      	ldrb	r4, [r5, #1]
    fbb6:	210f      	movs	r1, #15
    fbb8:	469a      	mov	sl, r3
    fbba:	2610      	movs	r6, #16
    fbbc:	4f06      	ldr	r7, [pc, #24]	; (fbd8 <_strtoul_l.constprop.0+0x140>)
    fbbe:	3502      	adds	r5, #2
    fbc0:	e79d      	b.n	fafe <_strtoul_l.constprop.0+0x66>
    fbc2:	2308      	movs	r3, #8
    fbc4:	2107      	movs	r1, #7
    fbc6:	469a      	mov	sl, r3
    fbc8:	2608      	movs	r6, #8
    fbca:	4f04      	ldr	r7, [pc, #16]	; (fbdc <_strtoul_l.constprop.0+0x144>)
    fbcc:	e797      	b.n	fafe <_strtoul_l.constprop.0+0x66>
    fbce:	46c0      	nop			; (mov r8, r8)
    fbd0:	00016d41 	.word	0x00016d41
    fbd4:	19999999 	.word	0x19999999
    fbd8:	0fffffff 	.word	0x0fffffff
    fbdc:	1fffffff 	.word	0x1fffffff

0000fbe0 <strtoul>:
    fbe0:	b510      	push	{r4, lr}
    fbe2:	0004      	movs	r4, r0
    fbe4:	0013      	movs	r3, r2
    fbe6:	4a03      	ldr	r2, [pc, #12]	; (fbf4 <strtoul+0x14>)
    fbe8:	6810      	ldr	r0, [r2, #0]
    fbea:	000a      	movs	r2, r1
    fbec:	0021      	movs	r1, r4
    fbee:	f7ff ff53 	bl	fa98 <_strtoul_l.constprop.0>
    fbf2:	bd10      	pop	{r4, pc}
    fbf4:	0001737c 	.word	0x0001737c

0000fbf8 <_svfprintf_r>:
    fbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbfa:	46de      	mov	lr, fp
    fbfc:	464e      	mov	r6, r9
    fbfe:	4657      	mov	r7, sl
    fc00:	4645      	mov	r5, r8
    fc02:	b5e0      	push	{r5, r6, r7, lr}
    fc04:	b0d7      	sub	sp, #348	; 0x15c
    fc06:	000c      	movs	r4, r1
    fc08:	4691      	mov	r9, r2
    fc0a:	910b      	str	r1, [sp, #44]	; 0x2c
    fc0c:	930f      	str	r3, [sp, #60]	; 0x3c
    fc0e:	4683      	mov	fp, r0
    fc10:	f003 f8e0 	bl	12dd4 <_localeconv_r>
    fc14:	6803      	ldr	r3, [r0, #0]
    fc16:	0018      	movs	r0, r3
    fc18:	931c      	str	r3, [sp, #112]	; 0x70
    fc1a:	f7ff fd0f 	bl	f63c <strlen>
    fc1e:	901b      	str	r0, [sp, #108]	; 0x6c
    fc20:	89a3      	ldrh	r3, [r4, #12]
    fc22:	061b      	lsls	r3, r3, #24
    fc24:	d505      	bpl.n	fc32 <_svfprintf_r+0x3a>
    fc26:	6923      	ldr	r3, [r4, #16]
    fc28:	9306      	str	r3, [sp, #24]
    fc2a:	2b00      	cmp	r3, #0
    fc2c:	d101      	bne.n	fc32 <_svfprintf_r+0x3a>
    fc2e:	f001 f816 	bl	10c5e <_svfprintf_r+0x1066>
    fc32:	ab2d      	add	r3, sp, #180	; 0xb4
    fc34:	932a      	str	r3, [sp, #168]	; 0xa8
    fc36:	2300      	movs	r3, #0
    fc38:	2400      	movs	r4, #0
    fc3a:	932c      	str	r3, [sp, #176]	; 0xb0
    fc3c:	932b      	str	r3, [sp, #172]	; 0xac
    fc3e:	9315      	str	r3, [sp, #84]	; 0x54
    fc40:	2300      	movs	r3, #0
    fc42:	464e      	mov	r6, r9
    fc44:	9316      	str	r3, [sp, #88]	; 0x58
    fc46:	9417      	str	r4, [sp, #92]	; 0x5c
    fc48:	2300      	movs	r3, #0
    fc4a:	931d      	str	r3, [sp, #116]	; 0x74
    fc4c:	931e      	str	r3, [sp, #120]	; 0x78
    fc4e:	931a      	str	r3, [sp, #104]	; 0x68
    fc50:	931f      	str	r3, [sp, #124]	; 0x7c
    fc52:	9320      	str	r3, [sp, #128]	; 0x80
    fc54:	9309      	str	r3, [sp, #36]	; 0x24
    fc56:	7833      	ldrb	r3, [r6, #0]
    fc58:	af2d      	add	r7, sp, #180	; 0xb4
    fc5a:	2b00      	cmp	r3, #0
    fc5c:	d100      	bne.n	fc60 <_svfprintf_r+0x68>
    fc5e:	e10a      	b.n	fe76 <_svfprintf_r+0x27e>
    fc60:	0034      	movs	r4, r6
    fc62:	e003      	b.n	fc6c <_svfprintf_r+0x74>
    fc64:	7863      	ldrb	r3, [r4, #1]
    fc66:	3401      	adds	r4, #1
    fc68:	2b00      	cmp	r3, #0
    fc6a:	d038      	beq.n	fcde <_svfprintf_r+0xe6>
    fc6c:	2b25      	cmp	r3, #37	; 0x25
    fc6e:	d1f9      	bne.n	fc64 <_svfprintf_r+0x6c>
    fc70:	1ba5      	subs	r5, r4, r6
    fc72:	42b4      	cmp	r4, r6
    fc74:	d137      	bne.n	fce6 <_svfprintf_r+0xee>
    fc76:	7823      	ldrb	r3, [r4, #0]
    fc78:	2b00      	cmp	r3, #0
    fc7a:	d100      	bne.n	fc7e <_svfprintf_r+0x86>
    fc7c:	e0fb      	b.n	fe76 <_svfprintf_r+0x27e>
    fc7e:	1c63      	adds	r3, r4, #1
    fc80:	469a      	mov	sl, r3
    fc82:	2300      	movs	r3, #0
    fc84:	aa1c      	add	r2, sp, #112	; 0x70
    fc86:	76d3      	strb	r3, [r2, #27]
    fc88:	2201      	movs	r2, #1
    fc8a:	4252      	negs	r2, r2
    fc8c:	9207      	str	r2, [sp, #28]
    fc8e:	2200      	movs	r2, #0
    fc90:	7863      	ldrb	r3, [r4, #1]
    fc92:	0015      	movs	r5, r2
    fc94:	4654      	mov	r4, sl
    fc96:	9208      	str	r2, [sp, #32]
    fc98:	3401      	adds	r4, #1
    fc9a:	001a      	movs	r2, r3
    fc9c:	3a20      	subs	r2, #32
    fc9e:	2a5a      	cmp	r2, #90	; 0x5a
    fca0:	d852      	bhi.n	fd48 <_svfprintf_r+0x150>
    fca2:	49c5      	ldr	r1, [pc, #788]	; (ffb8 <_svfprintf_r+0x3c0>)
    fca4:	0092      	lsls	r2, r2, #2
    fca6:	588a      	ldr	r2, [r1, r2]
    fca8:	4697      	mov	pc, r2
    fcaa:	4658      	mov	r0, fp
    fcac:	f003 f892 	bl	12dd4 <_localeconv_r>
    fcb0:	6843      	ldr	r3, [r0, #4]
    fcb2:	0018      	movs	r0, r3
    fcb4:	9320      	str	r3, [sp, #128]	; 0x80
    fcb6:	f7ff fcc1 	bl	f63c <strlen>
    fcba:	4680      	mov	r8, r0
    fcbc:	901f      	str	r0, [sp, #124]	; 0x7c
    fcbe:	4658      	mov	r0, fp
    fcc0:	f003 f888 	bl	12dd4 <_localeconv_r>
    fcc4:	6883      	ldr	r3, [r0, #8]
    fcc6:	931a      	str	r3, [sp, #104]	; 0x68
    fcc8:	4643      	mov	r3, r8
    fcca:	2b00      	cmp	r3, #0
    fccc:	d001      	beq.n	fcd2 <_svfprintf_r+0xda>
    fcce:	f000 fe58 	bl	10982 <_svfprintf_r+0xd8a>
    fcd2:	7823      	ldrb	r3, [r4, #0]
    fcd4:	e7e0      	b.n	fc98 <_svfprintf_r+0xa0>
    fcd6:	2320      	movs	r3, #32
    fcd8:	431d      	orrs	r5, r3
    fcda:	7823      	ldrb	r3, [r4, #0]
    fcdc:	e7dc      	b.n	fc98 <_svfprintf_r+0xa0>
    fcde:	1ba5      	subs	r5, r4, r6
    fce0:	42b4      	cmp	r4, r6
    fce2:	d100      	bne.n	fce6 <_svfprintf_r+0xee>
    fce4:	e0c7      	b.n	fe76 <_svfprintf_r+0x27e>
    fce6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fce8:	603e      	str	r6, [r7, #0]
    fcea:	195b      	adds	r3, r3, r5
    fcec:	932c      	str	r3, [sp, #176]	; 0xb0
    fcee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    fcf0:	607d      	str	r5, [r7, #4]
    fcf2:	9306      	str	r3, [sp, #24]
    fcf4:	3301      	adds	r3, #1
    fcf6:	932b      	str	r3, [sp, #172]	; 0xac
    fcf8:	2b07      	cmp	r3, #7
    fcfa:	dc06      	bgt.n	fd0a <_svfprintf_r+0x112>
    fcfc:	3708      	adds	r7, #8
    fcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fd00:	469c      	mov	ip, r3
    fd02:	44ac      	add	ip, r5
    fd04:	4663      	mov	r3, ip
    fd06:	9309      	str	r3, [sp, #36]	; 0x24
    fd08:	e7b5      	b.n	fc76 <_svfprintf_r+0x7e>
    fd0a:	4658      	mov	r0, fp
    fd0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fd0e:	aa2a      	add	r2, sp, #168	; 0xa8
    fd10:	f003 f90a 	bl	12f28 <__ssprint_r>
    fd14:	2800      	cmp	r0, #0
    fd16:	d109      	bne.n	fd2c <_svfprintf_r+0x134>
    fd18:	af2d      	add	r7, sp, #180	; 0xb4
    fd1a:	e7f0      	b.n	fcfe <_svfprintf_r+0x106>
    fd1c:	46b3      	mov	fp, r6
    fd1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd20:	2b00      	cmp	r3, #0
    fd22:	d003      	beq.n	fd2c <_svfprintf_r+0x134>
    fd24:	0019      	movs	r1, r3
    fd26:	4658      	mov	r0, fp
    fd28:	f7fd ffa8 	bl	dc7c <_free_r>
    fd2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fd2e:	899b      	ldrh	r3, [r3, #12]
    fd30:	065b      	lsls	r3, r3, #25
    fd32:	d501      	bpl.n	fd38 <_svfprintf_r+0x140>
    fd34:	f001 fc29 	bl	1158a <_svfprintf_r+0x1992>
    fd38:	9809      	ldr	r0, [sp, #36]	; 0x24
    fd3a:	b057      	add	sp, #348	; 0x15c
    fd3c:	bcf0      	pop	{r4, r5, r6, r7}
    fd3e:	46bb      	mov	fp, r7
    fd40:	46b2      	mov	sl, r6
    fd42:	46a9      	mov	r9, r5
    fd44:	46a0      	mov	r8, r4
    fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd48:	46a2      	mov	sl, r4
    fd4a:	46a8      	mov	r8, r5
    fd4c:	9312      	str	r3, [sp, #72]	; 0x48
    fd4e:	2b00      	cmp	r3, #0
    fd50:	d100      	bne.n	fd54 <_svfprintf_r+0x15c>
    fd52:	e090      	b.n	fe76 <_svfprintf_r+0x27e>
    fd54:	ae3d      	add	r6, sp, #244	; 0xf4
    fd56:	7033      	strb	r3, [r6, #0]
    fd58:	2300      	movs	r3, #0
    fd5a:	aa1c      	add	r2, sp, #112	; 0x70
    fd5c:	76d3      	strb	r3, [r2, #27]
    fd5e:	2200      	movs	r2, #0
    fd60:	920e      	str	r2, [sp, #56]	; 0x38
    fd62:	3201      	adds	r2, #1
    fd64:	3301      	adds	r3, #1
    fd66:	920a      	str	r2, [sp, #40]	; 0x28
    fd68:	2200      	movs	r2, #0
    fd6a:	9306      	str	r3, [sp, #24]
    fd6c:	2300      	movs	r3, #0
    fd6e:	9207      	str	r2, [sp, #28]
    fd70:	9218      	str	r2, [sp, #96]	; 0x60
    fd72:	9213      	str	r2, [sp, #76]	; 0x4c
    fd74:	9214      	str	r2, [sp, #80]	; 0x50
    fd76:	2202      	movs	r2, #2
    fd78:	4641      	mov	r1, r8
    fd7a:	4011      	ands	r1, r2
    fd7c:	9110      	str	r1, [sp, #64]	; 0x40
    fd7e:	4641      	mov	r1, r8
    fd80:	420a      	tst	r2, r1
    fd82:	d002      	beq.n	fd8a <_svfprintf_r+0x192>
    fd84:	9a06      	ldr	r2, [sp, #24]
    fd86:	3202      	adds	r2, #2
    fd88:	9206      	str	r2, [sp, #24]
    fd8a:	2284      	movs	r2, #132	; 0x84
    fd8c:	4641      	mov	r1, r8
    fd8e:	4011      	ands	r1, r2
    fd90:	9111      	str	r1, [sp, #68]	; 0x44
    fd92:	4641      	mov	r1, r8
    fd94:	420a      	tst	r2, r1
    fd96:	d105      	bne.n	fda4 <_svfprintf_r+0x1ac>
    fd98:	9a08      	ldr	r2, [sp, #32]
    fd9a:	9906      	ldr	r1, [sp, #24]
    fd9c:	1a54      	subs	r4, r2, r1
    fd9e:	2c00      	cmp	r4, #0
    fda0:	dd00      	ble.n	fda4 <_svfprintf_r+0x1ac>
    fda2:	e0ce      	b.n	ff42 <_svfprintf_r+0x34a>
    fda4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
    fda6:	2b00      	cmp	r3, #0
    fda8:	d011      	beq.n	fdce <_svfprintf_r+0x1d6>
    fdaa:	aa1c      	add	r2, sp, #112	; 0x70
    fdac:	231b      	movs	r3, #27
    fdae:	4694      	mov	ip, r2
    fdb0:	4463      	add	r3, ip
    fdb2:	603b      	str	r3, [r7, #0]
    fdb4:	2301      	movs	r3, #1
    fdb6:	607b      	str	r3, [r7, #4]
    fdb8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    fdba:	3401      	adds	r4, #1
    fdbc:	9319      	str	r3, [sp, #100]	; 0x64
    fdbe:	3301      	adds	r3, #1
    fdc0:	942c      	str	r4, [sp, #176]	; 0xb0
    fdc2:	932b      	str	r3, [sp, #172]	; 0xac
    fdc4:	2b07      	cmp	r3, #7
    fdc6:	dd01      	ble.n	fdcc <_svfprintf_r+0x1d4>
    fdc8:	f000 fc32 	bl	10630 <_svfprintf_r+0xa38>
    fdcc:	3708      	adds	r7, #8
    fdce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fdd0:	2b00      	cmp	r3, #0
    fdd2:	d00e      	beq.n	fdf2 <_svfprintf_r+0x1fa>
    fdd4:	ab23      	add	r3, sp, #140	; 0x8c
    fdd6:	603b      	str	r3, [r7, #0]
    fdd8:	2302      	movs	r3, #2
    fdda:	607b      	str	r3, [r7, #4]
    fddc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    fdde:	3402      	adds	r4, #2
    fde0:	9310      	str	r3, [sp, #64]	; 0x40
    fde2:	3301      	adds	r3, #1
    fde4:	942c      	str	r4, [sp, #176]	; 0xb0
    fde6:	932b      	str	r3, [sp, #172]	; 0xac
    fde8:	2b07      	cmp	r3, #7
    fdea:	dd01      	ble.n	fdf0 <_svfprintf_r+0x1f8>
    fdec:	f000 fc13 	bl	10616 <_svfprintf_r+0xa1e>
    fdf0:	3708      	adds	r7, #8
    fdf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fdf4:	2b80      	cmp	r3, #128	; 0x80
    fdf6:	d100      	bne.n	fdfa <_svfprintf_r+0x202>
    fdf8:	e320      	b.n	1043c <_svfprintf_r+0x844>
    fdfa:	9b07      	ldr	r3, [sp, #28]
    fdfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fdfe:	1a9d      	subs	r5, r3, r2
    fe00:	2d00      	cmp	r5, #0
    fe02:	dd00      	ble.n	fe06 <_svfprintf_r+0x20e>
    fe04:	e35e      	b.n	104c4 <_svfprintf_r+0x8cc>
    fe06:	4643      	mov	r3, r8
    fe08:	05db      	lsls	r3, r3, #23
    fe0a:	d500      	bpl.n	fe0e <_svfprintf_r+0x216>
    fe0c:	e2b6      	b.n	1037c <_svfprintf_r+0x784>
    fe0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe10:	603e      	str	r6, [r7, #0]
    fe12:	469c      	mov	ip, r3
    fe14:	607b      	str	r3, [r7, #4]
    fe16:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    fe18:	4464      	add	r4, ip
    fe1a:	9307      	str	r3, [sp, #28]
    fe1c:	3301      	adds	r3, #1
    fe1e:	942c      	str	r4, [sp, #176]	; 0xb0
    fe20:	932b      	str	r3, [sp, #172]	; 0xac
    fe22:	2b07      	cmp	r3, #7
    fe24:	dd00      	ble.n	fe28 <_svfprintf_r+0x230>
    fe26:	e113      	b.n	10050 <_svfprintf_r+0x458>
    fe28:	3708      	adds	r7, #8
    fe2a:	4643      	mov	r3, r8
    fe2c:	075b      	lsls	r3, r3, #29
    fe2e:	d506      	bpl.n	fe3e <_svfprintf_r+0x246>
    fe30:	9b08      	ldr	r3, [sp, #32]
    fe32:	9a06      	ldr	r2, [sp, #24]
    fe34:	1a9e      	subs	r6, r3, r2
    fe36:	2e00      	cmp	r6, #0
    fe38:	dd01      	ble.n	fe3e <_svfprintf_r+0x246>
    fe3a:	f000 fc06 	bl	1064a <_svfprintf_r+0xa52>
    fe3e:	9b08      	ldr	r3, [sp, #32]
    fe40:	9a06      	ldr	r2, [sp, #24]
    fe42:	4293      	cmp	r3, r2
    fe44:	da00      	bge.n	fe48 <_svfprintf_r+0x250>
    fe46:	0013      	movs	r3, r2
    fe48:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fe4a:	4694      	mov	ip, r2
    fe4c:	449c      	add	ip, r3
    fe4e:	4663      	mov	r3, ip
    fe50:	9309      	str	r3, [sp, #36]	; 0x24
    fe52:	2c00      	cmp	r4, #0
    fe54:	d000      	beq.n	fe58 <_svfprintf_r+0x260>
    fe56:	e36e      	b.n	10536 <_svfprintf_r+0x93e>
    fe58:	2300      	movs	r3, #0
    fe5a:	932b      	str	r3, [sp, #172]	; 0xac
    fe5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d003      	beq.n	fe6a <_svfprintf_r+0x272>
    fe62:	4658      	mov	r0, fp
    fe64:	990e      	ldr	r1, [sp, #56]	; 0x38
    fe66:	f7fd ff09 	bl	dc7c <_free_r>
    fe6a:	4656      	mov	r6, sl
    fe6c:	af2d      	add	r7, sp, #180	; 0xb4
    fe6e:	7833      	ldrb	r3, [r6, #0]
    fe70:	2b00      	cmp	r3, #0
    fe72:	d000      	beq.n	fe76 <_svfprintf_r+0x27e>
    fe74:	e6f4      	b.n	fc60 <_svfprintf_r+0x68>
    fe76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    fe78:	9306      	str	r3, [sp, #24]
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d100      	bne.n	fe80 <_svfprintf_r+0x288>
    fe7e:	e755      	b.n	fd2c <_svfprintf_r+0x134>
    fe80:	4658      	mov	r0, fp
    fe82:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fe84:	aa2a      	add	r2, sp, #168	; 0xa8
    fe86:	f003 f84f 	bl	12f28 <__ssprint_r>
    fe8a:	e74f      	b.n	fd2c <_svfprintf_r+0x134>
    fe8c:	3b30      	subs	r3, #48	; 0x30
    fe8e:	0021      	movs	r1, r4
    fe90:	2000      	movs	r0, #0
    fe92:	001a      	movs	r2, r3
    fe94:	0083      	lsls	r3, r0, #2
    fe96:	1818      	adds	r0, r3, r0
    fe98:	000b      	movs	r3, r1
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	0040      	lsls	r0, r0, #1
    fe9e:	1810      	adds	r0, r2, r0
    fea0:	001a      	movs	r2, r3
    fea2:	3101      	adds	r1, #1
    fea4:	3a30      	subs	r2, #48	; 0x30
    fea6:	000c      	movs	r4, r1
    fea8:	2a09      	cmp	r2, #9
    feaa:	d9f3      	bls.n	fe94 <_svfprintf_r+0x29c>
    feac:	9008      	str	r0, [sp, #32]
    feae:	e6f4      	b.n	fc9a <_svfprintf_r+0xa2>
    feb0:	9312      	str	r3, [sp, #72]	; 0x48
    feb2:	2307      	movs	r3, #7
    feb4:	46a2      	mov	sl, r4
    feb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    feb8:	46a8      	mov	r8, r5
    feba:	3407      	adds	r4, #7
    febc:	439c      	bics	r4, r3
    febe:	0022      	movs	r2, r4
    fec0:	ca18      	ldmia	r2!, {r3, r4}
    fec2:	9316      	str	r3, [sp, #88]	; 0x58
    fec4:	9417      	str	r4, [sp, #92]	; 0x5c
    fec6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fec8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    feca:	920f      	str	r2, [sp, #60]	; 0x3c
    fecc:	001d      	movs	r5, r3
    fece:	2201      	movs	r2, #1
    fed0:	0064      	lsls	r4, r4, #1
    fed2:	0864      	lsrs	r4, r4, #1
    fed4:	0028      	movs	r0, r5
    fed6:	0021      	movs	r1, r4
    fed8:	4b38      	ldr	r3, [pc, #224]	; (ffbc <_svfprintf_r+0x3c4>)
    feda:	4252      	negs	r2, r2
    fedc:	f7f6 fd64 	bl	69a8 <__aeabi_dcmpun>
    fee0:	2800      	cmp	r0, #0
    fee2:	d001      	beq.n	fee8 <_svfprintf_r+0x2f0>
    fee4:	f000 fd76 	bl	109d4 <_svfprintf_r+0xddc>
    fee8:	2201      	movs	r2, #1
    feea:	0028      	movs	r0, r5
    feec:	0021      	movs	r1, r4
    feee:	4b33      	ldr	r3, [pc, #204]	; (ffbc <_svfprintf_r+0x3c4>)
    fef0:	4252      	negs	r2, r2
    fef2:	f7f4 fb43 	bl	457c <__aeabi_dcmple>
    fef6:	2800      	cmp	r0, #0
    fef8:	d001      	beq.n	fefe <_svfprintf_r+0x306>
    fefa:	f000 fd6b 	bl	109d4 <_svfprintf_r+0xddc>
    fefe:	9816      	ldr	r0, [sp, #88]	; 0x58
    ff00:	9917      	ldr	r1, [sp, #92]	; 0x5c
    ff02:	2200      	movs	r2, #0
    ff04:	2300      	movs	r3, #0
    ff06:	f7f4 fb2f 	bl	4568 <__aeabi_dcmplt>
    ff0a:	2800      	cmp	r0, #0
    ff0c:	d001      	beq.n	ff12 <_svfprintf_r+0x31a>
    ff0e:	f001 f8c2 	bl	11096 <_svfprintf_r+0x149e>
    ff12:	ab1c      	add	r3, sp, #112	; 0x70
    ff14:	7edb      	ldrb	r3, [r3, #27]
    ff16:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ff18:	2a47      	cmp	r2, #71	; 0x47
    ff1a:	dc01      	bgt.n	ff20 <_svfprintf_r+0x328>
    ff1c:	f001 f893 	bl	11046 <_svfprintf_r+0x144e>
    ff20:	4e27      	ldr	r6, [pc, #156]	; (ffc0 <_svfprintf_r+0x3c8>)
    ff22:	2280      	movs	r2, #128	; 0x80
    ff24:	4641      	mov	r1, r8
    ff26:	4391      	bics	r1, r2
    ff28:	3a7d      	subs	r2, #125	; 0x7d
    ff2a:	9206      	str	r2, [sp, #24]
    ff2c:	2200      	movs	r2, #0
    ff2e:	4688      	mov	r8, r1
    ff30:	920e      	str	r2, [sp, #56]	; 0x38
    ff32:	3203      	adds	r2, #3
    ff34:	920a      	str	r2, [sp, #40]	; 0x28
    ff36:	2200      	movs	r2, #0
    ff38:	9207      	str	r2, [sp, #28]
    ff3a:	9218      	str	r2, [sp, #96]	; 0x60
    ff3c:	9213      	str	r2, [sp, #76]	; 0x4c
    ff3e:	9214      	str	r2, [sp, #80]	; 0x50
    ff40:	e14c      	b.n	101dc <_svfprintf_r+0x5e4>
    ff42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    ff44:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    ff46:	4d1f      	ldr	r5, [pc, #124]	; (ffc4 <_svfprintf_r+0x3cc>)
    ff48:	2c10      	cmp	r4, #16
    ff4a:	dd26      	ble.n	ff9a <_svfprintf_r+0x3a2>
    ff4c:	2110      	movs	r1, #16
    ff4e:	0030      	movs	r0, r6
    ff50:	4689      	mov	r9, r1
    ff52:	465e      	mov	r6, fp
    ff54:	0039      	movs	r1, r7
    ff56:	4683      	mov	fp, r0
    ff58:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ff5a:	e003      	b.n	ff64 <_svfprintf_r+0x36c>
    ff5c:	3c10      	subs	r4, #16
    ff5e:	3108      	adds	r1, #8
    ff60:	2c10      	cmp	r4, #16
    ff62:	dd16      	ble.n	ff92 <_svfprintf_r+0x39a>
    ff64:	4648      	mov	r0, r9
    ff66:	3210      	adds	r2, #16
    ff68:	3301      	adds	r3, #1
    ff6a:	600d      	str	r5, [r1, #0]
    ff6c:	6048      	str	r0, [r1, #4]
    ff6e:	922c      	str	r2, [sp, #176]	; 0xb0
    ff70:	932b      	str	r3, [sp, #172]	; 0xac
    ff72:	2b07      	cmp	r3, #7
    ff74:	ddf2      	ble.n	ff5c <_svfprintf_r+0x364>
    ff76:	0039      	movs	r1, r7
    ff78:	0030      	movs	r0, r6
    ff7a:	aa2a      	add	r2, sp, #168	; 0xa8
    ff7c:	f002 ffd4 	bl	12f28 <__ssprint_r>
    ff80:	2800      	cmp	r0, #0
    ff82:	d000      	beq.n	ff86 <_svfprintf_r+0x38e>
    ff84:	e6ca      	b.n	fd1c <_svfprintf_r+0x124>
    ff86:	3c10      	subs	r4, #16
    ff88:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    ff8a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    ff8c:	a92d      	add	r1, sp, #180	; 0xb4
    ff8e:	2c10      	cmp	r4, #16
    ff90:	dce8      	bgt.n	ff64 <_svfprintf_r+0x36c>
    ff92:	000f      	movs	r7, r1
    ff94:	4659      	mov	r1, fp
    ff96:	46b3      	mov	fp, r6
    ff98:	000e      	movs	r6, r1
    ff9a:	607c      	str	r4, [r7, #4]
    ff9c:	3301      	adds	r3, #1
    ff9e:	18a4      	adds	r4, r4, r2
    ffa0:	603d      	str	r5, [r7, #0]
    ffa2:	942c      	str	r4, [sp, #176]	; 0xb0
    ffa4:	932b      	str	r3, [sp, #172]	; 0xac
    ffa6:	2b07      	cmp	r3, #7
    ffa8:	dd01      	ble.n	ffae <_svfprintf_r+0x3b6>
    ffaa:	f000 ff82 	bl	10eb2 <_svfprintf_r+0x12ba>
    ffae:	ab1c      	add	r3, sp, #112	; 0x70
    ffb0:	7edb      	ldrb	r3, [r3, #27]
    ffb2:	3708      	adds	r7, #8
    ffb4:	e6f7      	b.n	fda6 <_svfprintf_r+0x1ae>
    ffb6:	46c0      	nop			; (mov r8, r8)
    ffb8:	00016b74 	.word	0x00016b74
    ffbc:	7fefffff 	.word	0x7fefffff
    ffc0:	00016b38 	.word	0x00016b38
    ffc4:	00016ce0 	.word	0x00016ce0
    ffc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ffca:	603e      	str	r6, [r7, #0]
    ffcc:	2b01      	cmp	r3, #1
    ffce:	dc01      	bgt.n	ffd4 <_svfprintf_r+0x3dc>
    ffd0:	f000 fc02 	bl	107d8 <_svfprintf_r+0xbe0>
    ffd4:	2301      	movs	r3, #1
    ffd6:	607b      	str	r3, [r7, #4]
    ffd8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    ffda:	3401      	adds	r4, #1
    ffdc:	1c5d      	adds	r5, r3, #1
    ffde:	942c      	str	r4, [sp, #176]	; 0xb0
    ffe0:	9307      	str	r3, [sp, #28]
    ffe2:	952b      	str	r5, [sp, #172]	; 0xac
    ffe4:	2d07      	cmp	r5, #7
    ffe6:	dd01      	ble.n	ffec <_svfprintf_r+0x3f4>
    ffe8:	f000 fc82 	bl	108f0 <_svfprintf_r+0xcf8>
    ffec:	3708      	adds	r7, #8
    ffee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fff0:	3501      	adds	r5, #1
    fff2:	603b      	str	r3, [r7, #0]
    fff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    fff6:	952b      	str	r5, [sp, #172]	; 0xac
    fff8:	469c      	mov	ip, r3
    fffa:	4464      	add	r4, ip
    fffc:	607b      	str	r3, [r7, #4]
    fffe:	942c      	str	r4, [sp, #176]	; 0xb0
   10000:	2d07      	cmp	r5, #7
   10002:	dd01      	ble.n	10008 <_svfprintf_r+0x410>
   10004:	f000 fc82 	bl	1090c <_svfprintf_r+0xd14>
   10008:	3708      	adds	r7, #8
   1000a:	2200      	movs	r2, #0
   1000c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1000e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10010:	2300      	movs	r3, #0
   10012:	f7f4 faa3 	bl	455c <__aeabi_dcmpeq>
   10016:	2800      	cmp	r0, #0
   10018:	d001      	beq.n	1001e <_svfprintf_r+0x426>
   1001a:	f000 fc04 	bl	10826 <_svfprintf_r+0xc2e>
   1001e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10020:	3601      	adds	r6, #1
   10022:	3b01      	subs	r3, #1
   10024:	18e4      	adds	r4, r4, r3
   10026:	3501      	adds	r5, #1
   10028:	603e      	str	r6, [r7, #0]
   1002a:	607b      	str	r3, [r7, #4]
   1002c:	942c      	str	r4, [sp, #176]	; 0xb0
   1002e:	952b      	str	r5, [sp, #172]	; 0xac
   10030:	2d07      	cmp	r5, #7
   10032:	dd00      	ble.n	10036 <_svfprintf_r+0x43e>
   10034:	e3e0      	b.n	107f8 <_svfprintf_r+0xc00>
   10036:	3708      	adds	r7, #8
   10038:	ab26      	add	r3, sp, #152	; 0x98
   1003a:	603b      	str	r3, [r7, #0]
   1003c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1003e:	3501      	adds	r5, #1
   10040:	469c      	mov	ip, r3
   10042:	4464      	add	r4, ip
   10044:	607b      	str	r3, [r7, #4]
   10046:	942c      	str	r4, [sp, #176]	; 0xb0
   10048:	952b      	str	r5, [sp, #172]	; 0xac
   1004a:	2d07      	cmp	r5, #7
   1004c:	dc00      	bgt.n	10050 <_svfprintf_r+0x458>
   1004e:	e6eb      	b.n	fe28 <_svfprintf_r+0x230>
   10050:	4658      	mov	r0, fp
   10052:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10054:	aa2a      	add	r2, sp, #168	; 0xa8
   10056:	f002 ff67 	bl	12f28 <__ssprint_r>
   1005a:	2800      	cmp	r0, #0
   1005c:	d000      	beq.n	10060 <_svfprintf_r+0x468>
   1005e:	e65e      	b.n	fd1e <_svfprintf_r+0x126>
   10060:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10062:	af2d      	add	r7, sp, #180	; 0xb4
   10064:	e6e1      	b.n	fe2a <_svfprintf_r+0x232>
   10066:	9312      	str	r3, [sp, #72]	; 0x48
   10068:	2300      	movs	r3, #0
   1006a:	46a2      	mov	sl, r4
   1006c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1006e:	aa1c      	add	r2, sp, #112	; 0x70
   10070:	cc40      	ldmia	r4!, {r6}
   10072:	46a8      	mov	r8, r5
   10074:	76d3      	strb	r3, [r2, #27]
   10076:	2e00      	cmp	r6, #0
   10078:	d101      	bne.n	1007e <_svfprintf_r+0x486>
   1007a:	f000 ff86 	bl	10f8a <_svfprintf_r+0x1392>
   1007e:	9a07      	ldr	r2, [sp, #28]
   10080:	1c53      	adds	r3, r2, #1
   10082:	d101      	bne.n	10088 <_svfprintf_r+0x490>
   10084:	f000 fdfb 	bl	10c7e <_svfprintf_r+0x1086>
   10088:	2100      	movs	r1, #0
   1008a:	0030      	movs	r0, r6
   1008c:	f002 fea6 	bl	12ddc <memchr>
   10090:	900e      	str	r0, [sp, #56]	; 0x38
   10092:	2800      	cmp	r0, #0
   10094:	d101      	bne.n	1009a <_svfprintf_r+0x4a2>
   10096:	f001 f905 	bl	112a4 <_svfprintf_r+0x16ac>
   1009a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1009c:	1b99      	subs	r1, r3, r6
   1009e:	43ca      	mvns	r2, r1
   100a0:	17d2      	asrs	r2, r2, #31
   100a2:	910a      	str	r1, [sp, #40]	; 0x28
   100a4:	4011      	ands	r1, r2
   100a6:	2200      	movs	r2, #0
   100a8:	ab1c      	add	r3, sp, #112	; 0x70
   100aa:	7edb      	ldrb	r3, [r3, #27]
   100ac:	9106      	str	r1, [sp, #24]
   100ae:	940f      	str	r4, [sp, #60]	; 0x3c
   100b0:	920e      	str	r2, [sp, #56]	; 0x38
   100b2:	9207      	str	r2, [sp, #28]
   100b4:	9218      	str	r2, [sp, #96]	; 0x60
   100b6:	9213      	str	r2, [sp, #76]	; 0x4c
   100b8:	9214      	str	r2, [sp, #80]	; 0x50
   100ba:	e08f      	b.n	101dc <_svfprintf_r+0x5e4>
   100bc:	46a2      	mov	sl, r4
   100be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   100c0:	9312      	str	r3, [sp, #72]	; 0x48
   100c2:	cc08      	ldmia	r4!, {r3}
   100c4:	ae3d      	add	r6, sp, #244	; 0xf4
   100c6:	7033      	strb	r3, [r6, #0]
   100c8:	2300      	movs	r3, #0
   100ca:	aa1c      	add	r2, sp, #112	; 0x70
   100cc:	46a8      	mov	r8, r5
   100ce:	76d3      	strb	r3, [r2, #27]
   100d0:	940f      	str	r4, [sp, #60]	; 0x3c
   100d2:	e644      	b.n	fd5e <_svfprintf_r+0x166>
   100d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   100d6:	ca08      	ldmia	r2!, {r3}
   100d8:	9308      	str	r3, [sp, #32]
   100da:	2b00      	cmp	r3, #0
   100dc:	db01      	blt.n	100e2 <_svfprintf_r+0x4ea>
   100de:	f000 fc2d 	bl	1093c <_svfprintf_r+0xd44>
   100e2:	9b08      	ldr	r3, [sp, #32]
   100e4:	920f      	str	r2, [sp, #60]	; 0x3c
   100e6:	425b      	negs	r3, r3
   100e8:	9308      	str	r3, [sp, #32]
   100ea:	2304      	movs	r3, #4
   100ec:	431d      	orrs	r5, r3
   100ee:	7823      	ldrb	r3, [r4, #0]
   100f0:	e5d2      	b.n	fc98 <_svfprintf_r+0xa0>
   100f2:	232b      	movs	r3, #43	; 0x2b
   100f4:	aa1c      	add	r2, sp, #112	; 0x70
   100f6:	76d3      	strb	r3, [r2, #27]
   100f8:	7823      	ldrb	r3, [r4, #0]
   100fa:	e5cd      	b.n	fc98 <_svfprintf_r+0xa0>
   100fc:	2380      	movs	r3, #128	; 0x80
   100fe:	431d      	orrs	r5, r3
   10100:	7823      	ldrb	r3, [r4, #0]
   10102:	e5c9      	b.n	fc98 <_svfprintf_r+0xa0>
   10104:	7823      	ldrb	r3, [r4, #0]
   10106:	1c60      	adds	r0, r4, #1
   10108:	2b2a      	cmp	r3, #42	; 0x2a
   1010a:	d101      	bne.n	10110 <_svfprintf_r+0x518>
   1010c:	f001 fb2e 	bl	1176c <_svfprintf_r+0x1b74>
   10110:	001a      	movs	r2, r3
   10112:	2400      	movs	r4, #0
   10114:	3a30      	subs	r2, #48	; 0x30
   10116:	9407      	str	r4, [sp, #28]
   10118:	0001      	movs	r1, r0
   1011a:	0004      	movs	r4, r0
   1011c:	2a09      	cmp	r2, #9
   1011e:	d900      	bls.n	10122 <_svfprintf_r+0x52a>
   10120:	e5bb      	b.n	fc9a <_svfprintf_r+0xa2>
   10122:	2000      	movs	r0, #0
   10124:	0083      	lsls	r3, r0, #2
   10126:	1818      	adds	r0, r3, r0
   10128:	000b      	movs	r3, r1
   1012a:	781b      	ldrb	r3, [r3, #0]
   1012c:	0040      	lsls	r0, r0, #1
   1012e:	1880      	adds	r0, r0, r2
   10130:	001a      	movs	r2, r3
   10132:	3101      	adds	r1, #1
   10134:	3a30      	subs	r2, #48	; 0x30
   10136:	000c      	movs	r4, r1
   10138:	2a09      	cmp	r2, #9
   1013a:	d9f3      	bls.n	10124 <_svfprintf_r+0x52c>
   1013c:	9007      	str	r0, [sp, #28]
   1013e:	e5ac      	b.n	fc9a <_svfprintf_r+0xa2>
   10140:	2301      	movs	r3, #1
   10142:	431d      	orrs	r5, r3
   10144:	7823      	ldrb	r3, [r4, #0]
   10146:	e5a7      	b.n	fc98 <_svfprintf_r+0xa0>
   10148:	ab1c      	add	r3, sp, #112	; 0x70
   1014a:	7edb      	ldrb	r3, [r3, #27]
   1014c:	2b00      	cmp	r3, #0
   1014e:	d000      	beq.n	10152 <_svfprintf_r+0x55a>
   10150:	e5bf      	b.n	fcd2 <_svfprintf_r+0xda>
   10152:	2320      	movs	r3, #32
   10154:	aa1c      	add	r2, sp, #112	; 0x70
   10156:	76d3      	strb	r3, [r2, #27]
   10158:	7823      	ldrb	r3, [r4, #0]
   1015a:	e59d      	b.n	fc98 <_svfprintf_r+0xa0>
   1015c:	46a2      	mov	sl, r4
   1015e:	9312      	str	r3, [sp, #72]	; 0x48
   10160:	2410      	movs	r4, #16
   10162:	002b      	movs	r3, r5
   10164:	4323      	orrs	r3, r4
   10166:	001c      	movs	r4, r3
   10168:	06a3      	lsls	r3, r4, #26
   1016a:	d400      	bmi.n	1016e <_svfprintf_r+0x576>
   1016c:	e39d      	b.n	108aa <_svfprintf_r+0xcb2>
   1016e:	2207      	movs	r2, #7
   10170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10172:	3307      	adds	r3, #7
   10174:	4393      	bics	r3, r2
   10176:	0019      	movs	r1, r3
   10178:	c90c      	ldmia	r1!, {r2, r3}
   1017a:	920c      	str	r2, [sp, #48]	; 0x30
   1017c:	930d      	str	r3, [sp, #52]	; 0x34
   1017e:	2301      	movs	r3, #1
   10180:	910f      	str	r1, [sp, #60]	; 0x3c
   10182:	2200      	movs	r2, #0
   10184:	a91c      	add	r1, sp, #112	; 0x70
   10186:	76ca      	strb	r2, [r1, #27]
   10188:	9807      	ldr	r0, [sp, #28]
   1018a:	1c42      	adds	r2, r0, #1
   1018c:	d100      	bne.n	10190 <_svfprintf_r+0x598>
   1018e:	e0c6      	b.n	1031e <_svfprintf_r+0x726>
   10190:	2280      	movs	r2, #128	; 0x80
   10192:	0021      	movs	r1, r4
   10194:	4391      	bics	r1, r2
   10196:	4688      	mov	r8, r1
   10198:	990c      	ldr	r1, [sp, #48]	; 0x30
   1019a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1019c:	000d      	movs	r5, r1
   1019e:	4315      	orrs	r5, r2
   101a0:	d000      	beq.n	101a4 <_svfprintf_r+0x5ac>
   101a2:	e0bb      	b.n	1031c <_svfprintf_r+0x724>
   101a4:	2800      	cmp	r0, #0
   101a6:	d001      	beq.n	101ac <_svfprintf_r+0x5b4>
   101a8:	f000 fee0 	bl	10f6c <_svfprintf_r+0x1374>
   101ac:	2b00      	cmp	r3, #0
   101ae:	d000      	beq.n	101b2 <_svfprintf_r+0x5ba>
   101b0:	e334      	b.n	1081c <_svfprintf_r+0xc24>
   101b2:	3301      	adds	r3, #1
   101b4:	001a      	movs	r2, r3
   101b6:	4022      	ands	r2, r4
   101b8:	920a      	str	r2, [sp, #40]	; 0x28
   101ba:	ae56      	add	r6, sp, #344	; 0x158
   101bc:	4223      	tst	r3, r4
   101be:	d000      	beq.n	101c2 <_svfprintf_r+0x5ca>
   101c0:	e3c0      	b.n	10944 <_svfprintf_r+0xd4c>
   101c2:	9a07      	ldr	r2, [sp, #28]
   101c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   101c6:	ab1c      	add	r3, sp, #112	; 0x70
   101c8:	7edb      	ldrb	r3, [r3, #27]
   101ca:	9206      	str	r2, [sp, #24]
   101cc:	428a      	cmp	r2, r1
   101ce:	da00      	bge.n	101d2 <_svfprintf_r+0x5da>
   101d0:	9106      	str	r1, [sp, #24]
   101d2:	2200      	movs	r2, #0
   101d4:	920e      	str	r2, [sp, #56]	; 0x38
   101d6:	9218      	str	r2, [sp, #96]	; 0x60
   101d8:	9213      	str	r2, [sp, #76]	; 0x4c
   101da:	9214      	str	r2, [sp, #80]	; 0x50
   101dc:	2b00      	cmp	r3, #0
   101de:	d100      	bne.n	101e2 <_svfprintf_r+0x5ea>
   101e0:	e5c9      	b.n	fd76 <_svfprintf_r+0x17e>
   101e2:	9a06      	ldr	r2, [sp, #24]
   101e4:	3201      	adds	r2, #1
   101e6:	9206      	str	r2, [sp, #24]
   101e8:	e5c5      	b.n	fd76 <_svfprintf_r+0x17e>
   101ea:	002a      	movs	r2, r5
   101ec:	9312      	str	r3, [sp, #72]	; 0x48
   101ee:	2310      	movs	r3, #16
   101f0:	431a      	orrs	r2, r3
   101f2:	46a2      	mov	sl, r4
   101f4:	4690      	mov	r8, r2
   101f6:	4643      	mov	r3, r8
   101f8:	069b      	lsls	r3, r3, #26
   101fa:	d400      	bmi.n	101fe <_svfprintf_r+0x606>
   101fc:	e34b      	b.n	10896 <_svfprintf_r+0xc9e>
   101fe:	2307      	movs	r3, #7
   10200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10202:	3407      	adds	r4, #7
   10204:	439c      	bics	r4, r3
   10206:	0022      	movs	r2, r4
   10208:	ca18      	ldmia	r2!, {r3, r4}
   1020a:	930c      	str	r3, [sp, #48]	; 0x30
   1020c:	940d      	str	r4, [sp, #52]	; 0x34
   1020e:	920f      	str	r2, [sp, #60]	; 0x3c
   10210:	4643      	mov	r3, r8
   10212:	4cdc      	ldr	r4, [pc, #880]	; (10584 <_svfprintf_r+0x98c>)
   10214:	4023      	ands	r3, r4
   10216:	001c      	movs	r4, r3
   10218:	2300      	movs	r3, #0
   1021a:	e7b2      	b.n	10182 <_svfprintf_r+0x58a>
   1021c:	2308      	movs	r3, #8
   1021e:	431d      	orrs	r5, r3
   10220:	7823      	ldrb	r3, [r4, #0]
   10222:	e539      	b.n	fc98 <_svfprintf_r+0xa0>
   10224:	002a      	movs	r2, r5
   10226:	9312      	str	r3, [sp, #72]	; 0x48
   10228:	2310      	movs	r3, #16
   1022a:	431a      	orrs	r2, r3
   1022c:	46a2      	mov	sl, r4
   1022e:	4690      	mov	r8, r2
   10230:	4643      	mov	r3, r8
   10232:	069b      	lsls	r3, r3, #26
   10234:	d400      	bmi.n	10238 <_svfprintf_r+0x640>
   10236:	e343      	b.n	108c0 <_svfprintf_r+0xcc8>
   10238:	2307      	movs	r3, #7
   1023a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1023c:	3407      	adds	r4, #7
   1023e:	439c      	bics	r4, r3
   10240:	3301      	adds	r3, #1
   10242:	469c      	mov	ip, r3
   10244:	44a4      	add	ip, r4
   10246:	4663      	mov	r3, ip
   10248:	6822      	ldr	r2, [r4, #0]
   1024a:	930f      	str	r3, [sp, #60]	; 0x3c
   1024c:	6863      	ldr	r3, [r4, #4]
   1024e:	920c      	str	r2, [sp, #48]	; 0x30
   10250:	930d      	str	r3, [sp, #52]	; 0x34
   10252:	2b00      	cmp	r3, #0
   10254:	da00      	bge.n	10258 <_svfprintf_r+0x660>
   10256:	e33e      	b.n	108d6 <_svfprintf_r+0xcde>
   10258:	9b07      	ldr	r3, [sp, #28]
   1025a:	4644      	mov	r4, r8
   1025c:	3301      	adds	r3, #1
   1025e:	d007      	beq.n	10270 <_svfprintf_r+0x678>
   10260:	2380      	movs	r3, #128	; 0x80
   10262:	439c      	bics	r4, r3
   10264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10268:	0011      	movs	r1, r2
   1026a:	4319      	orrs	r1, r3
   1026c:	d100      	bne.n	10270 <_svfprintf_r+0x678>
   1026e:	e2d0      	b.n	10812 <_svfprintf_r+0xc1a>
   10270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10274:	2b00      	cmp	r3, #0
   10276:	d000      	beq.n	1027a <_svfprintf_r+0x682>
   10278:	e18c      	b.n	10594 <_svfprintf_r+0x99c>
   1027a:	2a09      	cmp	r2, #9
   1027c:	d900      	bls.n	10280 <_svfprintf_r+0x688>
   1027e:	e189      	b.n	10594 <_svfprintf_r+0x99c>
   10280:	2263      	movs	r2, #99	; 0x63
   10282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10284:	a93d      	add	r1, sp, #244	; 0xf4
   10286:	3330      	adds	r3, #48	; 0x30
   10288:	548b      	strb	r3, [r1, r2]
   1028a:	2301      	movs	r3, #1
   1028c:	930a      	str	r3, [sp, #40]	; 0x28
   1028e:	ab1c      	add	r3, sp, #112	; 0x70
   10290:	26e7      	movs	r6, #231	; 0xe7
   10292:	469c      	mov	ip, r3
   10294:	46a0      	mov	r8, r4
   10296:	4466      	add	r6, ip
   10298:	e793      	b.n	101c2 <_svfprintf_r+0x5ca>
   1029a:	7823      	ldrb	r3, [r4, #0]
   1029c:	2b6c      	cmp	r3, #108	; 0x6c
   1029e:	d101      	bne.n	102a4 <_svfprintf_r+0x6ac>
   102a0:	f000 fcd7 	bl	10c52 <_svfprintf_r+0x105a>
   102a4:	2210      	movs	r2, #16
   102a6:	4315      	orrs	r5, r2
   102a8:	e4f6      	b.n	fc98 <_svfprintf_r+0xa0>
   102aa:	7823      	ldrb	r3, [r4, #0]
   102ac:	2b68      	cmp	r3, #104	; 0x68
   102ae:	d101      	bne.n	102b4 <_svfprintf_r+0x6bc>
   102b0:	f000 fcb0 	bl	10c14 <_svfprintf_r+0x101c>
   102b4:	2240      	movs	r2, #64	; 0x40
   102b6:	4315      	orrs	r5, r2
   102b8:	e4ee      	b.n	fc98 <_svfprintf_r+0xa0>
   102ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102bc:	46a2      	mov	sl, r4
   102be:	cb04      	ldmia	r3!, {r2}
   102c0:	2402      	movs	r4, #2
   102c2:	920c      	str	r2, [sp, #48]	; 0x30
   102c4:	2200      	movs	r2, #0
   102c6:	920d      	str	r2, [sp, #52]	; 0x34
   102c8:	002a      	movs	r2, r5
   102ca:	2130      	movs	r1, #48	; 0x30
   102cc:	4322      	orrs	r2, r4
   102ce:	0014      	movs	r4, r2
   102d0:	aa23      	add	r2, sp, #140	; 0x8c
   102d2:	7011      	strb	r1, [r2, #0]
   102d4:	3148      	adds	r1, #72	; 0x48
   102d6:	7051      	strb	r1, [r2, #1]
   102d8:	2278      	movs	r2, #120	; 0x78
   102da:	930f      	str	r3, [sp, #60]	; 0x3c
   102dc:	4baa      	ldr	r3, [pc, #680]	; (10588 <_svfprintf_r+0x990>)
   102de:	9212      	str	r2, [sp, #72]	; 0x48
   102e0:	931d      	str	r3, [sp, #116]	; 0x74
   102e2:	2302      	movs	r3, #2
   102e4:	e74d      	b.n	10182 <_svfprintf_r+0x58a>
   102e6:	002b      	movs	r3, r5
   102e8:	46a2      	mov	sl, r4
   102ea:	069b      	lsls	r3, r3, #26
   102ec:	d500      	bpl.n	102f0 <_svfprintf_r+0x6f8>
   102ee:	e33e      	b.n	1096e <_svfprintf_r+0xd76>
   102f0:	002b      	movs	r3, r5
   102f2:	06db      	lsls	r3, r3, #27
   102f4:	d501      	bpl.n	102fa <_svfprintf_r+0x702>
   102f6:	f000 fe40 	bl	10f7a <_svfprintf_r+0x1382>
   102fa:	002b      	movs	r3, r5
   102fc:	065b      	lsls	r3, r3, #25
   102fe:	d501      	bpl.n	10304 <_svfprintf_r+0x70c>
   10300:	f000 fef1 	bl	110e6 <_svfprintf_r+0x14ee>
   10304:	002b      	movs	r3, r5
   10306:	059b      	lsls	r3, r3, #22
   10308:	d401      	bmi.n	1030e <_svfprintf_r+0x716>
   1030a:	f000 fe36 	bl	10f7a <_svfprintf_r+0x1382>
   1030e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10310:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10312:	cc08      	ldmia	r4!, {r3}
   10314:	4656      	mov	r6, sl
   10316:	701a      	strb	r2, [r3, #0]
   10318:	940f      	str	r4, [sp, #60]	; 0x3c
   1031a:	e5a8      	b.n	fe6e <_svfprintf_r+0x276>
   1031c:	4644      	mov	r4, r8
   1031e:	2b01      	cmp	r3, #1
   10320:	d0a6      	beq.n	10270 <_svfprintf_r+0x678>
   10322:	ae56      	add	r6, sp, #344	; 0x158
   10324:	2b02      	cmp	r3, #2
   10326:	d100      	bne.n	1032a <_svfprintf_r+0x732>
   10328:	e10f      	b.n	1054a <_svfprintf_r+0x952>
   1032a:	2307      	movs	r3, #7
   1032c:	46a0      	mov	r8, r4
   1032e:	46b9      	mov	r9, r7
   10330:	469c      	mov	ip, r3
   10332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10336:	075f      	lsls	r7, r3, #29
   10338:	08d5      	lsrs	r5, r2, #3
   1033a:	4661      	mov	r1, ip
   1033c:	08d8      	lsrs	r0, r3, #3
   1033e:	432f      	orrs	r7, r5
   10340:	0003      	movs	r3, r0
   10342:	0038      	movs	r0, r7
   10344:	4011      	ands	r1, r2
   10346:	0034      	movs	r4, r6
   10348:	3130      	adds	r1, #48	; 0x30
   1034a:	3e01      	subs	r6, #1
   1034c:	003a      	movs	r2, r7
   1034e:	7031      	strb	r1, [r6, #0]
   10350:	4318      	orrs	r0, r3
   10352:	d1f0      	bne.n	10336 <_svfprintf_r+0x73e>
   10354:	0025      	movs	r5, r4
   10356:	4644      	mov	r4, r8
   10358:	464f      	mov	r7, r9
   1035a:	920c      	str	r2, [sp, #48]	; 0x30
   1035c:	930d      	str	r3, [sp, #52]	; 0x34
   1035e:	07e2      	lsls	r2, r4, #31
   10360:	d400      	bmi.n	10364 <_svfprintf_r+0x76c>
   10362:	e153      	b.n	1060c <_svfprintf_r+0xa14>
   10364:	2930      	cmp	r1, #48	; 0x30
   10366:	d100      	bne.n	1036a <_svfprintf_r+0x772>
   10368:	e150      	b.n	1060c <_svfprintf_r+0xa14>
   1036a:	2330      	movs	r3, #48	; 0x30
   1036c:	3e01      	subs	r6, #1
   1036e:	3d02      	subs	r5, #2
   10370:	7033      	strb	r3, [r6, #0]
   10372:	ab56      	add	r3, sp, #344	; 0x158
   10374:	1b5b      	subs	r3, r3, r5
   10376:	002e      	movs	r6, r5
   10378:	930a      	str	r3, [sp, #40]	; 0x28
   1037a:	e722      	b.n	101c2 <_svfprintf_r+0x5ca>
   1037c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1037e:	2b65      	cmp	r3, #101	; 0x65
   10380:	dc00      	bgt.n	10384 <_svfprintf_r+0x78c>
   10382:	e621      	b.n	ffc8 <_svfprintf_r+0x3d0>
   10384:	9816      	ldr	r0, [sp, #88]	; 0x58
   10386:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10388:	2200      	movs	r2, #0
   1038a:	2300      	movs	r3, #0
   1038c:	f7f4 f8e6 	bl	455c <__aeabi_dcmpeq>
   10390:	2800      	cmp	r0, #0
   10392:	d100      	bne.n	10396 <_svfprintf_r+0x79e>
   10394:	e196      	b.n	106c4 <_svfprintf_r+0xacc>
   10396:	4b7d      	ldr	r3, [pc, #500]	; (1058c <_svfprintf_r+0x994>)
   10398:	3401      	adds	r4, #1
   1039a:	603b      	str	r3, [r7, #0]
   1039c:	2301      	movs	r3, #1
   1039e:	607b      	str	r3, [r7, #4]
   103a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   103a2:	942c      	str	r4, [sp, #176]	; 0xb0
   103a4:	9307      	str	r3, [sp, #28]
   103a6:	3301      	adds	r3, #1
   103a8:	932b      	str	r3, [sp, #172]	; 0xac
   103aa:	2b07      	cmp	r3, #7
   103ac:	dd01      	ble.n	103b2 <_svfprintf_r+0x7ba>
   103ae:	f000 fda5 	bl	10efc <_svfprintf_r+0x1304>
   103b2:	3708      	adds	r7, #8
   103b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   103b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   103b8:	4293      	cmp	r3, r2
   103ba:	db00      	blt.n	103be <_svfprintf_r+0x7c6>
   103bc:	e2b4      	b.n	10928 <_svfprintf_r+0xd30>
   103be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   103c0:	603b      	str	r3, [r7, #0]
   103c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   103c4:	469c      	mov	ip, r3
   103c6:	607b      	str	r3, [r7, #4]
   103c8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   103ca:	4464      	add	r4, ip
   103cc:	9307      	str	r3, [sp, #28]
   103ce:	3301      	adds	r3, #1
   103d0:	942c      	str	r4, [sp, #176]	; 0xb0
   103d2:	932b      	str	r3, [sp, #172]	; 0xac
   103d4:	2b07      	cmp	r3, #7
   103d6:	dd01      	ble.n	103dc <_svfprintf_r+0x7e4>
   103d8:	f000 fc23 	bl	10c22 <_svfprintf_r+0x102a>
   103dc:	3708      	adds	r7, #8
   103de:	9b15      	ldr	r3, [sp, #84]	; 0x54
   103e0:	1e5d      	subs	r5, r3, #1
   103e2:	2d00      	cmp	r5, #0
   103e4:	dc00      	bgt.n	103e8 <_svfprintf_r+0x7f0>
   103e6:	e520      	b.n	fe2a <_svfprintf_r+0x232>
   103e8:	4a69      	ldr	r2, [pc, #420]	; (10590 <_svfprintf_r+0x998>)
   103ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   103ec:	4691      	mov	r9, r2
   103ee:	2d10      	cmp	r5, #16
   103f0:	dc01      	bgt.n	103f6 <_svfprintf_r+0x7fe>
   103f2:	f000 fd94 	bl	10f1e <_svfprintf_r+0x1326>
   103f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   103f8:	003a      	movs	r2, r7
   103fa:	0021      	movs	r1, r4
   103fc:	2610      	movs	r6, #16
   103fe:	464c      	mov	r4, r9
   10400:	465f      	mov	r7, fp
   10402:	4681      	mov	r9, r0
   10404:	e005      	b.n	10412 <_svfprintf_r+0x81a>
   10406:	3208      	adds	r2, #8
   10408:	3d10      	subs	r5, #16
   1040a:	2d10      	cmp	r5, #16
   1040c:	dc01      	bgt.n	10412 <_svfprintf_r+0x81a>
   1040e:	f000 fd82 	bl	10f16 <_svfprintf_r+0x131e>
   10412:	3110      	adds	r1, #16
   10414:	3301      	adds	r3, #1
   10416:	6014      	str	r4, [r2, #0]
   10418:	6056      	str	r6, [r2, #4]
   1041a:	912c      	str	r1, [sp, #176]	; 0xb0
   1041c:	932b      	str	r3, [sp, #172]	; 0xac
   1041e:	2b07      	cmp	r3, #7
   10420:	ddf1      	ble.n	10406 <_svfprintf_r+0x80e>
   10422:	4649      	mov	r1, r9
   10424:	0038      	movs	r0, r7
   10426:	aa2a      	add	r2, sp, #168	; 0xa8
   10428:	f002 fd7e 	bl	12f28 <__ssprint_r>
   1042c:	2800      	cmp	r0, #0
   1042e:	d001      	beq.n	10434 <_svfprintf_r+0x83c>
   10430:	f000 fee6 	bl	11200 <_svfprintf_r+0x1608>
   10434:	992c      	ldr	r1, [sp, #176]	; 0xb0
   10436:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10438:	aa2d      	add	r2, sp, #180	; 0xb4
   1043a:	e7e5      	b.n	10408 <_svfprintf_r+0x810>
   1043c:	9b08      	ldr	r3, [sp, #32]
   1043e:	9a06      	ldr	r2, [sp, #24]
   10440:	1a9d      	subs	r5, r3, r2
   10442:	2d00      	cmp	r5, #0
   10444:	dc00      	bgt.n	10448 <_svfprintf_r+0x850>
   10446:	e4d8      	b.n	fdfa <_svfprintf_r+0x202>
   10448:	4a51      	ldr	r2, [pc, #324]	; (10590 <_svfprintf_r+0x998>)
   1044a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1044c:	4691      	mov	r9, r2
   1044e:	2d10      	cmp	r5, #16
   10450:	dd26      	ble.n	104a0 <_svfprintf_r+0x8a8>
   10452:	003a      	movs	r2, r7
   10454:	0021      	movs	r1, r4
   10456:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   10458:	464c      	mov	r4, r9
   1045a:	46b1      	mov	r9, r6
   1045c:	465e      	mov	r6, fp
   1045e:	e003      	b.n	10468 <_svfprintf_r+0x870>
   10460:	3d10      	subs	r5, #16
   10462:	3208      	adds	r2, #8
   10464:	2d10      	cmp	r5, #16
   10466:	dd16      	ble.n	10496 <_svfprintf_r+0x89e>
   10468:	2010      	movs	r0, #16
   1046a:	3110      	adds	r1, #16
   1046c:	3301      	adds	r3, #1
   1046e:	6014      	str	r4, [r2, #0]
   10470:	6050      	str	r0, [r2, #4]
   10472:	912c      	str	r1, [sp, #176]	; 0xb0
   10474:	932b      	str	r3, [sp, #172]	; 0xac
   10476:	2b07      	cmp	r3, #7
   10478:	ddf2      	ble.n	10460 <_svfprintf_r+0x868>
   1047a:	0039      	movs	r1, r7
   1047c:	0030      	movs	r0, r6
   1047e:	aa2a      	add	r2, sp, #168	; 0xa8
   10480:	f002 fd52 	bl	12f28 <__ssprint_r>
   10484:	2800      	cmp	r0, #0
   10486:	d000      	beq.n	1048a <_svfprintf_r+0x892>
   10488:	e448      	b.n	fd1c <_svfprintf_r+0x124>
   1048a:	3d10      	subs	r5, #16
   1048c:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1048e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10490:	aa2d      	add	r2, sp, #180	; 0xb4
   10492:	2d10      	cmp	r5, #16
   10494:	dce8      	bgt.n	10468 <_svfprintf_r+0x870>
   10496:	46b3      	mov	fp, r6
   10498:	0017      	movs	r7, r2
   1049a:	464e      	mov	r6, r9
   1049c:	46a1      	mov	r9, r4
   1049e:	000c      	movs	r4, r1
   104a0:	464a      	mov	r2, r9
   104a2:	1964      	adds	r4, r4, r5
   104a4:	3301      	adds	r3, #1
   104a6:	603a      	str	r2, [r7, #0]
   104a8:	607d      	str	r5, [r7, #4]
   104aa:	942c      	str	r4, [sp, #176]	; 0xb0
   104ac:	932b      	str	r3, [sp, #172]	; 0xac
   104ae:	2b07      	cmp	r3, #7
   104b0:	dd01      	ble.n	104b6 <_svfprintf_r+0x8be>
   104b2:	f000 fd4e 	bl	10f52 <_svfprintf_r+0x135a>
   104b6:	9b07      	ldr	r3, [sp, #28]
   104b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104ba:	3708      	adds	r7, #8
   104bc:	1a9d      	subs	r5, r3, r2
   104be:	2d00      	cmp	r5, #0
   104c0:	dc00      	bgt.n	104c4 <_svfprintf_r+0x8cc>
   104c2:	e4a0      	b.n	fe06 <_svfprintf_r+0x20e>
   104c4:	4a32      	ldr	r2, [pc, #200]	; (10590 <_svfprintf_r+0x998>)
   104c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   104c8:	4691      	mov	r9, r2
   104ca:	2d10      	cmp	r5, #16
   104cc:	dd27      	ble.n	1051e <_svfprintf_r+0x926>
   104ce:	003a      	movs	r2, r7
   104d0:	0021      	movs	r1, r4
   104d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   104d4:	464c      	mov	r4, r9
   104d6:	46b1      	mov	r9, r6
   104d8:	465e      	mov	r6, fp
   104da:	e003      	b.n	104e4 <_svfprintf_r+0x8ec>
   104dc:	3d10      	subs	r5, #16
   104de:	3208      	adds	r2, #8
   104e0:	2d10      	cmp	r5, #16
   104e2:	dd17      	ble.n	10514 <_svfprintf_r+0x91c>
   104e4:	2010      	movs	r0, #16
   104e6:	3110      	adds	r1, #16
   104e8:	3301      	adds	r3, #1
   104ea:	6014      	str	r4, [r2, #0]
   104ec:	6050      	str	r0, [r2, #4]
   104ee:	912c      	str	r1, [sp, #176]	; 0xb0
   104f0:	932b      	str	r3, [sp, #172]	; 0xac
   104f2:	2b07      	cmp	r3, #7
   104f4:	ddf2      	ble.n	104dc <_svfprintf_r+0x8e4>
   104f6:	0039      	movs	r1, r7
   104f8:	0030      	movs	r0, r6
   104fa:	aa2a      	add	r2, sp, #168	; 0xa8
   104fc:	f002 fd14 	bl	12f28 <__ssprint_r>
   10500:	2800      	cmp	r0, #0
   10502:	d001      	beq.n	10508 <_svfprintf_r+0x910>
   10504:	f7ff fc0a 	bl	fd1c <_svfprintf_r+0x124>
   10508:	3d10      	subs	r5, #16
   1050a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1050c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1050e:	aa2d      	add	r2, sp, #180	; 0xb4
   10510:	2d10      	cmp	r5, #16
   10512:	dce7      	bgt.n	104e4 <_svfprintf_r+0x8ec>
   10514:	46b3      	mov	fp, r6
   10516:	0017      	movs	r7, r2
   10518:	464e      	mov	r6, r9
   1051a:	46a1      	mov	r9, r4
   1051c:	000c      	movs	r4, r1
   1051e:	464a      	mov	r2, r9
   10520:	1964      	adds	r4, r4, r5
   10522:	3301      	adds	r3, #1
   10524:	603a      	str	r2, [r7, #0]
   10526:	607d      	str	r5, [r7, #4]
   10528:	942c      	str	r4, [sp, #176]	; 0xb0
   1052a:	932b      	str	r3, [sp, #172]	; 0xac
   1052c:	2b07      	cmp	r3, #7
   1052e:	dd00      	ble.n	10532 <_svfprintf_r+0x93a>
   10530:	e1a4      	b.n	1087c <_svfprintf_r+0xc84>
   10532:	3708      	adds	r7, #8
   10534:	e467      	b.n	fe06 <_svfprintf_r+0x20e>
   10536:	4658      	mov	r0, fp
   10538:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1053a:	aa2a      	add	r2, sp, #168	; 0xa8
   1053c:	f002 fcf4 	bl	12f28 <__ssprint_r>
   10540:	2800      	cmp	r0, #0
   10542:	d100      	bne.n	10546 <_svfprintf_r+0x94e>
   10544:	e488      	b.n	fe58 <_svfprintf_r+0x260>
   10546:	f7ff fbea 	bl	fd1e <_svfprintf_r+0x126>
   1054a:	200f      	movs	r0, #15
   1054c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1054e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10550:	46a4      	mov	ip, r4
   10552:	46b8      	mov	r8, r7
   10554:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   10556:	0001      	movs	r1, r0
   10558:	4011      	ands	r1, r2
   1055a:	5c79      	ldrb	r1, [r7, r1]
   1055c:	071c      	lsls	r4, r3, #28
   1055e:	0915      	lsrs	r5, r2, #4
   10560:	3e01      	subs	r6, #1
   10562:	432c      	orrs	r4, r5
   10564:	7031      	strb	r1, [r6, #0]
   10566:	0919      	lsrs	r1, r3, #4
   10568:	000b      	movs	r3, r1
   1056a:	0021      	movs	r1, r4
   1056c:	0022      	movs	r2, r4
   1056e:	4319      	orrs	r1, r3
   10570:	d1f1      	bne.n	10556 <_svfprintf_r+0x95e>
   10572:	920c      	str	r2, [sp, #48]	; 0x30
   10574:	930d      	str	r3, [sp, #52]	; 0x34
   10576:	ab56      	add	r3, sp, #344	; 0x158
   10578:	1b9b      	subs	r3, r3, r6
   1057a:	4647      	mov	r7, r8
   1057c:	930a      	str	r3, [sp, #40]	; 0x28
   1057e:	46e0      	mov	r8, ip
   10580:	e61f      	b.n	101c2 <_svfprintf_r+0x5ca>
   10582:	46c0      	nop			; (mov r8, r8)
   10584:	fffffbff 	.word	0xfffffbff
   10588:	00016b44 	.word	0x00016b44
   1058c:	00015530 	.word	0x00015530
   10590:	00016cf0 	.word	0x00016cf0
   10594:	2580      	movs	r5, #128	; 0x80
   10596:	4652      	mov	r2, sl
   10598:	2300      	movs	r3, #0
   1059a:	00ed      	lsls	r5, r5, #3
   1059c:	4025      	ands	r5, r4
   1059e:	46a1      	mov	r9, r4
   105a0:	46ba      	mov	sl, r7
   105a2:	46a8      	mov	r8, r5
   105a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   105a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   105a8:	001f      	movs	r7, r3
   105aa:	ae56      	add	r6, sp, #344	; 0x158
   105ac:	9206      	str	r2, [sp, #24]
   105ae:	e00b      	b.n	105c8 <_svfprintf_r+0x9d0>
   105b0:	220a      	movs	r2, #10
   105b2:	2300      	movs	r3, #0
   105b4:	0020      	movs	r0, r4
   105b6:	0029      	movs	r1, r5
   105b8:	f7f4 f838 	bl	462c <__aeabi_uldivmod>
   105bc:	2d00      	cmp	r5, #0
   105be:	d101      	bne.n	105c4 <_svfprintf_r+0x9cc>
   105c0:	f000 fd7b 	bl	110ba <_svfprintf_r+0x14c2>
   105c4:	0004      	movs	r4, r0
   105c6:	000d      	movs	r5, r1
   105c8:	220a      	movs	r2, #10
   105ca:	2300      	movs	r3, #0
   105cc:	0020      	movs	r0, r4
   105ce:	0029      	movs	r1, r5
   105d0:	f7f4 f82c 	bl	462c <__aeabi_uldivmod>
   105d4:	4643      	mov	r3, r8
   105d6:	3e01      	subs	r6, #1
   105d8:	3230      	adds	r2, #48	; 0x30
   105da:	7032      	strb	r2, [r6, #0]
   105dc:	3701      	adds	r7, #1
   105de:	2b00      	cmp	r3, #0
   105e0:	d0e6      	beq.n	105b0 <_svfprintf_r+0x9b8>
   105e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   105e4:	781b      	ldrb	r3, [r3, #0]
   105e6:	429f      	cmp	r7, r3
   105e8:	d1e2      	bne.n	105b0 <_svfprintf_r+0x9b8>
   105ea:	2fff      	cmp	r7, #255	; 0xff
   105ec:	d0e0      	beq.n	105b0 <_svfprintf_r+0x9b8>
   105ee:	2d00      	cmp	r5, #0
   105f0:	d001      	beq.n	105f6 <_svfprintf_r+0x9fe>
   105f2:	f000 fc03 	bl	10dfc <_svfprintf_r+0x1204>
   105f6:	2c09      	cmp	r4, #9
   105f8:	d901      	bls.n	105fe <_svfprintf_r+0xa06>
   105fa:	f000 fbff 	bl	10dfc <_svfprintf_r+0x1204>
   105fe:	9b06      	ldr	r3, [sp, #24]
   10600:	940c      	str	r4, [sp, #48]	; 0x30
   10602:	950d      	str	r5, [sp, #52]	; 0x34
   10604:	9715      	str	r7, [sp, #84]	; 0x54
   10606:	464c      	mov	r4, r9
   10608:	4657      	mov	r7, sl
   1060a:	469a      	mov	sl, r3
   1060c:	ab56      	add	r3, sp, #344	; 0x158
   1060e:	1b9b      	subs	r3, r3, r6
   10610:	46a0      	mov	r8, r4
   10612:	930a      	str	r3, [sp, #40]	; 0x28
   10614:	e5d5      	b.n	101c2 <_svfprintf_r+0x5ca>
   10616:	4658      	mov	r0, fp
   10618:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1061a:	aa2a      	add	r2, sp, #168	; 0xa8
   1061c:	f002 fc84 	bl	12f28 <__ssprint_r>
   10620:	2800      	cmp	r0, #0
   10622:	d001      	beq.n	10628 <_svfprintf_r+0xa30>
   10624:	f7ff fb7b 	bl	fd1e <_svfprintf_r+0x126>
   10628:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1062a:	af2d      	add	r7, sp, #180	; 0xb4
   1062c:	f7ff fbe1 	bl	fdf2 <_svfprintf_r+0x1fa>
   10630:	4658      	mov	r0, fp
   10632:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10634:	aa2a      	add	r2, sp, #168	; 0xa8
   10636:	f002 fc77 	bl	12f28 <__ssprint_r>
   1063a:	2800      	cmp	r0, #0
   1063c:	d001      	beq.n	10642 <_svfprintf_r+0xa4a>
   1063e:	f7ff fb6e 	bl	fd1e <_svfprintf_r+0x126>
   10642:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10644:	af2d      	add	r7, sp, #180	; 0xb4
   10646:	f7ff fbc2 	bl	fdce <_svfprintf_r+0x1d6>
   1064a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1064c:	4ddf      	ldr	r5, [pc, #892]	; (109cc <_svfprintf_r+0xdd4>)
   1064e:	2e10      	cmp	r6, #16
   10650:	dd23      	ble.n	1069a <_svfprintf_r+0xaa2>
   10652:	2210      	movs	r2, #16
   10654:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10656:	4690      	mov	r8, r2
   10658:	4689      	mov	r9, r1
   1065a:	0022      	movs	r2, r4
   1065c:	465c      	mov	r4, fp
   1065e:	e003      	b.n	10668 <_svfprintf_r+0xa70>
   10660:	3e10      	subs	r6, #16
   10662:	3708      	adds	r7, #8
   10664:	2e10      	cmp	r6, #16
   10666:	dd16      	ble.n	10696 <_svfprintf_r+0xa9e>
   10668:	4641      	mov	r1, r8
   1066a:	3210      	adds	r2, #16
   1066c:	3301      	adds	r3, #1
   1066e:	603d      	str	r5, [r7, #0]
   10670:	6079      	str	r1, [r7, #4]
   10672:	922c      	str	r2, [sp, #176]	; 0xb0
   10674:	932b      	str	r3, [sp, #172]	; 0xac
   10676:	2b07      	cmp	r3, #7
   10678:	ddf2      	ble.n	10660 <_svfprintf_r+0xa68>
   1067a:	4649      	mov	r1, r9
   1067c:	0020      	movs	r0, r4
   1067e:	aa2a      	add	r2, sp, #168	; 0xa8
   10680:	f002 fc52 	bl	12f28 <__ssprint_r>
   10684:	2800      	cmp	r0, #0
   10686:	d000      	beq.n	1068a <_svfprintf_r+0xa92>
   10688:	e3e6      	b.n	10e58 <_svfprintf_r+0x1260>
   1068a:	3e10      	subs	r6, #16
   1068c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   1068e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10690:	af2d      	add	r7, sp, #180	; 0xb4
   10692:	2e10      	cmp	r6, #16
   10694:	dce8      	bgt.n	10668 <_svfprintf_r+0xa70>
   10696:	46a3      	mov	fp, r4
   10698:	0014      	movs	r4, r2
   1069a:	19a4      	adds	r4, r4, r6
   1069c:	3301      	adds	r3, #1
   1069e:	c760      	stmia	r7!, {r5, r6}
   106a0:	942c      	str	r4, [sp, #176]	; 0xb0
   106a2:	932b      	str	r3, [sp, #172]	; 0xac
   106a4:	2b07      	cmp	r3, #7
   106a6:	dc01      	bgt.n	106ac <_svfprintf_r+0xab4>
   106a8:	f7ff fbc9 	bl	fe3e <_svfprintf_r+0x246>
   106ac:	4658      	mov	r0, fp
   106ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   106b0:	aa2a      	add	r2, sp, #168	; 0xa8
   106b2:	f002 fc39 	bl	12f28 <__ssprint_r>
   106b6:	2800      	cmp	r0, #0
   106b8:	d001      	beq.n	106be <_svfprintf_r+0xac6>
   106ba:	f7ff fb30 	bl	fd1e <_svfprintf_r+0x126>
   106be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   106c0:	f7ff fbbd 	bl	fe3e <_svfprintf_r+0x246>
   106c4:	9924      	ldr	r1, [sp, #144]	; 0x90
   106c6:	2900      	cmp	r1, #0
   106c8:	dc00      	bgt.n	106cc <_svfprintf_r+0xad4>
   106ca:	e3c8      	b.n	10e5e <_svfprintf_r+0x1266>
   106cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   106ce:	001d      	movs	r5, r3
   106d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   106d2:	429d      	cmp	r5, r3
   106d4:	dd00      	ble.n	106d8 <_svfprintf_r+0xae0>
   106d6:	e26a      	b.n	10bae <_svfprintf_r+0xfb6>
   106d8:	2d00      	cmp	r5, #0
   106da:	dd0c      	ble.n	106f6 <_svfprintf_r+0xafe>
   106dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   106de:	1964      	adds	r4, r4, r5
   106e0:	9307      	str	r3, [sp, #28]
   106e2:	3301      	adds	r3, #1
   106e4:	603e      	str	r6, [r7, #0]
   106e6:	607d      	str	r5, [r7, #4]
   106e8:	942c      	str	r4, [sp, #176]	; 0xb0
   106ea:	932b      	str	r3, [sp, #172]	; 0xac
   106ec:	2b07      	cmp	r3, #7
   106ee:	dd01      	ble.n	106f4 <_svfprintf_r+0xafc>
   106f0:	f000 fd79 	bl	111e6 <_svfprintf_r+0x15ee>
   106f4:	3708      	adds	r7, #8
   106f6:	43eb      	mvns	r3, r5
   106f8:	17db      	asrs	r3, r3, #31
   106fa:	401d      	ands	r5, r3
   106fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   106fe:	1b5d      	subs	r5, r3, r5
   10700:	2d00      	cmp	r5, #0
   10702:	dd00      	ble.n	10706 <_svfprintf_r+0xb0e>
   10704:	e2c1      	b.n	10c8a <_svfprintf_r+0x1092>
   10706:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10708:	469c      	mov	ip, r3
   1070a:	4643      	mov	r3, r8
   1070c:	44b4      	add	ip, r6
   1070e:	4665      	mov	r5, ip
   10710:	055b      	lsls	r3, r3, #21
   10712:	d500      	bpl.n	10716 <_svfprintf_r+0xb1e>
   10714:	e2e1      	b.n	10cda <_svfprintf_r+0x10e2>
   10716:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10718:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1071a:	4293      	cmp	r3, r2
   1071c:	db04      	blt.n	10728 <_svfprintf_r+0xb30>
   1071e:	4642      	mov	r2, r8
   10720:	07d2      	lsls	r2, r2, #31
   10722:	d401      	bmi.n	10728 <_svfprintf_r+0xb30>
   10724:	f000 fcd2 	bl	110cc <_svfprintf_r+0x14d4>
   10728:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1072a:	603a      	str	r2, [r7, #0]
   1072c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1072e:	4694      	mov	ip, r2
   10730:	607a      	str	r2, [r7, #4]
   10732:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   10734:	4464      	add	r4, ip
   10736:	9207      	str	r2, [sp, #28]
   10738:	3201      	adds	r2, #1
   1073a:	942c      	str	r4, [sp, #176]	; 0xb0
   1073c:	922b      	str	r2, [sp, #172]	; 0xac
   1073e:	2a07      	cmp	r2, #7
   10740:	dd01      	ble.n	10746 <_svfprintf_r+0xb4e>
   10742:	f000 fd60 	bl	11206 <_svfprintf_r+0x160e>
   10746:	3708      	adds	r7, #8
   10748:	9915      	ldr	r1, [sp, #84]	; 0x54
   1074a:	468c      	mov	ip, r1
   1074c:	1acb      	subs	r3, r1, r3
   1074e:	4466      	add	r6, ip
   10750:	1b72      	subs	r2, r6, r5
   10752:	001e      	movs	r6, r3
   10754:	4293      	cmp	r3, r2
   10756:	dd00      	ble.n	1075a <_svfprintf_r+0xb62>
   10758:	0016      	movs	r6, r2
   1075a:	2e00      	cmp	r6, #0
   1075c:	dd0c      	ble.n	10778 <_svfprintf_r+0xb80>
   1075e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   10760:	19a4      	adds	r4, r4, r6
   10762:	9207      	str	r2, [sp, #28]
   10764:	3201      	adds	r2, #1
   10766:	603d      	str	r5, [r7, #0]
   10768:	607e      	str	r6, [r7, #4]
   1076a:	942c      	str	r4, [sp, #176]	; 0xb0
   1076c:	922b      	str	r2, [sp, #172]	; 0xac
   1076e:	2a07      	cmp	r2, #7
   10770:	dd01      	ble.n	10776 <_svfprintf_r+0xb7e>
   10772:	f000 fdca 	bl	1130a <_svfprintf_r+0x1712>
   10776:	3708      	adds	r7, #8
   10778:	43f5      	mvns	r5, r6
   1077a:	17ed      	asrs	r5, r5, #31
   1077c:	4035      	ands	r5, r6
   1077e:	1b5d      	subs	r5, r3, r5
   10780:	2d00      	cmp	r5, #0
   10782:	dc01      	bgt.n	10788 <_svfprintf_r+0xb90>
   10784:	f7ff fb51 	bl	fe2a <_svfprintf_r+0x232>
   10788:	4a91      	ldr	r2, [pc, #580]	; (109d0 <_svfprintf_r+0xdd8>)
   1078a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1078c:	4691      	mov	r9, r2
   1078e:	2d10      	cmp	r5, #16
   10790:	dc00      	bgt.n	10794 <_svfprintf_r+0xb9c>
   10792:	e3c4      	b.n	10f1e <_svfprintf_r+0x1326>
   10794:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10796:	003a      	movs	r2, r7
   10798:	0021      	movs	r1, r4
   1079a:	2610      	movs	r6, #16
   1079c:	464c      	mov	r4, r9
   1079e:	465f      	mov	r7, fp
   107a0:	4681      	mov	r9, r0
   107a2:	e004      	b.n	107ae <_svfprintf_r+0xbb6>
   107a4:	3208      	adds	r2, #8
   107a6:	3d10      	subs	r5, #16
   107a8:	2d10      	cmp	r5, #16
   107aa:	dc00      	bgt.n	107ae <_svfprintf_r+0xbb6>
   107ac:	e3b3      	b.n	10f16 <_svfprintf_r+0x131e>
   107ae:	3110      	adds	r1, #16
   107b0:	3301      	adds	r3, #1
   107b2:	6014      	str	r4, [r2, #0]
   107b4:	6056      	str	r6, [r2, #4]
   107b6:	912c      	str	r1, [sp, #176]	; 0xb0
   107b8:	932b      	str	r3, [sp, #172]	; 0xac
   107ba:	2b07      	cmp	r3, #7
   107bc:	ddf2      	ble.n	107a4 <_svfprintf_r+0xbac>
   107be:	4649      	mov	r1, r9
   107c0:	0038      	movs	r0, r7
   107c2:	aa2a      	add	r2, sp, #168	; 0xa8
   107c4:	f002 fbb0 	bl	12f28 <__ssprint_r>
   107c8:	2800      	cmp	r0, #0
   107ca:	d001      	beq.n	107d0 <_svfprintf_r+0xbd8>
   107cc:	f000 fd18 	bl	11200 <_svfprintf_r+0x1608>
   107d0:	992c      	ldr	r1, [sp, #176]	; 0xb0
   107d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   107d4:	aa2d      	add	r2, sp, #180	; 0xb4
   107d6:	e7e6      	b.n	107a6 <_svfprintf_r+0xbae>
   107d8:	2301      	movs	r3, #1
   107da:	4642      	mov	r2, r8
   107dc:	4213      	tst	r3, r2
   107de:	d001      	beq.n	107e4 <_svfprintf_r+0xbec>
   107e0:	f7ff fbf8 	bl	ffd4 <_svfprintf_r+0x3dc>
   107e4:	607b      	str	r3, [r7, #4]
   107e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   107e8:	3401      	adds	r4, #1
   107ea:	1c5d      	adds	r5, r3, #1
   107ec:	942c      	str	r4, [sp, #176]	; 0xb0
   107ee:	9307      	str	r3, [sp, #28]
   107f0:	952b      	str	r5, [sp, #172]	; 0xac
   107f2:	2d07      	cmp	r5, #7
   107f4:	dc00      	bgt.n	107f8 <_svfprintf_r+0xc00>
   107f6:	e41e      	b.n	10036 <_svfprintf_r+0x43e>
   107f8:	4658      	mov	r0, fp
   107fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   107fc:	aa2a      	add	r2, sp, #168	; 0xa8
   107fe:	f002 fb93 	bl	12f28 <__ssprint_r>
   10802:	2800      	cmp	r0, #0
   10804:	d001      	beq.n	1080a <_svfprintf_r+0xc12>
   10806:	f7ff fa8a 	bl	fd1e <_svfprintf_r+0x126>
   1080a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1080c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   1080e:	af2d      	add	r7, sp, #180	; 0xb4
   10810:	e412      	b.n	10038 <_svfprintf_r+0x440>
   10812:	9b07      	ldr	r3, [sp, #28]
   10814:	2b00      	cmp	r3, #0
   10816:	d000      	beq.n	1081a <_svfprintf_r+0xc22>
   10818:	e532      	b.n	10280 <_svfprintf_r+0x688>
   1081a:	46a0      	mov	r8, r4
   1081c:	2300      	movs	r3, #0
   1081e:	ae56      	add	r6, sp, #344	; 0x158
   10820:	9307      	str	r3, [sp, #28]
   10822:	930a      	str	r3, [sp, #40]	; 0x28
   10824:	e4cd      	b.n	101c2 <_svfprintf_r+0x5ca>
   10826:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10828:	1e5e      	subs	r6, r3, #1
   1082a:	2e00      	cmp	r6, #0
   1082c:	dc01      	bgt.n	10832 <_svfprintf_r+0xc3a>
   1082e:	f7ff fc03 	bl	10038 <_svfprintf_r+0x440>
   10832:	4b67      	ldr	r3, [pc, #412]	; (109d0 <_svfprintf_r+0xdd8>)
   10834:	4699      	mov	r9, r3
   10836:	2e10      	cmp	r6, #16
   10838:	dc00      	bgt.n	1083c <_svfprintf_r+0xc44>
   1083a:	e3de      	b.n	10ffa <_svfprintf_r+0x1402>
   1083c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1083e:	0023      	movs	r3, r4
   10840:	464c      	mov	r4, r9
   10842:	4691      	mov	r9, r2
   10844:	e004      	b.n	10850 <_svfprintf_r+0xc58>
   10846:	3708      	adds	r7, #8
   10848:	3e10      	subs	r6, #16
   1084a:	2e10      	cmp	r6, #16
   1084c:	dc00      	bgt.n	10850 <_svfprintf_r+0xc58>
   1084e:	e3d2      	b.n	10ff6 <_svfprintf_r+0x13fe>
   10850:	2210      	movs	r2, #16
   10852:	3310      	adds	r3, #16
   10854:	3501      	adds	r5, #1
   10856:	603c      	str	r4, [r7, #0]
   10858:	607a      	str	r2, [r7, #4]
   1085a:	932c      	str	r3, [sp, #176]	; 0xb0
   1085c:	952b      	str	r5, [sp, #172]	; 0xac
   1085e:	2d07      	cmp	r5, #7
   10860:	ddf1      	ble.n	10846 <_svfprintf_r+0xc4e>
   10862:	4649      	mov	r1, r9
   10864:	4658      	mov	r0, fp
   10866:	aa2a      	add	r2, sp, #168	; 0xa8
   10868:	f002 fb5e 	bl	12f28 <__ssprint_r>
   1086c:	2800      	cmp	r0, #0
   1086e:	d001      	beq.n	10874 <_svfprintf_r+0xc7c>
   10870:	f7ff fa55 	bl	fd1e <_svfprintf_r+0x126>
   10874:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   10876:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   10878:	af2d      	add	r7, sp, #180	; 0xb4
   1087a:	e7e5      	b.n	10848 <_svfprintf_r+0xc50>
   1087c:	4658      	mov	r0, fp
   1087e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10880:	aa2a      	add	r2, sp, #168	; 0xa8
   10882:	f002 fb51 	bl	12f28 <__ssprint_r>
   10886:	2800      	cmp	r0, #0
   10888:	d001      	beq.n	1088e <_svfprintf_r+0xc96>
   1088a:	f7ff fa48 	bl	fd1e <_svfprintf_r+0x126>
   1088e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10890:	af2d      	add	r7, sp, #180	; 0xb4
   10892:	f7ff fab8 	bl	fe06 <_svfprintf_r+0x20e>
   10896:	4643      	mov	r3, r8
   10898:	06db      	lsls	r3, r3, #27
   1089a:	d55c      	bpl.n	10956 <_svfprintf_r+0xd5e>
   1089c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1089e:	cc08      	ldmia	r4!, {r3}
   108a0:	930c      	str	r3, [sp, #48]	; 0x30
   108a2:	2300      	movs	r3, #0
   108a4:	940f      	str	r4, [sp, #60]	; 0x3c
   108a6:	930d      	str	r3, [sp, #52]	; 0x34
   108a8:	e4b2      	b.n	10210 <_svfprintf_r+0x618>
   108aa:	06e3      	lsls	r3, r4, #27
   108ac:	d400      	bmi.n	108b0 <_svfprintf_r+0xcb8>
   108ae:	e085      	b.n	109bc <_svfprintf_r+0xdc4>
   108b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   108b2:	cb04      	ldmia	r3!, {r2}
   108b4:	920c      	str	r2, [sp, #48]	; 0x30
   108b6:	2200      	movs	r2, #0
   108b8:	930f      	str	r3, [sp, #60]	; 0x3c
   108ba:	920d      	str	r2, [sp, #52]	; 0x34
   108bc:	2301      	movs	r3, #1
   108be:	e460      	b.n	10182 <_svfprintf_r+0x58a>
   108c0:	4643      	mov	r3, r8
   108c2:	06db      	lsls	r3, r3, #27
   108c4:	d56e      	bpl.n	109a4 <_svfprintf_r+0xdac>
   108c6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   108c8:	cc08      	ldmia	r4!, {r3}
   108ca:	930c      	str	r3, [sp, #48]	; 0x30
   108cc:	17db      	asrs	r3, r3, #31
   108ce:	930d      	str	r3, [sp, #52]	; 0x34
   108d0:	940f      	str	r4, [sp, #60]	; 0x3c
   108d2:	d400      	bmi.n	108d6 <_svfprintf_r+0xcde>
   108d4:	e4c0      	b.n	10258 <_svfprintf_r+0x660>
   108d6:	990c      	ldr	r1, [sp, #48]	; 0x30
   108d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108da:	2400      	movs	r4, #0
   108dc:	424b      	negs	r3, r1
   108de:	4194      	sbcs	r4, r2
   108e0:	930c      	str	r3, [sp, #48]	; 0x30
   108e2:	940d      	str	r4, [sp, #52]	; 0x34
   108e4:	232d      	movs	r3, #45	; 0x2d
   108e6:	aa1c      	add	r2, sp, #112	; 0x70
   108e8:	76d3      	strb	r3, [r2, #27]
   108ea:	4644      	mov	r4, r8
   108ec:	3b2c      	subs	r3, #44	; 0x2c
   108ee:	e44b      	b.n	10188 <_svfprintf_r+0x590>
   108f0:	4658      	mov	r0, fp
   108f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   108f4:	aa2a      	add	r2, sp, #168	; 0xa8
   108f6:	f002 fb17 	bl	12f28 <__ssprint_r>
   108fa:	2800      	cmp	r0, #0
   108fc:	d001      	beq.n	10902 <_svfprintf_r+0xd0a>
   108fe:	f7ff fa0e 	bl	fd1e <_svfprintf_r+0x126>
   10902:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10904:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   10906:	af2d      	add	r7, sp, #180	; 0xb4
   10908:	f7ff fb71 	bl	ffee <_svfprintf_r+0x3f6>
   1090c:	4658      	mov	r0, fp
   1090e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10910:	aa2a      	add	r2, sp, #168	; 0xa8
   10912:	f002 fb09 	bl	12f28 <__ssprint_r>
   10916:	2800      	cmp	r0, #0
   10918:	d001      	beq.n	1091e <_svfprintf_r+0xd26>
   1091a:	f7ff fa00 	bl	fd1e <_svfprintf_r+0x126>
   1091e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10920:	9d2b      	ldr	r5, [sp, #172]	; 0xac
   10922:	af2d      	add	r7, sp, #180	; 0xb4
   10924:	f7ff fb71 	bl	1000a <_svfprintf_r+0x412>
   10928:	4643      	mov	r3, r8
   1092a:	07db      	lsls	r3, r3, #31
   1092c:	d401      	bmi.n	10932 <_svfprintf_r+0xd3a>
   1092e:	f7ff fa7c 	bl	fe2a <_svfprintf_r+0x232>
   10932:	e544      	b.n	103be <_svfprintf_r+0x7c6>
   10934:	46a2      	mov	sl, r4
   10936:	46a8      	mov	r8, r5
   10938:	9312      	str	r3, [sp, #72]	; 0x48
   1093a:	e479      	b.n	10230 <_svfprintf_r+0x638>
   1093c:	7823      	ldrb	r3, [r4, #0]
   1093e:	920f      	str	r2, [sp, #60]	; 0x3c
   10940:	f7ff f9aa 	bl	fc98 <_svfprintf_r+0xa0>
   10944:	2130      	movs	r1, #48	; 0x30
   10946:	3362      	adds	r3, #98	; 0x62
   10948:	aa3d      	add	r2, sp, #244	; 0xf4
   1094a:	54d1      	strb	r1, [r2, r3]
   1094c:	ab1c      	add	r3, sp, #112	; 0x70
   1094e:	26e7      	movs	r6, #231	; 0xe7
   10950:	469c      	mov	ip, r3
   10952:	4466      	add	r6, ip
   10954:	e435      	b.n	101c2 <_svfprintf_r+0x5ca>
   10956:	4643      	mov	r3, r8
   10958:	065b      	lsls	r3, r3, #25
   1095a:	d400      	bmi.n	1095e <_svfprintf_r+0xd66>
   1095c:	e376      	b.n	1104c <_svfprintf_r+0x1454>
   1095e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10960:	cc08      	ldmia	r4!, {r3}
   10962:	b29b      	uxth	r3, r3
   10964:	930c      	str	r3, [sp, #48]	; 0x30
   10966:	2300      	movs	r3, #0
   10968:	940f      	str	r4, [sp, #60]	; 0x3c
   1096a:	930d      	str	r3, [sp, #52]	; 0x34
   1096c:	e450      	b.n	10210 <_svfprintf_r+0x618>
   1096e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10970:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10972:	cc08      	ldmia	r4!, {r3}
   10974:	4656      	mov	r6, sl
   10976:	601a      	str	r2, [r3, #0]
   10978:	17d2      	asrs	r2, r2, #31
   1097a:	605a      	str	r2, [r3, #4]
   1097c:	940f      	str	r4, [sp, #60]	; 0x3c
   1097e:	f7ff fa76 	bl	fe6e <_svfprintf_r+0x276>
   10982:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10984:	2b00      	cmp	r3, #0
   10986:	d101      	bne.n	1098c <_svfprintf_r+0xd94>
   10988:	f7ff f9a3 	bl	fcd2 <_svfprintf_r+0xda>
   1098c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1098e:	781b      	ldrb	r3, [r3, #0]
   10990:	2b00      	cmp	r3, #0
   10992:	d101      	bne.n	10998 <_svfprintf_r+0xda0>
   10994:	f7ff f99d 	bl	fcd2 <_svfprintf_r+0xda>
   10998:	2380      	movs	r3, #128	; 0x80
   1099a:	00db      	lsls	r3, r3, #3
   1099c:	431d      	orrs	r5, r3
   1099e:	7823      	ldrb	r3, [r4, #0]
   109a0:	f7ff f97a 	bl	fc98 <_svfprintf_r+0xa0>
   109a4:	4643      	mov	r3, r8
   109a6:	065b      	lsls	r3, r3, #25
   109a8:	d400      	bmi.n	109ac <_svfprintf_r+0xdb4>
   109aa:	e33f      	b.n	1102c <_svfprintf_r+0x1434>
   109ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   109ae:	cc08      	ldmia	r4!, {r3}
   109b0:	b21b      	sxth	r3, r3
   109b2:	930c      	str	r3, [sp, #48]	; 0x30
   109b4:	17db      	asrs	r3, r3, #31
   109b6:	930d      	str	r3, [sp, #52]	; 0x34
   109b8:	940f      	str	r4, [sp, #60]	; 0x3c
   109ba:	e44a      	b.n	10252 <_svfprintf_r+0x65a>
   109bc:	0663      	lsls	r3, r4, #25
   109be:	d400      	bmi.n	109c2 <_svfprintf_r+0xdca>
   109c0:	e351      	b.n	11066 <_svfprintf_r+0x146e>
   109c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   109c4:	cb04      	ldmia	r3!, {r2}
   109c6:	b292      	uxth	r2, r2
   109c8:	e774      	b.n	108b4 <_svfprintf_r+0xcbc>
   109ca:	46c0      	nop			; (mov r8, r8)
   109cc:	00016ce0 	.word	0x00016ce0
   109d0:	00016cf0 	.word	0x00016cf0
   109d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   109d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   109d8:	0002      	movs	r2, r0
   109da:	000b      	movs	r3, r1
   109dc:	f7f5 ffe4 	bl	69a8 <__aeabi_dcmpun>
   109e0:	2800      	cmp	r0, #0
   109e2:	d001      	beq.n	109e8 <_svfprintf_r+0xdf0>
   109e4:	f000 fe38 	bl	11658 <_svfprintf_r+0x1a60>
   109e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   109ea:	2b61      	cmp	r3, #97	; 0x61
   109ec:	d101      	bne.n	109f2 <_svfprintf_r+0xdfa>
   109ee:	f000 fdb5 	bl	1155c <_svfprintf_r+0x1964>
   109f2:	2b41      	cmp	r3, #65	; 0x41
   109f4:	d101      	bne.n	109fa <_svfprintf_r+0xe02>
   109f6:	f000 fc9d 	bl	11334 <_svfprintf_r+0x173c>
   109fa:	9b07      	ldr	r3, [sp, #28]
   109fc:	3301      	adds	r3, #1
   109fe:	d100      	bne.n	10a02 <_svfprintf_r+0xe0a>
   10a00:	e394      	b.n	1112c <_svfprintf_r+0x1534>
   10a02:	2320      	movs	r3, #32
   10a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10a06:	439a      	bics	r2, r3
   10a08:	920a      	str	r2, [sp, #40]	; 0x28
   10a0a:	2a47      	cmp	r2, #71	; 0x47
   10a0c:	d101      	bne.n	10a12 <_svfprintf_r+0xe1a>
   10a0e:	f000 fde8 	bl	115e2 <_svfprintf_r+0x19ea>
   10a12:	2380      	movs	r3, #128	; 0x80
   10a14:	4642      	mov	r2, r8
   10a16:	005b      	lsls	r3, r3, #1
   10a18:	431a      	orrs	r2, r3
   10a1a:	9218      	str	r2, [sp, #96]	; 0x60
   10a1c:	9916      	ldr	r1, [sp, #88]	; 0x58
   10a1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a20:	2a00      	cmp	r2, #0
   10a22:	da01      	bge.n	10a28 <_svfprintf_r+0xe30>
   10a24:	f000 fd97 	bl	11556 <_svfprintf_r+0x195e>
   10a28:	2300      	movs	r3, #0
   10a2a:	000d      	movs	r5, r1
   10a2c:	4691      	mov	r9, r2
   10a2e:	9319      	str	r3, [sp, #100]	; 0x64
   10a30:	930e      	str	r3, [sp, #56]	; 0x38
   10a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a34:	2b46      	cmp	r3, #70	; 0x46
   10a36:	d100      	bne.n	10a3a <_svfprintf_r+0xe42>
   10a38:	e3f3      	b.n	11222 <_svfprintf_r+0x162a>
   10a3a:	2b45      	cmp	r3, #69	; 0x45
   10a3c:	d101      	bne.n	10a42 <_svfprintf_r+0xe4a>
   10a3e:	f000 fd92 	bl	11566 <_svfprintf_r+0x196e>
   10a42:	ab28      	add	r3, sp, #160	; 0xa0
   10a44:	9304      	str	r3, [sp, #16]
   10a46:	ab25      	add	r3, sp, #148	; 0x94
   10a48:	9303      	str	r3, [sp, #12]
   10a4a:	ab24      	add	r3, sp, #144	; 0x90
   10a4c:	9302      	str	r3, [sp, #8]
   10a4e:	9b07      	ldr	r3, [sp, #28]
   10a50:	002a      	movs	r2, r5
   10a52:	9301      	str	r3, [sp, #4]
   10a54:	2302      	movs	r3, #2
   10a56:	4658      	mov	r0, fp
   10a58:	9300      	str	r3, [sp, #0]
   10a5a:	464b      	mov	r3, r9
   10a5c:	f000 ff76 	bl	1194c <_dtoa_r>
   10a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a62:	0006      	movs	r6, r0
   10a64:	2b47      	cmp	r3, #71	; 0x47
   10a66:	d001      	beq.n	10a6c <_svfprintf_r+0xe74>
   10a68:	f000 fea2 	bl	117b0 <_svfprintf_r+0x1bb8>
   10a6c:	4643      	mov	r3, r8
   10a6e:	07db      	lsls	r3, r3, #31
   10a70:	d501      	bpl.n	10a76 <_svfprintf_r+0xe7e>
   10a72:	f000 fd23 	bl	114bc <_svfprintf_r+0x18c4>
   10a76:	4642      	mov	r2, r8
   10a78:	9206      	str	r2, [sp, #24]
   10a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10a7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   10a7e:	4690      	mov	r8, r2
   10a80:	1b9b      	subs	r3, r3, r6
   10a82:	9315      	str	r3, [sp, #84]	; 0x54
   10a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a86:	2b47      	cmp	r3, #71	; 0x47
   10a88:	d100      	bne.n	10a8c <_svfprintf_r+0xe94>
   10a8a:	e369      	b.n	11160 <_svfprintf_r+0x1568>
   10a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a8e:	2b46      	cmp	r3, #70	; 0x46
   10a90:	d101      	bne.n	10a96 <_svfprintf_r+0xe9e>
   10a92:	f000 fc0e 	bl	112b2 <_svfprintf_r+0x16ba>
   10a96:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10a98:	9314      	str	r3, [sp, #80]	; 0x50
   10a9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10a9c:	1e5c      	subs	r4, r3, #1
   10a9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10aa0:	9424      	str	r4, [sp, #144]	; 0x90
   10aa2:	2b41      	cmp	r3, #65	; 0x41
   10aa4:	d101      	bne.n	10aaa <_svfprintf_r+0xeb2>
   10aa6:	f000 fdb1 	bl	1160c <_svfprintf_r+0x1a14>
   10aaa:	2248      	movs	r2, #72	; 0x48
   10aac:	466b      	mov	r3, sp
   10aae:	189b      	adds	r3, r3, r2
   10ab0:	2200      	movs	r2, #0
   10ab2:	781b      	ldrb	r3, [r3, #0]
   10ab4:	2028      	movs	r0, #40	; 0x28
   10ab6:	a91c      	add	r1, sp, #112	; 0x70
   10ab8:	1809      	adds	r1, r1, r0
   10aba:	700b      	strb	r3, [r1, #0]
   10abc:	232b      	movs	r3, #43	; 0x2b
   10abe:	2c00      	cmp	r4, #0
   10ac0:	da03      	bge.n	10aca <_svfprintf_r+0xed2>
   10ac2:	2401      	movs	r4, #1
   10ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10ac6:	1ae4      	subs	r4, r4, r3
   10ac8:	232d      	movs	r3, #45	; 0x2d
   10aca:	2029      	movs	r0, #41	; 0x29
   10acc:	a91c      	add	r1, sp, #112	; 0x70
   10ace:	1809      	adds	r1, r1, r0
   10ad0:	700b      	strb	r3, [r1, #0]
   10ad2:	2c09      	cmp	r4, #9
   10ad4:	dc01      	bgt.n	10ada <_svfprintf_r+0xee2>
   10ad6:	f000 fda9 	bl	1162c <_svfprintf_r+0x1a34>
   10ada:	aa1c      	add	r2, sp, #112	; 0x70
   10adc:	2337      	movs	r3, #55	; 0x37
   10ade:	4694      	mov	ip, r2
   10ae0:	4463      	add	r3, ip
   10ae2:	46b9      	mov	r9, r7
   10ae4:	001d      	movs	r5, r3
   10ae6:	46b0      	mov	r8, r6
   10ae8:	0020      	movs	r0, r4
   10aea:	210a      	movs	r1, #10
   10aec:	f7f3 fd20 	bl	4530 <__aeabi_idivmod>
   10af0:	002e      	movs	r6, r5
   10af2:	3130      	adds	r1, #48	; 0x30
   10af4:	3d01      	subs	r5, #1
   10af6:	0020      	movs	r0, r4
   10af8:	7029      	strb	r1, [r5, #0]
   10afa:	210a      	movs	r1, #10
   10afc:	f7f3 fc32 	bl	4364 <__divsi3>
   10b00:	0027      	movs	r7, r4
   10b02:	0004      	movs	r4, r0
   10b04:	2f63      	cmp	r7, #99	; 0x63
   10b06:	dcef      	bgt.n	10ae8 <_svfprintf_r+0xef0>
   10b08:	464f      	mov	r7, r9
   10b0a:	46b1      	mov	r9, r6
   10b0c:	0001      	movs	r1, r0
   10b0e:	a81c      	add	r0, sp, #112	; 0x70
   10b10:	464b      	mov	r3, r9
   10b12:	2237      	movs	r2, #55	; 0x37
   10b14:	4684      	mov	ip, r0
   10b16:	3130      	adds	r1, #48	; 0x30
   10b18:	3b02      	subs	r3, #2
   10b1a:	b2c9      	uxtb	r1, r1
   10b1c:	4462      	add	r2, ip
   10b1e:	4646      	mov	r6, r8
   10b20:	7019      	strb	r1, [r3, #0]
   10b22:	4293      	cmp	r3, r2
   10b24:	d301      	bcc.n	10b2a <_svfprintf_r+0xf32>
   10b26:	f000 fe45 	bl	117b4 <_svfprintf_r+0x1bbc>
   10b2a:	222a      	movs	r2, #42	; 0x2a
   10b2c:	4462      	add	r2, ip
   10b2e:	e000      	b.n	10b32 <_svfprintf_r+0xf3a>
   10b30:	7819      	ldrb	r1, [r3, #0]
   10b32:	a81c      	add	r0, sp, #112	; 0x70
   10b34:	7011      	strb	r1, [r2, #0]
   10b36:	4684      	mov	ip, r0
   10b38:	2137      	movs	r1, #55	; 0x37
   10b3a:	3301      	adds	r3, #1
   10b3c:	4461      	add	r1, ip
   10b3e:	3201      	adds	r2, #1
   10b40:	428b      	cmp	r3, r1
   10b42:	d1f5      	bne.n	10b30 <_svfprintf_r+0xf38>
   10b44:	2339      	movs	r3, #57	; 0x39
   10b46:	464a      	mov	r2, r9
   10b48:	4463      	add	r3, ip
   10b4a:	1a9b      	subs	r3, r3, r2
   10b4c:	222a      	movs	r2, #42	; 0x2a
   10b4e:	4462      	add	r2, ip
   10b50:	4694      	mov	ip, r2
   10b52:	aa26      	add	r2, sp, #152	; 0x98
   10b54:	4463      	add	r3, ip
   10b56:	1a9b      	subs	r3, r3, r2
   10b58:	931e      	str	r3, [sp, #120]	; 0x78
   10b5a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10b5e:	0011      	movs	r1, r2
   10b60:	469c      	mov	ip, r3
   10b62:	4461      	add	r1, ip
   10b64:	910a      	str	r1, [sp, #40]	; 0x28
   10b66:	2b01      	cmp	r3, #1
   10b68:	dc01      	bgt.n	10b6e <_svfprintf_r+0xf76>
   10b6a:	f000 fdc8 	bl	116fe <_svfprintf_r+0x1b06>
   10b6e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b72:	4694      	mov	ip, r2
   10b74:	4463      	add	r3, ip
   10b76:	930a      	str	r3, [sp, #40]	; 0x28
   10b78:	4bdb      	ldr	r3, [pc, #876]	; (10ee8 <_svfprintf_r+0x12f0>)
   10b7a:	9a06      	ldr	r2, [sp, #24]
   10b7c:	401a      	ands	r2, r3
   10b7e:	0013      	movs	r3, r2
   10b80:	2280      	movs	r2, #128	; 0x80
   10b82:	0052      	lsls	r2, r2, #1
   10b84:	431a      	orrs	r2, r3
   10b86:	4690      	mov	r8, r2
   10b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10b8a:	43d3      	mvns	r3, r2
   10b8c:	17db      	asrs	r3, r3, #31
   10b8e:	401a      	ands	r2, r3
   10b90:	2300      	movs	r3, #0
   10b92:	9206      	str	r2, [sp, #24]
   10b94:	9318      	str	r3, [sp, #96]	; 0x60
   10b96:	9313      	str	r3, [sp, #76]	; 0x4c
   10b98:	9314      	str	r3, [sp, #80]	; 0x50
   10b9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b9c:	2b00      	cmp	r3, #0
   10b9e:	d000      	beq.n	10ba2 <_svfprintf_r+0xfaa>
   10ba0:	e30c      	b.n	111bc <_svfprintf_r+0x15c4>
   10ba2:	2200      	movs	r2, #0
   10ba4:	ab1c      	add	r3, sp, #112	; 0x70
   10ba6:	7edb      	ldrb	r3, [r3, #27]
   10ba8:	9207      	str	r2, [sp, #28]
   10baa:	f7ff fb17 	bl	101dc <_svfprintf_r+0x5e4>
   10bae:	1e1d      	subs	r5, r3, #0
   10bb0:	dd00      	ble.n	10bb4 <_svfprintf_r+0xfbc>
   10bb2:	e593      	b.n	106dc <_svfprintf_r+0xae4>
   10bb4:	e59f      	b.n	106f6 <_svfprintf_r+0xafe>
   10bb6:	46a2      	mov	sl, r4
   10bb8:	46a8      	mov	r8, r5
   10bba:	9312      	str	r3, [sp, #72]	; 0x48
   10bbc:	4bcb      	ldr	r3, [pc, #812]	; (10eec <_svfprintf_r+0x12f4>)
   10bbe:	931d      	str	r3, [sp, #116]	; 0x74
   10bc0:	4643      	mov	r3, r8
   10bc2:	069b      	lsls	r3, r3, #26
   10bc4:	d400      	bmi.n	10bc8 <_svfprintf_r+0xfd0>
   10bc6:	e131      	b.n	10e2c <_svfprintf_r+0x1234>
   10bc8:	2307      	movs	r3, #7
   10bca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10bcc:	3407      	adds	r4, #7
   10bce:	439c      	bics	r4, r3
   10bd0:	0022      	movs	r2, r4
   10bd2:	ca18      	ldmia	r2!, {r3, r4}
   10bd4:	930c      	str	r3, [sp, #48]	; 0x30
   10bd6:	940d      	str	r4, [sp, #52]	; 0x34
   10bd8:	920f      	str	r2, [sp, #60]	; 0x3c
   10bda:	4643      	mov	r3, r8
   10bdc:	07db      	lsls	r3, r3, #31
   10bde:	d50d      	bpl.n	10bfc <_svfprintf_r+0x1004>
   10be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10be4:	0011      	movs	r1, r2
   10be6:	4319      	orrs	r1, r3
   10be8:	d008      	beq.n	10bfc <_svfprintf_r+0x1004>
   10bea:	2230      	movs	r2, #48	; 0x30
   10bec:	ab23      	add	r3, sp, #140	; 0x8c
   10bee:	701a      	strb	r2, [r3, #0]
   10bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10bf2:	705a      	strb	r2, [r3, #1]
   10bf4:	4642      	mov	r2, r8
   10bf6:	2302      	movs	r3, #2
   10bf8:	431a      	orrs	r2, r3
   10bfa:	4690      	mov	r8, r2
   10bfc:	4643      	mov	r3, r8
   10bfe:	4cba      	ldr	r4, [pc, #744]	; (10ee8 <_svfprintf_r+0x12f0>)
   10c00:	4023      	ands	r3, r4
   10c02:	001c      	movs	r4, r3
   10c04:	2302      	movs	r3, #2
   10c06:	f7ff fabc 	bl	10182 <_svfprintf_r+0x58a>
   10c0a:	46a2      	mov	sl, r4
   10c0c:	9312      	str	r3, [sp, #72]	; 0x48
   10c0e:	002c      	movs	r4, r5
   10c10:	f7ff faaa 	bl	10168 <_svfprintf_r+0x570>
   10c14:	3399      	adds	r3, #153	; 0x99
   10c16:	33ff      	adds	r3, #255	; 0xff
   10c18:	431d      	orrs	r5, r3
   10c1a:	3401      	adds	r4, #1
   10c1c:	7823      	ldrb	r3, [r4, #0]
   10c1e:	f7ff f83b 	bl	fc98 <_svfprintf_r+0xa0>
   10c22:	4658      	mov	r0, fp
   10c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c26:	aa2a      	add	r2, sp, #168	; 0xa8
   10c28:	f002 f97e 	bl	12f28 <__ssprint_r>
   10c2c:	2800      	cmp	r0, #0
   10c2e:	d001      	beq.n	10c34 <_svfprintf_r+0x103c>
   10c30:	f7ff f875 	bl	fd1e <_svfprintf_r+0x126>
   10c34:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10c36:	af2d      	add	r7, sp, #180	; 0xb4
   10c38:	f7ff fbd1 	bl	103de <_svfprintf_r+0x7e6>
   10c3c:	46a2      	mov	sl, r4
   10c3e:	46a8      	mov	r8, r5
   10c40:	9312      	str	r3, [sp, #72]	; 0x48
   10c42:	f7ff fad8 	bl	101f6 <_svfprintf_r+0x5fe>
   10c46:	9312      	str	r3, [sp, #72]	; 0x48
   10c48:	4ba9      	ldr	r3, [pc, #676]	; (10ef0 <_svfprintf_r+0x12f8>)
   10c4a:	46a2      	mov	sl, r4
   10c4c:	46a8      	mov	r8, r5
   10c4e:	931d      	str	r3, [sp, #116]	; 0x74
   10c50:	e7b6      	b.n	10bc0 <_svfprintf_r+0xfc8>
   10c52:	3b4c      	subs	r3, #76	; 0x4c
   10c54:	431d      	orrs	r5, r3
   10c56:	3401      	adds	r4, #1
   10c58:	7823      	ldrb	r3, [r4, #0]
   10c5a:	f7ff f81d 	bl	fc98 <_svfprintf_r+0xa0>
   10c5e:	2140      	movs	r1, #64	; 0x40
   10c60:	4658      	mov	r0, fp
   10c62:	f7fc ffe7 	bl	dc34 <_malloc_r>
   10c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10c68:	6018      	str	r0, [r3, #0]
   10c6a:	6118      	str	r0, [r3, #16]
   10c6c:	2800      	cmp	r0, #0
   10c6e:	d101      	bne.n	10c74 <_svfprintf_r+0x107c>
   10c70:	f000 fd93 	bl	1179a <_svfprintf_r+0x1ba2>
   10c74:	2340      	movs	r3, #64	; 0x40
   10c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10c78:	6153      	str	r3, [r2, #20]
   10c7a:	f7fe ffda 	bl	fc32 <_svfprintf_r+0x3a>
   10c7e:	0030      	movs	r0, r6
   10c80:	f7fe fcdc 	bl	f63c <strlen>
   10c84:	0001      	movs	r1, r0
   10c86:	f7ff fa0a 	bl	1009e <_svfprintf_r+0x4a6>
   10c8a:	4a9a      	ldr	r2, [pc, #616]	; (10ef4 <_svfprintf_r+0x12fc>)
   10c8c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10c8e:	4691      	mov	r9, r2
   10c90:	2d10      	cmp	r5, #16
   10c92:	dc00      	bgt.n	10c96 <_svfprintf_r+0x109e>
   10c94:	e1f3      	b.n	1107e <_svfprintf_r+0x1486>
   10c96:	003a      	movs	r2, r7
   10c98:	0021      	movs	r1, r4
   10c9a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   10c9c:	464c      	mov	r4, r9
   10c9e:	46b1      	mov	r9, r6
   10ca0:	465e      	mov	r6, fp
   10ca2:	e004      	b.n	10cae <_svfprintf_r+0x10b6>
   10ca4:	3208      	adds	r2, #8
   10ca6:	3d10      	subs	r5, #16
   10ca8:	2d10      	cmp	r5, #16
   10caa:	dc00      	bgt.n	10cae <_svfprintf_r+0x10b6>
   10cac:	e1e2      	b.n	11074 <_svfprintf_r+0x147c>
   10cae:	2010      	movs	r0, #16
   10cb0:	3110      	adds	r1, #16
   10cb2:	3301      	adds	r3, #1
   10cb4:	6014      	str	r4, [r2, #0]
   10cb6:	6050      	str	r0, [r2, #4]
   10cb8:	912c      	str	r1, [sp, #176]	; 0xb0
   10cba:	932b      	str	r3, [sp, #172]	; 0xac
   10cbc:	2b07      	cmp	r3, #7
   10cbe:	ddf1      	ble.n	10ca4 <_svfprintf_r+0x10ac>
   10cc0:	0039      	movs	r1, r7
   10cc2:	0030      	movs	r0, r6
   10cc4:	aa2a      	add	r2, sp, #168	; 0xa8
   10cc6:	f002 f92f 	bl	12f28 <__ssprint_r>
   10cca:	2800      	cmp	r0, #0
   10ccc:	d001      	beq.n	10cd2 <_svfprintf_r+0x10da>
   10cce:	f7ff f825 	bl	fd1c <_svfprintf_r+0x124>
   10cd2:	992c      	ldr	r1, [sp, #176]	; 0xb0
   10cd4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10cd6:	aa2d      	add	r2, sp, #180	; 0xb4
   10cd8:	e7e5      	b.n	10ca6 <_svfprintf_r+0x10ae>
   10cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10cde:	469c      	mov	ip, r3
   10ce0:	44b4      	add	ip, r6
   10ce2:	4663      	mov	r3, ip
   10ce4:	930a      	str	r3, [sp, #40]	; 0x28
   10ce6:	4b83      	ldr	r3, [pc, #524]	; (10ef4 <_svfprintf_r+0x12fc>)
   10ce8:	0022      	movs	r2, r4
   10cea:	4699      	mov	r9, r3
   10cec:	4653      	mov	r3, sl
   10cee:	9310      	str	r3, [sp, #64]	; 0x40
   10cf0:	4643      	mov	r3, r8
   10cf2:	4688      	mov	r8, r1
   10cf4:	9311      	str	r3, [sp, #68]	; 0x44
   10cf6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10cf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10cfa:	002c      	movs	r4, r5
   10cfc:	469a      	mov	sl, r3
   10cfe:	9612      	str	r6, [sp, #72]	; 0x48
   10d00:	003b      	movs	r3, r7
   10d02:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   10d04:	2900      	cmp	r1, #0
   10d06:	d035      	beq.n	10d74 <_svfprintf_r+0x117c>
   10d08:	4651      	mov	r1, sl
   10d0a:	2900      	cmp	r1, #0
   10d0c:	d136      	bne.n	10d7c <_svfprintf_r+0x1184>
   10d0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10d10:	3f01      	subs	r7, #1
   10d12:	3901      	subs	r1, #1
   10d14:	9113      	str	r1, [sp, #76]	; 0x4c
   10d16:	9920      	ldr	r1, [sp, #128]	; 0x80
   10d18:	6019      	str	r1, [r3, #0]
   10d1a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10d1c:	468c      	mov	ip, r1
   10d1e:	6059      	str	r1, [r3, #4]
   10d20:	992b      	ldr	r1, [sp, #172]	; 0xac
   10d22:	4462      	add	r2, ip
   10d24:	9107      	str	r1, [sp, #28]
   10d26:	3101      	adds	r1, #1
   10d28:	922c      	str	r2, [sp, #176]	; 0xb0
   10d2a:	912b      	str	r1, [sp, #172]	; 0xac
   10d2c:	2907      	cmp	r1, #7
   10d2e:	dd00      	ble.n	10d32 <_svfprintf_r+0x113a>
   10d30:	e086      	b.n	10e40 <_svfprintf_r+0x1248>
   10d32:	3308      	adds	r3, #8
   10d34:	990a      	ldr	r1, [sp, #40]	; 0x28
   10d36:	1b08      	subs	r0, r1, r4
   10d38:	7839      	ldrb	r1, [r7, #0]
   10d3a:	000d      	movs	r5, r1
   10d3c:	4281      	cmp	r1, r0
   10d3e:	dd00      	ble.n	10d42 <_svfprintf_r+0x114a>
   10d40:	0005      	movs	r5, r0
   10d42:	2d00      	cmp	r5, #0
   10d44:	dd0c      	ble.n	10d60 <_svfprintf_r+0x1168>
   10d46:	992b      	ldr	r1, [sp, #172]	; 0xac
   10d48:	1952      	adds	r2, r2, r5
   10d4a:	9107      	str	r1, [sp, #28]
   10d4c:	3101      	adds	r1, #1
   10d4e:	601c      	str	r4, [r3, #0]
   10d50:	605d      	str	r5, [r3, #4]
   10d52:	922c      	str	r2, [sp, #176]	; 0xb0
   10d54:	912b      	str	r1, [sp, #172]	; 0xac
   10d56:	2907      	cmp	r1, #7
   10d58:	dd00      	ble.n	10d5c <_svfprintf_r+0x1164>
   10d5a:	e0ed      	b.n	10f38 <_svfprintf_r+0x1340>
   10d5c:	7839      	ldrb	r1, [r7, #0]
   10d5e:	3308      	adds	r3, #8
   10d60:	43e8      	mvns	r0, r5
   10d62:	17c0      	asrs	r0, r0, #31
   10d64:	4005      	ands	r5, r0
   10d66:	1b4d      	subs	r5, r1, r5
   10d68:	2d00      	cmp	r5, #0
   10d6a:	dc0c      	bgt.n	10d86 <_svfprintf_r+0x118e>
   10d6c:	1864      	adds	r4, r4, r1
   10d6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10d70:	2900      	cmp	r1, #0
   10d72:	d1c9      	bne.n	10d08 <_svfprintf_r+0x1110>
   10d74:	4651      	mov	r1, sl
   10d76:	2900      	cmp	r1, #0
   10d78:	d100      	bne.n	10d7c <_svfprintf_r+0x1184>
   10d7a:	e1de      	b.n	1113a <_svfprintf_r+0x1542>
   10d7c:	2101      	movs	r1, #1
   10d7e:	4249      	negs	r1, r1
   10d80:	468c      	mov	ip, r1
   10d82:	44e2      	add	sl, ip
   10d84:	e7c7      	b.n	10d16 <_svfprintf_r+0x111e>
   10d86:	4648      	mov	r0, r9
   10d88:	992b      	ldr	r1, [sp, #172]	; 0xac
   10d8a:	9007      	str	r0, [sp, #28]
   10d8c:	2d10      	cmp	r5, #16
   10d8e:	dd27      	ble.n	10de0 <_svfprintf_r+0x11e8>
   10d90:	4658      	mov	r0, fp
   10d92:	46a3      	mov	fp, r4
   10d94:	4644      	mov	r4, r8
   10d96:	2610      	movs	r6, #16
   10d98:	46b8      	mov	r8, r7
   10d9a:	0027      	movs	r7, r4
   10d9c:	0004      	movs	r4, r0
   10d9e:	e003      	b.n	10da8 <_svfprintf_r+0x11b0>
   10da0:	3d10      	subs	r5, #16
   10da2:	3308      	adds	r3, #8
   10da4:	2d10      	cmp	r5, #16
   10da6:	dd15      	ble.n	10dd4 <_svfprintf_r+0x11dc>
   10da8:	4648      	mov	r0, r9
   10daa:	3210      	adds	r2, #16
   10dac:	3101      	adds	r1, #1
   10dae:	6018      	str	r0, [r3, #0]
   10db0:	605e      	str	r6, [r3, #4]
   10db2:	922c      	str	r2, [sp, #176]	; 0xb0
   10db4:	912b      	str	r1, [sp, #172]	; 0xac
   10db6:	2907      	cmp	r1, #7
   10db8:	ddf2      	ble.n	10da0 <_svfprintf_r+0x11a8>
   10dba:	0039      	movs	r1, r7
   10dbc:	0020      	movs	r0, r4
   10dbe:	aa2a      	add	r2, sp, #168	; 0xa8
   10dc0:	f002 f8b2 	bl	12f28 <__ssprint_r>
   10dc4:	2800      	cmp	r0, #0
   10dc6:	d147      	bne.n	10e58 <_svfprintf_r+0x1260>
   10dc8:	3d10      	subs	r5, #16
   10dca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   10dcc:	992b      	ldr	r1, [sp, #172]	; 0xac
   10dce:	ab2d      	add	r3, sp, #180	; 0xb4
   10dd0:	2d10      	cmp	r5, #16
   10dd2:	dce9      	bgt.n	10da8 <_svfprintf_r+0x11b0>
   10dd4:	0026      	movs	r6, r4
   10dd6:	0038      	movs	r0, r7
   10dd8:	465c      	mov	r4, fp
   10dda:	4647      	mov	r7, r8
   10ddc:	46b3      	mov	fp, r6
   10dde:	4680      	mov	r8, r0
   10de0:	9807      	ldr	r0, [sp, #28]
   10de2:	1952      	adds	r2, r2, r5
   10de4:	3101      	adds	r1, #1
   10de6:	6018      	str	r0, [r3, #0]
   10de8:	605d      	str	r5, [r3, #4]
   10dea:	922c      	str	r2, [sp, #176]	; 0xb0
   10dec:	912b      	str	r1, [sp, #172]	; 0xac
   10dee:	2907      	cmp	r1, #7
   10df0:	dd00      	ble.n	10df4 <_svfprintf_r+0x11fc>
   10df2:	e1ea      	b.n	111ca <_svfprintf_r+0x15d2>
   10df4:	7839      	ldrb	r1, [r7, #0]
   10df6:	3308      	adds	r3, #8
   10df8:	1864      	adds	r4, r4, r1
   10dfa:	e7b8      	b.n	10d6e <_svfprintf_r+0x1176>
   10dfc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10dfe:	9920      	ldr	r1, [sp, #128]	; 0x80
   10e00:	1af6      	subs	r6, r6, r3
   10e02:	001a      	movs	r2, r3
   10e04:	0030      	movs	r0, r6
   10e06:	f7fe fc81 	bl	f70c <strncpy>
   10e0a:	991a      	ldr	r1, [sp, #104]	; 0x68
   10e0c:	0020      	movs	r0, r4
   10e0e:	784b      	ldrb	r3, [r1, #1]
   10e10:	468c      	mov	ip, r1
   10e12:	1e5a      	subs	r2, r3, #1
   10e14:	4193      	sbcs	r3, r2
   10e16:	449c      	add	ip, r3
   10e18:	4663      	mov	r3, ip
   10e1a:	220a      	movs	r2, #10
   10e1c:	931a      	str	r3, [sp, #104]	; 0x68
   10e1e:	0029      	movs	r1, r5
   10e20:	2300      	movs	r3, #0
   10e22:	f7f3 fc03 	bl	462c <__aeabi_uldivmod>
   10e26:	2700      	movs	r7, #0
   10e28:	f7ff fbcc 	bl	105c4 <_svfprintf_r+0x9cc>
   10e2c:	4643      	mov	r3, r8
   10e2e:	06db      	lsls	r3, r3, #27
   10e30:	d54e      	bpl.n	10ed0 <_svfprintf_r+0x12d8>
   10e32:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10e34:	cc08      	ldmia	r4!, {r3}
   10e36:	930c      	str	r3, [sp, #48]	; 0x30
   10e38:	2300      	movs	r3, #0
   10e3a:	940f      	str	r4, [sp, #60]	; 0x3c
   10e3c:	930d      	str	r3, [sp, #52]	; 0x34
   10e3e:	e6cc      	b.n	10bda <_svfprintf_r+0xfe2>
   10e40:	4641      	mov	r1, r8
   10e42:	4658      	mov	r0, fp
   10e44:	aa2a      	add	r2, sp, #168	; 0xa8
   10e46:	f002 f86f 	bl	12f28 <__ssprint_r>
   10e4a:	2800      	cmp	r0, #0
   10e4c:	d001      	beq.n	10e52 <_svfprintf_r+0x125a>
   10e4e:	f7fe ff66 	bl	fd1e <_svfprintf_r+0x126>
   10e52:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   10e54:	ab2d      	add	r3, sp, #180	; 0xb4
   10e56:	e76d      	b.n	10d34 <_svfprintf_r+0x113c>
   10e58:	46a3      	mov	fp, r4
   10e5a:	f7fe ff60 	bl	fd1e <_svfprintf_r+0x126>
   10e5e:	4b26      	ldr	r3, [pc, #152]	; (10ef8 <_svfprintf_r+0x1300>)
   10e60:	3401      	adds	r4, #1
   10e62:	603b      	str	r3, [r7, #0]
   10e64:	2301      	movs	r3, #1
   10e66:	607b      	str	r3, [r7, #4]
   10e68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10e6a:	942c      	str	r4, [sp, #176]	; 0xb0
   10e6c:	9307      	str	r3, [sp, #28]
   10e6e:	3301      	adds	r3, #1
   10e70:	932b      	str	r3, [sp, #172]	; 0xac
   10e72:	2b07      	cmp	r3, #7
   10e74:	dd00      	ble.n	10e78 <_svfprintf_r+0x1280>
   10e76:	e113      	b.n	110a0 <_svfprintf_r+0x14a8>
   10e78:	3708      	adds	r7, #8
   10e7a:	2900      	cmp	r1, #0
   10e7c:	d000      	beq.n	10e80 <_svfprintf_r+0x1288>
   10e7e:	e097      	b.n	10fb0 <_svfprintf_r+0x13b8>
   10e80:	4642      	mov	r2, r8
   10e82:	2301      	movs	r3, #1
   10e84:	4013      	ands	r3, r2
   10e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   10e88:	4313      	orrs	r3, r2
   10e8a:	d101      	bne.n	10e90 <_svfprintf_r+0x1298>
   10e8c:	f7fe ffcd 	bl	fe2a <_svfprintf_r+0x232>
   10e90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   10e92:	603b      	str	r3, [r7, #0]
   10e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10e96:	469c      	mov	ip, r3
   10e98:	607b      	str	r3, [r7, #4]
   10e9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10e9c:	4464      	add	r4, ip
   10e9e:	9307      	str	r3, [sp, #28]
   10ea0:	3301      	adds	r3, #1
   10ea2:	942c      	str	r4, [sp, #176]	; 0xb0
   10ea4:	932b      	str	r3, [sp, #172]	; 0xac
   10ea6:	2b07      	cmp	r3, #7
   10ea8:	dd00      	ble.n	10eac <_svfprintf_r+0x12b4>
   10eaa:	e124      	b.n	110f6 <_svfprintf_r+0x14fe>
   10eac:	003a      	movs	r2, r7
   10eae:	3208      	adds	r2, #8
   10eb0:	e091      	b.n	10fd6 <_svfprintf_r+0x13de>
   10eb2:	4658      	mov	r0, fp
   10eb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10eb6:	aa2a      	add	r2, sp, #168	; 0xa8
   10eb8:	f002 f836 	bl	12f28 <__ssprint_r>
   10ebc:	2800      	cmp	r0, #0
   10ebe:	d001      	beq.n	10ec4 <_svfprintf_r+0x12cc>
   10ec0:	f7fe ff2d 	bl	fd1e <_svfprintf_r+0x126>
   10ec4:	ab1c      	add	r3, sp, #112	; 0x70
   10ec6:	7edb      	ldrb	r3, [r3, #27]
   10ec8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10eca:	af2d      	add	r7, sp, #180	; 0xb4
   10ecc:	f7fe ff6b 	bl	fda6 <_svfprintf_r+0x1ae>
   10ed0:	4643      	mov	r3, r8
   10ed2:	065b      	lsls	r3, r3, #25
   10ed4:	d400      	bmi.n	10ed8 <_svfprintf_r+0x12e0>
   10ed6:	e09d      	b.n	11014 <_svfprintf_r+0x141c>
   10ed8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10eda:	cc08      	ldmia	r4!, {r3}
   10edc:	b29b      	uxth	r3, r3
   10ede:	930c      	str	r3, [sp, #48]	; 0x30
   10ee0:	2300      	movs	r3, #0
   10ee2:	940f      	str	r4, [sp, #60]	; 0x3c
   10ee4:	930d      	str	r3, [sp, #52]	; 0x34
   10ee6:	e678      	b.n	10bda <_svfprintf_r+0xfe2>
   10ee8:	fffffbff 	.word	0xfffffbff
   10eec:	00016b44 	.word	0x00016b44
   10ef0:	00016b58 	.word	0x00016b58
   10ef4:	00016cf0 	.word	0x00016cf0
   10ef8:	00015530 	.word	0x00015530
   10efc:	4658      	mov	r0, fp
   10efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f00:	aa2a      	add	r2, sp, #168	; 0xa8
   10f02:	f002 f811 	bl	12f28 <__ssprint_r>
   10f06:	2800      	cmp	r0, #0
   10f08:	d001      	beq.n	10f0e <_svfprintf_r+0x1316>
   10f0a:	f7fe ff08 	bl	fd1e <_svfprintf_r+0x126>
   10f0e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10f10:	af2d      	add	r7, sp, #180	; 0xb4
   10f12:	f7ff fa4f 	bl	103b4 <_svfprintf_r+0x7bc>
   10f16:	46bb      	mov	fp, r7
   10f18:	46a1      	mov	r9, r4
   10f1a:	0017      	movs	r7, r2
   10f1c:	000c      	movs	r4, r1
   10f1e:	464a      	mov	r2, r9
   10f20:	1964      	adds	r4, r4, r5
   10f22:	3301      	adds	r3, #1
   10f24:	603a      	str	r2, [r7, #0]
   10f26:	607d      	str	r5, [r7, #4]
   10f28:	942c      	str	r4, [sp, #176]	; 0xb0
   10f2a:	932b      	str	r3, [sp, #172]	; 0xac
   10f2c:	2b07      	cmp	r3, #7
   10f2e:	dc01      	bgt.n	10f34 <_svfprintf_r+0x133c>
   10f30:	f7fe ff7a 	bl	fe28 <_svfprintf_r+0x230>
   10f34:	f7ff f88c 	bl	10050 <_svfprintf_r+0x458>
   10f38:	4641      	mov	r1, r8
   10f3a:	4658      	mov	r0, fp
   10f3c:	aa2a      	add	r2, sp, #168	; 0xa8
   10f3e:	f001 fff3 	bl	12f28 <__ssprint_r>
   10f42:	2800      	cmp	r0, #0
   10f44:	d001      	beq.n	10f4a <_svfprintf_r+0x1352>
   10f46:	f7fe feea 	bl	fd1e <_svfprintf_r+0x126>
   10f4a:	7839      	ldrb	r1, [r7, #0]
   10f4c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   10f4e:	ab2d      	add	r3, sp, #180	; 0xb4
   10f50:	e706      	b.n	10d60 <_svfprintf_r+0x1168>
   10f52:	4658      	mov	r0, fp
   10f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f56:	aa2a      	add	r2, sp, #168	; 0xa8
   10f58:	f001 ffe6 	bl	12f28 <__ssprint_r>
   10f5c:	2800      	cmp	r0, #0
   10f5e:	d001      	beq.n	10f64 <_svfprintf_r+0x136c>
   10f60:	f7fe fedd 	bl	fd1e <_svfprintf_r+0x126>
   10f64:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   10f66:	af2d      	add	r7, sp, #180	; 0xb4
   10f68:	f7fe ff47 	bl	fdfa <_svfprintf_r+0x202>
   10f6c:	4644      	mov	r4, r8
   10f6e:	2b01      	cmp	r3, #1
   10f70:	d001      	beq.n	10f76 <_svfprintf_r+0x137e>
   10f72:	f7ff f9d6 	bl	10322 <_svfprintf_r+0x72a>
   10f76:	f7ff f983 	bl	10280 <_svfprintf_r+0x688>
   10f7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   10f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f7e:	cc08      	ldmia	r4!, {r3}
   10f80:	4656      	mov	r6, sl
   10f82:	601a      	str	r2, [r3, #0]
   10f84:	940f      	str	r4, [sp, #60]	; 0x3c
   10f86:	f7fe ff72 	bl	fe6e <_svfprintf_r+0x276>
   10f8a:	9b07      	ldr	r3, [sp, #28]
   10f8c:	9306      	str	r3, [sp, #24]
   10f8e:	2b06      	cmp	r3, #6
   10f90:	d900      	bls.n	10f94 <_svfprintf_r+0x139c>
   10f92:	e098      	b.n	110c6 <_svfprintf_r+0x14ce>
   10f94:	2300      	movs	r3, #0
   10f96:	2200      	movs	r2, #0
   10f98:	930e      	str	r3, [sp, #56]	; 0x38
   10f9a:	9b06      	ldr	r3, [sp, #24]
   10f9c:	4ee3      	ldr	r6, [pc, #908]	; (1132c <_svfprintf_r+0x1734>)
   10f9e:	930a      	str	r3, [sp, #40]	; 0x28
   10fa0:	940f      	str	r4, [sp, #60]	; 0x3c
   10fa2:	2300      	movs	r3, #0
   10fa4:	9207      	str	r2, [sp, #28]
   10fa6:	9218      	str	r2, [sp, #96]	; 0x60
   10fa8:	9213      	str	r2, [sp, #76]	; 0x4c
   10faa:	9214      	str	r2, [sp, #80]	; 0x50
   10fac:	f7fe fee3 	bl	fd76 <_svfprintf_r+0x17e>
   10fb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   10fb2:	603b      	str	r3, [r7, #0]
   10fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10fb6:	469c      	mov	ip, r3
   10fb8:	607b      	str	r3, [r7, #4]
   10fba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   10fbc:	4464      	add	r4, ip
   10fbe:	9307      	str	r3, [sp, #28]
   10fc0:	3301      	adds	r3, #1
   10fc2:	942c      	str	r4, [sp, #176]	; 0xb0
   10fc4:	932b      	str	r3, [sp, #172]	; 0xac
   10fc6:	2b07      	cmp	r3, #7
   10fc8:	dd00      	ble.n	10fcc <_svfprintf_r+0x13d4>
   10fca:	e094      	b.n	110f6 <_svfprintf_r+0x14fe>
   10fcc:	003a      	movs	r2, r7
   10fce:	3208      	adds	r2, #8
   10fd0:	2900      	cmp	r1, #0
   10fd2:	da00      	bge.n	10fd6 <_svfprintf_r+0x13de>
   10fd4:	e279      	b.n	114ca <_svfprintf_r+0x18d2>
   10fd6:	9915      	ldr	r1, [sp, #84]	; 0x54
   10fd8:	3301      	adds	r3, #1
   10fda:	468c      	mov	ip, r1
   10fdc:	4464      	add	r4, ip
   10fde:	6016      	str	r6, [r2, #0]
   10fe0:	6051      	str	r1, [r2, #4]
   10fe2:	942c      	str	r4, [sp, #176]	; 0xb0
   10fe4:	932b      	str	r3, [sp, #172]	; 0xac
   10fe6:	2b07      	cmp	r3, #7
   10fe8:	dd01      	ble.n	10fee <_svfprintf_r+0x13f6>
   10fea:	f7ff f831 	bl	10050 <_svfprintf_r+0x458>
   10fee:	3208      	adds	r2, #8
   10ff0:	0017      	movs	r7, r2
   10ff2:	f7fe ff1a 	bl	fe2a <_svfprintf_r+0x232>
   10ff6:	46a1      	mov	r9, r4
   10ff8:	001c      	movs	r4, r3
   10ffa:	464b      	mov	r3, r9
   10ffc:	19a4      	adds	r4, r4, r6
   10ffe:	3501      	adds	r5, #1
   11000:	603b      	str	r3, [r7, #0]
   11002:	607e      	str	r6, [r7, #4]
   11004:	942c      	str	r4, [sp, #176]	; 0xb0
   11006:	952b      	str	r5, [sp, #172]	; 0xac
   11008:	2d07      	cmp	r5, #7
   1100a:	dc01      	bgt.n	11010 <_svfprintf_r+0x1418>
   1100c:	f7ff f813 	bl	10036 <_svfprintf_r+0x43e>
   11010:	f7ff fbf2 	bl	107f8 <_svfprintf_r+0xc00>
   11014:	4643      	mov	r3, r8
   11016:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11018:	059b      	lsls	r3, r3, #22
   1101a:	d400      	bmi.n	1101e <_svfprintf_r+0x1426>
   1101c:	e70a      	b.n	10e34 <_svfprintf_r+0x123c>
   1101e:	cc08      	ldmia	r4!, {r3}
   11020:	b2db      	uxtb	r3, r3
   11022:	930c      	str	r3, [sp, #48]	; 0x30
   11024:	2300      	movs	r3, #0
   11026:	940f      	str	r4, [sp, #60]	; 0x3c
   11028:	930d      	str	r3, [sp, #52]	; 0x34
   1102a:	e5d6      	b.n	10bda <_svfprintf_r+0xfe2>
   1102c:	4643      	mov	r3, r8
   1102e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11030:	059b      	lsls	r3, r3, #22
   11032:	d400      	bmi.n	11036 <_svfprintf_r+0x143e>
   11034:	e448      	b.n	108c8 <_svfprintf_r+0xcd0>
   11036:	cc08      	ldmia	r4!, {r3}
   11038:	b25b      	sxtb	r3, r3
   1103a:	930c      	str	r3, [sp, #48]	; 0x30
   1103c:	17db      	asrs	r3, r3, #31
   1103e:	930d      	str	r3, [sp, #52]	; 0x34
   11040:	940f      	str	r4, [sp, #60]	; 0x3c
   11042:	f7ff f906 	bl	10252 <_svfprintf_r+0x65a>
   11046:	4eba      	ldr	r6, [pc, #744]	; (11330 <_svfprintf_r+0x1738>)
   11048:	f7fe ff6b 	bl	ff22 <_svfprintf_r+0x32a>
   1104c:	4643      	mov	r3, r8
   1104e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11050:	059b      	lsls	r3, r3, #22
   11052:	d400      	bmi.n	11056 <_svfprintf_r+0x145e>
   11054:	e423      	b.n	1089e <_svfprintf_r+0xca6>
   11056:	cc08      	ldmia	r4!, {r3}
   11058:	b2db      	uxtb	r3, r3
   1105a:	930c      	str	r3, [sp, #48]	; 0x30
   1105c:	2300      	movs	r3, #0
   1105e:	940f      	str	r4, [sp, #60]	; 0x3c
   11060:	930d      	str	r3, [sp, #52]	; 0x34
   11062:	f7ff f8d5 	bl	10210 <_svfprintf_r+0x618>
   11066:	05a3      	lsls	r3, r4, #22
   11068:	d400      	bmi.n	1106c <_svfprintf_r+0x1474>
   1106a:	e421      	b.n	108b0 <_svfprintf_r+0xcb8>
   1106c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1106e:	cb04      	ldmia	r3!, {r2}
   11070:	b2d2      	uxtb	r2, r2
   11072:	e41f      	b.n	108b4 <_svfprintf_r+0xcbc>
   11074:	46b3      	mov	fp, r6
   11076:	0017      	movs	r7, r2
   11078:	464e      	mov	r6, r9
   1107a:	46a1      	mov	r9, r4
   1107c:	000c      	movs	r4, r1
   1107e:	464a      	mov	r2, r9
   11080:	1964      	adds	r4, r4, r5
   11082:	3301      	adds	r3, #1
   11084:	603a      	str	r2, [r7, #0]
   11086:	607d      	str	r5, [r7, #4]
   11088:	942c      	str	r4, [sp, #176]	; 0xb0
   1108a:	932b      	str	r3, [sp, #172]	; 0xac
   1108c:	2b07      	cmp	r3, #7
   1108e:	dc40      	bgt.n	11112 <_svfprintf_r+0x151a>
   11090:	3708      	adds	r7, #8
   11092:	f7ff fb38 	bl	10706 <_svfprintf_r+0xb0e>
   11096:	232d      	movs	r3, #45	; 0x2d
   11098:	aa1c      	add	r2, sp, #112	; 0x70
   1109a:	76d3      	strb	r3, [r2, #27]
   1109c:	f7fe ff3b 	bl	ff16 <_svfprintf_r+0x31e>
   110a0:	4658      	mov	r0, fp
   110a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   110a4:	aa2a      	add	r2, sp, #168	; 0xa8
   110a6:	f001 ff3f 	bl	12f28 <__ssprint_r>
   110aa:	2800      	cmp	r0, #0
   110ac:	d001      	beq.n	110b2 <_svfprintf_r+0x14ba>
   110ae:	f7fe fe36 	bl	fd1e <_svfprintf_r+0x126>
   110b2:	9924      	ldr	r1, [sp, #144]	; 0x90
   110b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   110b6:	af2d      	add	r7, sp, #180	; 0xb4
   110b8:	e6df      	b.n	10e7a <_svfprintf_r+0x1282>
   110ba:	2c09      	cmp	r4, #9
   110bc:	d901      	bls.n	110c2 <_svfprintf_r+0x14ca>
   110be:	f7ff fa81 	bl	105c4 <_svfprintf_r+0x9cc>
   110c2:	f7ff fa9c 	bl	105fe <_svfprintf_r+0xa06>
   110c6:	2306      	movs	r3, #6
   110c8:	9306      	str	r3, [sp, #24]
   110ca:	e763      	b.n	10f94 <_svfprintf_r+0x139c>
   110cc:	9915      	ldr	r1, [sp, #84]	; 0x54
   110ce:	468c      	mov	ip, r1
   110d0:	1acb      	subs	r3, r1, r3
   110d2:	4466      	add	r6, ip
   110d4:	1b72      	subs	r2, r6, r5
   110d6:	001e      	movs	r6, r3
   110d8:	4293      	cmp	r3, r2
   110da:	dc01      	bgt.n	110e0 <_svfprintf_r+0x14e8>
   110dc:	f7ff fb4c 	bl	10778 <_svfprintf_r+0xb80>
   110e0:	0016      	movs	r6, r2
   110e2:	f7ff fb49 	bl	10778 <_svfprintf_r+0xb80>
   110e6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   110e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   110ea:	cc08      	ldmia	r4!, {r3}
   110ec:	4656      	mov	r6, sl
   110ee:	801a      	strh	r2, [r3, #0]
   110f0:	940f      	str	r4, [sp, #60]	; 0x3c
   110f2:	f7fe febc 	bl	fe6e <_svfprintf_r+0x276>
   110f6:	4658      	mov	r0, fp
   110f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   110fa:	aa2a      	add	r2, sp, #168	; 0xa8
   110fc:	f001 ff14 	bl	12f28 <__ssprint_r>
   11100:	2800      	cmp	r0, #0
   11102:	d001      	beq.n	11108 <_svfprintf_r+0x1510>
   11104:	f7fe fe0b 	bl	fd1e <_svfprintf_r+0x126>
   11108:	9924      	ldr	r1, [sp, #144]	; 0x90
   1110a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1110c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1110e:	aa2d      	add	r2, sp, #180	; 0xb4
   11110:	e75e      	b.n	10fd0 <_svfprintf_r+0x13d8>
   11112:	4658      	mov	r0, fp
   11114:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11116:	aa2a      	add	r2, sp, #168	; 0xa8
   11118:	f001 ff06 	bl	12f28 <__ssprint_r>
   1111c:	2800      	cmp	r0, #0
   1111e:	d001      	beq.n	11124 <_svfprintf_r+0x152c>
   11120:	f7fe fdfd 	bl	fd1e <_svfprintf_r+0x126>
   11124:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   11126:	af2d      	add	r7, sp, #180	; 0xb4
   11128:	f7ff faed 	bl	10706 <_svfprintf_r+0xb0e>
   1112c:	2320      	movs	r3, #32
   1112e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11130:	439a      	bics	r2, r3
   11132:	3b1a      	subs	r3, #26
   11134:	920a      	str	r2, [sp, #40]	; 0x28
   11136:	9307      	str	r3, [sp, #28]
   11138:	e46b      	b.n	10a12 <_svfprintf_r+0xe1a>
   1113a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1113c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1113e:	971a      	str	r7, [sp, #104]	; 0x68
   11140:	001f      	movs	r7, r3
   11142:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11144:	468a      	mov	sl, r1
   11146:	9911      	ldr	r1, [sp, #68]	; 0x44
   11148:	18f3      	adds	r3, r6, r3
   1114a:	0020      	movs	r0, r4
   1114c:	0025      	movs	r5, r4
   1114e:	4688      	mov	r8, r1
   11150:	0014      	movs	r4, r2
   11152:	4298      	cmp	r0, r3
   11154:	d801      	bhi.n	1115a <_svfprintf_r+0x1562>
   11156:	f7ff fade 	bl	10716 <_svfprintf_r+0xb1e>
   1115a:	001d      	movs	r5, r3
   1115c:	f7ff fadb 	bl	10716 <_svfprintf_r+0xb1e>
   11160:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11162:	9314      	str	r3, [sp, #80]	; 0x50
   11164:	1cda      	adds	r2, r3, #3
   11166:	db02      	blt.n	1116e <_svfprintf_r+0x1576>
   11168:	9a07      	ldr	r2, [sp, #28]
   1116a:	4293      	cmp	r3, r2
   1116c:	dd07      	ble.n	1117e <_svfprintf_r+0x1586>
   1116e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11170:	3b02      	subs	r3, #2
   11172:	001a      	movs	r2, r3
   11174:	9312      	str	r3, [sp, #72]	; 0x48
   11176:	2320      	movs	r3, #32
   11178:	439a      	bics	r2, r3
   1117a:	920a      	str	r2, [sp, #40]	; 0x28
   1117c:	e48d      	b.n	10a9a <_svfprintf_r+0xea2>
   1117e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11180:	9915      	ldr	r1, [sp, #84]	; 0x54
   11182:	428b      	cmp	r3, r1
   11184:	da00      	bge.n	11188 <_svfprintf_r+0x1590>
   11186:	e0ae      	b.n	112e6 <_svfprintf_r+0x16ee>
   11188:	9a06      	ldr	r2, [sp, #24]
   1118a:	930a      	str	r3, [sp, #40]	; 0x28
   1118c:	07d2      	lsls	r2, r2, #31
   1118e:	d503      	bpl.n	11198 <_svfprintf_r+0x15a0>
   11190:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   11192:	4694      	mov	ip, r2
   11194:	4463      	add	r3, ip
   11196:	930a      	str	r3, [sp, #40]	; 0x28
   11198:	9b06      	ldr	r3, [sp, #24]
   1119a:	055b      	lsls	r3, r3, #21
   1119c:	d503      	bpl.n	111a6 <_svfprintf_r+0x15ae>
   1119e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   111a0:	2b00      	cmp	r3, #0
   111a2:	dd00      	ble.n	111a6 <_svfprintf_r+0x15ae>
   111a4:	e27b      	b.n	1169e <_svfprintf_r+0x1aa6>
   111a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   111a8:	43d3      	mvns	r3, r2
   111aa:	17db      	asrs	r3, r3, #31
   111ac:	401a      	ands	r2, r3
   111ae:	2367      	movs	r3, #103	; 0x67
   111b0:	9206      	str	r2, [sp, #24]
   111b2:	9312      	str	r3, [sp, #72]	; 0x48
   111b4:	2300      	movs	r3, #0
   111b6:	9318      	str	r3, [sp, #96]	; 0x60
   111b8:	9313      	str	r3, [sp, #76]	; 0x4c
   111ba:	e4ee      	b.n	10b9a <_svfprintf_r+0xfa2>
   111bc:	232d      	movs	r3, #45	; 0x2d
   111be:	aa1c      	add	r2, sp, #112	; 0x70
   111c0:	76d3      	strb	r3, [r2, #27]
   111c2:	2200      	movs	r2, #0
   111c4:	9207      	str	r2, [sp, #28]
   111c6:	f7ff f80c 	bl	101e2 <_svfprintf_r+0x5ea>
   111ca:	4641      	mov	r1, r8
   111cc:	4658      	mov	r0, fp
   111ce:	aa2a      	add	r2, sp, #168	; 0xa8
   111d0:	f001 feaa 	bl	12f28 <__ssprint_r>
   111d4:	2800      	cmp	r0, #0
   111d6:	d001      	beq.n	111dc <_svfprintf_r+0x15e4>
   111d8:	f7fe fda1 	bl	fd1e <_svfprintf_r+0x126>
   111dc:	7839      	ldrb	r1, [r7, #0]
   111de:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   111e0:	ab2d      	add	r3, sp, #180	; 0xb4
   111e2:	1864      	adds	r4, r4, r1
   111e4:	e5c3      	b.n	10d6e <_svfprintf_r+0x1176>
   111e6:	4658      	mov	r0, fp
   111e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   111ea:	aa2a      	add	r2, sp, #168	; 0xa8
   111ec:	f001 fe9c 	bl	12f28 <__ssprint_r>
   111f0:	2800      	cmp	r0, #0
   111f2:	d001      	beq.n	111f8 <_svfprintf_r+0x1600>
   111f4:	f7fe fd93 	bl	fd1e <_svfprintf_r+0x126>
   111f8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   111fa:	af2d      	add	r7, sp, #180	; 0xb4
   111fc:	f7ff fa7b 	bl	106f6 <_svfprintf_r+0xafe>
   11200:	46bb      	mov	fp, r7
   11202:	f7fe fd8c 	bl	fd1e <_svfprintf_r+0x126>
   11206:	4658      	mov	r0, fp
   11208:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1120a:	aa2a      	add	r2, sp, #168	; 0xa8
   1120c:	f001 fe8c 	bl	12f28 <__ssprint_r>
   11210:	2800      	cmp	r0, #0
   11212:	d001      	beq.n	11218 <_svfprintf_r+0x1620>
   11214:	f7fe fd83 	bl	fd1e <_svfprintf_r+0x126>
   11218:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1121a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1121c:	af2d      	add	r7, sp, #180	; 0xb4
   1121e:	f7ff fa93 	bl	10748 <_svfprintf_r+0xb50>
   11222:	ab28      	add	r3, sp, #160	; 0xa0
   11224:	9304      	str	r3, [sp, #16]
   11226:	ab25      	add	r3, sp, #148	; 0x94
   11228:	9303      	str	r3, [sp, #12]
   1122a:	ab24      	add	r3, sp, #144	; 0x90
   1122c:	9302      	str	r3, [sp, #8]
   1122e:	9b07      	ldr	r3, [sp, #28]
   11230:	002a      	movs	r2, r5
   11232:	9301      	str	r3, [sp, #4]
   11234:	2303      	movs	r3, #3
   11236:	4658      	mov	r0, fp
   11238:	9300      	str	r3, [sp, #0]
   1123a:	464b      	mov	r3, r9
   1123c:	f000 fb86 	bl	1194c <_dtoa_r>
   11240:	7803      	ldrb	r3, [r0, #0]
   11242:	0006      	movs	r6, r0
   11244:	2b30      	cmp	r3, #48	; 0x30
   11246:	d020      	beq.n	1128a <_svfprintf_r+0x1692>
   11248:	9c24      	ldr	r4, [sp, #144]	; 0x90
   1124a:	9b07      	ldr	r3, [sp, #28]
   1124c:	469c      	mov	ip, r3
   1124e:	4464      	add	r4, ip
   11250:	4643      	mov	r3, r8
   11252:	9306      	str	r3, [sp, #24]
   11254:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11256:	1934      	adds	r4, r6, r4
   11258:	4698      	mov	r8, r3
   1125a:	2300      	movs	r3, #0
   1125c:	2200      	movs	r2, #0
   1125e:	0028      	movs	r0, r5
   11260:	4649      	mov	r1, r9
   11262:	f7f3 f97b 	bl	455c <__aeabi_dcmpeq>
   11266:	0023      	movs	r3, r4
   11268:	2800      	cmp	r0, #0
   1126a:	d000      	beq.n	1126e <_svfprintf_r+0x1676>
   1126c:	e408      	b.n	10a80 <_svfprintf_r+0xe88>
   1126e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   11270:	42a3      	cmp	r3, r4
   11272:	d301      	bcc.n	11278 <_svfprintf_r+0x1680>
   11274:	f7ff fc04 	bl	10a80 <_svfprintf_r+0xe88>
   11278:	2130      	movs	r1, #48	; 0x30
   1127a:	1c5a      	adds	r2, r3, #1
   1127c:	9228      	str	r2, [sp, #160]	; 0xa0
   1127e:	7019      	strb	r1, [r3, #0]
   11280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   11282:	429c      	cmp	r4, r3
   11284:	d8f9      	bhi.n	1127a <_svfprintf_r+0x1682>
   11286:	f7ff fbfb 	bl	10a80 <_svfprintf_r+0xe88>
   1128a:	2200      	movs	r2, #0
   1128c:	2300      	movs	r3, #0
   1128e:	0028      	movs	r0, r5
   11290:	4649      	mov	r1, r9
   11292:	f7f3 f963 	bl	455c <__aeabi_dcmpeq>
   11296:	2800      	cmp	r0, #0
   11298:	d1d6      	bne.n	11248 <_svfprintf_r+0x1650>
   1129a:	2401      	movs	r4, #1
   1129c:	9b07      	ldr	r3, [sp, #28]
   1129e:	1ae4      	subs	r4, r4, r3
   112a0:	9424      	str	r4, [sp, #144]	; 0x90
   112a2:	e7d2      	b.n	1124a <_svfprintf_r+0x1652>
   112a4:	9a07      	ldr	r2, [sp, #28]
   112a6:	ab1c      	add	r3, sp, #112	; 0x70
   112a8:	7edb      	ldrb	r3, [r3, #27]
   112aa:	9206      	str	r2, [sp, #24]
   112ac:	940f      	str	r4, [sp, #60]	; 0x3c
   112ae:	f7fe fe41 	bl	ff34 <_svfprintf_r+0x33c>
   112b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   112b4:	2301      	movs	r3, #1
   112b6:	9214      	str	r2, [sp, #80]	; 0x50
   112b8:	2a00      	cmp	r2, #0
   112ba:	dc00      	bgt.n	112be <_svfprintf_r+0x16c6>
   112bc:	e236      	b.n	1172c <_svfprintf_r+0x1b34>
   112be:	9906      	ldr	r1, [sp, #24]
   112c0:	400b      	ands	r3, r1
   112c2:	9907      	ldr	r1, [sp, #28]
   112c4:	430b      	orrs	r3, r1
   112c6:	d000      	beq.n	112ca <_svfprintf_r+0x16d2>
   112c8:	e1a6      	b.n	11618 <_svfprintf_r+0x1a20>
   112ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   112cc:	930a      	str	r3, [sp, #40]	; 0x28
   112ce:	2366      	movs	r3, #102	; 0x66
   112d0:	9312      	str	r3, [sp, #72]	; 0x48
   112d2:	9b06      	ldr	r3, [sp, #24]
   112d4:	055b      	lsls	r3, r3, #21
   112d6:	d500      	bpl.n	112da <_svfprintf_r+0x16e2>
   112d8:	e1e3      	b.n	116a2 <_svfprintf_r+0x1aaa>
   112da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   112dc:	43d3      	mvns	r3, r2
   112de:	17db      	asrs	r3, r3, #31
   112e0:	401a      	ands	r2, r3
   112e2:	9206      	str	r2, [sp, #24]
   112e4:	e766      	b.n	111b4 <_svfprintf_r+0x15bc>
   112e6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   112e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   112ea:	4694      	mov	ip, r2
   112ec:	2267      	movs	r2, #103	; 0x67
   112ee:	9212      	str	r2, [sp, #72]	; 0x48
   112f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   112f2:	4463      	add	r3, ip
   112f4:	930a      	str	r3, [sp, #40]	; 0x28
   112f6:	2a00      	cmp	r2, #0
   112f8:	dceb      	bgt.n	112d2 <_svfprintf_r+0x16da>
   112fa:	1a98      	subs	r0, r3, r2
   112fc:	1c42      	adds	r2, r0, #1
   112fe:	43d3      	mvns	r3, r2
   11300:	17db      	asrs	r3, r3, #31
   11302:	920a      	str	r2, [sp, #40]	; 0x28
   11304:	401a      	ands	r2, r3
   11306:	9206      	str	r2, [sp, #24]
   11308:	e754      	b.n	111b4 <_svfprintf_r+0x15bc>
   1130a:	4658      	mov	r0, fp
   1130c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1130e:	aa2a      	add	r2, sp, #168	; 0xa8
   11310:	f001 fe0a 	bl	12f28 <__ssprint_r>
   11314:	2800      	cmp	r0, #0
   11316:	d001      	beq.n	1131c <_svfprintf_r+0x1724>
   11318:	f7fe fd01 	bl	fd1e <_svfprintf_r+0x126>
   1131c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1131e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11320:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   11322:	1a9b      	subs	r3, r3, r2
   11324:	af2d      	add	r7, sp, #180	; 0xb4
   11326:	f7ff fa27 	bl	10778 <_svfprintf_r+0xb80>
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	00016b6c 	.word	0x00016b6c
   11330:	00016b34 	.word	0x00016b34
   11334:	2230      	movs	r2, #48	; 0x30
   11336:	ab23      	add	r3, sp, #140	; 0x8c
   11338:	701a      	strb	r2, [r3, #0]
   1133a:	3228      	adds	r2, #40	; 0x28
   1133c:	2402      	movs	r4, #2
   1133e:	705a      	strb	r2, [r3, #1]
   11340:	4643      	mov	r3, r8
   11342:	431c      	orrs	r4, r3
   11344:	9b07      	ldr	r3, [sp, #28]
   11346:	2b63      	cmp	r3, #99	; 0x63
   11348:	dd00      	ble.n	1134c <_svfprintf_r+0x1754>
   1134a:	e0e3      	b.n	11514 <_svfprintf_r+0x191c>
   1134c:	2300      	movs	r3, #0
   1134e:	ae3d      	add	r6, sp, #244	; 0xf4
   11350:	930e      	str	r3, [sp, #56]	; 0x38
   11352:	2381      	movs	r3, #129	; 0x81
   11354:	9816      	ldr	r0, [sp, #88]	; 0x58
   11356:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11358:	4642      	mov	r2, r8
   1135a:	005b      	lsls	r3, r3, #1
   1135c:	431a      	orrs	r2, r3
   1135e:	9218      	str	r2, [sp, #96]	; 0x60
   11360:	2900      	cmp	r1, #0
   11362:	da00      	bge.n	11366 <_svfprintf_r+0x176e>
   11364:	e099      	b.n	1149a <_svfprintf_r+0x18a2>
   11366:	2220      	movs	r2, #32
   11368:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1136a:	2300      	movs	r3, #0
   1136c:	4395      	bics	r5, r2
   1136e:	950a      	str	r5, [sp, #40]	; 0x28
   11370:	46a0      	mov	r8, r4
   11372:	0005      	movs	r5, r0
   11374:	4689      	mov	r9, r1
   11376:	9319      	str	r3, [sp, #100]	; 0x64
   11378:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1137a:	2b61      	cmp	r3, #97	; 0x61
   1137c:	d100      	bne.n	11380 <_svfprintf_r+0x1788>
   1137e:	e177      	b.n	11670 <_svfprintf_r+0x1a78>
   11380:	2b41      	cmp	r3, #65	; 0x41
   11382:	d001      	beq.n	11388 <_svfprintf_r+0x1790>
   11384:	f7ff fb55 	bl	10a32 <_svfprintf_r+0xe3a>
   11388:	0028      	movs	r0, r5
   1138a:	aa24      	add	r2, sp, #144	; 0x90
   1138c:	4649      	mov	r1, r9
   1138e:	f001 fd99 	bl	12ec4 <frexp>
   11392:	23ff      	movs	r3, #255	; 0xff
   11394:	2200      	movs	r2, #0
   11396:	059b      	lsls	r3, r3, #22
   11398:	f7f4 fd06 	bl	5da8 <__aeabi_dmul>
   1139c:	2200      	movs	r2, #0
   1139e:	2300      	movs	r3, #0
   113a0:	0004      	movs	r4, r0
   113a2:	000d      	movs	r5, r1
   113a4:	f7f3 f8da 	bl	455c <__aeabi_dcmpeq>
   113a8:	2800      	cmp	r0, #0
   113aa:	d001      	beq.n	113b0 <_svfprintf_r+0x17b8>
   113ac:	2301      	movs	r3, #1
   113ae:	9324      	str	r3, [sp, #144]	; 0x90
   113b0:	4bd8      	ldr	r3, [pc, #864]	; (11714 <_svfprintf_r+0x1b1c>)
   113b2:	9306      	str	r3, [sp, #24]
   113b4:	9b07      	ldr	r3, [sp, #28]
   113b6:	46b1      	mov	r9, r6
   113b8:	469c      	mov	ip, r3
   113ba:	44b4      	add	ip, r6
   113bc:	4663      	mov	r3, ip
   113be:	9313      	str	r3, [sp, #76]	; 0x4c
   113c0:	3b01      	subs	r3, #1
   113c2:	9314      	str	r3, [sp, #80]	; 0x50
   113c4:	4653      	mov	r3, sl
   113c6:	9315      	str	r3, [sp, #84]	; 0x54
   113c8:	4643      	mov	r3, r8
   113ca:	46ba      	mov	sl, r7
   113cc:	9321      	str	r3, [sp, #132]	; 0x84
   113ce:	e006      	b.n	113de <_svfprintf_r+0x17e6>
   113d0:	2200      	movs	r2, #0
   113d2:	2300      	movs	r3, #0
   113d4:	f7f3 f8c2 	bl	455c <__aeabi_dcmpeq>
   113d8:	2800      	cmp	r0, #0
   113da:	d000      	beq.n	113de <_svfprintf_r+0x17e6>
   113dc:	e0da      	b.n	11594 <_svfprintf_r+0x199c>
   113de:	2200      	movs	r2, #0
   113e0:	4bcd      	ldr	r3, [pc, #820]	; (11718 <_svfprintf_r+0x1b20>)
   113e2:	0020      	movs	r0, r4
   113e4:	0029      	movs	r1, r5
   113e6:	f7f4 fcdf 	bl	5da8 <__aeabi_dmul>
   113ea:	000d      	movs	r5, r1
   113ec:	0004      	movs	r4, r0
   113ee:	f7f5 faf9 	bl	69e4 <__aeabi_d2iz>
   113f2:	0007      	movs	r7, r0
   113f4:	f7f5 fb2c 	bl	6a50 <__aeabi_i2d>
   113f8:	46b0      	mov	r8, r6
   113fa:	0002      	movs	r2, r0
   113fc:	000b      	movs	r3, r1
   113fe:	0020      	movs	r0, r4
   11400:	0029      	movs	r1, r5
   11402:	f7f4 ff3f 	bl	6284 <__aeabi_dsub>
   11406:	4642      	mov	r2, r8
   11408:	9b06      	ldr	r3, [sp, #24]
   1140a:	3601      	adds	r6, #1
   1140c:	5ddb      	ldrb	r3, [r3, r7]
   1140e:	0004      	movs	r4, r0
   11410:	7013      	strb	r3, [r2, #0]
   11412:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11414:	000d      	movs	r5, r1
   11416:	1a9b      	subs	r3, r3, r2
   11418:	9310      	str	r3, [sp, #64]	; 0x40
   1141a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1141c:	9611      	str	r6, [sp, #68]	; 0x44
   1141e:	4598      	cmp	r8, r3
   11420:	d1d6      	bne.n	113d0 <_svfprintf_r+0x17d8>
   11422:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11424:	9713      	str	r7, [sp, #76]	; 0x4c
   11426:	4657      	mov	r7, sl
   11428:	469a      	mov	sl, r3
   1142a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1142c:	9214      	str	r2, [sp, #80]	; 0x50
   1142e:	4698      	mov	r8, r3
   11430:	464b      	mov	r3, r9
   11432:	46b1      	mov	r9, r6
   11434:	001e      	movs	r6, r3
   11436:	2301      	movs	r3, #1
   11438:	425b      	negs	r3, r3
   1143a:	9310      	str	r3, [sp, #64]	; 0x40
   1143c:	2200      	movs	r2, #0
   1143e:	0020      	movs	r0, r4
   11440:	0029      	movs	r1, r5
   11442:	4bb6      	ldr	r3, [pc, #728]	; (1171c <_svfprintf_r+0x1b24>)
   11444:	f7f3 f8a4 	bl	4590 <__aeabi_dcmpgt>
   11448:	2800      	cmp	r0, #0
   1144a:	d16c      	bne.n	11526 <_svfprintf_r+0x192e>
   1144c:	2200      	movs	r2, #0
   1144e:	0020      	movs	r0, r4
   11450:	0029      	movs	r1, r5
   11452:	4bb2      	ldr	r3, [pc, #712]	; (1171c <_svfprintf_r+0x1b24>)
   11454:	f7f3 f882 	bl	455c <__aeabi_dcmpeq>
   11458:	2800      	cmp	r0, #0
   1145a:	d002      	beq.n	11462 <_svfprintf_r+0x186a>
   1145c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1145e:	07db      	lsls	r3, r3, #31
   11460:	d461      	bmi.n	11526 <_svfprintf_r+0x192e>
   11462:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11464:	2230      	movs	r2, #48	; 0x30
   11466:	0019      	movs	r1, r3
   11468:	4449      	add	r1, r9
   1146a:	2b00      	cmp	r3, #0
   1146c:	db0c      	blt.n	11488 <_svfprintf_r+0x1890>
   1146e:	464b      	mov	r3, r9
   11470:	0018      	movs	r0, r3
   11472:	701a      	strb	r2, [r3, #0]
   11474:	3301      	adds	r3, #1
   11476:	4281      	cmp	r1, r0
   11478:	d1fa      	bne.n	11470 <_svfprintf_r+0x1878>
   1147a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1147c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1147e:	4694      	mov	ip, r2
   11480:	3301      	adds	r3, #1
   11482:	449c      	add	ip, r3
   11484:	4663      	mov	r3, ip
   11486:	9311      	str	r3, [sp, #68]	; 0x44
   11488:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1148a:	1b9b      	subs	r3, r3, r6
   1148c:	9315      	str	r3, [sp, #84]	; 0x54
   1148e:	4643      	mov	r3, r8
   11490:	9306      	str	r3, [sp, #24]
   11492:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11494:	4698      	mov	r8, r3
   11496:	f7ff faf5 	bl	10a84 <_svfprintf_r+0xe8c>
   1149a:	2320      	movs	r3, #32
   1149c:	46a0      	mov	r8, r4
   1149e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   114a0:	439a      	bics	r2, r3
   114a2:	920a      	str	r2, [sp, #40]	; 0x28
   114a4:	2280      	movs	r2, #128	; 0x80
   114a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   114a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   114aa:	0612      	lsls	r2, r2, #24
   114ac:	001d      	movs	r5, r3
   114ae:	4694      	mov	ip, r2
   114b0:	0023      	movs	r3, r4
   114b2:	4463      	add	r3, ip
   114b4:	4699      	mov	r9, r3
   114b6:	232d      	movs	r3, #45	; 0x2d
   114b8:	9319      	str	r3, [sp, #100]	; 0x64
   114ba:	e75d      	b.n	11378 <_svfprintf_r+0x1780>
   114bc:	9b07      	ldr	r3, [sp, #28]
   114be:	18f4      	adds	r4, r6, r3
   114c0:	4643      	mov	r3, r8
   114c2:	9306      	str	r3, [sp, #24]
   114c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   114c6:	4698      	mov	r8, r3
   114c8:	e6c7      	b.n	1125a <_svfprintf_r+0x1662>
   114ca:	424d      	negs	r5, r1
   114cc:	3110      	adds	r1, #16
   114ce:	db00      	blt.n	114d2 <_svfprintf_r+0x18da>
   114d0:	e160      	b.n	11794 <_svfprintf_r+0x1b9c>
   114d2:	4993      	ldr	r1, [pc, #588]	; (11720 <_svfprintf_r+0x1b28>)
   114d4:	2710      	movs	r7, #16
   114d6:	4689      	mov	r9, r1
   114d8:	0021      	movs	r1, r4
   114da:	464c      	mov	r4, r9
   114dc:	46b1      	mov	r9, r6
   114de:	465e      	mov	r6, fp
   114e0:	e003      	b.n	114ea <_svfprintf_r+0x18f2>
   114e2:	3208      	adds	r2, #8
   114e4:	3d10      	subs	r5, #16
   114e6:	2d10      	cmp	r5, #16
   114e8:	dd60      	ble.n	115ac <_svfprintf_r+0x19b4>
   114ea:	3110      	adds	r1, #16
   114ec:	3301      	adds	r3, #1
   114ee:	6014      	str	r4, [r2, #0]
   114f0:	6057      	str	r7, [r2, #4]
   114f2:	912c      	str	r1, [sp, #176]	; 0xb0
   114f4:	932b      	str	r3, [sp, #172]	; 0xac
   114f6:	2b07      	cmp	r3, #7
   114f8:	ddf3      	ble.n	114e2 <_svfprintf_r+0x18ea>
   114fa:	0030      	movs	r0, r6
   114fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   114fe:	aa2a      	add	r2, sp, #168	; 0xa8
   11500:	f001 fd12 	bl	12f28 <__ssprint_r>
   11504:	2800      	cmp	r0, #0
   11506:	d001      	beq.n	1150c <_svfprintf_r+0x1914>
   11508:	f7fe fc08 	bl	fd1c <_svfprintf_r+0x124>
   1150c:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1150e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   11510:	aa2d      	add	r2, sp, #180	; 0xb4
   11512:	e7e7      	b.n	114e4 <_svfprintf_r+0x18ec>
   11514:	4658      	mov	r0, fp
   11516:	1c59      	adds	r1, r3, #1
   11518:	f7fc fb8c 	bl	dc34 <_malloc_r>
   1151c:	1e06      	subs	r6, r0, #0
   1151e:	d100      	bne.n	11522 <_svfprintf_r+0x192a>
   11520:	e131      	b.n	11786 <_svfprintf_r+0x1b8e>
   11522:	900e      	str	r0, [sp, #56]	; 0x38
   11524:	e715      	b.n	11352 <_svfprintf_r+0x175a>
   11526:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11528:	9906      	ldr	r1, [sp, #24]
   1152a:	9328      	str	r3, [sp, #160]	; 0xa0
   1152c:	464b      	mov	r3, r9
   1152e:	3b01      	subs	r3, #1
   11530:	781a      	ldrb	r2, [r3, #0]
   11532:	7bc9      	ldrb	r1, [r1, #15]
   11534:	428a      	cmp	r2, r1
   11536:	d107      	bne.n	11548 <_svfprintf_r+0x1950>
   11538:	2030      	movs	r0, #48	; 0x30
   1153a:	7018      	strb	r0, [r3, #0]
   1153c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1153e:	3b01      	subs	r3, #1
   11540:	9328      	str	r3, [sp, #160]	; 0xa0
   11542:	781a      	ldrb	r2, [r3, #0]
   11544:	4291      	cmp	r1, r2
   11546:	d0f8      	beq.n	1153a <_svfprintf_r+0x1942>
   11548:	2a39      	cmp	r2, #57	; 0x39
   1154a:	d100      	bne.n	1154e <_svfprintf_r+0x1956>
   1154c:	e0de      	b.n	1170c <_svfprintf_r+0x1b14>
   1154e:	3201      	adds	r2, #1
   11550:	b2d2      	uxtb	r2, r2
   11552:	701a      	strb	r2, [r3, #0]
   11554:	e798      	b.n	11488 <_svfprintf_r+0x1890>
   11556:	2300      	movs	r3, #0
   11558:	930e      	str	r3, [sp, #56]	; 0x38
   1155a:	e7a3      	b.n	114a4 <_svfprintf_r+0x18ac>
   1155c:	2230      	movs	r2, #48	; 0x30
   1155e:	ab23      	add	r3, sp, #140	; 0x8c
   11560:	701a      	strb	r2, [r3, #0]
   11562:	3248      	adds	r2, #72	; 0x48
   11564:	e6ea      	b.n	1133c <_svfprintf_r+0x1744>
   11566:	9b07      	ldr	r3, [sp, #28]
   11568:	002a      	movs	r2, r5
   1156a:	1c5c      	adds	r4, r3, #1
   1156c:	ab28      	add	r3, sp, #160	; 0xa0
   1156e:	9304      	str	r3, [sp, #16]
   11570:	ab25      	add	r3, sp, #148	; 0x94
   11572:	9303      	str	r3, [sp, #12]
   11574:	ab24      	add	r3, sp, #144	; 0x90
   11576:	9302      	str	r3, [sp, #8]
   11578:	2302      	movs	r3, #2
   1157a:	4658      	mov	r0, fp
   1157c:	9300      	str	r3, [sp, #0]
   1157e:	9401      	str	r4, [sp, #4]
   11580:	464b      	mov	r3, r9
   11582:	f000 f9e3 	bl	1194c <_dtoa_r>
   11586:	0006      	movs	r6, r0
   11588:	e662      	b.n	11250 <_svfprintf_r+0x1658>
   1158a:	2301      	movs	r3, #1
   1158c:	425b      	negs	r3, r3
   1158e:	9309      	str	r3, [sp, #36]	; 0x24
   11590:	f7fe fbd2 	bl	fd38 <_svfprintf_r+0x140>
   11594:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11596:	9713      	str	r7, [sp, #76]	; 0x4c
   11598:	4657      	mov	r7, sl
   1159a:	469a      	mov	sl, r3
   1159c:	4643      	mov	r3, r8
   1159e:	9314      	str	r3, [sp, #80]	; 0x50
   115a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   115a2:	4698      	mov	r8, r3
   115a4:	464b      	mov	r3, r9
   115a6:	46b1      	mov	r9, r6
   115a8:	001e      	movs	r6, r3
   115aa:	e747      	b.n	1143c <_svfprintf_r+0x1844>
   115ac:	46b3      	mov	fp, r6
   115ae:	464e      	mov	r6, r9
   115b0:	46a1      	mov	r9, r4
   115b2:	000c      	movs	r4, r1
   115b4:	4649      	mov	r1, r9
   115b6:	1964      	adds	r4, r4, r5
   115b8:	3301      	adds	r3, #1
   115ba:	6011      	str	r1, [r2, #0]
   115bc:	6055      	str	r5, [r2, #4]
   115be:	942c      	str	r4, [sp, #176]	; 0xb0
   115c0:	932b      	str	r3, [sp, #172]	; 0xac
   115c2:	2b07      	cmp	r3, #7
   115c4:	dc00      	bgt.n	115c8 <_svfprintf_r+0x19d0>
   115c6:	e472      	b.n	10eae <_svfprintf_r+0x12b6>
   115c8:	4658      	mov	r0, fp
   115ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   115cc:	aa2a      	add	r2, sp, #168	; 0xa8
   115ce:	f001 fcab 	bl	12f28 <__ssprint_r>
   115d2:	2800      	cmp	r0, #0
   115d4:	d001      	beq.n	115da <_svfprintf_r+0x19e2>
   115d6:	f7fe fba2 	bl	fd1e <_svfprintf_r+0x126>
   115da:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   115dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   115de:	aa2d      	add	r2, sp, #180	; 0xb4
   115e0:	e4f9      	b.n	10fd6 <_svfprintf_r+0x13de>
   115e2:	9b07      	ldr	r3, [sp, #28]
   115e4:	2b00      	cmp	r3, #0
   115e6:	d101      	bne.n	115ec <_svfprintf_r+0x19f4>
   115e8:	2301      	movs	r3, #1
   115ea:	9307      	str	r3, [sp, #28]
   115ec:	2380      	movs	r3, #128	; 0x80
   115ee:	4642      	mov	r2, r8
   115f0:	005b      	lsls	r3, r3, #1
   115f2:	431a      	orrs	r2, r3
   115f4:	9218      	str	r2, [sp, #96]	; 0x60
   115f6:	9916      	ldr	r1, [sp, #88]	; 0x58
   115f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   115fa:	2a00      	cmp	r2, #0
   115fc:	dbab      	blt.n	11556 <_svfprintf_r+0x195e>
   115fe:	2300      	movs	r3, #0
   11600:	000d      	movs	r5, r1
   11602:	4691      	mov	r9, r2
   11604:	930e      	str	r3, [sp, #56]	; 0x38
   11606:	9319      	str	r3, [sp, #100]	; 0x64
   11608:	f7ff fa1b 	bl	10a42 <_svfprintf_r+0xe4a>
   1160c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1160e:	2201      	movs	r2, #1
   11610:	330f      	adds	r3, #15
   11612:	b2db      	uxtb	r3, r3
   11614:	f7ff fa4e 	bl	10ab4 <_svfprintf_r+0xebc>
   11618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1161a:	469c      	mov	ip, r3
   1161c:	4462      	add	r2, ip
   1161e:	468c      	mov	ip, r1
   11620:	4494      	add	ip, r2
   11622:	4663      	mov	r3, ip
   11624:	930a      	str	r3, [sp, #40]	; 0x28
   11626:	2366      	movs	r3, #102	; 0x66
   11628:	9312      	str	r3, [sp, #72]	; 0x48
   1162a:	e652      	b.n	112d2 <_svfprintf_r+0x16da>
   1162c:	a91c      	add	r1, sp, #112	; 0x70
   1162e:	232a      	movs	r3, #42	; 0x2a
   11630:	468c      	mov	ip, r1
   11632:	4463      	add	r3, ip
   11634:	2a00      	cmp	r2, #0
   11636:	d106      	bne.n	11646 <_svfprintf_r+0x1a4e>
   11638:	000a      	movs	r2, r1
   1163a:	212a      	movs	r1, #42	; 0x2a
   1163c:	2330      	movs	r3, #48	; 0x30
   1163e:	1852      	adds	r2, r2, r1
   11640:	7013      	strb	r3, [r2, #0]
   11642:	3b05      	subs	r3, #5
   11644:	4463      	add	r3, ip
   11646:	0020      	movs	r0, r4
   11648:	3030      	adds	r0, #48	; 0x30
   1164a:	7018      	strb	r0, [r3, #0]
   1164c:	aa26      	add	r2, sp, #152	; 0x98
   1164e:	3301      	adds	r3, #1
   11650:	1a9b      	subs	r3, r3, r2
   11652:	931e      	str	r3, [sp, #120]	; 0x78
   11654:	f7ff fa81 	bl	10b5a <_svfprintf_r+0xf62>
   11658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1165a:	2b00      	cmp	r3, #0
   1165c:	da00      	bge.n	11660 <_svfprintf_r+0x1a68>
   1165e:	e081      	b.n	11764 <_svfprintf_r+0x1b6c>
   11660:	ab1c      	add	r3, sp, #112	; 0x70
   11662:	7edb      	ldrb	r3, [r3, #27]
   11664:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11666:	2a47      	cmp	r2, #71	; 0x47
   11668:	dd79      	ble.n	1175e <_svfprintf_r+0x1b66>
   1166a:	4e2e      	ldr	r6, [pc, #184]	; (11724 <_svfprintf_r+0x1b2c>)
   1166c:	f7fe fc59 	bl	ff22 <_svfprintf_r+0x32a>
   11670:	0028      	movs	r0, r5
   11672:	aa24      	add	r2, sp, #144	; 0x90
   11674:	4649      	mov	r1, r9
   11676:	f001 fc25 	bl	12ec4 <frexp>
   1167a:	23ff      	movs	r3, #255	; 0xff
   1167c:	2200      	movs	r2, #0
   1167e:	059b      	lsls	r3, r3, #22
   11680:	f7f4 fb92 	bl	5da8 <__aeabi_dmul>
   11684:	2200      	movs	r2, #0
   11686:	2300      	movs	r3, #0
   11688:	0004      	movs	r4, r0
   1168a:	000d      	movs	r5, r1
   1168c:	f7f2 ff66 	bl	455c <__aeabi_dcmpeq>
   11690:	2800      	cmp	r0, #0
   11692:	d001      	beq.n	11698 <_svfprintf_r+0x1aa0>
   11694:	2301      	movs	r3, #1
   11696:	9324      	str	r3, [sp, #144]	; 0x90
   11698:	4b23      	ldr	r3, [pc, #140]	; (11728 <_svfprintf_r+0x1b30>)
   1169a:	9306      	str	r3, [sp, #24]
   1169c:	e68a      	b.n	113b4 <_svfprintf_r+0x17bc>
   1169e:	2367      	movs	r3, #103	; 0x67
   116a0:	9312      	str	r3, [sp, #72]	; 0x48
   116a2:	991a      	ldr	r1, [sp, #104]	; 0x68
   116a4:	780b      	ldrb	r3, [r1, #0]
   116a6:	2bff      	cmp	r3, #255	; 0xff
   116a8:	d100      	bne.n	116ac <_svfprintf_r+0x1ab4>
   116aa:	e07d      	b.n	117a8 <_svfprintf_r+0x1bb0>
   116ac:	2200      	movs	r2, #0
   116ae:	9218      	str	r2, [sp, #96]	; 0x60
   116b0:	9213      	str	r2, [sp, #76]	; 0x4c
   116b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   116b4:	e005      	b.n	116c2 <_svfprintf_r+0x1aca>
   116b6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   116b8:	3101      	adds	r1, #1
   116ba:	3001      	adds	r0, #1
   116bc:	9013      	str	r0, [sp, #76]	; 0x4c
   116be:	2bff      	cmp	r3, #255	; 0xff
   116c0:	d00a      	beq.n	116d8 <_svfprintf_r+0x1ae0>
   116c2:	4293      	cmp	r3, r2
   116c4:	da08      	bge.n	116d8 <_svfprintf_r+0x1ae0>
   116c6:	1ad2      	subs	r2, r2, r3
   116c8:	784b      	ldrb	r3, [r1, #1]
   116ca:	2b00      	cmp	r3, #0
   116cc:	d1f3      	bne.n	116b6 <_svfprintf_r+0x1abe>
   116ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
   116d0:	3301      	adds	r3, #1
   116d2:	9318      	str	r3, [sp, #96]	; 0x60
   116d4:	780b      	ldrb	r3, [r1, #0]
   116d6:	e7f2      	b.n	116be <_svfprintf_r+0x1ac6>
   116d8:	911a      	str	r1, [sp, #104]	; 0x68
   116da:	9214      	str	r2, [sp, #80]	; 0x50
   116dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
   116de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   116e0:	4694      	mov	ip, r2
   116e2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   116e4:	4463      	add	r3, ip
   116e6:	4353      	muls	r3, r2
   116e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   116ea:	4694      	mov	ip, r2
   116ec:	449c      	add	ip, r3
   116ee:	4662      	mov	r2, ip
   116f0:	43d3      	mvns	r3, r2
   116f2:	17db      	asrs	r3, r3, #31
   116f4:	920a      	str	r2, [sp, #40]	; 0x28
   116f6:	401a      	ands	r2, r3
   116f8:	9206      	str	r2, [sp, #24]
   116fa:	f7ff fa4e 	bl	10b9a <_svfprintf_r+0xfa2>
   116fe:	9b06      	ldr	r3, [sp, #24]
   11700:	07db      	lsls	r3, r3, #31
   11702:	d401      	bmi.n	11708 <_svfprintf_r+0x1b10>
   11704:	f7ff fa38 	bl	10b78 <_svfprintf_r+0xf80>
   11708:	f7ff fa31 	bl	10b6e <_svfprintf_r+0xf76>
   1170c:	9a06      	ldr	r2, [sp, #24]
   1170e:	7a92      	ldrb	r2, [r2, #10]
   11710:	701a      	strb	r2, [r3, #0]
   11712:	e6b9      	b.n	11488 <_svfprintf_r+0x1890>
   11714:	00016b58 	.word	0x00016b58
   11718:	40300000 	.word	0x40300000
   1171c:	3fe00000 	.word	0x3fe00000
   11720:	00016cf0 	.word	0x00016cf0
   11724:	00016b40 	.word	0x00016b40
   11728:	00016b44 	.word	0x00016b44
   1172c:	9a06      	ldr	r2, [sp, #24]
   1172e:	4013      	ands	r3, r2
   11730:	9a07      	ldr	r2, [sp, #28]
   11732:	4313      	orrs	r3, r2
   11734:	d106      	bne.n	11744 <_svfprintf_r+0x1b4c>
   11736:	2301      	movs	r3, #1
   11738:	9306      	str	r3, [sp, #24]
   1173a:	3365      	adds	r3, #101	; 0x65
   1173c:	9312      	str	r3, [sp, #72]	; 0x48
   1173e:	3b65      	subs	r3, #101	; 0x65
   11740:	930a      	str	r3, [sp, #40]	; 0x28
   11742:	e537      	b.n	111b4 <_svfprintf_r+0x15bc>
   11744:	4694      	mov	ip, r2
   11746:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   11748:	1c58      	adds	r0, r3, #1
   1174a:	4484      	add	ip, r0
   1174c:	4662      	mov	r2, ip
   1174e:	43d3      	mvns	r3, r2
   11750:	17db      	asrs	r3, r3, #31
   11752:	920a      	str	r2, [sp, #40]	; 0x28
   11754:	401a      	ands	r2, r3
   11756:	2366      	movs	r3, #102	; 0x66
   11758:	9206      	str	r2, [sp, #24]
   1175a:	9312      	str	r3, [sp, #72]	; 0x48
   1175c:	e52a      	b.n	111b4 <_svfprintf_r+0x15bc>
   1175e:	4e17      	ldr	r6, [pc, #92]	; (117bc <_svfprintf_r+0x1bc4>)
   11760:	f7fe fbdf 	bl	ff22 <_svfprintf_r+0x32a>
   11764:	232d      	movs	r3, #45	; 0x2d
   11766:	aa1c      	add	r2, sp, #112	; 0x70
   11768:	76d3      	strb	r3, [r2, #27]
   1176a:	e77b      	b.n	11664 <_svfprintf_r+0x1a6c>
   1176c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1176e:	ca08      	ldmia	r2!, {r3}
   11770:	9307      	str	r3, [sp, #28]
   11772:	2b00      	cmp	r3, #0
   11774:	da02      	bge.n	1177c <_svfprintf_r+0x1b84>
   11776:	2301      	movs	r3, #1
   11778:	425b      	negs	r3, r3
   1177a:	9307      	str	r3, [sp, #28]
   1177c:	7863      	ldrb	r3, [r4, #1]
   1177e:	920f      	str	r2, [sp, #60]	; 0x3c
   11780:	0004      	movs	r4, r0
   11782:	f7fe fa89 	bl	fc98 <_svfprintf_r+0xa0>
   11786:	2340      	movs	r3, #64	; 0x40
   11788:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1178a:	898a      	ldrh	r2, [r1, #12]
   1178c:	4313      	orrs	r3, r2
   1178e:	818b      	strh	r3, [r1, #12]
   11790:	f7fe facc 	bl	fd2c <_svfprintf_r+0x134>
   11794:	490a      	ldr	r1, [pc, #40]	; (117c0 <_svfprintf_r+0x1bc8>)
   11796:	4689      	mov	r9, r1
   11798:	e70c      	b.n	115b4 <_svfprintf_r+0x19bc>
   1179a:	230c      	movs	r3, #12
   1179c:	465a      	mov	r2, fp
   1179e:	6013      	str	r3, [r2, #0]
   117a0:	3b0d      	subs	r3, #13
   117a2:	9309      	str	r3, [sp, #36]	; 0x24
   117a4:	f7fe fac8 	bl	fd38 <_svfprintf_r+0x140>
   117a8:	2300      	movs	r3, #0
   117aa:	9318      	str	r3, [sp, #96]	; 0x60
   117ac:	9313      	str	r3, [sp, #76]	; 0x4c
   117ae:	e795      	b.n	116dc <_svfprintf_r+0x1ae4>
   117b0:	9c07      	ldr	r4, [sp, #28]
   117b2:	e54d      	b.n	11250 <_svfprintf_r+0x1658>
   117b4:	2302      	movs	r3, #2
   117b6:	931e      	str	r3, [sp, #120]	; 0x78
   117b8:	f7ff f9cf 	bl	10b5a <_svfprintf_r+0xf62>
   117bc:	00016b3c 	.word	0x00016b3c
   117c0:	00016cf0 	.word	0x00016cf0

000117c4 <__assert_func>:
   117c4:	b530      	push	{r4, r5, lr}
   117c6:	0014      	movs	r4, r2
   117c8:	001a      	movs	r2, r3
   117ca:	4b0a      	ldr	r3, [pc, #40]	; (117f4 <__assert_func+0x30>)
   117cc:	0005      	movs	r5, r0
   117ce:	681b      	ldr	r3, [r3, #0]
   117d0:	b085      	sub	sp, #20
   117d2:	68d8      	ldr	r0, [r3, #12]
   117d4:	2c00      	cmp	r4, #0
   117d6:	d009      	beq.n	117ec <__assert_func+0x28>
   117d8:	4b07      	ldr	r3, [pc, #28]	; (117f8 <__assert_func+0x34>)
   117da:	9301      	str	r3, [sp, #4]
   117dc:	9100      	str	r1, [sp, #0]
   117de:	002b      	movs	r3, r5
   117e0:	4906      	ldr	r1, [pc, #24]	; (117fc <__assert_func+0x38>)
   117e2:	9402      	str	r4, [sp, #8]
   117e4:	f001 f898 	bl	12918 <fiprintf>
   117e8:	f7fc fa4e 	bl	dc88 <abort>
   117ec:	4b04      	ldr	r3, [pc, #16]	; (11800 <__assert_func+0x3c>)
   117ee:	001c      	movs	r4, r3
   117f0:	e7f3      	b.n	117da <__assert_func+0x16>
   117f2:	46c0      	nop			; (mov r8, r8)
   117f4:	0001737c 	.word	0x0001737c
   117f8:	00016d00 	.word	0x00016d00
   117fc:	00016d10 	.word	0x00016d10
   11800:	00014808 	.word	0x00014808

00011804 <quorem>:
   11804:	b5f0      	push	{r4, r5, r6, r7, lr}
   11806:	4645      	mov	r5, r8
   11808:	46de      	mov	lr, fp
   1180a:	4657      	mov	r7, sl
   1180c:	464e      	mov	r6, r9
   1180e:	b5e0      	push	{r5, r6, r7, lr}
   11810:	6903      	ldr	r3, [r0, #16]
   11812:	690d      	ldr	r5, [r1, #16]
   11814:	b085      	sub	sp, #20
   11816:	4680      	mov	r8, r0
   11818:	000a      	movs	r2, r1
   1181a:	9101      	str	r1, [sp, #4]
   1181c:	42ab      	cmp	r3, r5
   1181e:	da00      	bge.n	11822 <quorem+0x1e>
   11820:	e091      	b.n	11946 <quorem+0x142>
   11822:	2114      	movs	r1, #20
   11824:	4441      	add	r1, r8
   11826:	468c      	mov	ip, r1
   11828:	3d01      	subs	r5, #1
   1182a:	3214      	adds	r2, #20
   1182c:	00ab      	lsls	r3, r5, #2
   1182e:	18d6      	adds	r6, r2, r3
   11830:	4463      	add	r3, ip
   11832:	9303      	str	r3, [sp, #12]
   11834:	681b      	ldr	r3, [r3, #0]
   11836:	9100      	str	r1, [sp, #0]
   11838:	469a      	mov	sl, r3
   1183a:	6833      	ldr	r3, [r6, #0]
   1183c:	4650      	mov	r0, sl
   1183e:	1c5f      	adds	r7, r3, #1
   11840:	0039      	movs	r1, r7
   11842:	9202      	str	r2, [sp, #8]
   11844:	f7f2 fd04 	bl	4250 <__udivsi3>
   11848:	0004      	movs	r4, r0
   1184a:	45ba      	cmp	sl, r7
   1184c:	d33c      	bcc.n	118c8 <quorem+0xc4>
   1184e:	2300      	movs	r3, #0
   11850:	2100      	movs	r1, #0
   11852:	0018      	movs	r0, r3
   11854:	468c      	mov	ip, r1
   11856:	46a9      	mov	r9, r5
   11858:	9f00      	ldr	r7, [sp, #0]
   1185a:	9a02      	ldr	r2, [sp, #8]
   1185c:	ca08      	ldmia	r2!, {r3}
   1185e:	0419      	lsls	r1, r3, #16
   11860:	0c09      	lsrs	r1, r1, #16
   11862:	4361      	muls	r1, r4
   11864:	0c1b      	lsrs	r3, r3, #16
   11866:	4363      	muls	r3, r4
   11868:	1809      	adds	r1, r1, r0
   1186a:	0c0d      	lsrs	r5, r1, #16
   1186c:	195d      	adds	r5, r3, r5
   1186e:	683b      	ldr	r3, [r7, #0]
   11870:	0409      	lsls	r1, r1, #16
   11872:	041b      	lsls	r3, r3, #16
   11874:	0c1b      	lsrs	r3, r3, #16
   11876:	4463      	add	r3, ip
   11878:	0c09      	lsrs	r1, r1, #16
   1187a:	1a59      	subs	r1, r3, r1
   1187c:	683b      	ldr	r3, [r7, #0]
   1187e:	0c28      	lsrs	r0, r5, #16
   11880:	042d      	lsls	r5, r5, #16
   11882:	0c2d      	lsrs	r5, r5, #16
   11884:	0c1b      	lsrs	r3, r3, #16
   11886:	1b5b      	subs	r3, r3, r5
   11888:	140d      	asrs	r5, r1, #16
   1188a:	195b      	adds	r3, r3, r5
   1188c:	0409      	lsls	r1, r1, #16
   1188e:	141d      	asrs	r5, r3, #16
   11890:	0c09      	lsrs	r1, r1, #16
   11892:	041b      	lsls	r3, r3, #16
   11894:	430b      	orrs	r3, r1
   11896:	46ac      	mov	ip, r5
   11898:	c708      	stmia	r7!, {r3}
   1189a:	4296      	cmp	r6, r2
   1189c:	d2de      	bcs.n	1185c <quorem+0x58>
   1189e:	9b03      	ldr	r3, [sp, #12]
   118a0:	464d      	mov	r5, r9
   118a2:	681a      	ldr	r2, [r3, #0]
   118a4:	9203      	str	r2, [sp, #12]
   118a6:	2a00      	cmp	r2, #0
   118a8:	d10e      	bne.n	118c8 <quorem+0xc4>
   118aa:	9a00      	ldr	r2, [sp, #0]
   118ac:	3b04      	subs	r3, #4
   118ae:	4293      	cmp	r3, r2
   118b0:	d908      	bls.n	118c4 <quorem+0xc0>
   118b2:	9a00      	ldr	r2, [sp, #0]
   118b4:	e003      	b.n	118be <quorem+0xba>
   118b6:	3b04      	subs	r3, #4
   118b8:	3d01      	subs	r5, #1
   118ba:	4293      	cmp	r3, r2
   118bc:	d902      	bls.n	118c4 <quorem+0xc0>
   118be:	6819      	ldr	r1, [r3, #0]
   118c0:	2900      	cmp	r1, #0
   118c2:	d0f8      	beq.n	118b6 <quorem+0xb2>
   118c4:	4643      	mov	r3, r8
   118c6:	611d      	str	r5, [r3, #16]
   118c8:	4640      	mov	r0, r8
   118ca:	9901      	ldr	r1, [sp, #4]
   118cc:	f7fd fc9a 	bl	f204 <__mcmp>
   118d0:	2800      	cmp	r0, #0
   118d2:	db30      	blt.n	11936 <quorem+0x132>
   118d4:	2300      	movs	r3, #0
   118d6:	3401      	adds	r4, #1
   118d8:	001f      	movs	r7, r3
   118da:	46a4      	mov	ip, r4
   118dc:	9900      	ldr	r1, [sp, #0]
   118de:	9802      	ldr	r0, [sp, #8]
   118e0:	680b      	ldr	r3, [r1, #0]
   118e2:	c810      	ldmia	r0!, {r4}
   118e4:	041a      	lsls	r2, r3, #16
   118e6:	0c12      	lsrs	r2, r2, #16
   118e8:	19d7      	adds	r7, r2, r7
   118ea:	0422      	lsls	r2, r4, #16
   118ec:	0c12      	lsrs	r2, r2, #16
   118ee:	1aba      	subs	r2, r7, r2
   118f0:	0c1b      	lsrs	r3, r3, #16
   118f2:	0c27      	lsrs	r7, r4, #16
   118f4:	1bdb      	subs	r3, r3, r7
   118f6:	1417      	asrs	r7, r2, #16
   118f8:	19db      	adds	r3, r3, r7
   118fa:	0412      	lsls	r2, r2, #16
   118fc:	141f      	asrs	r7, r3, #16
   118fe:	0c12      	lsrs	r2, r2, #16
   11900:	041b      	lsls	r3, r3, #16
   11902:	4313      	orrs	r3, r2
   11904:	c108      	stmia	r1!, {r3}
   11906:	4286      	cmp	r6, r0
   11908:	d2ea      	bcs.n	118e0 <quorem+0xdc>
   1190a:	9a00      	ldr	r2, [sp, #0]
   1190c:	4664      	mov	r4, ip
   1190e:	4694      	mov	ip, r2
   11910:	00ab      	lsls	r3, r5, #2
   11912:	4463      	add	r3, ip
   11914:	6819      	ldr	r1, [r3, #0]
   11916:	2900      	cmp	r1, #0
   11918:	d10d      	bne.n	11936 <quorem+0x132>
   1191a:	3b04      	subs	r3, #4
   1191c:	4293      	cmp	r3, r2
   1191e:	d908      	bls.n	11932 <quorem+0x12e>
   11920:	9a00      	ldr	r2, [sp, #0]
   11922:	e003      	b.n	1192c <quorem+0x128>
   11924:	3b04      	subs	r3, #4
   11926:	3d01      	subs	r5, #1
   11928:	4293      	cmp	r3, r2
   1192a:	d902      	bls.n	11932 <quorem+0x12e>
   1192c:	6819      	ldr	r1, [r3, #0]
   1192e:	2900      	cmp	r1, #0
   11930:	d0f8      	beq.n	11924 <quorem+0x120>
   11932:	4643      	mov	r3, r8
   11934:	611d      	str	r5, [r3, #16]
   11936:	0020      	movs	r0, r4
   11938:	b005      	add	sp, #20
   1193a:	bcf0      	pop	{r4, r5, r6, r7}
   1193c:	46bb      	mov	fp, r7
   1193e:	46b2      	mov	sl, r6
   11940:	46a9      	mov	r9, r5
   11942:	46a0      	mov	r8, r4
   11944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11946:	2000      	movs	r0, #0
   11948:	e7f6      	b.n	11938 <quorem+0x134>
   1194a:	46c0      	nop			; (mov r8, r8)

0001194c <_dtoa_r>:
   1194c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1194e:	4657      	mov	r7, sl
   11950:	464e      	mov	r6, r9
   11952:	4645      	mov	r5, r8
   11954:	46de      	mov	lr, fp
   11956:	0014      	movs	r4, r2
   11958:	b5e0      	push	{r5, r6, r7, lr}
   1195a:	001d      	movs	r5, r3
   1195c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1195e:	b09b      	sub	sp, #108	; 0x6c
   11960:	4682      	mov	sl, r0
   11962:	9404      	str	r4, [sp, #16]
   11964:	9505      	str	r5, [sp, #20]
   11966:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   11968:	2900      	cmp	r1, #0
   1196a:	d009      	beq.n	11980 <_dtoa_r+0x34>
   1196c:	2301      	movs	r3, #1
   1196e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11970:	4093      	lsls	r3, r2
   11972:	604a      	str	r2, [r1, #4]
   11974:	608b      	str	r3, [r1, #8]
   11976:	f7fd f9b1 	bl	ecdc <_Bfree>
   1197a:	2300      	movs	r3, #0
   1197c:	4652      	mov	r2, sl
   1197e:	6413      	str	r3, [r2, #64]	; 0x40
   11980:	1e2f      	subs	r7, r5, #0
   11982:	da00      	bge.n	11986 <_dtoa_r+0x3a>
   11984:	e16c      	b.n	11c60 <_dtoa_r+0x314>
   11986:	2300      	movs	r3, #0
   11988:	003a      	movs	r2, r7
   1198a:	6033      	str	r3, [r6, #0]
   1198c:	4bce      	ldr	r3, [pc, #824]	; (11cc8 <_dtoa_r+0x37c>)
   1198e:	401a      	ands	r2, r3
   11990:	429a      	cmp	r2, r3
   11992:	d100      	bne.n	11996 <_dtoa_r+0x4a>
   11994:	e16f      	b.n	11c76 <_dtoa_r+0x32a>
   11996:	9a04      	ldr	r2, [sp, #16]
   11998:	9b05      	ldr	r3, [sp, #20]
   1199a:	0010      	movs	r0, r2
   1199c:	0019      	movs	r1, r3
   1199e:	2200      	movs	r2, #0
   119a0:	2300      	movs	r3, #0
   119a2:	900a      	str	r0, [sp, #40]	; 0x28
   119a4:	910b      	str	r1, [sp, #44]	; 0x2c
   119a6:	f7f2 fdd9 	bl	455c <__aeabi_dcmpeq>
   119aa:	2800      	cmp	r0, #0
   119ac:	d012      	beq.n	119d4 <_dtoa_r+0x88>
   119ae:	2301      	movs	r3, #1
   119b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   119b2:	6013      	str	r3, [r2, #0]
   119b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   119b6:	2b00      	cmp	r3, #0
   119b8:	d100      	bne.n	119bc <_dtoa_r+0x70>
   119ba:	e2b7      	b.n	11f2c <_dtoa_r+0x5e0>
   119bc:	48c3      	ldr	r0, [pc, #780]	; (11ccc <_dtoa_r+0x380>)
   119be:	6018      	str	r0, [r3, #0]
   119c0:	1e43      	subs	r3, r0, #1
   119c2:	9303      	str	r3, [sp, #12]
   119c4:	9803      	ldr	r0, [sp, #12]
   119c6:	b01b      	add	sp, #108	; 0x6c
   119c8:	bcf0      	pop	{r4, r5, r6, r7}
   119ca:	46bb      	mov	fp, r7
   119cc:	46b2      	mov	sl, r6
   119ce:	46a9      	mov	r9, r5
   119d0:	46a0      	mov	r8, r4
   119d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119d4:	ab18      	add	r3, sp, #96	; 0x60
   119d6:	9301      	str	r3, [sp, #4]
   119d8:	ab19      	add	r3, sp, #100	; 0x64
   119da:	9300      	str	r3, [sp, #0]
   119dc:	4650      	mov	r0, sl
   119de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   119e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   119e2:	f7fd fcef 	bl	f3c4 <__d2b>
   119e6:	0d3e      	lsrs	r6, r7, #20
   119e8:	4683      	mov	fp, r0
   119ea:	d000      	beq.n	119ee <_dtoa_r+0xa2>
   119ec:	e155      	b.n	11c9a <_dtoa_r+0x34e>
   119ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
   119f0:	4698      	mov	r8, r3
   119f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   119f4:	4443      	add	r3, r8
   119f6:	001e      	movs	r6, r3
   119f8:	4bb5      	ldr	r3, [pc, #724]	; (11cd0 <_dtoa_r+0x384>)
   119fa:	18f3      	adds	r3, r6, r3
   119fc:	2b20      	cmp	r3, #32
   119fe:	dc00      	bgt.n	11a02 <_dtoa_r+0xb6>
   11a00:	e397      	b.n	12132 <_dtoa_r+0x7e6>
   11a02:	2240      	movs	r2, #64	; 0x40
   11a04:	0038      	movs	r0, r7
   11a06:	1ad3      	subs	r3, r2, r3
   11a08:	4098      	lsls	r0, r3
   11a0a:	4bb2      	ldr	r3, [pc, #712]	; (11cd4 <_dtoa_r+0x388>)
   11a0c:	18f2      	adds	r2, r6, r3
   11a0e:	40d4      	lsrs	r4, r2
   11a10:	4320      	orrs	r0, r4
   11a12:	f7f5 f84d 	bl	6ab0 <__aeabi_ui2d>
   11a16:	2301      	movs	r3, #1
   11a18:	4caf      	ldr	r4, [pc, #700]	; (11cd8 <_dtoa_r+0x38c>)
   11a1a:	3e01      	subs	r6, #1
   11a1c:	1909      	adds	r1, r1, r4
   11a1e:	930f      	str	r3, [sp, #60]	; 0x3c
   11a20:	2200      	movs	r2, #0
   11a22:	4bae      	ldr	r3, [pc, #696]	; (11cdc <_dtoa_r+0x390>)
   11a24:	f7f4 fc2e 	bl	6284 <__aeabi_dsub>
   11a28:	4aad      	ldr	r2, [pc, #692]	; (11ce0 <_dtoa_r+0x394>)
   11a2a:	4bae      	ldr	r3, [pc, #696]	; (11ce4 <_dtoa_r+0x398>)
   11a2c:	f7f4 f9bc 	bl	5da8 <__aeabi_dmul>
   11a30:	4aad      	ldr	r2, [pc, #692]	; (11ce8 <_dtoa_r+0x39c>)
   11a32:	4bae      	ldr	r3, [pc, #696]	; (11cec <_dtoa_r+0x3a0>)
   11a34:	f7f3 fa7a 	bl	4f2c <__aeabi_dadd>
   11a38:	0004      	movs	r4, r0
   11a3a:	0030      	movs	r0, r6
   11a3c:	000d      	movs	r5, r1
   11a3e:	f7f5 f807 	bl	6a50 <__aeabi_i2d>
   11a42:	4aab      	ldr	r2, [pc, #684]	; (11cf0 <_dtoa_r+0x3a4>)
   11a44:	4bab      	ldr	r3, [pc, #684]	; (11cf4 <_dtoa_r+0x3a8>)
   11a46:	f7f4 f9af 	bl	5da8 <__aeabi_dmul>
   11a4a:	0002      	movs	r2, r0
   11a4c:	000b      	movs	r3, r1
   11a4e:	0020      	movs	r0, r4
   11a50:	0029      	movs	r1, r5
   11a52:	f7f3 fa6b 	bl	4f2c <__aeabi_dadd>
   11a56:	0004      	movs	r4, r0
   11a58:	000d      	movs	r5, r1
   11a5a:	f7f4 ffc3 	bl	69e4 <__aeabi_d2iz>
   11a5e:	2200      	movs	r2, #0
   11a60:	0007      	movs	r7, r0
   11a62:	9006      	str	r0, [sp, #24]
   11a64:	2300      	movs	r3, #0
   11a66:	0020      	movs	r0, r4
   11a68:	0029      	movs	r1, r5
   11a6a:	f7f2 fd7d 	bl	4568 <__aeabi_dcmplt>
   11a6e:	2800      	cmp	r0, #0
   11a70:	d00a      	beq.n	11a88 <_dtoa_r+0x13c>
   11a72:	0038      	movs	r0, r7
   11a74:	f7f4 ffec 	bl	6a50 <__aeabi_i2d>
   11a78:	002b      	movs	r3, r5
   11a7a:	0022      	movs	r2, r4
   11a7c:	f7f2 fd6e 	bl	455c <__aeabi_dcmpeq>
   11a80:	4243      	negs	r3, r0
   11a82:	4158      	adcs	r0, r3
   11a84:	1a3b      	subs	r3, r7, r0
   11a86:	9306      	str	r3, [sp, #24]
   11a88:	9c06      	ldr	r4, [sp, #24]
   11a8a:	2c16      	cmp	r4, #22
   11a8c:	d900      	bls.n	11a90 <_dtoa_r+0x144>
   11a8e:	e229      	b.n	11ee4 <_dtoa_r+0x598>
   11a90:	980a      	ldr	r0, [sp, #40]	; 0x28
   11a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a94:	4b98      	ldr	r3, [pc, #608]	; (11cf8 <_dtoa_r+0x3ac>)
   11a96:	00e2      	lsls	r2, r4, #3
   11a98:	189b      	adds	r3, r3, r2
   11a9a:	681a      	ldr	r2, [r3, #0]
   11a9c:	685b      	ldr	r3, [r3, #4]
   11a9e:	f7f2 fd63 	bl	4568 <__aeabi_dcmplt>
   11aa2:	2800      	cmp	r0, #0
   11aa4:	d100      	bne.n	11aa8 <_dtoa_r+0x15c>
   11aa6:	e1f7      	b.n	11e98 <_dtoa_r+0x54c>
   11aa8:	2300      	movs	r3, #0
   11aaa:	930e      	str	r3, [sp, #56]	; 0x38
   11aac:	4643      	mov	r3, r8
   11aae:	1b9e      	subs	r6, r3, r6
   11ab0:	2300      	movs	r3, #0
   11ab2:	930c      	str	r3, [sp, #48]	; 0x30
   11ab4:	0033      	movs	r3, r6
   11ab6:	3c01      	subs	r4, #1
   11ab8:	9406      	str	r4, [sp, #24]
   11aba:	3b01      	subs	r3, #1
   11abc:	9308      	str	r3, [sp, #32]
   11abe:	d500      	bpl.n	11ac2 <_dtoa_r+0x176>
   11ac0:	e21b      	b.n	11efa <_dtoa_r+0x5ae>
   11ac2:	9b06      	ldr	r3, [sp, #24]
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	db00      	blt.n	11aca <_dtoa_r+0x17e>
   11ac8:	e1f0      	b.n	11eac <_dtoa_r+0x560>
   11aca:	9b06      	ldr	r3, [sp, #24]
   11acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11ace:	9309      	str	r3, [sp, #36]	; 0x24
   11ad0:	1ad2      	subs	r2, r2, r3
   11ad2:	920c      	str	r2, [sp, #48]	; 0x30
   11ad4:	425a      	negs	r2, r3
   11ad6:	2300      	movs	r3, #0
   11ad8:	9306      	str	r3, [sp, #24]
   11ada:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11adc:	4691      	mov	r9, r2
   11ade:	2401      	movs	r4, #1
   11ae0:	2b09      	cmp	r3, #9
   11ae2:	d900      	bls.n	11ae6 <_dtoa_r+0x19a>
   11ae4:	e1f0      	b.n	11ec8 <_dtoa_r+0x57c>
   11ae6:	2b05      	cmp	r3, #5
   11ae8:	dd02      	ble.n	11af0 <_dtoa_r+0x1a4>
   11aea:	2400      	movs	r4, #0
   11aec:	3b04      	subs	r3, #4
   11aee:	9324      	str	r3, [sp, #144]	; 0x90
   11af0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11af2:	2b04      	cmp	r3, #4
   11af4:	d101      	bne.n	11afa <_dtoa_r+0x1ae>
   11af6:	f000 fc5c 	bl	123b2 <_dtoa_r+0xa66>
   11afa:	2b05      	cmp	r3, #5
   11afc:	d101      	bne.n	11b02 <_dtoa_r+0x1b6>
   11afe:	f000 fbf3 	bl	122e8 <_dtoa_r+0x99c>
   11b02:	2b02      	cmp	r3, #2
   11b04:	d000      	beq.n	11b08 <_dtoa_r+0x1bc>
   11b06:	e1fe      	b.n	11f06 <_dtoa_r+0x5ba>
   11b08:	2300      	movs	r3, #0
   11b0a:	930d      	str	r3, [sp, #52]	; 0x34
   11b0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   11b0e:	2b00      	cmp	r3, #0
   11b10:	dc01      	bgt.n	11b16 <_dtoa_r+0x1ca>
   11b12:	f000 fbf6 	bl	12302 <_dtoa_r+0x9b6>
   11b16:	001d      	movs	r5, r3
   11b18:	9314      	str	r3, [sp, #80]	; 0x50
   11b1a:	9307      	str	r3, [sp, #28]
   11b1c:	2300      	movs	r3, #0
   11b1e:	4652      	mov	r2, sl
   11b20:	6453      	str	r3, [r2, #68]	; 0x44
   11b22:	2d17      	cmp	r5, #23
   11b24:	dc01      	bgt.n	11b2a <_dtoa_r+0x1de>
   11b26:	f000 fed5 	bl	128d4 <_dtoa_r+0xf88>
   11b2a:	2201      	movs	r2, #1
   11b2c:	3304      	adds	r3, #4
   11b2e:	005b      	lsls	r3, r3, #1
   11b30:	0018      	movs	r0, r3
   11b32:	3014      	adds	r0, #20
   11b34:	0011      	movs	r1, r2
   11b36:	3201      	adds	r2, #1
   11b38:	42a8      	cmp	r0, r5
   11b3a:	d9f8      	bls.n	11b2e <_dtoa_r+0x1e2>
   11b3c:	4653      	mov	r3, sl
   11b3e:	6459      	str	r1, [r3, #68]	; 0x44
   11b40:	4650      	mov	r0, sl
   11b42:	f7fd f8a3 	bl	ec8c <_Balloc>
   11b46:	9003      	str	r0, [sp, #12]
   11b48:	2800      	cmp	r0, #0
   11b4a:	d101      	bne.n	11b50 <_dtoa_r+0x204>
   11b4c:	f000 feb0 	bl	128b0 <_dtoa_r+0xf64>
   11b50:	4653      	mov	r3, sl
   11b52:	9a03      	ldr	r2, [sp, #12]
   11b54:	641a      	str	r2, [r3, #64]	; 0x40
   11b56:	9b07      	ldr	r3, [sp, #28]
   11b58:	2b0e      	cmp	r3, #14
   11b5a:	d900      	bls.n	11b5e <_dtoa_r+0x212>
   11b5c:	e0e4      	b.n	11d28 <_dtoa_r+0x3dc>
   11b5e:	2c00      	cmp	r4, #0
   11b60:	d100      	bne.n	11b64 <_dtoa_r+0x218>
   11b62:	e0e1      	b.n	11d28 <_dtoa_r+0x3dc>
   11b64:	9809      	ldr	r0, [sp, #36]	; 0x24
   11b66:	2800      	cmp	r0, #0
   11b68:	dc01      	bgt.n	11b6e <_dtoa_r+0x222>
   11b6a:	f000 fd0c 	bl	12586 <_dtoa_r+0xc3a>
   11b6e:	210f      	movs	r1, #15
   11b70:	0002      	movs	r2, r0
   11b72:	4b61      	ldr	r3, [pc, #388]	; (11cf8 <_dtoa_r+0x3ac>)
   11b74:	400a      	ands	r2, r1
   11b76:	00d2      	lsls	r2, r2, #3
   11b78:	189b      	adds	r3, r3, r2
   11b7a:	1106      	asrs	r6, r0, #4
   11b7c:	681c      	ldr	r4, [r3, #0]
   11b7e:	685d      	ldr	r5, [r3, #4]
   11b80:	05c3      	lsls	r3, r0, #23
   11b82:	d501      	bpl.n	11b88 <_dtoa_r+0x23c>
   11b84:	f000 fc07 	bl	12396 <_dtoa_r+0xa4a>
   11b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b8c:	9210      	str	r2, [sp, #64]	; 0x40
   11b8e:	9311      	str	r3, [sp, #68]	; 0x44
   11b90:	2302      	movs	r3, #2
   11b92:	4698      	mov	r8, r3
   11b94:	2e00      	cmp	r6, #0
   11b96:	d011      	beq.n	11bbc <_dtoa_r+0x270>
   11b98:	4f58      	ldr	r7, [pc, #352]	; (11cfc <_dtoa_r+0x3b0>)
   11b9a:	2301      	movs	r3, #1
   11b9c:	4233      	tst	r3, r6
   11b9e:	d009      	beq.n	11bb4 <_dtoa_r+0x268>
   11ba0:	469c      	mov	ip, r3
   11ba2:	683a      	ldr	r2, [r7, #0]
   11ba4:	687b      	ldr	r3, [r7, #4]
   11ba6:	0020      	movs	r0, r4
   11ba8:	0029      	movs	r1, r5
   11baa:	44e0      	add	r8, ip
   11bac:	f7f4 f8fc 	bl	5da8 <__aeabi_dmul>
   11bb0:	0004      	movs	r4, r0
   11bb2:	000d      	movs	r5, r1
   11bb4:	1076      	asrs	r6, r6, #1
   11bb6:	3708      	adds	r7, #8
   11bb8:	2e00      	cmp	r6, #0
   11bba:	d1ee      	bne.n	11b9a <_dtoa_r+0x24e>
   11bbc:	9810      	ldr	r0, [sp, #64]	; 0x40
   11bbe:	9911      	ldr	r1, [sp, #68]	; 0x44
   11bc0:	0022      	movs	r2, r4
   11bc2:	002b      	movs	r3, r5
   11bc4:	f7f3 fcee 	bl	55a4 <__aeabi_ddiv>
   11bc8:	0006      	movs	r6, r0
   11bca:	000f      	movs	r7, r1
   11bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11bce:	2b00      	cmp	r3, #0
   11bd0:	d009      	beq.n	11be6 <_dtoa_r+0x29a>
   11bd2:	2200      	movs	r2, #0
   11bd4:	0030      	movs	r0, r6
   11bd6:	0039      	movs	r1, r7
   11bd8:	4b49      	ldr	r3, [pc, #292]	; (11d00 <_dtoa_r+0x3b4>)
   11bda:	f7f2 fcc5 	bl	4568 <__aeabi_dcmplt>
   11bde:	2800      	cmp	r0, #0
   11be0:	d001      	beq.n	11be6 <_dtoa_r+0x29a>
   11be2:	f000 fbfe 	bl	123e2 <_dtoa_r+0xa96>
   11be6:	4640      	mov	r0, r8
   11be8:	f7f4 ff32 	bl	6a50 <__aeabi_i2d>
   11bec:	0032      	movs	r2, r6
   11bee:	003b      	movs	r3, r7
   11bf0:	f7f4 f8da 	bl	5da8 <__aeabi_dmul>
   11bf4:	2200      	movs	r2, #0
   11bf6:	4b43      	ldr	r3, [pc, #268]	; (11d04 <_dtoa_r+0x3b8>)
   11bf8:	f7f3 f998 	bl	4f2c <__aeabi_dadd>
   11bfc:	4a42      	ldr	r2, [pc, #264]	; (11d08 <_dtoa_r+0x3bc>)
   11bfe:	000b      	movs	r3, r1
   11c00:	4694      	mov	ip, r2
   11c02:	4463      	add	r3, ip
   11c04:	9012      	str	r0, [sp, #72]	; 0x48
   11c06:	9113      	str	r1, [sp, #76]	; 0x4c
   11c08:	9313      	str	r3, [sp, #76]	; 0x4c
   11c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c0c:	9315      	str	r3, [sp, #84]	; 0x54
   11c0e:	9b07      	ldr	r3, [sp, #28]
   11c10:	9310      	str	r3, [sp, #64]	; 0x40
   11c12:	2b00      	cmp	r3, #0
   11c14:	d001      	beq.n	11c1a <_dtoa_r+0x2ce>
   11c16:	f000 fc0b 	bl	12430 <_dtoa_r+0xae4>
   11c1a:	2200      	movs	r2, #0
   11c1c:	0030      	movs	r0, r6
   11c1e:	0039      	movs	r1, r7
   11c20:	4b3a      	ldr	r3, [pc, #232]	; (11d0c <_dtoa_r+0x3c0>)
   11c22:	f7f4 fb2f 	bl	6284 <__aeabi_dsub>
   11c26:	9e12      	ldr	r6, [sp, #72]	; 0x48
   11c28:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   11c2a:	0032      	movs	r2, r6
   11c2c:	003b      	movs	r3, r7
   11c2e:	0004      	movs	r4, r0
   11c30:	000d      	movs	r5, r1
   11c32:	f7f2 fcad 	bl	4590 <__aeabi_dcmpgt>
   11c36:	2800      	cmp	r0, #0
   11c38:	d001      	beq.n	11c3e <_dtoa_r+0x2f2>
   11c3a:	f000 fde1 	bl	12800 <_dtoa_r+0xeb4>
   11c3e:	2080      	movs	r0, #128	; 0x80
   11c40:	0600      	lsls	r0, r0, #24
   11c42:	4684      	mov	ip, r0
   11c44:	0039      	movs	r1, r7
   11c46:	4461      	add	r1, ip
   11c48:	000b      	movs	r3, r1
   11c4a:	0032      	movs	r2, r6
   11c4c:	0020      	movs	r0, r4
   11c4e:	0029      	movs	r1, r5
   11c50:	f7f2 fc8a 	bl	4568 <__aeabi_dcmplt>
   11c54:	2800      	cmp	r0, #0
   11c56:	d067      	beq.n	11d28 <_dtoa_r+0x3dc>
   11c58:	2300      	movs	r3, #0
   11c5a:	2700      	movs	r7, #0
   11c5c:	4699      	mov	r9, r3
   11c5e:	e08c      	b.n	11d7a <_dtoa_r+0x42e>
   11c60:	2301      	movs	r3, #1
   11c62:	006f      	lsls	r7, r5, #1
   11c64:	087f      	lsrs	r7, r7, #1
   11c66:	003a      	movs	r2, r7
   11c68:	6033      	str	r3, [r6, #0]
   11c6a:	4b17      	ldr	r3, [pc, #92]	; (11cc8 <_dtoa_r+0x37c>)
   11c6c:	9705      	str	r7, [sp, #20]
   11c6e:	401a      	ands	r2, r3
   11c70:	429a      	cmp	r2, r3
   11c72:	d000      	beq.n	11c76 <_dtoa_r+0x32a>
   11c74:	e68f      	b.n	11996 <_dtoa_r+0x4a>
   11c76:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11c78:	4b25      	ldr	r3, [pc, #148]	; (11d10 <_dtoa_r+0x3c4>)
   11c7a:	6013      	str	r3, [r2, #0]
   11c7c:	033a      	lsls	r2, r7, #12
   11c7e:	0b12      	lsrs	r2, r2, #12
   11c80:	4314      	orrs	r4, r2
   11c82:	d11a      	bne.n	11cba <_dtoa_r+0x36e>
   11c84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   11c86:	2b00      	cmp	r3, #0
   11c88:	d101      	bne.n	11c8e <_dtoa_r+0x342>
   11c8a:	f000 fe1f 	bl	128cc <_dtoa_r+0xf80>
   11c8e:	4b21      	ldr	r3, [pc, #132]	; (11d14 <_dtoa_r+0x3c8>)
   11c90:	9303      	str	r3, [sp, #12]
   11c92:	3308      	adds	r3, #8
   11c94:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   11c96:	6013      	str	r3, [r2, #0]
   11c98:	e694      	b.n	119c4 <_dtoa_r+0x78>
   11c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c9c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   11c9e:	4a18      	ldr	r2, [pc, #96]	; (11d00 <_dtoa_r+0x3b4>)
   11ca0:	0018      	movs	r0, r3
   11ca2:	0323      	lsls	r3, r4, #12
   11ca4:	0b1b      	lsrs	r3, r3, #12
   11ca6:	431a      	orrs	r2, r3
   11ca8:	4b1b      	ldr	r3, [pc, #108]	; (11d18 <_dtoa_r+0x3cc>)
   11caa:	0011      	movs	r1, r2
   11cac:	469c      	mov	ip, r3
   11cae:	9b18      	ldr	r3, [sp, #96]	; 0x60
   11cb0:	4466      	add	r6, ip
   11cb2:	4698      	mov	r8, r3
   11cb4:	2300      	movs	r3, #0
   11cb6:	930f      	str	r3, [sp, #60]	; 0x3c
   11cb8:	e6b2      	b.n	11a20 <_dtoa_r+0xd4>
   11cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   11cbc:	2b00      	cmp	r3, #0
   11cbe:	d000      	beq.n	11cc2 <_dtoa_r+0x376>
   11cc0:	e30e      	b.n	122e0 <_dtoa_r+0x994>
   11cc2:	4b16      	ldr	r3, [pc, #88]	; (11d1c <_dtoa_r+0x3d0>)
   11cc4:	9303      	str	r3, [sp, #12]
   11cc6:	e67d      	b.n	119c4 <_dtoa_r+0x78>
   11cc8:	7ff00000 	.word	0x7ff00000
   11ccc:	00015531 	.word	0x00015531
   11cd0:	00000432 	.word	0x00000432
   11cd4:	00000412 	.word	0x00000412
   11cd8:	fe100000 	.word	0xfe100000
   11cdc:	3ff80000 	.word	0x3ff80000
   11ce0:	636f4361 	.word	0x636f4361
   11ce4:	3fd287a7 	.word	0x3fd287a7
   11ce8:	8b60c8b3 	.word	0x8b60c8b3
   11cec:	3fc68a28 	.word	0x3fc68a28
   11cf0:	509f79fb 	.word	0x509f79fb
   11cf4:	3fd34413 	.word	0x3fd34413
   11cf8:	00016a60 	.word	0x00016a60
   11cfc:	00016a38 	.word	0x00016a38
   11d00:	3ff00000 	.word	0x3ff00000
   11d04:	401c0000 	.word	0x401c0000
   11d08:	fcc00000 	.word	0xfcc00000
   11d0c:	40140000 	.word	0x40140000
   11d10:	0000270f 	.word	0x0000270f
   11d14:	00016e48 	.word	0x00016e48
   11d18:	fffffc01 	.word	0xfffffc01
   11d1c:	00016e44 	.word	0x00016e44
   11d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   11d22:	4699      	mov	r9, r3
   11d24:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11d26:	469b      	mov	fp, r3
   11d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11d2a:	2b00      	cmp	r3, #0
   11d2c:	da00      	bge.n	11d30 <_dtoa_r+0x3e4>
   11d2e:	e08b      	b.n	11e48 <_dtoa_r+0x4fc>
   11d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d32:	2a0e      	cmp	r2, #14
   11d34:	dd00      	ble.n	11d38 <_dtoa_r+0x3ec>
   11d36:	e087      	b.n	11e48 <_dtoa_r+0x4fc>
   11d38:	4bdd      	ldr	r3, [pc, #884]	; (120b0 <_dtoa_r+0x764>)
   11d3a:	00d2      	lsls	r2, r2, #3
   11d3c:	189b      	adds	r3, r3, r2
   11d3e:	681e      	ldr	r6, [r3, #0]
   11d40:	685f      	ldr	r7, [r3, #4]
   11d42:	9b25      	ldr	r3, [sp, #148]	; 0x94
   11d44:	2b00      	cmp	r3, #0
   11d46:	da1c      	bge.n	11d82 <_dtoa_r+0x436>
   11d48:	9b07      	ldr	r3, [sp, #28]
   11d4a:	2b00      	cmp	r3, #0
   11d4c:	dc19      	bgt.n	11d82 <_dtoa_r+0x436>
   11d4e:	9b07      	ldr	r3, [sp, #28]
   11d50:	2b00      	cmp	r3, #0
   11d52:	d000      	beq.n	11d56 <_dtoa_r+0x40a>
   11d54:	e780      	b.n	11c58 <_dtoa_r+0x30c>
   11d56:	2200      	movs	r2, #0
   11d58:	0039      	movs	r1, r7
   11d5a:	4bd6      	ldr	r3, [pc, #856]	; (120b4 <_dtoa_r+0x768>)
   11d5c:	0030      	movs	r0, r6
   11d5e:	f7f4 f823 	bl	5da8 <__aeabi_dmul>
   11d62:	000b      	movs	r3, r1
   11d64:	0002      	movs	r2, r0
   11d66:	980a      	ldr	r0, [sp, #40]	; 0x28
   11d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d6a:	f7f2 fc07 	bl	457c <__aeabi_dcmple>
   11d6e:	2300      	movs	r3, #0
   11d70:	2700      	movs	r7, #0
   11d72:	4699      	mov	r9, r3
   11d74:	2800      	cmp	r0, #0
   11d76:	d100      	bne.n	11d7a <_dtoa_r+0x42e>
   11d78:	e2de      	b.n	12338 <_dtoa_r+0x9ec>
   11d7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   11d7c:	9d03      	ldr	r5, [sp, #12]
   11d7e:	43dc      	mvns	r4, r3
   11d80:	e2e2      	b.n	12348 <_dtoa_r+0x9fc>
   11d82:	0032      	movs	r2, r6
   11d84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11d86:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   11d88:	003b      	movs	r3, r7
   11d8a:	0020      	movs	r0, r4
   11d8c:	0029      	movs	r1, r5
   11d8e:	f7f3 fc09 	bl	55a4 <__aeabi_ddiv>
   11d92:	f7f4 fe27 	bl	69e4 <__aeabi_d2iz>
   11d96:	4681      	mov	r9, r0
   11d98:	f7f4 fe5a 	bl	6a50 <__aeabi_i2d>
   11d9c:	0032      	movs	r2, r6
   11d9e:	003b      	movs	r3, r7
   11da0:	f7f4 f802 	bl	5da8 <__aeabi_dmul>
   11da4:	0002      	movs	r2, r0
   11da6:	000b      	movs	r3, r1
   11da8:	0020      	movs	r0, r4
   11daa:	0029      	movs	r1, r5
   11dac:	f7f4 fa6a 	bl	6284 <__aeabi_dsub>
   11db0:	9a03      	ldr	r2, [sp, #12]
   11db2:	1c53      	adds	r3, r2, #1
   11db4:	4698      	mov	r8, r3
   11db6:	464b      	mov	r3, r9
   11db8:	3330      	adds	r3, #48	; 0x30
   11dba:	7013      	strb	r3, [r2, #0]
   11dbc:	9b07      	ldr	r3, [sp, #28]
   11dbe:	2b01      	cmp	r3, #1
   11dc0:	d101      	bne.n	11dc6 <_dtoa_r+0x47a>
   11dc2:	f000 fc4e 	bl	12662 <_dtoa_r+0xd16>
   11dc6:	3a01      	subs	r2, #1
   11dc8:	2301      	movs	r3, #1
   11dca:	9204      	str	r2, [sp, #16]
   11dcc:	4652      	mov	r2, sl
   11dce:	46c2      	mov	sl, r8
   11dd0:	9206      	str	r2, [sp, #24]
   11dd2:	4698      	mov	r8, r3
   11dd4:	e024      	b.n	11e20 <_dtoa_r+0x4d4>
   11dd6:	2301      	movs	r3, #1
   11dd8:	469c      	mov	ip, r3
   11dda:	0032      	movs	r2, r6
   11ddc:	003b      	movs	r3, r7
   11dde:	0020      	movs	r0, r4
   11de0:	0029      	movs	r1, r5
   11de2:	44e0      	add	r8, ip
   11de4:	f7f3 fbde 	bl	55a4 <__aeabi_ddiv>
   11de8:	f7f4 fdfc 	bl	69e4 <__aeabi_d2iz>
   11dec:	4681      	mov	r9, r0
   11dee:	f7f4 fe2f 	bl	6a50 <__aeabi_i2d>
   11df2:	0032      	movs	r2, r6
   11df4:	003b      	movs	r3, r7
   11df6:	f7f3 ffd7 	bl	5da8 <__aeabi_dmul>
   11dfa:	0002      	movs	r2, r0
   11dfc:	000b      	movs	r3, r1
   11dfe:	0020      	movs	r0, r4
   11e00:	0029      	movs	r1, r5
   11e02:	f7f4 fa3f 	bl	6284 <__aeabi_dsub>
   11e06:	2301      	movs	r3, #1
   11e08:	469c      	mov	ip, r3
   11e0a:	464b      	mov	r3, r9
   11e0c:	4644      	mov	r4, r8
   11e0e:	9a04      	ldr	r2, [sp, #16]
   11e10:	3330      	adds	r3, #48	; 0x30
   11e12:	5513      	strb	r3, [r2, r4]
   11e14:	9b07      	ldr	r3, [sp, #28]
   11e16:	44e2      	add	sl, ip
   11e18:	4598      	cmp	r8, r3
   11e1a:	d101      	bne.n	11e20 <_dtoa_r+0x4d4>
   11e1c:	f000 fc1e 	bl	1265c <_dtoa_r+0xd10>
   11e20:	2200      	movs	r2, #0
   11e22:	4ba5      	ldr	r3, [pc, #660]	; (120b8 <_dtoa_r+0x76c>)
   11e24:	f7f3 ffc0 	bl	5da8 <__aeabi_dmul>
   11e28:	2200      	movs	r2, #0
   11e2a:	2300      	movs	r3, #0
   11e2c:	0004      	movs	r4, r0
   11e2e:	000d      	movs	r5, r1
   11e30:	f7f2 fb94 	bl	455c <__aeabi_dcmpeq>
   11e34:	2800      	cmp	r0, #0
   11e36:	d0ce      	beq.n	11dd6 <_dtoa_r+0x48a>
   11e38:	9b06      	ldr	r3, [sp, #24]
   11e3a:	46d0      	mov	r8, sl
   11e3c:	469a      	mov	sl, r3
   11e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e40:	4644      	mov	r4, r8
   11e42:	3301      	adds	r3, #1
   11e44:	9309      	str	r3, [sp, #36]	; 0x24
   11e46:	e158      	b.n	120fa <_dtoa_r+0x7ae>
   11e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11e4a:	2a00      	cmp	r2, #0
   11e4c:	d071      	beq.n	11f32 <_dtoa_r+0x5e6>
   11e4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11e50:	2a01      	cmp	r2, #1
   11e52:	dc00      	bgt.n	11e56 <_dtoa_r+0x50a>
   11e54:	e2b1      	b.n	123ba <_dtoa_r+0xa6e>
   11e56:	9b07      	ldr	r3, [sp, #28]
   11e58:	1e5d      	subs	r5, r3, #1
   11e5a:	464b      	mov	r3, r9
   11e5c:	45a9      	cmp	r9, r5
   11e5e:	db00      	blt.n	11e62 <_dtoa_r+0x516>
   11e60:	e297      	b.n	12392 <_dtoa_r+0xa46>
   11e62:	9a06      	ldr	r2, [sp, #24]
   11e64:	1aeb      	subs	r3, r5, r3
   11e66:	4694      	mov	ip, r2
   11e68:	449c      	add	ip, r3
   11e6a:	4663      	mov	r3, ip
   11e6c:	46a9      	mov	r9, r5
   11e6e:	2500      	movs	r5, #0
   11e70:	9306      	str	r3, [sp, #24]
   11e72:	990c      	ldr	r1, [sp, #48]	; 0x30
   11e74:	9b07      	ldr	r3, [sp, #28]
   11e76:	1acc      	subs	r4, r1, r3
   11e78:	2b00      	cmp	r3, #0
   11e7a:	db07      	blt.n	11e8c <_dtoa_r+0x540>
   11e7c:	9a08      	ldr	r2, [sp, #32]
   11e7e:	469c      	mov	ip, r3
   11e80:	0010      	movs	r0, r2
   11e82:	000c      	movs	r4, r1
   11e84:	4460      	add	r0, ip
   11e86:	4461      	add	r1, ip
   11e88:	9008      	str	r0, [sp, #32]
   11e8a:	910c      	str	r1, [sp, #48]	; 0x30
   11e8c:	2101      	movs	r1, #1
   11e8e:	4650      	mov	r0, sl
   11e90:	f7fc ffcc 	bl	ee2c <__i2b>
   11e94:	0007      	movs	r7, r0
   11e96:	e04f      	b.n	11f38 <_dtoa_r+0x5ec>
   11e98:	4643      	mov	r3, r8
   11e9a:	1b9e      	subs	r6, r3, r6
   11e9c:	0033      	movs	r3, r6
   11e9e:	3b01      	subs	r3, #1
   11ea0:	9308      	str	r3, [sp, #32]
   11ea2:	d500      	bpl.n	11ea6 <_dtoa_r+0x55a>
   11ea4:	e36c      	b.n	12580 <_dtoa_r+0xc34>
   11ea6:	2300      	movs	r3, #0
   11ea8:	930e      	str	r3, [sp, #56]	; 0x38
   11eaa:	930c      	str	r3, [sp, #48]	; 0x30
   11eac:	9b06      	ldr	r3, [sp, #24]
   11eae:	9a08      	ldr	r2, [sp, #32]
   11eb0:	469c      	mov	ip, r3
   11eb2:	9309      	str	r3, [sp, #36]	; 0x24
   11eb4:	2300      	movs	r3, #0
   11eb6:	0011      	movs	r1, r2
   11eb8:	4699      	mov	r9, r3
   11eba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11ebc:	4461      	add	r1, ip
   11ebe:	2401      	movs	r4, #1
   11ec0:	9108      	str	r1, [sp, #32]
   11ec2:	2b09      	cmp	r3, #9
   11ec4:	d800      	bhi.n	11ec8 <_dtoa_r+0x57c>
   11ec6:	e60e      	b.n	11ae6 <_dtoa_r+0x19a>
   11ec8:	2201      	movs	r2, #1
   11eca:	2300      	movs	r3, #0
   11ecc:	920d      	str	r2, [sp, #52]	; 0x34
   11ece:	3a02      	subs	r2, #2
   11ed0:	9324      	str	r3, [sp, #144]	; 0x90
   11ed2:	9207      	str	r2, [sp, #28]
   11ed4:	9325      	str	r3, [sp, #148]	; 0x94
   11ed6:	2300      	movs	r3, #0
   11ed8:	4652      	mov	r2, sl
   11eda:	6453      	str	r3, [r2, #68]	; 0x44
   11edc:	9b07      	ldr	r3, [sp, #28]
   11ede:	2100      	movs	r1, #0
   11ee0:	9314      	str	r3, [sp, #80]	; 0x50
   11ee2:	e62d      	b.n	11b40 <_dtoa_r+0x1f4>
   11ee4:	2301      	movs	r3, #1
   11ee6:	930e      	str	r3, [sp, #56]	; 0x38
   11ee8:	4643      	mov	r3, r8
   11eea:	1b9e      	subs	r6, r3, r6
   11eec:	2300      	movs	r3, #0
   11eee:	930c      	str	r3, [sp, #48]	; 0x30
   11ef0:	0033      	movs	r3, r6
   11ef2:	3b01      	subs	r3, #1
   11ef4:	9308      	str	r3, [sp, #32]
   11ef6:	d400      	bmi.n	11efa <_dtoa_r+0x5ae>
   11ef8:	e5e3      	b.n	11ac2 <_dtoa_r+0x176>
   11efa:	2301      	movs	r3, #1
   11efc:	1b9b      	subs	r3, r3, r6
   11efe:	930c      	str	r3, [sp, #48]	; 0x30
   11f00:	2300      	movs	r3, #0
   11f02:	9308      	str	r3, [sp, #32]
   11f04:	e5dd      	b.n	11ac2 <_dtoa_r+0x176>
   11f06:	2300      	movs	r3, #0
   11f08:	930d      	str	r3, [sp, #52]	; 0x34
   11f0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11f0c:	2b03      	cmp	r3, #3
   11f0e:	d001      	beq.n	11f14 <_dtoa_r+0x5c8>
   11f10:	f000 fcb8 	bl	12884 <_dtoa_r+0xf38>
   11f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f16:	9b25      	ldr	r3, [sp, #148]	; 0x94
   11f18:	4694      	mov	ip, r2
   11f1a:	4463      	add	r3, ip
   11f1c:	9314      	str	r3, [sp, #80]	; 0x50
   11f1e:	3301      	adds	r3, #1
   11f20:	1e1d      	subs	r5, r3, #0
   11f22:	9307      	str	r3, [sp, #28]
   11f24:	dd00      	ble.n	11f28 <_dtoa_r+0x5dc>
   11f26:	e5f9      	b.n	11b1c <_dtoa_r+0x1d0>
   11f28:	2501      	movs	r5, #1
   11f2a:	e5f7      	b.n	11b1c <_dtoa_r+0x1d0>
   11f2c:	4b63      	ldr	r3, [pc, #396]	; (120bc <_dtoa_r+0x770>)
   11f2e:	9303      	str	r3, [sp, #12]
   11f30:	e548      	b.n	119c4 <_dtoa_r+0x78>
   11f32:	464d      	mov	r5, r9
   11f34:	2700      	movs	r7, #0
   11f36:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11f38:	2c00      	cmp	r4, #0
   11f3a:	dd0d      	ble.n	11f58 <_dtoa_r+0x60c>
   11f3c:	9a08      	ldr	r2, [sp, #32]
   11f3e:	2a00      	cmp	r2, #0
   11f40:	dd0a      	ble.n	11f58 <_dtoa_r+0x60c>
   11f42:	0023      	movs	r3, r4
   11f44:	4294      	cmp	r4, r2
   11f46:	dd00      	ble.n	11f4a <_dtoa_r+0x5fe>
   11f48:	e20a      	b.n	12360 <_dtoa_r+0xa14>
   11f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11f4c:	1ae4      	subs	r4, r4, r3
   11f4e:	1ad2      	subs	r2, r2, r3
   11f50:	920c      	str	r2, [sp, #48]	; 0x30
   11f52:	9a08      	ldr	r2, [sp, #32]
   11f54:	1ad3      	subs	r3, r2, r3
   11f56:	9308      	str	r3, [sp, #32]
   11f58:	464b      	mov	r3, r9
   11f5a:	2b00      	cmp	r3, #0
   11f5c:	d01b      	beq.n	11f96 <_dtoa_r+0x64a>
   11f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11f60:	2b00      	cmp	r3, #0
   11f62:	d100      	bne.n	11f66 <_dtoa_r+0x61a>
   11f64:	e1b5      	b.n	122d2 <_dtoa_r+0x986>
   11f66:	2d00      	cmp	r5, #0
   11f68:	dd10      	ble.n	11f8c <_dtoa_r+0x640>
   11f6a:	0039      	movs	r1, r7
   11f6c:	002a      	movs	r2, r5
   11f6e:	4650      	mov	r0, sl
   11f70:	f7fd f85e 	bl	f030 <__pow5mult>
   11f74:	465a      	mov	r2, fp
   11f76:	0001      	movs	r1, r0
   11f78:	0007      	movs	r7, r0
   11f7a:	4650      	mov	r0, sl
   11f7c:	f7fc ff86 	bl	ee8c <__multiply>
   11f80:	0006      	movs	r6, r0
   11f82:	4659      	mov	r1, fp
   11f84:	4650      	mov	r0, sl
   11f86:	f7fc fea9 	bl	ecdc <_Bfree>
   11f8a:	46b3      	mov	fp, r6
   11f8c:	464b      	mov	r3, r9
   11f8e:	1b5a      	subs	r2, r3, r5
   11f90:	45a9      	cmp	r9, r5
   11f92:	d000      	beq.n	11f96 <_dtoa_r+0x64a>
   11f94:	e19e      	b.n	122d4 <_dtoa_r+0x988>
   11f96:	2101      	movs	r1, #1
   11f98:	4650      	mov	r0, sl
   11f9a:	f7fc ff47 	bl	ee2c <__i2b>
   11f9e:	9a06      	ldr	r2, [sp, #24]
   11fa0:	4681      	mov	r9, r0
   11fa2:	2a00      	cmp	r2, #0
   11fa4:	dd00      	ble.n	11fa8 <_dtoa_r+0x65c>
   11fa6:	e0c9      	b.n	1213c <_dtoa_r+0x7f0>
   11fa8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11faa:	2500      	movs	r5, #0
   11fac:	2b01      	cmp	r3, #1
   11fae:	dc00      	bgt.n	11fb2 <_dtoa_r+0x666>
   11fb0:	e19d      	b.n	122ee <_dtoa_r+0x9a2>
   11fb2:	9b06      	ldr	r3, [sp, #24]
   11fb4:	2001      	movs	r0, #1
   11fb6:	2b00      	cmp	r3, #0
   11fb8:	d000      	beq.n	11fbc <_dtoa_r+0x670>
   11fba:	e0c9      	b.n	12150 <_dtoa_r+0x804>
   11fbc:	231f      	movs	r3, #31
   11fbe:	9908      	ldr	r1, [sp, #32]
   11fc0:	001a      	movs	r2, r3
   11fc2:	468c      	mov	ip, r1
   11fc4:	4460      	add	r0, ip
   11fc6:	4002      	ands	r2, r0
   11fc8:	4203      	tst	r3, r0
   11fca:	d100      	bne.n	11fce <_dtoa_r+0x682>
   11fcc:	e0a4      	b.n	12118 <_dtoa_r+0x7cc>
   11fce:	3301      	adds	r3, #1
   11fd0:	1a9b      	subs	r3, r3, r2
   11fd2:	2b04      	cmp	r3, #4
   11fd4:	dc01      	bgt.n	11fda <_dtoa_r+0x68e>
   11fd6:	f000 fc72 	bl	128be <_dtoa_r+0xf72>
   11fda:	231c      	movs	r3, #28
   11fdc:	1a9b      	subs	r3, r3, r2
   11fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11fe0:	18e4      	adds	r4, r4, r3
   11fe2:	4694      	mov	ip, r2
   11fe4:	449c      	add	ip, r3
   11fe6:	4662      	mov	r2, ip
   11fe8:	468c      	mov	ip, r1
   11fea:	449c      	add	ip, r3
   11fec:	4663      	mov	r3, ip
   11fee:	920c      	str	r2, [sp, #48]	; 0x30
   11ff0:	9308      	str	r3, [sp, #32]
   11ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11ff4:	2b00      	cmp	r3, #0
   11ff6:	dd05      	ble.n	12004 <_dtoa_r+0x6b8>
   11ff8:	4659      	mov	r1, fp
   11ffa:	001a      	movs	r2, r3
   11ffc:	4650      	mov	r0, sl
   11ffe:	f7fd f883 	bl	f108 <__lshift>
   12002:	4683      	mov	fp, r0
   12004:	9b08      	ldr	r3, [sp, #32]
   12006:	2b00      	cmp	r3, #0
   12008:	dd05      	ble.n	12016 <_dtoa_r+0x6ca>
   1200a:	4649      	mov	r1, r9
   1200c:	001a      	movs	r2, r3
   1200e:	4650      	mov	r0, sl
   12010:	f7fd f87a 	bl	f108 <__lshift>
   12014:	4681      	mov	r9, r0
   12016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12018:	2b00      	cmp	r3, #0
   1201a:	d000      	beq.n	1201e <_dtoa_r+0x6d2>
   1201c:	e140      	b.n	122a0 <_dtoa_r+0x954>
   1201e:	9b07      	ldr	r3, [sp, #28]
   12020:	2b00      	cmp	r3, #0
   12022:	dc00      	bgt.n	12026 <_dtoa_r+0x6da>
   12024:	e126      	b.n	12274 <_dtoa_r+0x928>
   12026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12028:	2b00      	cmp	r3, #0
   1202a:	d000      	beq.n	1202e <_dtoa_r+0x6e2>
   1202c:	e0a8      	b.n	12180 <_dtoa_r+0x834>
   1202e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12030:	3301      	adds	r3, #1
   12032:	9309      	str	r3, [sp, #36]	; 0x24
   12034:	9b03      	ldr	r3, [sp, #12]
   12036:	9a07      	ldr	r2, [sp, #28]
   12038:	1e5d      	subs	r5, r3, #1
   1203a:	464b      	mov	r3, r9
   1203c:	46a8      	mov	r8, r5
   1203e:	46b9      	mov	r9, r7
   12040:	4655      	mov	r5, sl
   12042:	2401      	movs	r4, #1
   12044:	465e      	mov	r6, fp
   12046:	4692      	mov	sl, r2
   12048:	001f      	movs	r7, r3
   1204a:	e007      	b.n	1205c <_dtoa_r+0x710>
   1204c:	0031      	movs	r1, r6
   1204e:	2300      	movs	r3, #0
   12050:	220a      	movs	r2, #10
   12052:	0028      	movs	r0, r5
   12054:	f7fc fe4c 	bl	ecf0 <__multadd>
   12058:	0006      	movs	r6, r0
   1205a:	3401      	adds	r4, #1
   1205c:	0039      	movs	r1, r7
   1205e:	0030      	movs	r0, r6
   12060:	f7ff fbd0 	bl	11804 <quorem>
   12064:	4643      	mov	r3, r8
   12066:	3030      	adds	r0, #48	; 0x30
   12068:	5518      	strb	r0, [r3, r4]
   1206a:	4554      	cmp	r4, sl
   1206c:	dbee      	blt.n	1204c <_dtoa_r+0x700>
   1206e:	003b      	movs	r3, r7
   12070:	464f      	mov	r7, r9
   12072:	4699      	mov	r9, r3
   12074:	9b07      	ldr	r3, [sp, #28]
   12076:	46b3      	mov	fp, r6
   12078:	46aa      	mov	sl, r5
   1207a:	2401      	movs	r4, #1
   1207c:	9006      	str	r0, [sp, #24]
   1207e:	2b00      	cmp	r3, #0
   12080:	dd00      	ble.n	12084 <_dtoa_r+0x738>
   12082:	001c      	movs	r4, r3
   12084:	9b03      	ldr	r3, [sp, #12]
   12086:	2600      	movs	r6, #0
   12088:	469c      	mov	ip, r3
   1208a:	4464      	add	r4, ip
   1208c:	4659      	mov	r1, fp
   1208e:	2201      	movs	r2, #1
   12090:	4650      	mov	r0, sl
   12092:	f7fd f839 	bl	f108 <__lshift>
   12096:	4649      	mov	r1, r9
   12098:	4683      	mov	fp, r0
   1209a:	f7fd f8b3 	bl	f204 <__mcmp>
   1209e:	2800      	cmp	r0, #0
   120a0:	dc00      	bgt.n	120a4 <_dtoa_r+0x758>
   120a2:	e260      	b.n	12566 <_dtoa_r+0xc1a>
   120a4:	1e65      	subs	r5, r4, #1
   120a6:	782a      	ldrb	r2, [r5, #0]
   120a8:	002b      	movs	r3, r5
   120aa:	9903      	ldr	r1, [sp, #12]
   120ac:	e00f      	b.n	120ce <_dtoa_r+0x782>
   120ae:	46c0      	nop			; (mov r8, r8)
   120b0:	00016a60 	.word	0x00016a60
   120b4:	40140000 	.word	0x40140000
   120b8:	40240000 	.word	0x40240000
   120bc:	00015530 	.word	0x00015530
   120c0:	3b01      	subs	r3, #1
   120c2:	428d      	cmp	r5, r1
   120c4:	d100      	bne.n	120c8 <_dtoa_r+0x77c>
   120c6:	e247      	b.n	12558 <_dtoa_r+0xc0c>
   120c8:	781a      	ldrb	r2, [r3, #0]
   120ca:	002c      	movs	r4, r5
   120cc:	3d01      	subs	r5, #1
   120ce:	2a39      	cmp	r2, #57	; 0x39
   120d0:	d0f6      	beq.n	120c0 <_dtoa_r+0x774>
   120d2:	3201      	adds	r2, #1
   120d4:	702a      	strb	r2, [r5, #0]
   120d6:	4649      	mov	r1, r9
   120d8:	4650      	mov	r0, sl
   120da:	f7fc fdff 	bl	ecdc <_Bfree>
   120de:	2f00      	cmp	r7, #0
   120e0:	d00b      	beq.n	120fa <_dtoa_r+0x7ae>
   120e2:	2e00      	cmp	r6, #0
   120e4:	d005      	beq.n	120f2 <_dtoa_r+0x7a6>
   120e6:	42be      	cmp	r6, r7
   120e8:	d003      	beq.n	120f2 <_dtoa_r+0x7a6>
   120ea:	0031      	movs	r1, r6
   120ec:	4650      	mov	r0, sl
   120ee:	f7fc fdf5 	bl	ecdc <_Bfree>
   120f2:	0039      	movs	r1, r7
   120f4:	4650      	mov	r0, sl
   120f6:	f7fc fdf1 	bl	ecdc <_Bfree>
   120fa:	4659      	mov	r1, fp
   120fc:	4650      	mov	r0, sl
   120fe:	f7fc fded 	bl	ecdc <_Bfree>
   12102:	2300      	movs	r3, #0
   12104:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12106:	7023      	strb	r3, [r4, #0]
   12108:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1210a:	601a      	str	r2, [r3, #0]
   1210c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1210e:	2b00      	cmp	r3, #0
   12110:	d100      	bne.n	12114 <_dtoa_r+0x7c8>
   12112:	e457      	b.n	119c4 <_dtoa_r+0x78>
   12114:	601c      	str	r4, [r3, #0]
   12116:	e455      	b.n	119c4 <_dtoa_r+0x78>
   12118:	231c      	movs	r3, #28
   1211a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1211c:	18e4      	adds	r4, r4, r3
   1211e:	4694      	mov	ip, r2
   12120:	449c      	add	ip, r3
   12122:	4662      	mov	r2, ip
   12124:	920c      	str	r2, [sp, #48]	; 0x30
   12126:	9a08      	ldr	r2, [sp, #32]
   12128:	4694      	mov	ip, r2
   1212a:	449c      	add	ip, r3
   1212c:	4663      	mov	r3, ip
   1212e:	9308      	str	r3, [sp, #32]
   12130:	e75f      	b.n	11ff2 <_dtoa_r+0x6a6>
   12132:	2220      	movs	r2, #32
   12134:	0020      	movs	r0, r4
   12136:	1ad3      	subs	r3, r2, r3
   12138:	4098      	lsls	r0, r3
   1213a:	e46a      	b.n	11a12 <_dtoa_r+0xc6>
   1213c:	0001      	movs	r1, r0
   1213e:	4650      	mov	r0, sl
   12140:	f7fc ff76 	bl	f030 <__pow5mult>
   12144:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12146:	4681      	mov	r9, r0
   12148:	2b01      	cmp	r3, #1
   1214a:	dc00      	bgt.n	1214e <_dtoa_r+0x802>
   1214c:	e10a      	b.n	12364 <_dtoa_r+0xa18>
   1214e:	2500      	movs	r5, #0
   12150:	464b      	mov	r3, r9
   12152:	691b      	ldr	r3, [r3, #16]
   12154:	3303      	adds	r3, #3
   12156:	009b      	lsls	r3, r3, #2
   12158:	444b      	add	r3, r9
   1215a:	6858      	ldr	r0, [r3, #4]
   1215c:	f7fc fe1c 	bl	ed98 <__hi0bits>
   12160:	2320      	movs	r3, #32
   12162:	1a18      	subs	r0, r3, r0
   12164:	e72a      	b.n	11fbc <_dtoa_r+0x670>
   12166:	2300      	movs	r3, #0
   12168:	0039      	movs	r1, r7
   1216a:	220a      	movs	r2, #10
   1216c:	4650      	mov	r0, sl
   1216e:	f7fc fdbf 	bl	ecf0 <__multadd>
   12172:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12174:	0007      	movs	r7, r0
   12176:	2b00      	cmp	r3, #0
   12178:	dc00      	bgt.n	1217c <_dtoa_r+0x830>
   1217a:	e377      	b.n	1286c <_dtoa_r+0xf20>
   1217c:	9609      	str	r6, [sp, #36]	; 0x24
   1217e:	9307      	str	r3, [sp, #28]
   12180:	2c00      	cmp	r4, #0
   12182:	dd05      	ble.n	12190 <_dtoa_r+0x844>
   12184:	0039      	movs	r1, r7
   12186:	0022      	movs	r2, r4
   12188:	4650      	mov	r0, sl
   1218a:	f7fc ffbd 	bl	f108 <__lshift>
   1218e:	0007      	movs	r7, r0
   12190:	46b8      	mov	r8, r7
   12192:	2d00      	cmp	r5, #0
   12194:	d000      	beq.n	12198 <_dtoa_r+0x84c>
   12196:	e282      	b.n	1269e <_dtoa_r+0xd52>
   12198:	9a07      	ldr	r2, [sp, #28]
   1219a:	9b03      	ldr	r3, [sp, #12]
   1219c:	4694      	mov	ip, r2
   1219e:	001d      	movs	r5, r3
   121a0:	3b01      	subs	r3, #1
   121a2:	449c      	add	ip, r3
   121a4:	4663      	mov	r3, ip
   121a6:	9308      	str	r3, [sp, #32]
   121a8:	2301      	movs	r3, #1
   121aa:	002e      	movs	r6, r5
   121ac:	465d      	mov	r5, fp
   121ae:	46cb      	mov	fp, r9
   121b0:	9a04      	ldr	r2, [sp, #16]
   121b2:	401a      	ands	r2, r3
   121b4:	9207      	str	r2, [sp, #28]
   121b6:	4659      	mov	r1, fp
   121b8:	0028      	movs	r0, r5
   121ba:	f7ff fb23 	bl	11804 <quorem>
   121be:	0003      	movs	r3, r0
   121c0:	0039      	movs	r1, r7
   121c2:	3330      	adds	r3, #48	; 0x30
   121c4:	900c      	str	r0, [sp, #48]	; 0x30
   121c6:	0028      	movs	r0, r5
   121c8:	9306      	str	r3, [sp, #24]
   121ca:	f7fd f81b 	bl	f204 <__mcmp>
   121ce:	4659      	mov	r1, fp
   121d0:	0004      	movs	r4, r0
   121d2:	4642      	mov	r2, r8
   121d4:	4650      	mov	r0, sl
   121d6:	f7fd f82f 	bl	f238 <__mdiff>
   121da:	68c3      	ldr	r3, [r0, #12]
   121dc:	4681      	mov	r9, r0
   121de:	0001      	movs	r1, r0
   121e0:	2b00      	cmp	r3, #0
   121e2:	d13b      	bne.n	1225c <_dtoa_r+0x910>
   121e4:	0028      	movs	r0, r5
   121e6:	f7fd f80d 	bl	f204 <__mcmp>
   121ea:	4649      	mov	r1, r9
   121ec:	9004      	str	r0, [sp, #16]
   121ee:	4650      	mov	r0, sl
   121f0:	f7fc fd74 	bl	ecdc <_Bfree>
   121f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   121f6:	9b04      	ldr	r3, [sp, #16]
   121f8:	4313      	orrs	r3, r2
   121fa:	9a07      	ldr	r2, [sp, #28]
   121fc:	4313      	orrs	r3, r2
   121fe:	d100      	bne.n	12202 <_dtoa_r+0x8b6>
   12200:	e302      	b.n	12808 <_dtoa_r+0xebc>
   12202:	2c00      	cmp	r4, #0
   12204:	da00      	bge.n	12208 <_dtoa_r+0x8bc>
   12206:	e1f2      	b.n	125ee <_dtoa_r+0xca2>
   12208:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1220a:	431c      	orrs	r4, r3
   1220c:	9b07      	ldr	r3, [sp, #28]
   1220e:	431c      	orrs	r4, r3
   12210:	d100      	bne.n	12214 <_dtoa_r+0x8c8>
   12212:	e1ec      	b.n	125ee <_dtoa_r+0xca2>
   12214:	9b04      	ldr	r3, [sp, #16]
   12216:	2b00      	cmp	r3, #0
   12218:	dd00      	ble.n	1221c <_dtoa_r+0x8d0>
   1221a:	e2c9      	b.n	127b0 <_dtoa_r+0xe64>
   1221c:	9a06      	ldr	r2, [sp, #24]
   1221e:	1c74      	adds	r4, r6, #1
   12220:	7032      	strb	r2, [r6, #0]
   12222:	9a08      	ldr	r2, [sp, #32]
   12224:	4296      	cmp	r6, r2
   12226:	d100      	bne.n	1222a <_dtoa_r+0x8de>
   12228:	e2cc      	b.n	127c4 <_dtoa_r+0xe78>
   1222a:	0029      	movs	r1, r5
   1222c:	2300      	movs	r3, #0
   1222e:	220a      	movs	r2, #10
   12230:	4650      	mov	r0, sl
   12232:	f7fc fd5d 	bl	ecf0 <__multadd>
   12236:	2300      	movs	r3, #0
   12238:	0005      	movs	r5, r0
   1223a:	220a      	movs	r2, #10
   1223c:	0039      	movs	r1, r7
   1223e:	4650      	mov	r0, sl
   12240:	4547      	cmp	r7, r8
   12242:	d011      	beq.n	12268 <_dtoa_r+0x91c>
   12244:	f7fc fd54 	bl	ecf0 <__multadd>
   12248:	4641      	mov	r1, r8
   1224a:	0007      	movs	r7, r0
   1224c:	2300      	movs	r3, #0
   1224e:	220a      	movs	r2, #10
   12250:	4650      	mov	r0, sl
   12252:	f7fc fd4d 	bl	ecf0 <__multadd>
   12256:	0026      	movs	r6, r4
   12258:	4680      	mov	r8, r0
   1225a:	e7ac      	b.n	121b6 <_dtoa_r+0x86a>
   1225c:	4650      	mov	r0, sl
   1225e:	f7fc fd3d 	bl	ecdc <_Bfree>
   12262:	2301      	movs	r3, #1
   12264:	9304      	str	r3, [sp, #16]
   12266:	e7cc      	b.n	12202 <_dtoa_r+0x8b6>
   12268:	f7fc fd42 	bl	ecf0 <__multadd>
   1226c:	0026      	movs	r6, r4
   1226e:	0007      	movs	r7, r0
   12270:	4680      	mov	r8, r0
   12272:	e7a0      	b.n	121b6 <_dtoa_r+0x86a>
   12274:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12276:	2b02      	cmp	r3, #2
   12278:	dc4d      	bgt.n	12316 <_dtoa_r+0x9ca>
   1227a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1227c:	2b00      	cmp	r3, #0
   1227e:	d000      	beq.n	12282 <_dtoa_r+0x936>
   12280:	e77e      	b.n	12180 <_dtoa_r+0x834>
   12282:	4649      	mov	r1, r9
   12284:	4658      	mov	r0, fp
   12286:	f7ff fabd 	bl	11804 <quorem>
   1228a:	0003      	movs	r3, r0
   1228c:	9a03      	ldr	r2, [sp, #12]
   1228e:	3330      	adds	r3, #48	; 0x30
   12290:	9306      	str	r3, [sp, #24]
   12292:	7013      	strb	r3, [r2, #0]
   12294:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12296:	2600      	movs	r6, #0
   12298:	3301      	adds	r3, #1
   1229a:	1c54      	adds	r4, r2, #1
   1229c:	9309      	str	r3, [sp, #36]	; 0x24
   1229e:	e6f5      	b.n	1208c <_dtoa_r+0x740>
   122a0:	4649      	mov	r1, r9
   122a2:	4658      	mov	r0, fp
   122a4:	f7fc ffae 	bl	f204 <__mcmp>
   122a8:	2800      	cmp	r0, #0
   122aa:	db00      	blt.n	122ae <_dtoa_r+0x962>
   122ac:	e6b7      	b.n	1201e <_dtoa_r+0x6d2>
   122ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   122b0:	4659      	mov	r1, fp
   122b2:	220a      	movs	r2, #10
   122b4:	4650      	mov	r0, sl
   122b6:	1e5e      	subs	r6, r3, #1
   122b8:	2300      	movs	r3, #0
   122ba:	f7fc fd19 	bl	ecf0 <__multadd>
   122be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   122c0:	4683      	mov	fp, r0
   122c2:	2b00      	cmp	r3, #0
   122c4:	d000      	beq.n	122c8 <_dtoa_r+0x97c>
   122c6:	e74e      	b.n	12166 <_dtoa_r+0x81a>
   122c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   122ca:	2b00      	cmp	r3, #0
   122cc:	dd1d      	ble.n	1230a <_dtoa_r+0x9be>
   122ce:	9307      	str	r3, [sp, #28]
   122d0:	e6b0      	b.n	12034 <_dtoa_r+0x6e8>
   122d2:	464a      	mov	r2, r9
   122d4:	4659      	mov	r1, fp
   122d6:	4650      	mov	r0, sl
   122d8:	f7fc feaa 	bl	f030 <__pow5mult>
   122dc:	4683      	mov	fp, r0
   122de:	e65a      	b.n	11f96 <_dtoa_r+0x64a>
   122e0:	4bd4      	ldr	r3, [pc, #848]	; (12634 <_dtoa_r+0xce8>)
   122e2:	9303      	str	r3, [sp, #12]
   122e4:	3303      	adds	r3, #3
   122e6:	e4d5      	b.n	11c94 <_dtoa_r+0x348>
   122e8:	2301      	movs	r3, #1
   122ea:	930d      	str	r3, [sp, #52]	; 0x34
   122ec:	e612      	b.n	11f14 <_dtoa_r+0x5c8>
   122ee:	9904      	ldr	r1, [sp, #16]
   122f0:	9a05      	ldr	r2, [sp, #20]
   122f2:	2900      	cmp	r1, #0
   122f4:	d000      	beq.n	122f8 <_dtoa_r+0x9ac>
   122f6:	e65c      	b.n	11fb2 <_dtoa_r+0x666>
   122f8:	0013      	movs	r3, r2
   122fa:	0312      	lsls	r2, r2, #12
   122fc:	d000      	beq.n	12300 <_dtoa_r+0x9b4>
   122fe:	e658      	b.n	11fb2 <_dtoa_r+0x666>
   12300:	e03a      	b.n	12378 <_dtoa_r+0xa2c>
   12302:	2301      	movs	r3, #1
   12304:	9307      	str	r3, [sp, #28]
   12306:	9325      	str	r3, [sp, #148]	; 0x94
   12308:	e5e5      	b.n	11ed6 <_dtoa_r+0x58a>
   1230a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1230c:	9609      	str	r6, [sp, #36]	; 0x24
   1230e:	9307      	str	r3, [sp, #28]
   12310:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12312:	2b02      	cmp	r3, #2
   12314:	ddb5      	ble.n	12282 <_dtoa_r+0x936>
   12316:	9b07      	ldr	r3, [sp, #28]
   12318:	2b00      	cmp	r3, #0
   1231a:	d000      	beq.n	1231e <_dtoa_r+0x9d2>
   1231c:	e52d      	b.n	11d7a <_dtoa_r+0x42e>
   1231e:	4649      	mov	r1, r9
   12320:	2205      	movs	r2, #5
   12322:	4650      	mov	r0, sl
   12324:	f7fc fce4 	bl	ecf0 <__multadd>
   12328:	4681      	mov	r9, r0
   1232a:	0001      	movs	r1, r0
   1232c:	4658      	mov	r0, fp
   1232e:	f7fc ff69 	bl	f204 <__mcmp>
   12332:	2800      	cmp	r0, #0
   12334:	dc00      	bgt.n	12338 <_dtoa_r+0x9ec>
   12336:	e520      	b.n	11d7a <_dtoa_r+0x42e>
   12338:	9a03      	ldr	r2, [sp, #12]
   1233a:	2331      	movs	r3, #49	; 0x31
   1233c:	0015      	movs	r5, r2
   1233e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12340:	7013      	strb	r3, [r2, #0]
   12342:	1c53      	adds	r3, r2, #1
   12344:	3401      	adds	r4, #1
   12346:	9303      	str	r3, [sp, #12]
   12348:	4649      	mov	r1, r9
   1234a:	4650      	mov	r0, sl
   1234c:	f7fc fcc6 	bl	ecdc <_Bfree>
   12350:	1c63      	adds	r3, r4, #1
   12352:	9309      	str	r3, [sp, #36]	; 0x24
   12354:	9c03      	ldr	r4, [sp, #12]
   12356:	9503      	str	r5, [sp, #12]
   12358:	2f00      	cmp	r7, #0
   1235a:	d000      	beq.n	1235e <_dtoa_r+0xa12>
   1235c:	e6c9      	b.n	120f2 <_dtoa_r+0x7a6>
   1235e:	e6cc      	b.n	120fa <_dtoa_r+0x7ae>
   12360:	0013      	movs	r3, r2
   12362:	e5f2      	b.n	11f4a <_dtoa_r+0x5fe>
   12364:	9b04      	ldr	r3, [sp, #16]
   12366:	2b00      	cmp	r3, #0
   12368:	d000      	beq.n	1236c <_dtoa_r+0xa20>
   1236a:	e6f0      	b.n	1214e <_dtoa_r+0x802>
   1236c:	9904      	ldr	r1, [sp, #16]
   1236e:	9a05      	ldr	r2, [sp, #20]
   12370:	0013      	movs	r3, r2
   12372:	0312      	lsls	r2, r2, #12
   12374:	d000      	beq.n	12378 <_dtoa_r+0xa2c>
   12376:	e6ea      	b.n	1214e <_dtoa_r+0x802>
   12378:	4aaf      	ldr	r2, [pc, #700]	; (12638 <_dtoa_r+0xcec>)
   1237a:	2500      	movs	r5, #0
   1237c:	4213      	tst	r3, r2
   1237e:	d100      	bne.n	12382 <_dtoa_r+0xa36>
   12380:	e617      	b.n	11fb2 <_dtoa_r+0x666>
   12382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12384:	3501      	adds	r5, #1
   12386:	3301      	adds	r3, #1
   12388:	930c      	str	r3, [sp, #48]	; 0x30
   1238a:	9b08      	ldr	r3, [sp, #32]
   1238c:	3301      	adds	r3, #1
   1238e:	9308      	str	r3, [sp, #32]
   12390:	e60f      	b.n	11fb2 <_dtoa_r+0x666>
   12392:	1b5d      	subs	r5, r3, r5
   12394:	e56d      	b.n	11e72 <_dtoa_r+0x526>
   12396:	4ba9      	ldr	r3, [pc, #676]	; (1263c <_dtoa_r+0xcf0>)
   12398:	400e      	ands	r6, r1
   1239a:	6a1a      	ldr	r2, [r3, #32]
   1239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1239e:	980a      	ldr	r0, [sp, #40]	; 0x28
   123a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   123a2:	f7f3 f8ff 	bl	55a4 <__aeabi_ddiv>
   123a6:	2303      	movs	r3, #3
   123a8:	9010      	str	r0, [sp, #64]	; 0x40
   123aa:	9111      	str	r1, [sp, #68]	; 0x44
   123ac:	4698      	mov	r8, r3
   123ae:	f7ff fbf1 	bl	11b94 <_dtoa_r+0x248>
   123b2:	2301      	movs	r3, #1
   123b4:	930d      	str	r3, [sp, #52]	; 0x34
   123b6:	f7ff fba9 	bl	11b0c <_dtoa_r+0x1c0>
   123ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   123bc:	2a00      	cmp	r2, #0
   123be:	d100      	bne.n	123c2 <_dtoa_r+0xa76>
   123c0:	e1f2      	b.n	127a8 <_dtoa_r+0xe5c>
   123c2:	4a9f      	ldr	r2, [pc, #636]	; (12640 <_dtoa_r+0xcf4>)
   123c4:	4694      	mov	ip, r2
   123c6:	4463      	add	r3, ip
   123c8:	9a08      	ldr	r2, [sp, #32]
   123ca:	464d      	mov	r5, r9
   123cc:	4694      	mov	ip, r2
   123ce:	449c      	add	ip, r3
   123d0:	4662      	mov	r2, ip
   123d2:	9208      	str	r2, [sp, #32]
   123d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   123d6:	4694      	mov	ip, r2
   123d8:	449c      	add	ip, r3
   123da:	4663      	mov	r3, ip
   123dc:	0014      	movs	r4, r2
   123de:	930c      	str	r3, [sp, #48]	; 0x30
   123e0:	e554      	b.n	11e8c <_dtoa_r+0x540>
   123e2:	9b07      	ldr	r3, [sp, #28]
   123e4:	2b00      	cmp	r3, #0
   123e6:	d100      	bne.n	123ea <_dtoa_r+0xa9e>
   123e8:	e218      	b.n	1281c <_dtoa_r+0xed0>
   123ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
   123ec:	2c00      	cmp	r4, #0
   123ee:	dc00      	bgt.n	123f2 <_dtoa_r+0xaa6>
   123f0:	e49a      	b.n	11d28 <_dtoa_r+0x3dc>
   123f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123f4:	2200      	movs	r2, #0
   123f6:	3b01      	subs	r3, #1
   123f8:	0030      	movs	r0, r6
   123fa:	0039      	movs	r1, r7
   123fc:	9315      	str	r3, [sp, #84]	; 0x54
   123fe:	4b91      	ldr	r3, [pc, #580]	; (12644 <_dtoa_r+0xcf8>)
   12400:	f7f3 fcd2 	bl	5da8 <__aeabi_dmul>
   12404:	0006      	movs	r6, r0
   12406:	4640      	mov	r0, r8
   12408:	000f      	movs	r7, r1
   1240a:	3001      	adds	r0, #1
   1240c:	f7f4 fb20 	bl	6a50 <__aeabi_i2d>
   12410:	0032      	movs	r2, r6
   12412:	003b      	movs	r3, r7
   12414:	f7f3 fcc8 	bl	5da8 <__aeabi_dmul>
   12418:	2200      	movs	r2, #0
   1241a:	4b8b      	ldr	r3, [pc, #556]	; (12648 <_dtoa_r+0xcfc>)
   1241c:	f7f2 fd86 	bl	4f2c <__aeabi_dadd>
   12420:	4a8a      	ldr	r2, [pc, #552]	; (1264c <_dtoa_r+0xd00>)
   12422:	000b      	movs	r3, r1
   12424:	4694      	mov	ip, r2
   12426:	4463      	add	r3, ip
   12428:	9012      	str	r0, [sp, #72]	; 0x48
   1242a:	9113      	str	r1, [sp, #76]	; 0x4c
   1242c:	9410      	str	r4, [sp, #64]	; 0x40
   1242e:	9313      	str	r3, [sp, #76]	; 0x4c
   12430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12432:	2b00      	cmp	r3, #0
   12434:	d100      	bne.n	12438 <_dtoa_r+0xaec>
   12436:	e148      	b.n	126ca <_dtoa_r+0xd7e>
   12438:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1243a:	2000      	movs	r0, #0
   1243c:	1e5a      	subs	r2, r3, #1
   1243e:	4b84      	ldr	r3, [pc, #528]	; (12650 <_dtoa_r+0xd04>)
   12440:	00d2      	lsls	r2, r2, #3
   12442:	189b      	adds	r3, r3, r2
   12444:	681a      	ldr	r2, [r3, #0]
   12446:	685b      	ldr	r3, [r3, #4]
   12448:	4982      	ldr	r1, [pc, #520]	; (12654 <_dtoa_r+0xd08>)
   1244a:	f7f3 f8ab 	bl	55a4 <__aeabi_ddiv>
   1244e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12452:	f7f3 ff17 	bl	6284 <__aeabi_dsub>
   12456:	9012      	str	r0, [sp, #72]	; 0x48
   12458:	9113      	str	r1, [sp, #76]	; 0x4c
   1245a:	0030      	movs	r0, r6
   1245c:	0039      	movs	r1, r7
   1245e:	f7f4 fac1 	bl	69e4 <__aeabi_d2iz>
   12462:	9016      	str	r0, [sp, #88]	; 0x58
   12464:	f7f4 faf4 	bl	6a50 <__aeabi_i2d>
   12468:	0002      	movs	r2, r0
   1246a:	000b      	movs	r3, r1
   1246c:	0030      	movs	r0, r6
   1246e:	0039      	movs	r1, r7
   12470:	f7f3 ff08 	bl	6284 <__aeabi_dsub>
   12474:	9b03      	ldr	r3, [sp, #12]
   12476:	9e16      	ldr	r6, [sp, #88]	; 0x58
   12478:	1c5a      	adds	r2, r3, #1
   1247a:	3630      	adds	r6, #48	; 0x30
   1247c:	0004      	movs	r4, r0
   1247e:	000d      	movs	r5, r1
   12480:	4690      	mov	r8, r2
   12482:	701e      	strb	r6, [r3, #0]
   12484:	0002      	movs	r2, r0
   12486:	000b      	movs	r3, r1
   12488:	9812      	ldr	r0, [sp, #72]	; 0x48
   1248a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1248c:	f7f2 f880 	bl	4590 <__aeabi_dcmpgt>
   12490:	2800      	cmp	r0, #0
   12492:	d000      	beq.n	12496 <_dtoa_r+0xb4a>
   12494:	e1dd      	b.n	12852 <_dtoa_r+0xf06>
   12496:	464b      	mov	r3, r9
   12498:	2700      	movs	r7, #0
   1249a:	9317      	str	r3, [sp, #92]	; 0x5c
   1249c:	465b      	mov	r3, fp
   1249e:	46bb      	mov	fp, r7
   124a0:	9e12      	ldr	r6, [sp, #72]	; 0x48
   124a2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   124a4:	9316      	str	r3, [sp, #88]	; 0x58
   124a6:	e033      	b.n	12510 <_dtoa_r+0xbc4>
   124a8:	2301      	movs	r3, #1
   124aa:	469c      	mov	ip, r3
   124ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   124ae:	44e3      	add	fp, ip
   124b0:	459b      	cmp	fp, r3
   124b2:	db00      	blt.n	124b6 <_dtoa_r+0xb6a>
   124b4:	e434      	b.n	11d20 <_dtoa_r+0x3d4>
   124b6:	2200      	movs	r2, #0
   124b8:	0030      	movs	r0, r6
   124ba:	0039      	movs	r1, r7
   124bc:	4b61      	ldr	r3, [pc, #388]	; (12644 <_dtoa_r+0xcf8>)
   124be:	f7f3 fc73 	bl	5da8 <__aeabi_dmul>
   124c2:	2200      	movs	r2, #0
   124c4:	4b5f      	ldr	r3, [pc, #380]	; (12644 <_dtoa_r+0xcf8>)
   124c6:	0006      	movs	r6, r0
   124c8:	000f      	movs	r7, r1
   124ca:	0020      	movs	r0, r4
   124cc:	0029      	movs	r1, r5
   124ce:	f7f3 fc6b 	bl	5da8 <__aeabi_dmul>
   124d2:	000d      	movs	r5, r1
   124d4:	0004      	movs	r4, r0
   124d6:	f7f4 fa85 	bl	69e4 <__aeabi_d2iz>
   124da:	4681      	mov	r9, r0
   124dc:	f7f4 fab8 	bl	6a50 <__aeabi_i2d>
   124e0:	0002      	movs	r2, r0
   124e2:	000b      	movs	r3, r1
   124e4:	0020      	movs	r0, r4
   124e6:	0029      	movs	r1, r5
   124e8:	f7f3 fecc 	bl	6284 <__aeabi_dsub>
   124ec:	2301      	movs	r3, #1
   124ee:	0004      	movs	r4, r0
   124f0:	4648      	mov	r0, r9
   124f2:	465a      	mov	r2, fp
   124f4:	469c      	mov	ip, r3
   124f6:	9b03      	ldr	r3, [sp, #12]
   124f8:	3030      	adds	r0, #48	; 0x30
   124fa:	5498      	strb	r0, [r3, r2]
   124fc:	0032      	movs	r2, r6
   124fe:	003b      	movs	r3, r7
   12500:	0020      	movs	r0, r4
   12502:	000d      	movs	r5, r1
   12504:	44e0      	add	r8, ip
   12506:	f7f2 f82f 	bl	4568 <__aeabi_dcmplt>
   1250a:	2800      	cmp	r0, #0
   1250c:	d000      	beq.n	12510 <_dtoa_r+0xbc4>
   1250e:	e19e      	b.n	1284e <_dtoa_r+0xf02>
   12510:	0022      	movs	r2, r4
   12512:	002b      	movs	r3, r5
   12514:	2000      	movs	r0, #0
   12516:	4950      	ldr	r1, [pc, #320]	; (12658 <_dtoa_r+0xd0c>)
   12518:	f7f3 feb4 	bl	6284 <__aeabi_dsub>
   1251c:	0032      	movs	r2, r6
   1251e:	003b      	movs	r3, r7
   12520:	f7f2 f822 	bl	4568 <__aeabi_dcmplt>
   12524:	2800      	cmp	r0, #0
   12526:	d0bf      	beq.n	124a8 <_dtoa_r+0xb5c>
   12528:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1252a:	4642      	mov	r2, r8
   1252c:	469b      	mov	fp, r3
   1252e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12530:	9903      	ldr	r1, [sp, #12]
   12532:	9309      	str	r3, [sp, #36]	; 0x24
   12534:	e002      	b.n	1253c <_dtoa_r+0xbf0>
   12536:	428a      	cmp	r2, r1
   12538:	d100      	bne.n	1253c <_dtoa_r+0xbf0>
   1253a:	e151      	b.n	127e0 <_dtoa_r+0xe94>
   1253c:	0014      	movs	r4, r2
   1253e:	3a01      	subs	r2, #1
   12540:	7813      	ldrb	r3, [r2, #0]
   12542:	2b39      	cmp	r3, #57	; 0x39
   12544:	d0f7      	beq.n	12536 <_dtoa_r+0xbea>
   12546:	4690      	mov	r8, r2
   12548:	3301      	adds	r3, #1
   1254a:	b2db      	uxtb	r3, r3
   1254c:	4642      	mov	r2, r8
   1254e:	7013      	strb	r3, [r2, #0]
   12550:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12552:	3301      	adds	r3, #1
   12554:	9309      	str	r3, [sp, #36]	; 0x24
   12556:	e5d0      	b.n	120fa <_dtoa_r+0x7ae>
   12558:	2331      	movs	r3, #49	; 0x31
   1255a:	9a03      	ldr	r2, [sp, #12]
   1255c:	7013      	strb	r3, [r2, #0]
   1255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12560:	3301      	adds	r3, #1
   12562:	9309      	str	r3, [sp, #36]	; 0x24
   12564:	e5b7      	b.n	120d6 <_dtoa_r+0x78a>
   12566:	2800      	cmp	r0, #0
   12568:	d103      	bne.n	12572 <_dtoa_r+0xc26>
   1256a:	9b06      	ldr	r3, [sp, #24]
   1256c:	07db      	lsls	r3, r3, #31
   1256e:	d500      	bpl.n	12572 <_dtoa_r+0xc26>
   12570:	e598      	b.n	120a4 <_dtoa_r+0x758>
   12572:	0023      	movs	r3, r4
   12574:	001c      	movs	r4, r3
   12576:	3b01      	subs	r3, #1
   12578:	781a      	ldrb	r2, [r3, #0]
   1257a:	2a30      	cmp	r2, #48	; 0x30
   1257c:	d0fa      	beq.n	12574 <_dtoa_r+0xc28>
   1257e:	e5aa      	b.n	120d6 <_dtoa_r+0x78a>
   12580:	2300      	movs	r3, #0
   12582:	930e      	str	r3, [sp, #56]	; 0x38
   12584:	e4b9      	b.n	11efa <_dtoa_r+0x5ae>
   12586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12588:	2b00      	cmp	r3, #0
   1258a:	d100      	bne.n	1258e <_dtoa_r+0xc42>
   1258c:	e122      	b.n	127d4 <_dtoa_r+0xe88>
   1258e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12590:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12592:	425c      	negs	r4, r3
   12594:	230f      	movs	r3, #15
   12596:	4a2e      	ldr	r2, [pc, #184]	; (12650 <_dtoa_r+0xd04>)
   12598:	4023      	ands	r3, r4
   1259a:	00db      	lsls	r3, r3, #3
   1259c:	18d3      	adds	r3, r2, r3
   1259e:	681a      	ldr	r2, [r3, #0]
   125a0:	685b      	ldr	r3, [r3, #4]
   125a2:	f7f3 fc01 	bl	5da8 <__aeabi_dmul>
   125a6:	1124      	asrs	r4, r4, #4
   125a8:	0006      	movs	r6, r0
   125aa:	000f      	movs	r7, r1
   125ac:	2c00      	cmp	r4, #0
   125ae:	d100      	bne.n	125b2 <_dtoa_r+0xc66>
   125b0:	e164      	b.n	1287c <_dtoa_r+0xf30>
   125b2:	2202      	movs	r2, #2
   125b4:	9610      	str	r6, [sp, #64]	; 0x40
   125b6:	9711      	str	r7, [sp, #68]	; 0x44
   125b8:	2300      	movs	r3, #0
   125ba:	0017      	movs	r7, r2
   125bc:	4d1f      	ldr	r5, [pc, #124]	; (1263c <_dtoa_r+0xcf0>)
   125be:	2201      	movs	r2, #1
   125c0:	4222      	tst	r2, r4
   125c2:	d005      	beq.n	125d0 <_dtoa_r+0xc84>
   125c4:	682a      	ldr	r2, [r5, #0]
   125c6:	686b      	ldr	r3, [r5, #4]
   125c8:	f7f3 fbee 	bl	5da8 <__aeabi_dmul>
   125cc:	2301      	movs	r3, #1
   125ce:	3701      	adds	r7, #1
   125d0:	1064      	asrs	r4, r4, #1
   125d2:	3508      	adds	r5, #8
   125d4:	2c00      	cmp	r4, #0
   125d6:	d1f2      	bne.n	125be <_dtoa_r+0xc72>
   125d8:	46b8      	mov	r8, r7
   125da:	9e10      	ldr	r6, [sp, #64]	; 0x40
   125dc:	9f11      	ldr	r7, [sp, #68]	; 0x44
   125de:	2b00      	cmp	r3, #0
   125e0:	d101      	bne.n	125e6 <_dtoa_r+0xc9a>
   125e2:	f7ff faf3 	bl	11bcc <_dtoa_r+0x280>
   125e6:	0006      	movs	r6, r0
   125e8:	000f      	movs	r7, r1
   125ea:	f7ff faef 	bl	11bcc <_dtoa_r+0x280>
   125ee:	9b04      	ldr	r3, [sp, #16]
   125f0:	46d9      	mov	r9, fp
   125f2:	46ab      	mov	fp, r5
   125f4:	0035      	movs	r5, r6
   125f6:	2b00      	cmp	r3, #0
   125f8:	dd12      	ble.n	12620 <_dtoa_r+0xcd4>
   125fa:	4659      	mov	r1, fp
   125fc:	2201      	movs	r2, #1
   125fe:	4650      	mov	r0, sl
   12600:	f7fc fd82 	bl	f108 <__lshift>
   12604:	4649      	mov	r1, r9
   12606:	4683      	mov	fp, r0
   12608:	f7fc fdfc 	bl	f204 <__mcmp>
   1260c:	2800      	cmp	r0, #0
   1260e:	dc00      	bgt.n	12612 <_dtoa_r+0xcc6>
   12610:	e124      	b.n	1285c <_dtoa_r+0xf10>
   12612:	9b06      	ldr	r3, [sp, #24]
   12614:	2b39      	cmp	r3, #57	; 0x39
   12616:	d100      	bne.n	1261a <_dtoa_r+0xcce>
   12618:	e0e8      	b.n	127ec <_dtoa_r+0xea0>
   1261a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1261c:	3331      	adds	r3, #49	; 0x31
   1261e:	9306      	str	r3, [sp, #24]
   12620:	9b06      	ldr	r3, [sp, #24]
   12622:	1c6c      	adds	r4, r5, #1
   12624:	702b      	strb	r3, [r5, #0]
   12626:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12628:	003e      	movs	r6, r7
   1262a:	3301      	adds	r3, #1
   1262c:	4647      	mov	r7, r8
   1262e:	9309      	str	r3, [sp, #36]	; 0x24
   12630:	e551      	b.n	120d6 <_dtoa_r+0x78a>
   12632:	46c0      	nop			; (mov r8, r8)
   12634:	00016e44 	.word	0x00016e44
   12638:	7ff00000 	.word	0x7ff00000
   1263c:	00016a38 	.word	0x00016a38
   12640:	00000433 	.word	0x00000433
   12644:	40240000 	.word	0x40240000
   12648:	401c0000 	.word	0x401c0000
   1264c:	fcc00000 	.word	0xfcc00000
   12650:	00016a60 	.word	0x00016a60
   12654:	3fe00000 	.word	0x3fe00000
   12658:	3ff00000 	.word	0x3ff00000
   1265c:	9b06      	ldr	r3, [sp, #24]
   1265e:	46d0      	mov	r8, sl
   12660:	469a      	mov	sl, r3
   12662:	0002      	movs	r2, r0
   12664:	000b      	movs	r3, r1
   12666:	f7f2 fc61 	bl	4f2c <__aeabi_dadd>
   1266a:	0032      	movs	r2, r6
   1266c:	003b      	movs	r3, r7
   1266e:	0004      	movs	r4, r0
   12670:	000d      	movs	r5, r1
   12672:	f7f1 ff8d 	bl	4590 <__aeabi_dcmpgt>
   12676:	2800      	cmp	r0, #0
   12678:	d10e      	bne.n	12698 <_dtoa_r+0xd4c>
   1267a:	0032      	movs	r2, r6
   1267c:	003b      	movs	r3, r7
   1267e:	0020      	movs	r0, r4
   12680:	0029      	movs	r1, r5
   12682:	f7f1 ff6b 	bl	455c <__aeabi_dcmpeq>
   12686:	2800      	cmp	r0, #0
   12688:	d101      	bne.n	1268e <_dtoa_r+0xd42>
   1268a:	f7ff fbd8 	bl	11e3e <_dtoa_r+0x4f2>
   1268e:	464b      	mov	r3, r9
   12690:	07db      	lsls	r3, r3, #31
   12692:	d401      	bmi.n	12698 <_dtoa_r+0xd4c>
   12694:	f7ff fbd3 	bl	11e3e <_dtoa_r+0x4f2>
   12698:	4642      	mov	r2, r8
   1269a:	9903      	ldr	r1, [sp, #12]
   1269c:	e74e      	b.n	1253c <_dtoa_r+0xbf0>
   1269e:	4650      	mov	r0, sl
   126a0:	6879      	ldr	r1, [r7, #4]
   126a2:	f7fc faf3 	bl	ec8c <_Balloc>
   126a6:	1e04      	subs	r4, r0, #0
   126a8:	d100      	bne.n	126ac <_dtoa_r+0xd60>
   126aa:	e116      	b.n	128da <_dtoa_r+0xf8e>
   126ac:	0039      	movs	r1, r7
   126ae:	693b      	ldr	r3, [r7, #16]
   126b0:	310c      	adds	r1, #12
   126b2:	1c9a      	adds	r2, r3, #2
   126b4:	0092      	lsls	r2, r2, #2
   126b6:	300c      	adds	r0, #12
   126b8:	f7fc f9ec 	bl	ea94 <memcpy>
   126bc:	2201      	movs	r2, #1
   126be:	0021      	movs	r1, r4
   126c0:	4650      	mov	r0, sl
   126c2:	f7fc fd21 	bl	f108 <__lshift>
   126c6:	4680      	mov	r8, r0
   126c8:	e566      	b.n	12198 <_dtoa_r+0x84c>
   126ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   126cc:	4986      	ldr	r1, [pc, #536]	; (128e8 <_dtoa_r+0xf9c>)
   126ce:	3b01      	subs	r3, #1
   126d0:	00db      	lsls	r3, r3, #3
   126d2:	18c9      	adds	r1, r1, r3
   126d4:	6808      	ldr	r0, [r1, #0]
   126d6:	6849      	ldr	r1, [r1, #4]
   126d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   126da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   126dc:	f7f3 fb64 	bl	5da8 <__aeabi_dmul>
   126e0:	9012      	str	r0, [sp, #72]	; 0x48
   126e2:	9113      	str	r1, [sp, #76]	; 0x4c
   126e4:	0030      	movs	r0, r6
   126e6:	0039      	movs	r1, r7
   126e8:	f7f4 f97c 	bl	69e4 <__aeabi_d2iz>
   126ec:	9016      	str	r0, [sp, #88]	; 0x58
   126ee:	f7f4 f9af 	bl	6a50 <__aeabi_i2d>
   126f2:	0002      	movs	r2, r0
   126f4:	000b      	movs	r3, r1
   126f6:	0030      	movs	r0, r6
   126f8:	0039      	movs	r1, r7
   126fa:	f7f3 fdc3 	bl	6284 <__aeabi_dsub>
   126fe:	9a03      	ldr	r2, [sp, #12]
   12700:	000d      	movs	r5, r1
   12702:	1c51      	adds	r1, r2, #1
   12704:	4688      	mov	r8, r1
   12706:	0011      	movs	r1, r2
   12708:	9e16      	ldr	r6, [sp, #88]	; 0x58
   1270a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1270c:	3630      	adds	r6, #48	; 0x30
   1270e:	7016      	strb	r6, [r2, #0]
   12710:	468c      	mov	ip, r1
   12712:	001a      	movs	r2, r3
   12714:	4462      	add	r2, ip
   12716:	0004      	movs	r4, r0
   12718:	4646      	mov	r6, r8
   1271a:	9210      	str	r2, [sp, #64]	; 0x40
   1271c:	2b01      	cmp	r3, #1
   1271e:	d01d      	beq.n	1275c <_dtoa_r+0xe10>
   12720:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12722:	4698      	mov	r8, r3
   12724:	2200      	movs	r2, #0
   12726:	4b71      	ldr	r3, [pc, #452]	; (128ec <_dtoa_r+0xfa0>)
   12728:	0020      	movs	r0, r4
   1272a:	0029      	movs	r1, r5
   1272c:	f7f3 fb3c 	bl	5da8 <__aeabi_dmul>
   12730:	000d      	movs	r5, r1
   12732:	0004      	movs	r4, r0
   12734:	f7f4 f956 	bl	69e4 <__aeabi_d2iz>
   12738:	0007      	movs	r7, r0
   1273a:	f7f4 f989 	bl	6a50 <__aeabi_i2d>
   1273e:	0002      	movs	r2, r0
   12740:	000b      	movs	r3, r1
   12742:	0020      	movs	r0, r4
   12744:	0029      	movs	r1, r5
   12746:	f7f3 fd9d 	bl	6284 <__aeabi_dsub>
   1274a:	3730      	adds	r7, #48	; 0x30
   1274c:	7037      	strb	r7, [r6, #0]
   1274e:	3601      	adds	r6, #1
   12750:	0004      	movs	r4, r0
   12752:	000d      	movs	r5, r1
   12754:	45b0      	cmp	r8, r6
   12756:	d1e5      	bne.n	12724 <_dtoa_r+0xdd8>
   12758:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1275a:	4698      	mov	r8, r3
   1275c:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1275e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   12760:	2200      	movs	r2, #0
   12762:	4b63      	ldr	r3, [pc, #396]	; (128f0 <_dtoa_r+0xfa4>)
   12764:	0030      	movs	r0, r6
   12766:	0039      	movs	r1, r7
   12768:	f7f2 fbe0 	bl	4f2c <__aeabi_dadd>
   1276c:	0022      	movs	r2, r4
   1276e:	002b      	movs	r3, r5
   12770:	f7f1 fefa 	bl	4568 <__aeabi_dcmplt>
   12774:	2800      	cmp	r0, #0
   12776:	d165      	bne.n	12844 <_dtoa_r+0xef8>
   12778:	0032      	movs	r2, r6
   1277a:	003b      	movs	r3, r7
   1277c:	2000      	movs	r0, #0
   1277e:	495c      	ldr	r1, [pc, #368]	; (128f0 <_dtoa_r+0xfa4>)
   12780:	f7f3 fd80 	bl	6284 <__aeabi_dsub>
   12784:	0022      	movs	r2, r4
   12786:	002b      	movs	r3, r5
   12788:	f7f1 ff02 	bl	4590 <__aeabi_dcmpgt>
   1278c:	2800      	cmp	r0, #0
   1278e:	d101      	bne.n	12794 <_dtoa_r+0xe48>
   12790:	f7ff faca 	bl	11d28 <_dtoa_r+0x3dc>
   12794:	4643      	mov	r3, r8
   12796:	001c      	movs	r4, r3
   12798:	3b01      	subs	r3, #1
   1279a:	781a      	ldrb	r2, [r3, #0]
   1279c:	2a30      	cmp	r2, #48	; 0x30
   1279e:	d0fa      	beq.n	12796 <_dtoa_r+0xe4a>
   127a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   127a2:	3301      	adds	r3, #1
   127a4:	9309      	str	r3, [sp, #36]	; 0x24
   127a6:	e4a8      	b.n	120fa <_dtoa_r+0x7ae>
   127a8:	2336      	movs	r3, #54	; 0x36
   127aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   127ac:	1a9b      	subs	r3, r3, r2
   127ae:	e60b      	b.n	123c8 <_dtoa_r+0xa7c>
   127b0:	9b06      	ldr	r3, [sp, #24]
   127b2:	46d9      	mov	r9, fp
   127b4:	46ab      	mov	fp, r5
   127b6:	0035      	movs	r5, r6
   127b8:	2b39      	cmp	r3, #57	; 0x39
   127ba:	d017      	beq.n	127ec <_dtoa_r+0xea0>
   127bc:	9b06      	ldr	r3, [sp, #24]
   127be:	1c74      	adds	r4, r6, #1
   127c0:	3301      	adds	r3, #1
   127c2:	e72f      	b.n	12624 <_dtoa_r+0xcd8>
   127c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127c6:	46d9      	mov	r9, fp
   127c8:	3301      	adds	r3, #1
   127ca:	003e      	movs	r6, r7
   127cc:	46ab      	mov	fp, r5
   127ce:	4647      	mov	r7, r8
   127d0:	9309      	str	r3, [sp, #36]	; 0x24
   127d2:	e45b      	b.n	1208c <_dtoa_r+0x740>
   127d4:	2302      	movs	r3, #2
   127d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   127d8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   127da:	4698      	mov	r8, r3
   127dc:	f7ff f9f6 	bl	11bcc <_dtoa_r+0x280>
   127e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127e2:	4690      	mov	r8, r2
   127e4:	3301      	adds	r3, #1
   127e6:	9309      	str	r3, [sp, #36]	; 0x24
   127e8:	2331      	movs	r3, #49	; 0x31
   127ea:	e6af      	b.n	1254c <_dtoa_r+0xc00>
   127ec:	2339      	movs	r3, #57	; 0x39
   127ee:	702b      	strb	r3, [r5, #0]
   127f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127f2:	003e      	movs	r6, r7
   127f4:	3301      	adds	r3, #1
   127f6:	4647      	mov	r7, r8
   127f8:	2239      	movs	r2, #57	; 0x39
   127fa:	1c6c      	adds	r4, r5, #1
   127fc:	9309      	str	r3, [sp, #36]	; 0x24
   127fe:	e453      	b.n	120a8 <_dtoa_r+0x75c>
   12800:	2300      	movs	r3, #0
   12802:	2700      	movs	r7, #0
   12804:	4699      	mov	r9, r3
   12806:	e597      	b.n	12338 <_dtoa_r+0x9ec>
   12808:	9b06      	ldr	r3, [sp, #24]
   1280a:	46d9      	mov	r9, fp
   1280c:	46ab      	mov	fp, r5
   1280e:	0035      	movs	r5, r6
   12810:	2b39      	cmp	r3, #57	; 0x39
   12812:	d0eb      	beq.n	127ec <_dtoa_r+0xea0>
   12814:	2c00      	cmp	r4, #0
   12816:	dd00      	ble.n	1281a <_dtoa_r+0xece>
   12818:	e6ff      	b.n	1261a <_dtoa_r+0xcce>
   1281a:	e701      	b.n	12620 <_dtoa_r+0xcd4>
   1281c:	4640      	mov	r0, r8
   1281e:	f7f4 f917 	bl	6a50 <__aeabi_i2d>
   12822:	0032      	movs	r2, r6
   12824:	003b      	movs	r3, r7
   12826:	f7f3 fabf 	bl	5da8 <__aeabi_dmul>
   1282a:	2200      	movs	r2, #0
   1282c:	4b31      	ldr	r3, [pc, #196]	; (128f4 <_dtoa_r+0xfa8>)
   1282e:	f7f2 fb7d 	bl	4f2c <__aeabi_dadd>
   12832:	4a31      	ldr	r2, [pc, #196]	; (128f8 <_dtoa_r+0xfac>)
   12834:	000b      	movs	r3, r1
   12836:	4694      	mov	ip, r2
   12838:	4463      	add	r3, ip
   1283a:	9012      	str	r0, [sp, #72]	; 0x48
   1283c:	9113      	str	r1, [sp, #76]	; 0x4c
   1283e:	9313      	str	r3, [sp, #76]	; 0x4c
   12840:	f7ff f9eb 	bl	11c1a <_dtoa_r+0x2ce>
   12844:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12846:	4642      	mov	r2, r8
   12848:	9903      	ldr	r1, [sp, #12]
   1284a:	9309      	str	r3, [sp, #36]	; 0x24
   1284c:	e676      	b.n	1253c <_dtoa_r+0xbf0>
   1284e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12850:	469b      	mov	fp, r3
   12852:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12854:	4644      	mov	r4, r8
   12856:	3301      	adds	r3, #1
   12858:	9309      	str	r3, [sp, #36]	; 0x24
   1285a:	e44e      	b.n	120fa <_dtoa_r+0x7ae>
   1285c:	2800      	cmp	r0, #0
   1285e:	d000      	beq.n	12862 <_dtoa_r+0xf16>
   12860:	e6de      	b.n	12620 <_dtoa_r+0xcd4>
   12862:	9b06      	ldr	r3, [sp, #24]
   12864:	07db      	lsls	r3, r3, #31
   12866:	d500      	bpl.n	1286a <_dtoa_r+0xf1e>
   12868:	e6d3      	b.n	12612 <_dtoa_r+0xcc6>
   1286a:	e6d9      	b.n	12620 <_dtoa_r+0xcd4>
   1286c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1286e:	9609      	str	r6, [sp, #36]	; 0x24
   12870:	9307      	str	r3, [sp, #28]
   12872:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12874:	2b02      	cmp	r3, #2
   12876:	dd00      	ble.n	1287a <_dtoa_r+0xf2e>
   12878:	e54d      	b.n	12316 <_dtoa_r+0x9ca>
   1287a:	e481      	b.n	12180 <_dtoa_r+0x834>
   1287c:	2302      	movs	r3, #2
   1287e:	4698      	mov	r8, r3
   12880:	f7ff f9a4 	bl	11bcc <_dtoa_r+0x280>
   12884:	4653      	mov	r3, sl
   12886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12888:	2100      	movs	r1, #0
   1288a:	4650      	mov	r0, sl
   1288c:	645a      	str	r2, [r3, #68]	; 0x44
   1288e:	f7fc f9fd 	bl	ec8c <_Balloc>
   12892:	9003      	str	r0, [sp, #12]
   12894:	2800      	cmp	r0, #0
   12896:	d00b      	beq.n	128b0 <_dtoa_r+0xf64>
   12898:	4653      	mov	r3, sl
   1289a:	9a03      	ldr	r2, [sp, #12]
   1289c:	641a      	str	r2, [r3, #64]	; 0x40
   1289e:	2300      	movs	r3, #0
   128a0:	2201      	movs	r2, #1
   128a2:	9325      	str	r3, [sp, #148]	; 0x94
   128a4:	3b01      	subs	r3, #1
   128a6:	9314      	str	r3, [sp, #80]	; 0x50
   128a8:	920d      	str	r2, [sp, #52]	; 0x34
   128aa:	9307      	str	r3, [sp, #28]
   128ac:	f7ff fa3c 	bl	11d28 <_dtoa_r+0x3dc>
   128b0:	21d5      	movs	r1, #213	; 0xd5
   128b2:	2200      	movs	r2, #0
   128b4:	4b11      	ldr	r3, [pc, #68]	; (128fc <_dtoa_r+0xfb0>)
   128b6:	4812      	ldr	r0, [pc, #72]	; (12900 <_dtoa_r+0xfb4>)
   128b8:	0049      	lsls	r1, r1, #1
   128ba:	f7fe ff83 	bl	117c4 <__assert_func>
   128be:	2b04      	cmp	r3, #4
   128c0:	d101      	bne.n	128c6 <_dtoa_r+0xf7a>
   128c2:	f7ff fb96 	bl	11ff2 <_dtoa_r+0x6a6>
   128c6:	233c      	movs	r3, #60	; 0x3c
   128c8:	1a9b      	subs	r3, r3, r2
   128ca:	e426      	b.n	1211a <_dtoa_r+0x7ce>
   128cc:	4b0d      	ldr	r3, [pc, #52]	; (12904 <_dtoa_r+0xfb8>)
   128ce:	9303      	str	r3, [sp, #12]
   128d0:	f7ff f878 	bl	119c4 <_dtoa_r+0x78>
   128d4:	2100      	movs	r1, #0
   128d6:	f7ff f933 	bl	11b40 <_dtoa_r+0x1f4>
   128da:	2200      	movs	r2, #0
   128dc:	4b07      	ldr	r3, [pc, #28]	; (128fc <_dtoa_r+0xfb0>)
   128de:	490a      	ldr	r1, [pc, #40]	; (12908 <_dtoa_r+0xfbc>)
   128e0:	4807      	ldr	r0, [pc, #28]	; (12900 <_dtoa_r+0xfb4>)
   128e2:	f7fe ff6f 	bl	117c4 <__assert_func>
   128e6:	46c0      	nop			; (mov r8, r8)
   128e8:	00016a60 	.word	0x00016a60
   128ec:	40240000 	.word	0x40240000
   128f0:	3fe00000 	.word	0x3fe00000
   128f4:	401c0000 	.word	0x401c0000
   128f8:	fcc00000 	.word	0xfcc00000
   128fc:	000169a4 	.word	0x000169a4
   12900:	00016e54 	.word	0x00016e54
   12904:	00016e48 	.word	0x00016e48
   12908:	000002ea 	.word	0x000002ea

0001290c <__errno>:
   1290c:	4b01      	ldr	r3, [pc, #4]	; (12914 <__errno+0x8>)
   1290e:	6818      	ldr	r0, [r3, #0]
   12910:	4770      	bx	lr
   12912:	46c0      	nop			; (mov r8, r8)
   12914:	0001737c 	.word	0x0001737c

00012918 <fiprintf>:
   12918:	b40e      	push	{r1, r2, r3}
   1291a:	b500      	push	{lr}
   1291c:	b082      	sub	sp, #8
   1291e:	ab03      	add	r3, sp, #12
   12920:	0001      	movs	r1, r0
   12922:	4805      	ldr	r0, [pc, #20]	; (12938 <fiprintf+0x20>)
   12924:	cb04      	ldmia	r3!, {r2}
   12926:	6800      	ldr	r0, [r0, #0]
   12928:	9301      	str	r3, [sp, #4]
   1292a:	f000 fbcb 	bl	130c4 <_vfiprintf_r>
   1292e:	b002      	add	sp, #8
   12930:	bc08      	pop	{r3}
   12932:	b003      	add	sp, #12
   12934:	4718      	bx	r3
   12936:	46c0      	nop			; (mov r8, r8)
   12938:	0001737c 	.word	0x0001737c

0001293c <fputc>:
   1293c:	4b14      	ldr	r3, [pc, #80]	; (12990 <fputc+0x54>)
   1293e:	b570      	push	{r4, r5, r6, lr}
   12940:	681e      	ldr	r6, [r3, #0]
   12942:	0005      	movs	r5, r0
   12944:	000c      	movs	r4, r1
   12946:	2e00      	cmp	r6, #0
   12948:	d002      	beq.n	12950 <fputc+0x14>
   1294a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1294c:	2b00      	cmp	r3, #0
   1294e:	d013      	beq.n	12978 <fputc+0x3c>
   12950:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12952:	07db      	lsls	r3, r3, #31
   12954:	d402      	bmi.n	1295c <fputc+0x20>
   12956:	89a3      	ldrh	r3, [r4, #12]
   12958:	059b      	lsls	r3, r3, #22
   1295a:	d515      	bpl.n	12988 <fputc+0x4c>
   1295c:	0029      	movs	r1, r5
   1295e:	0022      	movs	r2, r4
   12960:	0030      	movs	r0, r6
   12962:	f000 fa75 	bl	12e50 <_putc_r>
   12966:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12968:	0005      	movs	r5, r0
   1296a:	07db      	lsls	r3, r3, #31
   1296c:	d402      	bmi.n	12974 <fputc+0x38>
   1296e:	89a3      	ldrh	r3, [r4, #12]
   12970:	059b      	lsls	r3, r3, #22
   12972:	d505      	bpl.n	12980 <fputc+0x44>
   12974:	0028      	movs	r0, r5
   12976:	bd70      	pop	{r4, r5, r6, pc}
   12978:	0030      	movs	r0, r6
   1297a:	f7fb fb87 	bl	e08c <__sinit>
   1297e:	e7e7      	b.n	12950 <fputc+0x14>
   12980:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12982:	f7fb ffef 	bl	e964 <__retarget_lock_release_recursive>
   12986:	e7f5      	b.n	12974 <fputc+0x38>
   12988:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1298a:	f7fb ffe9 	bl	e960 <__retarget_lock_acquire_recursive>
   1298e:	e7e5      	b.n	1295c <fputc+0x20>
   12990:	0001737c 	.word	0x0001737c

00012994 <_fputs_r>:
   12994:	b570      	push	{r4, r5, r6, lr}
   12996:	0005      	movs	r5, r0
   12998:	b086      	sub	sp, #24
   1299a:	0008      	movs	r0, r1
   1299c:	0014      	movs	r4, r2
   1299e:	9101      	str	r1, [sp, #4]
   129a0:	f7fc fe4c 	bl	f63c <strlen>
   129a4:	2301      	movs	r3, #1
   129a6:	ae01      	add	r6, sp, #4
   129a8:	9005      	str	r0, [sp, #20]
   129aa:	9002      	str	r0, [sp, #8]
   129ac:	9603      	str	r6, [sp, #12]
   129ae:	9304      	str	r3, [sp, #16]
   129b0:	2d00      	cmp	r5, #0
   129b2:	d002      	beq.n	129ba <_fputs_r+0x26>
   129b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   129b6:	2b00      	cmp	r3, #0
   129b8:	d027      	beq.n	12a0a <_fputs_r+0x76>
   129ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   129bc:	07db      	lsls	r3, r3, #31
   129be:	d420      	bmi.n	12a02 <_fputs_r+0x6e>
   129c0:	89a2      	ldrh	r2, [r4, #12]
   129c2:	230c      	movs	r3, #12
   129c4:	5ee1      	ldrsh	r1, [r4, r3]
   129c6:	0593      	lsls	r3, r2, #22
   129c8:	d518      	bpl.n	129fc <_fputs_r+0x68>
   129ca:	2380      	movs	r3, #128	; 0x80
   129cc:	019b      	lsls	r3, r3, #6
   129ce:	421a      	tst	r2, r3
   129d0:	d105      	bne.n	129de <_fputs_r+0x4a>
   129d2:	430b      	orrs	r3, r1
   129d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   129d6:	81a3      	strh	r3, [r4, #12]
   129d8:	4b10      	ldr	r3, [pc, #64]	; (12a1c <_fputs_r+0x88>)
   129da:	4013      	ands	r3, r2
   129dc:	6663      	str	r3, [r4, #100]	; 0x64
   129de:	0028      	movs	r0, r5
   129e0:	0021      	movs	r1, r4
   129e2:	aa03      	add	r2, sp, #12
   129e4:	f000 f828 	bl	12a38 <__sfvwrite_r>
   129e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   129ea:	0005      	movs	r5, r0
   129ec:	07db      	lsls	r3, r3, #31
   129ee:	d402      	bmi.n	129f6 <_fputs_r+0x62>
   129f0:	89a3      	ldrh	r3, [r4, #12]
   129f2:	059b      	lsls	r3, r3, #22
   129f4:	d50d      	bpl.n	12a12 <_fputs_r+0x7e>
   129f6:	0028      	movs	r0, r5
   129f8:	b006      	add	sp, #24
   129fa:	bd70      	pop	{r4, r5, r6, pc}
   129fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   129fe:	f7fb ffaf 	bl	e960 <__retarget_lock_acquire_recursive>
   12a02:	230c      	movs	r3, #12
   12a04:	5ee1      	ldrsh	r1, [r4, r3]
   12a06:	89a2      	ldrh	r2, [r4, #12]
   12a08:	e7df      	b.n	129ca <_fputs_r+0x36>
   12a0a:	0028      	movs	r0, r5
   12a0c:	f7fb fb3e 	bl	e08c <__sinit>
   12a10:	e7d3      	b.n	129ba <_fputs_r+0x26>
   12a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12a14:	f7fb ffa6 	bl	e964 <__retarget_lock_release_recursive>
   12a18:	e7ed      	b.n	129f6 <_fputs_r+0x62>
   12a1a:	46c0      	nop			; (mov r8, r8)
   12a1c:	ffffdfff 	.word	0xffffdfff

00012a20 <fputs>:
   12a20:	0003      	movs	r3, r0
   12a22:	b510      	push	{r4, lr}
   12a24:	000a      	movs	r2, r1
   12a26:	4903      	ldr	r1, [pc, #12]	; (12a34 <fputs+0x14>)
   12a28:	6808      	ldr	r0, [r1, #0]
   12a2a:	0019      	movs	r1, r3
   12a2c:	f7ff ffb2 	bl	12994 <_fputs_r>
   12a30:	bd10      	pop	{r4, pc}
   12a32:	46c0      	nop			; (mov r8, r8)
   12a34:	0001737c 	.word	0x0001737c

00012a38 <__sfvwrite_r>:
   12a38:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a3a:	46de      	mov	lr, fp
   12a3c:	4645      	mov	r5, r8
   12a3e:	4657      	mov	r7, sl
   12a40:	464e      	mov	r6, r9
   12a42:	b5e0      	push	{r5, r6, r7, lr}
   12a44:	6893      	ldr	r3, [r2, #8]
   12a46:	4683      	mov	fp, r0
   12a48:	000c      	movs	r4, r1
   12a4a:	4690      	mov	r8, r2
   12a4c:	b083      	sub	sp, #12
   12a4e:	2b00      	cmp	r3, #0
   12a50:	d023      	beq.n	12a9a <__sfvwrite_r+0x62>
   12a52:	898b      	ldrh	r3, [r1, #12]
   12a54:	071a      	lsls	r2, r3, #28
   12a56:	d528      	bpl.n	12aaa <__sfvwrite_r+0x72>
   12a58:	690a      	ldr	r2, [r1, #16]
   12a5a:	2a00      	cmp	r2, #0
   12a5c:	d025      	beq.n	12aaa <__sfvwrite_r+0x72>
   12a5e:	4642      	mov	r2, r8
   12a60:	6816      	ldr	r6, [r2, #0]
   12a62:	079a      	lsls	r2, r3, #30
   12a64:	d52d      	bpl.n	12ac2 <__sfvwrite_r+0x8a>
   12a66:	2700      	movs	r7, #0
   12a68:	4bac      	ldr	r3, [pc, #688]	; (12d1c <__sfvwrite_r+0x2e4>)
   12a6a:	2500      	movs	r5, #0
   12a6c:	4699      	mov	r9, r3
   12a6e:	46ba      	mov	sl, r7
   12a70:	2d00      	cmp	r5, #0
   12a72:	d058      	beq.n	12b26 <__sfvwrite_r+0xee>
   12a74:	002b      	movs	r3, r5
   12a76:	454d      	cmp	r5, r9
   12a78:	d900      	bls.n	12a7c <__sfvwrite_r+0x44>
   12a7a:	4ba8      	ldr	r3, [pc, #672]	; (12d1c <__sfvwrite_r+0x2e4>)
   12a7c:	4652      	mov	r2, sl
   12a7e:	4658      	mov	r0, fp
   12a80:	69e1      	ldr	r1, [r4, #28]
   12a82:	6a67      	ldr	r7, [r4, #36]	; 0x24
   12a84:	47b8      	blx	r7
   12a86:	2800      	cmp	r0, #0
   12a88:	dd58      	ble.n	12b3c <__sfvwrite_r+0x104>
   12a8a:	4643      	mov	r3, r8
   12a8c:	689b      	ldr	r3, [r3, #8]
   12a8e:	4482      	add	sl, r0
   12a90:	1a2d      	subs	r5, r5, r0
   12a92:	1a18      	subs	r0, r3, r0
   12a94:	4643      	mov	r3, r8
   12a96:	6098      	str	r0, [r3, #8]
   12a98:	d1ea      	bne.n	12a70 <__sfvwrite_r+0x38>
   12a9a:	2000      	movs	r0, #0
   12a9c:	b003      	add	sp, #12
   12a9e:	bcf0      	pop	{r4, r5, r6, r7}
   12aa0:	46bb      	mov	fp, r7
   12aa2:	46b2      	mov	sl, r6
   12aa4:	46a9      	mov	r9, r5
   12aa6:	46a0      	mov	r8, r4
   12aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12aaa:	0021      	movs	r1, r4
   12aac:	4658      	mov	r0, fp
   12aae:	f001 fa8f 	bl	13fd0 <__swsetup_r>
   12ab2:	2800      	cmp	r0, #0
   12ab4:	d000      	beq.n	12ab8 <__sfvwrite_r+0x80>
   12ab6:	e12d      	b.n	12d14 <__sfvwrite_r+0x2dc>
   12ab8:	4642      	mov	r2, r8
   12aba:	89a3      	ldrh	r3, [r4, #12]
   12abc:	6816      	ldr	r6, [r2, #0]
   12abe:	079a      	lsls	r2, r3, #30
   12ac0:	d4d1      	bmi.n	12a66 <__sfvwrite_r+0x2e>
   12ac2:	07da      	lsls	r2, r3, #31
   12ac4:	d442      	bmi.n	12b4c <__sfvwrite_r+0x114>
   12ac6:	2200      	movs	r2, #0
   12ac8:	2700      	movs	r7, #0
   12aca:	4691      	mov	r9, r2
   12acc:	2f00      	cmp	r7, #0
   12ace:	d025      	beq.n	12b1c <__sfvwrite_r+0xe4>
   12ad0:	2280      	movs	r2, #128	; 0x80
   12ad2:	0092      	lsls	r2, r2, #2
   12ad4:	68a5      	ldr	r5, [r4, #8]
   12ad6:	4213      	tst	r3, r2
   12ad8:	d100      	bne.n	12adc <__sfvwrite_r+0xa4>
   12ada:	e080      	b.n	12bde <__sfvwrite_r+0x1a6>
   12adc:	46aa      	mov	sl, r5
   12ade:	42bd      	cmp	r5, r7
   12ae0:	d900      	bls.n	12ae4 <__sfvwrite_r+0xac>
   12ae2:	e0af      	b.n	12c44 <__sfvwrite_r+0x20c>
   12ae4:	2290      	movs	r2, #144	; 0x90
   12ae6:	00d2      	lsls	r2, r2, #3
   12ae8:	4213      	tst	r3, r2
   12aea:	d000      	beq.n	12aee <__sfvwrite_r+0xb6>
   12aec:	e0bb      	b.n	12c66 <__sfvwrite_r+0x22e>
   12aee:	6820      	ldr	r0, [r4, #0]
   12af0:	4652      	mov	r2, sl
   12af2:	4649      	mov	r1, r9
   12af4:	f7fc f820 	bl	eb38 <memmove>
   12af8:	68a3      	ldr	r3, [r4, #8]
   12afa:	1b5d      	subs	r5, r3, r5
   12afc:	60a5      	str	r5, [r4, #8]
   12afe:	003d      	movs	r5, r7
   12b00:	2700      	movs	r7, #0
   12b02:	6823      	ldr	r3, [r4, #0]
   12b04:	4453      	add	r3, sl
   12b06:	6023      	str	r3, [r4, #0]
   12b08:	4643      	mov	r3, r8
   12b0a:	689b      	ldr	r3, [r3, #8]
   12b0c:	44a9      	add	r9, r5
   12b0e:	1b5d      	subs	r5, r3, r5
   12b10:	4643      	mov	r3, r8
   12b12:	609d      	str	r5, [r3, #8]
   12b14:	d0c1      	beq.n	12a9a <__sfvwrite_r+0x62>
   12b16:	89a3      	ldrh	r3, [r4, #12]
   12b18:	2f00      	cmp	r7, #0
   12b1a:	d1d9      	bne.n	12ad0 <__sfvwrite_r+0x98>
   12b1c:	6832      	ldr	r2, [r6, #0]
   12b1e:	6877      	ldr	r7, [r6, #4]
   12b20:	4691      	mov	r9, r2
   12b22:	3608      	adds	r6, #8
   12b24:	e7d2      	b.n	12acc <__sfvwrite_r+0x94>
   12b26:	6833      	ldr	r3, [r6, #0]
   12b28:	6875      	ldr	r5, [r6, #4]
   12b2a:	469a      	mov	sl, r3
   12b2c:	3608      	adds	r6, #8
   12b2e:	e79f      	b.n	12a70 <__sfvwrite_r+0x38>
   12b30:	0021      	movs	r1, r4
   12b32:	9801      	ldr	r0, [sp, #4]
   12b34:	f7fb fa30 	bl	df98 <_fflush_r>
   12b38:	2800      	cmp	r0, #0
   12b3a:	d02f      	beq.n	12b9c <__sfvwrite_r+0x164>
   12b3c:	220c      	movs	r2, #12
   12b3e:	5ea3      	ldrsh	r3, [r4, r2]
   12b40:	2240      	movs	r2, #64	; 0x40
   12b42:	2001      	movs	r0, #1
   12b44:	4313      	orrs	r3, r2
   12b46:	81a3      	strh	r3, [r4, #12]
   12b48:	4240      	negs	r0, r0
   12b4a:	e7a7      	b.n	12a9c <__sfvwrite_r+0x64>
   12b4c:	2300      	movs	r3, #0
   12b4e:	2200      	movs	r2, #0
   12b50:	46b1      	mov	r9, r6
   12b52:	2700      	movs	r7, #0
   12b54:	001e      	movs	r6, r3
   12b56:	465b      	mov	r3, fp
   12b58:	2000      	movs	r0, #0
   12b5a:	4692      	mov	sl, r2
   12b5c:	9301      	str	r3, [sp, #4]
   12b5e:	2f00      	cmp	r7, #0
   12b60:	d027      	beq.n	12bb2 <__sfvwrite_r+0x17a>
   12b62:	2800      	cmp	r0, #0
   12b64:	d02f      	beq.n	12bc6 <__sfvwrite_r+0x18e>
   12b66:	0033      	movs	r3, r6
   12b68:	46bb      	mov	fp, r7
   12b6a:	429f      	cmp	r7, r3
   12b6c:	d900      	bls.n	12b70 <__sfvwrite_r+0x138>
   12b6e:	469b      	mov	fp, r3
   12b70:	6820      	ldr	r0, [r4, #0]
   12b72:	6922      	ldr	r2, [r4, #16]
   12b74:	6963      	ldr	r3, [r4, #20]
   12b76:	4290      	cmp	r0, r2
   12b78:	d904      	bls.n	12b84 <__sfvwrite_r+0x14c>
   12b7a:	68a2      	ldr	r2, [r4, #8]
   12b7c:	189d      	adds	r5, r3, r2
   12b7e:	45ab      	cmp	fp, r5
   12b80:	dd00      	ble.n	12b84 <__sfvwrite_r+0x14c>
   12b82:	e09e      	b.n	12cc2 <__sfvwrite_r+0x28a>
   12b84:	455b      	cmp	r3, fp
   12b86:	dc61      	bgt.n	12c4c <__sfvwrite_r+0x214>
   12b88:	6a65      	ldr	r5, [r4, #36]	; 0x24
   12b8a:	4652      	mov	r2, sl
   12b8c:	69e1      	ldr	r1, [r4, #28]
   12b8e:	9801      	ldr	r0, [sp, #4]
   12b90:	47a8      	blx	r5
   12b92:	1e05      	subs	r5, r0, #0
   12b94:	ddd2      	ble.n	12b3c <__sfvwrite_r+0x104>
   12b96:	2001      	movs	r0, #1
   12b98:	1b76      	subs	r6, r6, r5
   12b9a:	d0c9      	beq.n	12b30 <__sfvwrite_r+0xf8>
   12b9c:	4643      	mov	r3, r8
   12b9e:	689b      	ldr	r3, [r3, #8]
   12ba0:	44aa      	add	sl, r5
   12ba2:	1b7f      	subs	r7, r7, r5
   12ba4:	1b5d      	subs	r5, r3, r5
   12ba6:	4643      	mov	r3, r8
   12ba8:	609d      	str	r5, [r3, #8]
   12baa:	d100      	bne.n	12bae <__sfvwrite_r+0x176>
   12bac:	e775      	b.n	12a9a <__sfvwrite_r+0x62>
   12bae:	2f00      	cmp	r7, #0
   12bb0:	d1d7      	bne.n	12b62 <__sfvwrite_r+0x12a>
   12bb2:	464b      	mov	r3, r9
   12bb4:	681b      	ldr	r3, [r3, #0]
   12bb6:	469a      	mov	sl, r3
   12bb8:	464b      	mov	r3, r9
   12bba:	685f      	ldr	r7, [r3, #4]
   12bbc:	2308      	movs	r3, #8
   12bbe:	469c      	mov	ip, r3
   12bc0:	44e1      	add	r9, ip
   12bc2:	2f00      	cmp	r7, #0
   12bc4:	d0f5      	beq.n	12bb2 <__sfvwrite_r+0x17a>
   12bc6:	003a      	movs	r2, r7
   12bc8:	210a      	movs	r1, #10
   12bca:	4650      	mov	r0, sl
   12bcc:	f000 f906 	bl	12ddc <memchr>
   12bd0:	2800      	cmp	r0, #0
   12bd2:	d100      	bne.n	12bd6 <__sfvwrite_r+0x19e>
   12bd4:	e095      	b.n	12d02 <__sfvwrite_r+0x2ca>
   12bd6:	4653      	mov	r3, sl
   12bd8:	3001      	adds	r0, #1
   12bda:	1ac6      	subs	r6, r0, r3
   12bdc:	e7c3      	b.n	12b66 <__sfvwrite_r+0x12e>
   12bde:	6820      	ldr	r0, [r4, #0]
   12be0:	6923      	ldr	r3, [r4, #16]
   12be2:	4298      	cmp	r0, r3
   12be4:	d816      	bhi.n	12c14 <__sfvwrite_r+0x1dc>
   12be6:	6963      	ldr	r3, [r4, #20]
   12be8:	469a      	mov	sl, r3
   12bea:	42bb      	cmp	r3, r7
   12bec:	d812      	bhi.n	12c14 <__sfvwrite_r+0x1dc>
   12bee:	4b4c      	ldr	r3, [pc, #304]	; (12d20 <__sfvwrite_r+0x2e8>)
   12bf0:	0038      	movs	r0, r7
   12bf2:	429f      	cmp	r7, r3
   12bf4:	d900      	bls.n	12bf8 <__sfvwrite_r+0x1c0>
   12bf6:	484b      	ldr	r0, [pc, #300]	; (12d24 <__sfvwrite_r+0x2ec>)
   12bf8:	4651      	mov	r1, sl
   12bfa:	f7f1 fbb3 	bl	4364 <__divsi3>
   12bfe:	4653      	mov	r3, sl
   12c00:	6a65      	ldr	r5, [r4, #36]	; 0x24
   12c02:	4343      	muls	r3, r0
   12c04:	464a      	mov	r2, r9
   12c06:	4658      	mov	r0, fp
   12c08:	69e1      	ldr	r1, [r4, #28]
   12c0a:	47a8      	blx	r5
   12c0c:	1e05      	subs	r5, r0, #0
   12c0e:	dd95      	ble.n	12b3c <__sfvwrite_r+0x104>
   12c10:	1b7f      	subs	r7, r7, r5
   12c12:	e779      	b.n	12b08 <__sfvwrite_r+0xd0>
   12c14:	42bd      	cmp	r5, r7
   12c16:	d900      	bls.n	12c1a <__sfvwrite_r+0x1e2>
   12c18:	003d      	movs	r5, r7
   12c1a:	002a      	movs	r2, r5
   12c1c:	4649      	mov	r1, r9
   12c1e:	f7fb ff8b 	bl	eb38 <memmove>
   12c22:	68a3      	ldr	r3, [r4, #8]
   12c24:	6822      	ldr	r2, [r4, #0]
   12c26:	1b5b      	subs	r3, r3, r5
   12c28:	1952      	adds	r2, r2, r5
   12c2a:	60a3      	str	r3, [r4, #8]
   12c2c:	6022      	str	r2, [r4, #0]
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d1ee      	bne.n	12c10 <__sfvwrite_r+0x1d8>
   12c32:	0021      	movs	r1, r4
   12c34:	4658      	mov	r0, fp
   12c36:	f7fb f9af 	bl	df98 <_fflush_r>
   12c3a:	2800      	cmp	r0, #0
   12c3c:	d000      	beq.n	12c40 <__sfvwrite_r+0x208>
   12c3e:	e77d      	b.n	12b3c <__sfvwrite_r+0x104>
   12c40:	1b7f      	subs	r7, r7, r5
   12c42:	e761      	b.n	12b08 <__sfvwrite_r+0xd0>
   12c44:	003d      	movs	r5, r7
   12c46:	46ba      	mov	sl, r7
   12c48:	6820      	ldr	r0, [r4, #0]
   12c4a:	e751      	b.n	12af0 <__sfvwrite_r+0xb8>
   12c4c:	465a      	mov	r2, fp
   12c4e:	4651      	mov	r1, sl
   12c50:	f7fb ff72 	bl	eb38 <memmove>
   12c54:	465a      	mov	r2, fp
   12c56:	68a3      	ldr	r3, [r4, #8]
   12c58:	465d      	mov	r5, fp
   12c5a:	1a9b      	subs	r3, r3, r2
   12c5c:	60a3      	str	r3, [r4, #8]
   12c5e:	6823      	ldr	r3, [r4, #0]
   12c60:	445b      	add	r3, fp
   12c62:	6023      	str	r3, [r4, #0]
   12c64:	e797      	b.n	12b96 <__sfvwrite_r+0x15e>
   12c66:	6960      	ldr	r0, [r4, #20]
   12c68:	6822      	ldr	r2, [r4, #0]
   12c6a:	6921      	ldr	r1, [r4, #16]
   12c6c:	1a55      	subs	r5, r2, r1
   12c6e:	0042      	lsls	r2, r0, #1
   12c70:	1812      	adds	r2, r2, r0
   12c72:	0fd0      	lsrs	r0, r2, #31
   12c74:	1882      	adds	r2, r0, r2
   12c76:	1c68      	adds	r0, r5, #1
   12c78:	1052      	asrs	r2, r2, #1
   12c7a:	19c0      	adds	r0, r0, r7
   12c7c:	4692      	mov	sl, r2
   12c7e:	9501      	str	r5, [sp, #4]
   12c80:	4290      	cmp	r0, r2
   12c82:	d901      	bls.n	12c88 <__sfvwrite_r+0x250>
   12c84:	4682      	mov	sl, r0
   12c86:	0002      	movs	r2, r0
   12c88:	055b      	lsls	r3, r3, #21
   12c8a:	d529      	bpl.n	12ce0 <__sfvwrite_r+0x2a8>
   12c8c:	0011      	movs	r1, r2
   12c8e:	4658      	mov	r0, fp
   12c90:	f7fa ffd0 	bl	dc34 <_malloc_r>
   12c94:	1e05      	subs	r5, r0, #0
   12c96:	d037      	beq.n	12d08 <__sfvwrite_r+0x2d0>
   12c98:	9a01      	ldr	r2, [sp, #4]
   12c9a:	6921      	ldr	r1, [r4, #16]
   12c9c:	f7fb fefa 	bl	ea94 <memcpy>
   12ca0:	89a3      	ldrh	r3, [r4, #12]
   12ca2:	4a21      	ldr	r2, [pc, #132]	; (12d28 <__sfvwrite_r+0x2f0>)
   12ca4:	4013      	ands	r3, r2
   12ca6:	2280      	movs	r2, #128	; 0x80
   12ca8:	4313      	orrs	r3, r2
   12caa:	81a3      	strh	r3, [r4, #12]
   12cac:	4652      	mov	r2, sl
   12cae:	9b01      	ldr	r3, [sp, #4]
   12cb0:	6125      	str	r5, [r4, #16]
   12cb2:	18e8      	adds	r0, r5, r3
   12cb4:	1ad3      	subs	r3, r2, r3
   12cb6:	003d      	movs	r5, r7
   12cb8:	46ba      	mov	sl, r7
   12cba:	6020      	str	r0, [r4, #0]
   12cbc:	6162      	str	r2, [r4, #20]
   12cbe:	60a3      	str	r3, [r4, #8]
   12cc0:	e716      	b.n	12af0 <__sfvwrite_r+0xb8>
   12cc2:	4651      	mov	r1, sl
   12cc4:	002a      	movs	r2, r5
   12cc6:	f7fb ff37 	bl	eb38 <memmove>
   12cca:	6823      	ldr	r3, [r4, #0]
   12ccc:	0021      	movs	r1, r4
   12cce:	195b      	adds	r3, r3, r5
   12cd0:	9801      	ldr	r0, [sp, #4]
   12cd2:	6023      	str	r3, [r4, #0]
   12cd4:	f7fb f960 	bl	df98 <_fflush_r>
   12cd8:	2800      	cmp	r0, #0
   12cda:	d100      	bne.n	12cde <__sfvwrite_r+0x2a6>
   12cdc:	e75b      	b.n	12b96 <__sfvwrite_r+0x15e>
   12cde:	e72d      	b.n	12b3c <__sfvwrite_r+0x104>
   12ce0:	4658      	mov	r0, fp
   12ce2:	f7fa ffb3 	bl	dc4c <_realloc_r>
   12ce6:	1e05      	subs	r5, r0, #0
   12ce8:	d1e0      	bne.n	12cac <__sfvwrite_r+0x274>
   12cea:	6921      	ldr	r1, [r4, #16]
   12cec:	4658      	mov	r0, fp
   12cee:	f7fa ffc5 	bl	dc7c <_free_r>
   12cf2:	2280      	movs	r2, #128	; 0x80
   12cf4:	4659      	mov	r1, fp
   12cf6:	89a3      	ldrh	r3, [r4, #12]
   12cf8:	4393      	bics	r3, r2
   12cfa:	3a74      	subs	r2, #116	; 0x74
   12cfc:	b21b      	sxth	r3, r3
   12cfe:	600a      	str	r2, [r1, #0]
   12d00:	e71e      	b.n	12b40 <__sfvwrite_r+0x108>
   12d02:	1c7b      	adds	r3, r7, #1
   12d04:	001e      	movs	r6, r3
   12d06:	e72f      	b.n	12b68 <__sfvwrite_r+0x130>
   12d08:	230c      	movs	r3, #12
   12d0a:	465a      	mov	r2, fp
   12d0c:	6013      	str	r3, [r2, #0]
   12d0e:	220c      	movs	r2, #12
   12d10:	5ea3      	ldrsh	r3, [r4, r2]
   12d12:	e715      	b.n	12b40 <__sfvwrite_r+0x108>
   12d14:	2001      	movs	r0, #1
   12d16:	4240      	negs	r0, r0
   12d18:	e6c0      	b.n	12a9c <__sfvwrite_r+0x64>
   12d1a:	46c0      	nop			; (mov r8, r8)
   12d1c:	7ffffc00 	.word	0x7ffffc00
   12d20:	7ffffffe 	.word	0x7ffffffe
   12d24:	7fffffff 	.word	0x7fffffff
   12d28:	fffffb7f 	.word	0xfffffb7f

00012d2c <getenv>:
   12d2c:	b500      	push	{lr}
   12d2e:	4b04      	ldr	r3, [pc, #16]	; (12d40 <getenv+0x14>)
   12d30:	b083      	sub	sp, #12
   12d32:	0001      	movs	r1, r0
   12d34:	aa01      	add	r2, sp, #4
   12d36:	6818      	ldr	r0, [r3, #0]
   12d38:	f000 f804 	bl	12d44 <_findenv_r>
   12d3c:	b003      	add	sp, #12
   12d3e:	bd00      	pop	{pc}
   12d40:	0001737c 	.word	0x0001737c

00012d44 <_findenv_r>:
   12d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d46:	464f      	mov	r7, r9
   12d48:	4646      	mov	r6, r8
   12d4a:	46d6      	mov	lr, sl
   12d4c:	b5c0      	push	{r6, r7, lr}
   12d4e:	4690      	mov	r8, r2
   12d50:	0007      	movs	r7, r0
   12d52:	000e      	movs	r6, r1
   12d54:	f001 f9aa 	bl	140ac <__env_lock>
   12d58:	4b1d      	ldr	r3, [pc, #116]	; (12dd0 <_findenv_r+0x8c>)
   12d5a:	681d      	ldr	r5, [r3, #0]
   12d5c:	4699      	mov	r9, r3
   12d5e:	2d00      	cmp	r5, #0
   12d60:	d00a      	beq.n	12d78 <_findenv_r+0x34>
   12d62:	7833      	ldrb	r3, [r6, #0]
   12d64:	0034      	movs	r4, r6
   12d66:	2b00      	cmp	r3, #0
   12d68:	d104      	bne.n	12d74 <_findenv_r+0x30>
   12d6a:	e02f      	b.n	12dcc <_findenv_r+0x88>
   12d6c:	7863      	ldrb	r3, [r4, #1]
   12d6e:	3401      	adds	r4, #1
   12d70:	2b00      	cmp	r3, #0
   12d72:	d00a      	beq.n	12d8a <_findenv_r+0x46>
   12d74:	2b3d      	cmp	r3, #61	; 0x3d
   12d76:	d1f9      	bne.n	12d6c <_findenv_r+0x28>
   12d78:	0038      	movs	r0, r7
   12d7a:	f001 f99f 	bl	140bc <__env_unlock>
   12d7e:	2000      	movs	r0, #0
   12d80:	bce0      	pop	{r5, r6, r7}
   12d82:	46ba      	mov	sl, r7
   12d84:	46b1      	mov	r9, r6
   12d86:	46a8      	mov	r8, r5
   12d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d8a:	1ba4      	subs	r4, r4, r6
   12d8c:	6828      	ldr	r0, [r5, #0]
   12d8e:	2800      	cmp	r0, #0
   12d90:	d0f2      	beq.n	12d78 <_findenv_r+0x34>
   12d92:	0022      	movs	r2, r4
   12d94:	0031      	movs	r1, r6
   12d96:	f7fc fc7f 	bl	f698 <strncmp>
   12d9a:	2800      	cmp	r0, #0
   12d9c:	d105      	bne.n	12daa <_findenv_r+0x66>
   12d9e:	682b      	ldr	r3, [r5, #0]
   12da0:	191a      	adds	r2, r3, r4
   12da2:	5d1b      	ldrb	r3, [r3, r4]
   12da4:	4692      	mov	sl, r2
   12da6:	2b3d      	cmp	r3, #61	; 0x3d
   12da8:	d004      	beq.n	12db4 <_findenv_r+0x70>
   12daa:	6868      	ldr	r0, [r5, #4]
   12dac:	3504      	adds	r5, #4
   12dae:	2800      	cmp	r0, #0
   12db0:	d1ef      	bne.n	12d92 <_findenv_r+0x4e>
   12db2:	e7e1      	b.n	12d78 <_findenv_r+0x34>
   12db4:	464b      	mov	r3, r9
   12db6:	681b      	ldr	r3, [r3, #0]
   12db8:	0038      	movs	r0, r7
   12dba:	1aed      	subs	r5, r5, r3
   12dbc:	4643      	mov	r3, r8
   12dbe:	10ad      	asrs	r5, r5, #2
   12dc0:	601d      	str	r5, [r3, #0]
   12dc2:	f001 f97b 	bl	140bc <__env_unlock>
   12dc6:	4650      	mov	r0, sl
   12dc8:	3001      	adds	r0, #1
   12dca:	e7d9      	b.n	12d80 <_findenv_r+0x3c>
   12dcc:	2400      	movs	r4, #0
   12dce:	e7dd      	b.n	12d8c <_findenv_r+0x48>
   12dd0:	000177a8 	.word	0x000177a8

00012dd4 <_localeconv_r>:
   12dd4:	4800      	ldr	r0, [pc, #0]	; (12dd8 <_localeconv_r+0x4>)
   12dd6:	4770      	bx	lr
   12dd8:	0001789c 	.word	0x0001789c

00012ddc <memchr>:
   12ddc:	b570      	push	{r4, r5, r6, lr}
   12dde:	b2cc      	uxtb	r4, r1
   12de0:	0783      	lsls	r3, r0, #30
   12de2:	d00d      	beq.n	12e00 <memchr+0x24>
   12de4:	1e53      	subs	r3, r2, #1
   12de6:	2a00      	cmp	r2, #0
   12de8:	d00f      	beq.n	12e0a <memchr+0x2e>
   12dea:	2503      	movs	r5, #3
   12dec:	e004      	b.n	12df8 <memchr+0x1c>
   12dee:	3001      	adds	r0, #1
   12df0:	4228      	tst	r0, r5
   12df2:	d006      	beq.n	12e02 <memchr+0x26>
   12df4:	3b01      	subs	r3, #1
   12df6:	d308      	bcc.n	12e0a <memchr+0x2e>
   12df8:	7802      	ldrb	r2, [r0, #0]
   12dfa:	42a2      	cmp	r2, r4
   12dfc:	d1f7      	bne.n	12dee <memchr+0x12>
   12dfe:	bd70      	pop	{r4, r5, r6, pc}
   12e00:	0013      	movs	r3, r2
   12e02:	2b03      	cmp	r3, #3
   12e04:	d80c      	bhi.n	12e20 <memchr+0x44>
   12e06:	2b00      	cmp	r3, #0
   12e08:	d101      	bne.n	12e0e <memchr+0x32>
   12e0a:	2000      	movs	r0, #0
   12e0c:	e7f7      	b.n	12dfe <memchr+0x22>
   12e0e:	18c3      	adds	r3, r0, r3
   12e10:	e002      	b.n	12e18 <memchr+0x3c>
   12e12:	3001      	adds	r0, #1
   12e14:	4283      	cmp	r3, r0
   12e16:	d0f8      	beq.n	12e0a <memchr+0x2e>
   12e18:	7802      	ldrb	r2, [r0, #0]
   12e1a:	42a2      	cmp	r2, r4
   12e1c:	d1f9      	bne.n	12e12 <memchr+0x36>
   12e1e:	e7ee      	b.n	12dfe <memchr+0x22>
   12e20:	25ff      	movs	r5, #255	; 0xff
   12e22:	4029      	ands	r1, r5
   12e24:	020d      	lsls	r5, r1, #8
   12e26:	4329      	orrs	r1, r5
   12e28:	040d      	lsls	r5, r1, #16
   12e2a:	4e07      	ldr	r6, [pc, #28]	; (12e48 <memchr+0x6c>)
   12e2c:	430d      	orrs	r5, r1
   12e2e:	6802      	ldr	r2, [r0, #0]
   12e30:	4906      	ldr	r1, [pc, #24]	; (12e4c <memchr+0x70>)
   12e32:	406a      	eors	r2, r5
   12e34:	1851      	adds	r1, r2, r1
   12e36:	4391      	bics	r1, r2
   12e38:	4231      	tst	r1, r6
   12e3a:	d1e8      	bne.n	12e0e <memchr+0x32>
   12e3c:	3b04      	subs	r3, #4
   12e3e:	3004      	adds	r0, #4
   12e40:	2b03      	cmp	r3, #3
   12e42:	d8f4      	bhi.n	12e2e <memchr+0x52>
   12e44:	e7df      	b.n	12e06 <memchr+0x2a>
   12e46:	46c0      	nop			; (mov r8, r8)
   12e48:	80808080 	.word	0x80808080
   12e4c:	fefefeff 	.word	0xfefefeff

00012e50 <_putc_r>:
   12e50:	b570      	push	{r4, r5, r6, lr}
   12e52:	0005      	movs	r5, r0
   12e54:	000e      	movs	r6, r1
   12e56:	0014      	movs	r4, r2
   12e58:	2800      	cmp	r0, #0
   12e5a:	d002      	beq.n	12e62 <_putc_r+0x12>
   12e5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   12e5e:	2b00      	cmp	r3, #0
   12e60:	d01e      	beq.n	12ea0 <_putc_r+0x50>
   12e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12e64:	07db      	lsls	r3, r3, #31
   12e66:	d402      	bmi.n	12e6e <_putc_r+0x1e>
   12e68:	89a3      	ldrh	r3, [r4, #12]
   12e6a:	059b      	lsls	r3, r3, #22
   12e6c:	d522      	bpl.n	12eb4 <_putc_r+0x64>
   12e6e:	68a3      	ldr	r3, [r4, #8]
   12e70:	3b01      	subs	r3, #1
   12e72:	60a3      	str	r3, [r4, #8]
   12e74:	2b00      	cmp	r3, #0
   12e76:	da05      	bge.n	12e84 <_putc_r+0x34>
   12e78:	69a2      	ldr	r2, [r4, #24]
   12e7a:	4293      	cmp	r3, r2
   12e7c:	db13      	blt.n	12ea6 <_putc_r+0x56>
   12e7e:	b2f3      	uxtb	r3, r6
   12e80:	2b0a      	cmp	r3, #10
   12e82:	d010      	beq.n	12ea6 <_putc_r+0x56>
   12e84:	20ff      	movs	r0, #255	; 0xff
   12e86:	6823      	ldr	r3, [r4, #0]
   12e88:	1c5a      	adds	r2, r3, #1
   12e8a:	6022      	str	r2, [r4, #0]
   12e8c:	701e      	strb	r6, [r3, #0]
   12e8e:	4006      	ands	r6, r0
   12e90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12e92:	07db      	lsls	r3, r3, #31
   12e94:	d402      	bmi.n	12e9c <_putc_r+0x4c>
   12e96:	89a3      	ldrh	r3, [r4, #12]
   12e98:	059b      	lsls	r3, r3, #22
   12e9a:	d50f      	bpl.n	12ebc <_putc_r+0x6c>
   12e9c:	0030      	movs	r0, r6
   12e9e:	bd70      	pop	{r4, r5, r6, pc}
   12ea0:	f7fb f8f4 	bl	e08c <__sinit>
   12ea4:	e7dd      	b.n	12e62 <_putc_r+0x12>
   12ea6:	0031      	movs	r1, r6
   12ea8:	0022      	movs	r2, r4
   12eaa:	0028      	movs	r0, r5
   12eac:	f001 f82c 	bl	13f08 <__swbuf_r>
   12eb0:	0006      	movs	r6, r0
   12eb2:	e7ed      	b.n	12e90 <_putc_r+0x40>
   12eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12eb6:	f7fb fd53 	bl	e960 <__retarget_lock_acquire_recursive>
   12eba:	e7d8      	b.n	12e6e <_putc_r+0x1e>
   12ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12ebe:	f7fb fd51 	bl	e964 <__retarget_lock_release_recursive>
   12ec2:	e7eb      	b.n	12e9c <_putc_r+0x4c>

00012ec4 <frexp>:
   12ec4:	b570      	push	{r4, r5, r6, lr}
   12ec6:	0014      	movs	r4, r2
   12ec8:	2500      	movs	r5, #0
   12eca:	6025      	str	r5, [r4, #0]
   12ecc:	4d10      	ldr	r5, [pc, #64]	; (12f10 <frexp+0x4c>)
   12ece:	004b      	lsls	r3, r1, #1
   12ed0:	000a      	movs	r2, r1
   12ed2:	085b      	lsrs	r3, r3, #1
   12ed4:	42ab      	cmp	r3, r5
   12ed6:	dc19      	bgt.n	12f0c <frexp+0x48>
   12ed8:	001d      	movs	r5, r3
   12eda:	4305      	orrs	r5, r0
   12edc:	d016      	beq.n	12f0c <frexp+0x48>
   12ede:	4e0d      	ldr	r6, [pc, #52]	; (12f14 <frexp+0x50>)
   12ee0:	2500      	movs	r5, #0
   12ee2:	4231      	tst	r1, r6
   12ee4:	d107      	bne.n	12ef6 <frexp+0x32>
   12ee6:	2200      	movs	r2, #0
   12ee8:	4b0b      	ldr	r3, [pc, #44]	; (12f18 <frexp+0x54>)
   12eea:	f7f2 ff5d 	bl	5da8 <__aeabi_dmul>
   12eee:	000a      	movs	r2, r1
   12ef0:	004b      	lsls	r3, r1, #1
   12ef2:	085b      	lsrs	r3, r3, #1
   12ef4:	3d36      	subs	r5, #54	; 0x36
   12ef6:	4e09      	ldr	r6, [pc, #36]	; (12f1c <frexp+0x58>)
   12ef8:	151b      	asrs	r3, r3, #20
   12efa:	46b4      	mov	ip, r6
   12efc:	4463      	add	r3, ip
   12efe:	195b      	adds	r3, r3, r5
   12f00:	6023      	str	r3, [r4, #0]
   12f02:	4b07      	ldr	r3, [pc, #28]	; (12f20 <frexp+0x5c>)
   12f04:	401a      	ands	r2, r3
   12f06:	4b07      	ldr	r3, [pc, #28]	; (12f24 <frexp+0x60>)
   12f08:	4313      	orrs	r3, r2
   12f0a:	0019      	movs	r1, r3
   12f0c:	bd70      	pop	{r4, r5, r6, pc}
   12f0e:	46c0      	nop			; (mov r8, r8)
   12f10:	7fefffff 	.word	0x7fefffff
   12f14:	7ff00000 	.word	0x7ff00000
   12f18:	43500000 	.word	0x43500000
   12f1c:	fffffc02 	.word	0xfffffc02
   12f20:	800fffff 	.word	0x800fffff
   12f24:	3fe00000 	.word	0x3fe00000

00012f28 <__ssprint_r>:
   12f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f2a:	464e      	mov	r6, r9
   12f2c:	4645      	mov	r5, r8
   12f2e:	46de      	mov	lr, fp
   12f30:	4657      	mov	r7, sl
   12f32:	b5e0      	push	{r5, r6, r7, lr}
   12f34:	6893      	ldr	r3, [r2, #8]
   12f36:	b083      	sub	sp, #12
   12f38:	000d      	movs	r5, r1
   12f3a:	4691      	mov	r9, r2
   12f3c:	9001      	str	r0, [sp, #4]
   12f3e:	2b00      	cmp	r3, #0
   12f40:	d06b      	beq.n	1301a <__ssprint_r+0xf2>
   12f42:	6817      	ldr	r7, [r2, #0]
   12f44:	6808      	ldr	r0, [r1, #0]
   12f46:	688c      	ldr	r4, [r1, #8]
   12f48:	e044      	b.n	12fd4 <__ssprint_r+0xac>
   12f4a:	2290      	movs	r2, #144	; 0x90
   12f4c:	89ab      	ldrh	r3, [r5, #12]
   12f4e:	00d2      	lsls	r2, r2, #3
   12f50:	4213      	tst	r3, r2
   12f52:	d02e      	beq.n	12fb2 <__ssprint_r+0x8a>
   12f54:	6929      	ldr	r1, [r5, #16]
   12f56:	1a42      	subs	r2, r0, r1
   12f58:	4693      	mov	fp, r2
   12f5a:	6968      	ldr	r0, [r5, #20]
   12f5c:	0042      	lsls	r2, r0, #1
   12f5e:	1812      	adds	r2, r2, r0
   12f60:	0fd0      	lsrs	r0, r2, #31
   12f62:	1882      	adds	r2, r0, r2
   12f64:	1c70      	adds	r0, r6, #1
   12f66:	1052      	asrs	r2, r2, #1
   12f68:	4458      	add	r0, fp
   12f6a:	4690      	mov	r8, r2
   12f6c:	4290      	cmp	r0, r2
   12f6e:	d901      	bls.n	12f74 <__ssprint_r+0x4c>
   12f70:	4680      	mov	r8, r0
   12f72:	0002      	movs	r2, r0
   12f74:	2080      	movs	r0, #128	; 0x80
   12f76:	00c0      	lsls	r0, r0, #3
   12f78:	4203      	tst	r3, r0
   12f7a:	d037      	beq.n	12fec <__ssprint_r+0xc4>
   12f7c:	0011      	movs	r1, r2
   12f7e:	9801      	ldr	r0, [sp, #4]
   12f80:	f7fa fe58 	bl	dc34 <_malloc_r>
   12f84:	1e04      	subs	r4, r0, #0
   12f86:	d053      	beq.n	13030 <__ssprint_r+0x108>
   12f88:	465a      	mov	r2, fp
   12f8a:	6929      	ldr	r1, [r5, #16]
   12f8c:	f7fb fd82 	bl	ea94 <memcpy>
   12f90:	89ab      	ldrh	r3, [r5, #12]
   12f92:	4a29      	ldr	r2, [pc, #164]	; (13038 <__ssprint_r+0x110>)
   12f94:	4013      	ands	r3, r2
   12f96:	2280      	movs	r2, #128	; 0x80
   12f98:	4313      	orrs	r3, r2
   12f9a:	81ab      	strh	r3, [r5, #12]
   12f9c:	4643      	mov	r3, r8
   12f9e:	0020      	movs	r0, r4
   12fa0:	465a      	mov	r2, fp
   12fa2:	612c      	str	r4, [r5, #16]
   12fa4:	46b0      	mov	r8, r6
   12fa6:	0034      	movs	r4, r6
   12fa8:	4458      	add	r0, fp
   12faa:	616b      	str	r3, [r5, #20]
   12fac:	1a9b      	subs	r3, r3, r2
   12fae:	6028      	str	r0, [r5, #0]
   12fb0:	60ab      	str	r3, [r5, #8]
   12fb2:	4642      	mov	r2, r8
   12fb4:	4651      	mov	r1, sl
   12fb6:	f7fb fdbf 	bl	eb38 <memmove>
   12fba:	68ab      	ldr	r3, [r5, #8]
   12fbc:	1b1c      	subs	r4, r3, r4
   12fbe:	682b      	ldr	r3, [r5, #0]
   12fc0:	60ac      	str	r4, [r5, #8]
   12fc2:	4443      	add	r3, r8
   12fc4:	602b      	str	r3, [r5, #0]
   12fc6:	0018      	movs	r0, r3
   12fc8:	464b      	mov	r3, r9
   12fca:	689b      	ldr	r3, [r3, #8]
   12fcc:	1b9e      	subs	r6, r3, r6
   12fce:	464b      	mov	r3, r9
   12fd0:	609e      	str	r6, [r3, #8]
   12fd2:	d022      	beq.n	1301a <__ssprint_r+0xf2>
   12fd4:	683b      	ldr	r3, [r7, #0]
   12fd6:	687e      	ldr	r6, [r7, #4]
   12fd8:	469a      	mov	sl, r3
   12fda:	3708      	adds	r7, #8
   12fdc:	2e00      	cmp	r6, #0
   12fde:	d0f9      	beq.n	12fd4 <__ssprint_r+0xac>
   12fe0:	46a0      	mov	r8, r4
   12fe2:	42b4      	cmp	r4, r6
   12fe4:	d9b1      	bls.n	12f4a <__ssprint_r+0x22>
   12fe6:	0034      	movs	r4, r6
   12fe8:	46b0      	mov	r8, r6
   12fea:	e7e2      	b.n	12fb2 <__ssprint_r+0x8a>
   12fec:	9801      	ldr	r0, [sp, #4]
   12fee:	f7fa fe2d 	bl	dc4c <_realloc_r>
   12ff2:	1e04      	subs	r4, r0, #0
   12ff4:	d1d2      	bne.n	12f9c <__ssprint_r+0x74>
   12ff6:	9c01      	ldr	r4, [sp, #4]
   12ff8:	6929      	ldr	r1, [r5, #16]
   12ffa:	0020      	movs	r0, r4
   12ffc:	f7fa fe3e 	bl	dc7c <_free_r>
   13000:	230c      	movs	r3, #12
   13002:	6023      	str	r3, [r4, #0]
   13004:	2240      	movs	r2, #64	; 0x40
   13006:	89ab      	ldrh	r3, [r5, #12]
   13008:	2001      	movs	r0, #1
   1300a:	4313      	orrs	r3, r2
   1300c:	81ab      	strh	r3, [r5, #12]
   1300e:	464a      	mov	r2, r9
   13010:	2300      	movs	r3, #0
   13012:	4240      	negs	r0, r0
   13014:	6093      	str	r3, [r2, #8]
   13016:	6053      	str	r3, [r2, #4]
   13018:	e003      	b.n	13022 <__ssprint_r+0xfa>
   1301a:	2300      	movs	r3, #0
   1301c:	464a      	mov	r2, r9
   1301e:	2000      	movs	r0, #0
   13020:	6053      	str	r3, [r2, #4]
   13022:	b003      	add	sp, #12
   13024:	bcf0      	pop	{r4, r5, r6, r7}
   13026:	46bb      	mov	fp, r7
   13028:	46b2      	mov	sl, r6
   1302a:	46a9      	mov	r9, r5
   1302c:	46a0      	mov	r8, r4
   1302e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13030:	230c      	movs	r3, #12
   13032:	9a01      	ldr	r2, [sp, #4]
   13034:	6013      	str	r3, [r2, #0]
   13036:	e7e5      	b.n	13004 <__ssprint_r+0xdc>
   13038:	fffffb7f 	.word	0xfffffb7f

0001303c <__sprint_r.part.0>:
   1303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1303e:	464e      	mov	r6, r9
   13040:	4645      	mov	r5, r8
   13042:	46de      	mov	lr, fp
   13044:	4657      	mov	r7, sl
   13046:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13048:	b5e0      	push	{r5, r6, r7, lr}
   1304a:	4691      	mov	r9, r2
   1304c:	0006      	movs	r6, r0
   1304e:	000d      	movs	r5, r1
   13050:	049b      	lsls	r3, r3, #18
   13052:	d533      	bpl.n	130bc <__sprint_r.part.0+0x80>
   13054:	6813      	ldr	r3, [r2, #0]
   13056:	469a      	mov	sl, r3
   13058:	6893      	ldr	r3, [r2, #8]
   1305a:	2b00      	cmp	r3, #0
   1305c:	d02c      	beq.n	130b8 <__sprint_r.part.0+0x7c>
   1305e:	4652      	mov	r2, sl
   13060:	6812      	ldr	r2, [r2, #0]
   13062:	4690      	mov	r8, r2
   13064:	4652      	mov	r2, sl
   13066:	6852      	ldr	r2, [r2, #4]
   13068:	4693      	mov	fp, r2
   1306a:	0897      	lsrs	r7, r2, #2
   1306c:	d019      	beq.n	130a2 <__sprint_r.part.0+0x66>
   1306e:	2400      	movs	r4, #0
   13070:	e002      	b.n	13078 <__sprint_r.part.0+0x3c>
   13072:	3401      	adds	r4, #1
   13074:	42a7      	cmp	r7, r4
   13076:	d012      	beq.n	1309e <__sprint_r.part.0+0x62>
   13078:	4642      	mov	r2, r8
   1307a:	00a3      	lsls	r3, r4, #2
   1307c:	58d1      	ldr	r1, [r2, r3]
   1307e:	0030      	movs	r0, r6
   13080:	002a      	movs	r2, r5
   13082:	f001 f86f 	bl	14164 <_fputwc_r>
   13086:	1c43      	adds	r3, r0, #1
   13088:	d1f3      	bne.n	13072 <__sprint_r.part.0+0x36>
   1308a:	464a      	mov	r2, r9
   1308c:	2300      	movs	r3, #0
   1308e:	6093      	str	r3, [r2, #8]
   13090:	6053      	str	r3, [r2, #4]
   13092:	bcf0      	pop	{r4, r5, r6, r7}
   13094:	46bb      	mov	fp, r7
   13096:	46b2      	mov	sl, r6
   13098:	46a9      	mov	r9, r5
   1309a:	46a0      	mov	r8, r4
   1309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1309e:	464b      	mov	r3, r9
   130a0:	689b      	ldr	r3, [r3, #8]
   130a2:	465a      	mov	r2, fp
   130a4:	2103      	movs	r1, #3
   130a6:	438a      	bics	r2, r1
   130a8:	1a9b      	subs	r3, r3, r2
   130aa:	464a      	mov	r2, r9
   130ac:	6093      	str	r3, [r2, #8]
   130ae:	2208      	movs	r2, #8
   130b0:	4694      	mov	ip, r2
   130b2:	44e2      	add	sl, ip
   130b4:	2b00      	cmp	r3, #0
   130b6:	d1d2      	bne.n	1305e <__sprint_r.part.0+0x22>
   130b8:	2000      	movs	r0, #0
   130ba:	e7e6      	b.n	1308a <__sprint_r.part.0+0x4e>
   130bc:	f7ff fcbc 	bl	12a38 <__sfvwrite_r>
   130c0:	e7e3      	b.n	1308a <__sprint_r.part.0+0x4e>
   130c2:	46c0      	nop			; (mov r8, r8)

000130c4 <_vfiprintf_r>:
   130c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   130c6:	46de      	mov	lr, fp
   130c8:	4657      	mov	r7, sl
   130ca:	464e      	mov	r6, r9
   130cc:	4645      	mov	r5, r8
   130ce:	b5e0      	push	{r5, r6, r7, lr}
   130d0:	b0bf      	sub	sp, #252	; 0xfc
   130d2:	468a      	mov	sl, r1
   130d4:	4693      	mov	fp, r2
   130d6:	001c      	movs	r4, r3
   130d8:	9001      	str	r0, [sp, #4]
   130da:	9308      	str	r3, [sp, #32]
   130dc:	2800      	cmp	r0, #0
   130de:	d004      	beq.n	130ea <_vfiprintf_r+0x26>
   130e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   130e2:	9302      	str	r3, [sp, #8]
   130e4:	2b00      	cmp	r3, #0
   130e6:	d100      	bne.n	130ea <_vfiprintf_r+0x26>
   130e8:	e227      	b.n	1353a <_vfiprintf_r+0x476>
   130ea:	4653      	mov	r3, sl
   130ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   130ee:	07db      	lsls	r3, r3, #31
   130f0:	d500      	bpl.n	130f4 <_vfiprintf_r+0x30>
   130f2:	e137      	b.n	13364 <_vfiprintf_r+0x2a0>
   130f4:	4653      	mov	r3, sl
   130f6:	210c      	movs	r1, #12
   130f8:	5e59      	ldrsh	r1, [r3, r1]
   130fa:	4653      	mov	r3, sl
   130fc:	899a      	ldrh	r2, [r3, #12]
   130fe:	0593      	lsls	r3, r2, #22
   13100:	d400      	bmi.n	13104 <_vfiprintf_r+0x40>
   13102:	e12b      	b.n	1335c <_vfiprintf_r+0x298>
   13104:	2380      	movs	r3, #128	; 0x80
   13106:	019b      	lsls	r3, r3, #6
   13108:	421a      	tst	r2, r3
   1310a:	d109      	bne.n	13120 <_vfiprintf_r+0x5c>
   1310c:	430b      	orrs	r3, r1
   1310e:	4652      	mov	r2, sl
   13110:	4651      	mov	r1, sl
   13112:	8193      	strh	r3, [r2, #12]
   13114:	6e49      	ldr	r1, [r1, #100]	; 0x64
   13116:	4a96      	ldr	r2, [pc, #600]	; (13370 <_vfiprintf_r+0x2ac>)
   13118:	400a      	ands	r2, r1
   1311a:	4651      	mov	r1, sl
   1311c:	664a      	str	r2, [r1, #100]	; 0x64
   1311e:	b29a      	uxth	r2, r3
   13120:	0713      	lsls	r3, r2, #28
   13122:	d53d      	bpl.n	131a0 <_vfiprintf_r+0xdc>
   13124:	4653      	mov	r3, sl
   13126:	691b      	ldr	r3, [r3, #16]
   13128:	2b00      	cmp	r3, #0
   1312a:	d039      	beq.n	131a0 <_vfiprintf_r+0xdc>
   1312c:	231a      	movs	r3, #26
   1312e:	4013      	ands	r3, r2
   13130:	2b0a      	cmp	r3, #10
   13132:	d043      	beq.n	131bc <_vfiprintf_r+0xf8>
   13134:	ab15      	add	r3, sp, #84	; 0x54
   13136:	9312      	str	r3, [sp, #72]	; 0x48
   13138:	2300      	movs	r3, #0
   1313a:	465d      	mov	r5, fp
   1313c:	46d3      	mov	fp, sl
   1313e:	9314      	str	r3, [sp, #80]	; 0x50
   13140:	9313      	str	r3, [sp, #76]	; 0x4c
   13142:	ae15      	add	r6, sp, #84	; 0x54
   13144:	930c      	str	r3, [sp, #48]	; 0x30
   13146:	930b      	str	r3, [sp, #44]	; 0x2c
   13148:	930e      	str	r3, [sp, #56]	; 0x38
   1314a:	930d      	str	r3, [sp, #52]	; 0x34
   1314c:	9305      	str	r3, [sp, #20]
   1314e:	782b      	ldrb	r3, [r5, #0]
   13150:	2b00      	cmp	r3, #0
   13152:	d100      	bne.n	13156 <_vfiprintf_r+0x92>
   13154:	e1a4      	b.n	134a0 <_vfiprintf_r+0x3dc>
   13156:	002c      	movs	r4, r5
   13158:	e004      	b.n	13164 <_vfiprintf_r+0xa0>
   1315a:	7863      	ldrb	r3, [r4, #1]
   1315c:	3401      	adds	r4, #1
   1315e:	2b00      	cmp	r3, #0
   13160:	d100      	bne.n	13164 <_vfiprintf_r+0xa0>
   13162:	e0d9      	b.n	13318 <_vfiprintf_r+0x254>
   13164:	2b25      	cmp	r3, #37	; 0x25
   13166:	d1f8      	bne.n	1315a <_vfiprintf_r+0x96>
   13168:	1b67      	subs	r7, r4, r5
   1316a:	42ac      	cmp	r4, r5
   1316c:	d000      	beq.n	13170 <_vfiprintf_r+0xac>
   1316e:	e0d7      	b.n	13320 <_vfiprintf_r+0x25c>
   13170:	7823      	ldrb	r3, [r4, #0]
   13172:	2b00      	cmp	r3, #0
   13174:	d100      	bne.n	13178 <_vfiprintf_r+0xb4>
   13176:	e193      	b.n	134a0 <_vfiprintf_r+0x3dc>
   13178:	2300      	movs	r3, #0
   1317a:	aa10      	add	r2, sp, #64	; 0x40
   1317c:	70d3      	strb	r3, [r2, #3]
   1317e:	3b01      	subs	r3, #1
   13180:	9302      	str	r3, [sp, #8]
   13182:	2300      	movs	r3, #0
   13184:	2700      	movs	r7, #0
   13186:	7862      	ldrb	r2, [r4, #1]
   13188:	1c65      	adds	r5, r4, #1
   1318a:	9304      	str	r3, [sp, #16]
   1318c:	3501      	adds	r5, #1
   1318e:	0013      	movs	r3, r2
   13190:	3b20      	subs	r3, #32
   13192:	2b5a      	cmp	r3, #90	; 0x5a
   13194:	d900      	bls.n	13198 <_vfiprintf_r+0xd4>
   13196:	e0f1      	b.n	1337c <_vfiprintf_r+0x2b8>
   13198:	4976      	ldr	r1, [pc, #472]	; (13374 <_vfiprintf_r+0x2b0>)
   1319a:	009b      	lsls	r3, r3, #2
   1319c:	58cb      	ldr	r3, [r1, r3]
   1319e:	469f      	mov	pc, r3
   131a0:	4651      	mov	r1, sl
   131a2:	9801      	ldr	r0, [sp, #4]
   131a4:	f000 ff14 	bl	13fd0 <__swsetup_r>
   131a8:	4653      	mov	r3, sl
   131aa:	2800      	cmp	r0, #0
   131ac:	d001      	beq.n	131b2 <_vfiprintf_r+0xee>
   131ae:	f000 fe44 	bl	13e3a <_vfiprintf_r+0xd76>
   131b2:	899a      	ldrh	r2, [r3, #12]
   131b4:	231a      	movs	r3, #26
   131b6:	4013      	ands	r3, r2
   131b8:	2b0a      	cmp	r3, #10
   131ba:	d1bb      	bne.n	13134 <_vfiprintf_r+0x70>
   131bc:	4653      	mov	r3, sl
   131be:	210e      	movs	r1, #14
   131c0:	5e5b      	ldrsh	r3, [r3, r1]
   131c2:	2b00      	cmp	r3, #0
   131c4:	dbb6      	blt.n	13134 <_vfiprintf_r+0x70>
   131c6:	4653      	mov	r3, sl
   131c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   131ca:	07db      	lsls	r3, r3, #31
   131cc:	d403      	bmi.n	131d6 <_vfiprintf_r+0x112>
   131ce:	0593      	lsls	r3, r2, #22
   131d0:	d401      	bmi.n	131d6 <_vfiprintf_r+0x112>
   131d2:	f000 fe08 	bl	13de6 <_vfiprintf_r+0xd22>
   131d6:	0023      	movs	r3, r4
   131d8:	465a      	mov	r2, fp
   131da:	4651      	mov	r1, sl
   131dc:	9801      	ldr	r0, [sp, #4]
   131de:	f000 fe4d 	bl	13e7c <__sbprintf>
   131e2:	9005      	str	r0, [sp, #20]
   131e4:	e174      	b.n	134d0 <_vfiprintf_r+0x40c>
   131e6:	9b01      	ldr	r3, [sp, #4]
   131e8:	0018      	movs	r0, r3
   131ea:	4698      	mov	r8, r3
   131ec:	f7ff fdf2 	bl	12dd4 <_localeconv_r>
   131f0:	6843      	ldr	r3, [r0, #4]
   131f2:	0018      	movs	r0, r3
   131f4:	930d      	str	r3, [sp, #52]	; 0x34
   131f6:	f7fc fa21 	bl	f63c <strlen>
   131fa:	900e      	str	r0, [sp, #56]	; 0x38
   131fc:	0004      	movs	r4, r0
   131fe:	4640      	mov	r0, r8
   13200:	f7ff fde8 	bl	12dd4 <_localeconv_r>
   13204:	6883      	ldr	r3, [r0, #8]
   13206:	930b      	str	r3, [sp, #44]	; 0x2c
   13208:	2c00      	cmp	r4, #0
   1320a:	d001      	beq.n	13210 <_vfiprintf_r+0x14c>
   1320c:	f000 fcf7 	bl	13bfe <_vfiprintf_r+0xb3a>
   13210:	782a      	ldrb	r2, [r5, #0]
   13212:	e7bb      	b.n	1318c <_vfiprintf_r+0xc8>
   13214:	2320      	movs	r3, #32
   13216:	782a      	ldrb	r2, [r5, #0]
   13218:	431f      	orrs	r7, r3
   1321a:	e7b7      	b.n	1318c <_vfiprintf_r+0xc8>
   1321c:	2310      	movs	r3, #16
   1321e:	431f      	orrs	r7, r3
   13220:	9a08      	ldr	r2, [sp, #32]
   13222:	06bb      	lsls	r3, r7, #26
   13224:	d400      	bmi.n	13228 <_vfiprintf_r+0x164>
   13226:	e17b      	b.n	13520 <_vfiprintf_r+0x45c>
   13228:	2307      	movs	r3, #7
   1322a:	3207      	adds	r2, #7
   1322c:	439a      	bics	r2, r3
   1322e:	3301      	adds	r3, #1
   13230:	469c      	mov	ip, r3
   13232:	4494      	add	ip, r2
   13234:	4663      	mov	r3, ip
   13236:	9308      	str	r3, [sp, #32]
   13238:	6853      	ldr	r3, [r2, #4]
   1323a:	6812      	ldr	r2, [r2, #0]
   1323c:	9307      	str	r3, [sp, #28]
   1323e:	9206      	str	r2, [sp, #24]
   13240:	2b00      	cmp	r3, #0
   13242:	da01      	bge.n	13248 <_vfiprintf_r+0x184>
   13244:	f000 fc89 	bl	13b5a <_vfiprintf_r+0xa96>
   13248:	9b02      	ldr	r3, [sp, #8]
   1324a:	46b9      	mov	r9, r7
   1324c:	3301      	adds	r3, #1
   1324e:	d009      	beq.n	13264 <_vfiprintf_r+0x1a0>
   13250:	2380      	movs	r3, #128	; 0x80
   13252:	439f      	bics	r7, r3
   13254:	9a06      	ldr	r2, [sp, #24]
   13256:	9b07      	ldr	r3, [sp, #28]
   13258:	0011      	movs	r1, r2
   1325a:	46b9      	mov	r9, r7
   1325c:	4319      	orrs	r1, r3
   1325e:	d101      	bne.n	13264 <_vfiprintf_r+0x1a0>
   13260:	f000 fc4f 	bl	13b02 <_vfiprintf_r+0xa3e>
   13264:	9b06      	ldr	r3, [sp, #24]
   13266:	9c07      	ldr	r4, [sp, #28]
   13268:	2c00      	cmp	r4, #0
   1326a:	d000      	beq.n	1326e <_vfiprintf_r+0x1aa>
   1326c:	e348      	b.n	13900 <_vfiprintf_r+0x83c>
   1326e:	2b09      	cmp	r3, #9
   13270:	d900      	bls.n	13274 <_vfiprintf_r+0x1b0>
   13272:	e345      	b.n	13900 <_vfiprintf_r+0x83c>
   13274:	2263      	movs	r2, #99	; 0x63
   13276:	9b06      	ldr	r3, [sp, #24]
   13278:	a925      	add	r1, sp, #148	; 0x94
   1327a:	3330      	adds	r3, #48	; 0x30
   1327c:	548b      	strb	r3, [r1, r2]
   1327e:	2301      	movs	r3, #1
   13280:	9303      	str	r3, [sp, #12]
   13282:	ab10      	add	r3, sp, #64	; 0x40
   13284:	24b7      	movs	r4, #183	; 0xb7
   13286:	469c      	mov	ip, r3
   13288:	464f      	mov	r7, r9
   1328a:	4464      	add	r4, ip
   1328c:	9b02      	ldr	r3, [sp, #8]
   1328e:	9a03      	ldr	r2, [sp, #12]
   13290:	4699      	mov	r9, r3
   13292:	4293      	cmp	r3, r2
   13294:	da00      	bge.n	13298 <_vfiprintf_r+0x1d4>
   13296:	4691      	mov	r9, r2
   13298:	ab10      	add	r3, sp, #64	; 0x40
   1329a:	78db      	ldrb	r3, [r3, #3]
   1329c:	1e5a      	subs	r2, r3, #1
   1329e:	4193      	sbcs	r3, r2
   132a0:	4499      	add	r9, r3
   132a2:	e078      	b.n	13396 <_vfiprintf_r+0x2d2>
   132a4:	2310      	movs	r3, #16
   132a6:	431f      	orrs	r7, r3
   132a8:	06bb      	lsls	r3, r7, #26
   132aa:	d400      	bmi.n	132ae <_vfiprintf_r+0x1ea>
   132ac:	e12a      	b.n	13504 <_vfiprintf_r+0x440>
   132ae:	2307      	movs	r3, #7
   132b0:	9a08      	ldr	r2, [sp, #32]
   132b2:	3207      	adds	r2, #7
   132b4:	439a      	bics	r2, r3
   132b6:	ca18      	ldmia	r2!, {r3, r4}
   132b8:	9306      	str	r3, [sp, #24]
   132ba:	9407      	str	r4, [sp, #28]
   132bc:	9208      	str	r2, [sp, #32]
   132be:	4b2e      	ldr	r3, [pc, #184]	; (13378 <_vfiprintf_r+0x2b4>)
   132c0:	401f      	ands	r7, r3
   132c2:	46b9      	mov	r9, r7
   132c4:	2300      	movs	r3, #0
   132c6:	2200      	movs	r2, #0
   132c8:	a910      	add	r1, sp, #64	; 0x40
   132ca:	70ca      	strb	r2, [r1, #3]
   132cc:	9802      	ldr	r0, [sp, #8]
   132ce:	1c42      	adds	r2, r0, #1
   132d0:	d100      	bne.n	132d4 <_vfiprintf_r+0x210>
   132d2:	e1e5      	b.n	136a0 <_vfiprintf_r+0x5dc>
   132d4:	2280      	movs	r2, #128	; 0x80
   132d6:	464f      	mov	r7, r9
   132d8:	4397      	bics	r7, r2
   132da:	9906      	ldr	r1, [sp, #24]
   132dc:	9a07      	ldr	r2, [sp, #28]
   132de:	000c      	movs	r4, r1
   132e0:	4314      	orrs	r4, r2
   132e2:	d000      	beq.n	132e6 <_vfiprintf_r+0x222>
   132e4:	e1db      	b.n	1369e <_vfiprintf_r+0x5da>
   132e6:	2800      	cmp	r0, #0
   132e8:	d001      	beq.n	132ee <_vfiprintf_r+0x22a>
   132ea:	f000 fd0e 	bl	13d0a <_vfiprintf_r+0xc46>
   132ee:	2b00      	cmp	r3, #0
   132f0:	d001      	beq.n	132f6 <_vfiprintf_r+0x232>
   132f2:	f000 fc0b 	bl	13b0c <_vfiprintf_r+0xa48>
   132f6:	464a      	mov	r2, r9
   132f8:	3301      	adds	r3, #1
   132fa:	401a      	ands	r2, r3
   132fc:	9203      	str	r2, [sp, #12]
   132fe:	464a      	mov	r2, r9
   13300:	ac3e      	add	r4, sp, #248	; 0xf8
   13302:	4213      	tst	r3, r2
   13304:	d0c2      	beq.n	1328c <_vfiprintf_r+0x1c8>
   13306:	2130      	movs	r1, #48	; 0x30
   13308:	3362      	adds	r3, #98	; 0x62
   1330a:	aa25      	add	r2, sp, #148	; 0x94
   1330c:	54d1      	strb	r1, [r2, r3]
   1330e:	ab10      	add	r3, sp, #64	; 0x40
   13310:	24b7      	movs	r4, #183	; 0xb7
   13312:	469c      	mov	ip, r3
   13314:	4464      	add	r4, ip
   13316:	e7b9      	b.n	1328c <_vfiprintf_r+0x1c8>
   13318:	1b67      	subs	r7, r4, r5
   1331a:	42ac      	cmp	r4, r5
   1331c:	d100      	bne.n	13320 <_vfiprintf_r+0x25c>
   1331e:	e0bf      	b.n	134a0 <_vfiprintf_r+0x3dc>
   13320:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13322:	6035      	str	r5, [r6, #0]
   13324:	18fa      	adds	r2, r7, r3
   13326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13328:	6077      	str	r7, [r6, #4]
   1332a:	9302      	str	r3, [sp, #8]
   1332c:	3301      	adds	r3, #1
   1332e:	9214      	str	r2, [sp, #80]	; 0x50
   13330:	9313      	str	r3, [sp, #76]	; 0x4c
   13332:	3608      	adds	r6, #8
   13334:	2b07      	cmp	r3, #7
   13336:	dd0b      	ble.n	13350 <_vfiprintf_r+0x28c>
   13338:	2a00      	cmp	r2, #0
   1333a:	d100      	bne.n	1333e <_vfiprintf_r+0x27a>
   1333c:	e3de      	b.n	13afc <_vfiprintf_r+0xa38>
   1333e:	4659      	mov	r1, fp
   13340:	9801      	ldr	r0, [sp, #4]
   13342:	aa12      	add	r2, sp, #72	; 0x48
   13344:	f7ff fe7a 	bl	1303c <__sprint_r.part.0>
   13348:	2800      	cmp	r0, #0
   1334a:	d000      	beq.n	1334e <_vfiprintf_r+0x28a>
   1334c:	e292      	b.n	13874 <_vfiprintf_r+0x7b0>
   1334e:	ae15      	add	r6, sp, #84	; 0x54
   13350:	9b05      	ldr	r3, [sp, #20]
   13352:	469c      	mov	ip, r3
   13354:	44bc      	add	ip, r7
   13356:	4663      	mov	r3, ip
   13358:	9305      	str	r3, [sp, #20]
   1335a:	e709      	b.n	13170 <_vfiprintf_r+0xac>
   1335c:	4653      	mov	r3, sl
   1335e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13360:	f7fb fafe 	bl	e960 <__retarget_lock_acquire_recursive>
   13364:	4653      	mov	r3, sl
   13366:	210c      	movs	r1, #12
   13368:	5e59      	ldrsh	r1, [r3, r1]
   1336a:	4653      	mov	r3, sl
   1336c:	899a      	ldrh	r2, [r3, #12]
   1336e:	e6c9      	b.n	13104 <_vfiprintf_r+0x40>
   13370:	ffffdfff 	.word	0xffffdfff
   13374:	00016ed4 	.word	0x00016ed4
   13378:	fffffbff 	.word	0xfffffbff
   1337c:	2a00      	cmp	r2, #0
   1337e:	d100      	bne.n	13382 <_vfiprintf_r+0x2be>
   13380:	e08e      	b.n	134a0 <_vfiprintf_r+0x3dc>
   13382:	2300      	movs	r3, #0
   13384:	ac25      	add	r4, sp, #148	; 0x94
   13386:	7022      	strb	r2, [r4, #0]
   13388:	aa10      	add	r2, sp, #64	; 0x40
   1338a:	70d3      	strb	r3, [r2, #3]
   1338c:	3301      	adds	r3, #1
   1338e:	4699      	mov	r9, r3
   13390:	9303      	str	r3, [sp, #12]
   13392:	2300      	movs	r3, #0
   13394:	9302      	str	r3, [sp, #8]
   13396:	2302      	movs	r3, #2
   13398:	001a      	movs	r2, r3
   1339a:	403a      	ands	r2, r7
   1339c:	9209      	str	r2, [sp, #36]	; 0x24
   1339e:	423b      	tst	r3, r7
   133a0:	d001      	beq.n	133a6 <_vfiprintf_r+0x2e2>
   133a2:	469c      	mov	ip, r3
   133a4:	44e1      	add	r9, ip
   133a6:	2384      	movs	r3, #132	; 0x84
   133a8:	001a      	movs	r2, r3
   133aa:	403a      	ands	r2, r7
   133ac:	920a      	str	r2, [sp, #40]	; 0x28
   133ae:	423b      	tst	r3, r7
   133b0:	d106      	bne.n	133c0 <_vfiprintf_r+0x2fc>
   133b2:	464a      	mov	r2, r9
   133b4:	9b04      	ldr	r3, [sp, #16]
   133b6:	1a9b      	subs	r3, r3, r2
   133b8:	4698      	mov	r8, r3
   133ba:	2b00      	cmp	r3, #0
   133bc:	dd00      	ble.n	133c0 <_vfiprintf_r+0x2fc>
   133be:	e2dd      	b.n	1397c <_vfiprintf_r+0x8b8>
   133c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   133c2:	9814      	ldr	r0, [sp, #80]	; 0x50
   133c4:	469c      	mov	ip, r3
   133c6:	1c59      	adds	r1, r3, #1
   133c8:	ab10      	add	r3, sp, #64	; 0x40
   133ca:	78db      	ldrb	r3, [r3, #3]
   133cc:	2b00      	cmp	r3, #0
   133ce:	d00d      	beq.n	133ec <_vfiprintf_r+0x328>
   133d0:	ab10      	add	r3, sp, #64	; 0x40
   133d2:	3303      	adds	r3, #3
   133d4:	6033      	str	r3, [r6, #0]
   133d6:	2301      	movs	r3, #1
   133d8:	3001      	adds	r0, #1
   133da:	6073      	str	r3, [r6, #4]
   133dc:	9014      	str	r0, [sp, #80]	; 0x50
   133de:	9113      	str	r1, [sp, #76]	; 0x4c
   133e0:	2907      	cmp	r1, #7
   133e2:	dd00      	ble.n	133e6 <_vfiprintf_r+0x322>
   133e4:	e253      	b.n	1388e <_vfiprintf_r+0x7ca>
   133e6:	468c      	mov	ip, r1
   133e8:	3608      	adds	r6, #8
   133ea:	3101      	adds	r1, #1
   133ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   133ee:	2b00      	cmp	r3, #0
   133f0:	d019      	beq.n	13426 <_vfiprintf_r+0x362>
   133f2:	ab11      	add	r3, sp, #68	; 0x44
   133f4:	6033      	str	r3, [r6, #0]
   133f6:	2302      	movs	r3, #2
   133f8:	3002      	adds	r0, #2
   133fa:	6073      	str	r3, [r6, #4]
   133fc:	9014      	str	r0, [sp, #80]	; 0x50
   133fe:	9113      	str	r1, [sp, #76]	; 0x4c
   13400:	2907      	cmp	r1, #7
   13402:	dc00      	bgt.n	13406 <_vfiprintf_r+0x342>
   13404:	e25a      	b.n	138bc <_vfiprintf_r+0x7f8>
   13406:	2800      	cmp	r0, #0
   13408:	d100      	bne.n	1340c <_vfiprintf_r+0x348>
   1340a:	e3a1      	b.n	13b50 <_vfiprintf_r+0xa8c>
   1340c:	4659      	mov	r1, fp
   1340e:	9801      	ldr	r0, [sp, #4]
   13410:	aa12      	add	r2, sp, #72	; 0x48
   13412:	f7ff fe13 	bl	1303c <__sprint_r.part.0>
   13416:	2800      	cmp	r0, #0
   13418:	d000      	beq.n	1341c <_vfiprintf_r+0x358>
   1341a:	e22b      	b.n	13874 <_vfiprintf_r+0x7b0>
   1341c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1341e:	9814      	ldr	r0, [sp, #80]	; 0x50
   13420:	469c      	mov	ip, r3
   13422:	1c59      	adds	r1, r3, #1
   13424:	ae15      	add	r6, sp, #84	; 0x54
   13426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13428:	2b80      	cmp	r3, #128	; 0x80
   1342a:	d100      	bne.n	1342e <_vfiprintf_r+0x36a>
   1342c:	e173      	b.n	13716 <_vfiprintf_r+0x652>
   1342e:	9b02      	ldr	r3, [sp, #8]
   13430:	9a03      	ldr	r2, [sp, #12]
   13432:	1a9b      	subs	r3, r3, r2
   13434:	469a      	mov	sl, r3
   13436:	2b00      	cmp	r3, #0
   13438:	dd00      	ble.n	1343c <_vfiprintf_r+0x378>
   1343a:	e1cb      	b.n	137d4 <_vfiprintf_r+0x710>
   1343c:	9b03      	ldr	r3, [sp, #12]
   1343e:	6034      	str	r4, [r6, #0]
   13440:	469c      	mov	ip, r3
   13442:	4460      	add	r0, ip
   13444:	6073      	str	r3, [r6, #4]
   13446:	9014      	str	r0, [sp, #80]	; 0x50
   13448:	9113      	str	r1, [sp, #76]	; 0x4c
   1344a:	2907      	cmp	r1, #7
   1344c:	dc00      	bgt.n	13450 <_vfiprintf_r+0x38c>
   1344e:	e160      	b.n	13712 <_vfiprintf_r+0x64e>
   13450:	2800      	cmp	r0, #0
   13452:	d100      	bne.n	13456 <_vfiprintf_r+0x392>
   13454:	e2e4      	b.n	13a20 <_vfiprintf_r+0x95c>
   13456:	4659      	mov	r1, fp
   13458:	9801      	ldr	r0, [sp, #4]
   1345a:	aa12      	add	r2, sp, #72	; 0x48
   1345c:	f7ff fdee 	bl	1303c <__sprint_r.part.0>
   13460:	2800      	cmp	r0, #0
   13462:	d000      	beq.n	13466 <_vfiprintf_r+0x3a2>
   13464:	e206      	b.n	13874 <_vfiprintf_r+0x7b0>
   13466:	9814      	ldr	r0, [sp, #80]	; 0x50
   13468:	ae15      	add	r6, sp, #84	; 0x54
   1346a:	077b      	lsls	r3, r7, #29
   1346c:	d505      	bpl.n	1347a <_vfiprintf_r+0x3b6>
   1346e:	464a      	mov	r2, r9
   13470:	9b04      	ldr	r3, [sp, #16]
   13472:	1a9c      	subs	r4, r3, r2
   13474:	2c00      	cmp	r4, #0
   13476:	dd00      	ble.n	1347a <_vfiprintf_r+0x3b6>
   13478:	e2db      	b.n	13a32 <_vfiprintf_r+0x96e>
   1347a:	9b04      	ldr	r3, [sp, #16]
   1347c:	454b      	cmp	r3, r9
   1347e:	da00      	bge.n	13482 <_vfiprintf_r+0x3be>
   13480:	464b      	mov	r3, r9
   13482:	9a05      	ldr	r2, [sp, #20]
   13484:	4694      	mov	ip, r2
   13486:	449c      	add	ip, r3
   13488:	4663      	mov	r3, ip
   1348a:	9305      	str	r3, [sp, #20]
   1348c:	2800      	cmp	r0, #0
   1348e:	d000      	beq.n	13492 <_vfiprintf_r+0x3ce>
   13490:	e1e8      	b.n	13864 <_vfiprintf_r+0x7a0>
   13492:	2300      	movs	r3, #0
   13494:	9313      	str	r3, [sp, #76]	; 0x4c
   13496:	782b      	ldrb	r3, [r5, #0]
   13498:	ae15      	add	r6, sp, #84	; 0x54
   1349a:	2b00      	cmp	r3, #0
   1349c:	d000      	beq.n	134a0 <_vfiprintf_r+0x3dc>
   1349e:	e65a      	b.n	13156 <_vfiprintf_r+0x92>
   134a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   134a2:	46da      	mov	sl, fp
   134a4:	9302      	str	r3, [sp, #8]
   134a6:	2b00      	cmp	r3, #0
   134a8:	d001      	beq.n	134ae <_vfiprintf_r+0x3ea>
   134aa:	f000 fcb7 	bl	13e1c <_vfiprintf_r+0xd58>
   134ae:	2300      	movs	r3, #0
   134b0:	9313      	str	r3, [sp, #76]	; 0x4c
   134b2:	4653      	mov	r3, sl
   134b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   134b6:	07db      	lsls	r3, r3, #31
   134b8:	d500      	bpl.n	134bc <_vfiprintf_r+0x3f8>
   134ba:	e1e1      	b.n	13880 <_vfiprintf_r+0x7bc>
   134bc:	4653      	mov	r3, sl
   134be:	899b      	ldrh	r3, [r3, #12]
   134c0:	059a      	lsls	r2, r3, #22
   134c2:	d401      	bmi.n	134c8 <_vfiprintf_r+0x404>
   134c4:	f000 fc19 	bl	13cfa <_vfiprintf_r+0xc36>
   134c8:	065b      	lsls	r3, r3, #25
   134ca:	d501      	bpl.n	134d0 <_vfiprintf_r+0x40c>
   134cc:	f000 fcc0 	bl	13e50 <_vfiprintf_r+0xd8c>
   134d0:	9805      	ldr	r0, [sp, #20]
   134d2:	b03f      	add	sp, #252	; 0xfc
   134d4:	bcf0      	pop	{r4, r5, r6, r7}
   134d6:	46bb      	mov	fp, r7
   134d8:	46b2      	mov	sl, r6
   134da:	46a9      	mov	r9, r5
   134dc:	46a0      	mov	r8, r4
   134de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134e0:	3a30      	subs	r2, #48	; 0x30
   134e2:	0028      	movs	r0, r5
   134e4:	2300      	movs	r3, #0
   134e6:	0011      	movs	r1, r2
   134e8:	009a      	lsls	r2, r3, #2
   134ea:	18d3      	adds	r3, r2, r3
   134ec:	0002      	movs	r2, r0
   134ee:	7812      	ldrb	r2, [r2, #0]
   134f0:	005b      	lsls	r3, r3, #1
   134f2:	18cb      	adds	r3, r1, r3
   134f4:	0011      	movs	r1, r2
   134f6:	3001      	adds	r0, #1
   134f8:	3930      	subs	r1, #48	; 0x30
   134fa:	0005      	movs	r5, r0
   134fc:	2909      	cmp	r1, #9
   134fe:	d9f3      	bls.n	134e8 <_vfiprintf_r+0x424>
   13500:	9304      	str	r3, [sp, #16]
   13502:	e644      	b.n	1318e <_vfiprintf_r+0xca>
   13504:	06fb      	lsls	r3, r7, #27
   13506:	d500      	bpl.n	1350a <_vfiprintf_r+0x446>
   13508:	e351      	b.n	13bae <_vfiprintf_r+0xaea>
   1350a:	067b      	lsls	r3, r7, #25
   1350c:	d400      	bmi.n	13510 <_vfiprintf_r+0x44c>
   1350e:	e34b      	b.n	13ba8 <_vfiprintf_r+0xae4>
   13510:	9a08      	ldr	r2, [sp, #32]
   13512:	ca08      	ldmia	r2!, {r3}
   13514:	b29b      	uxth	r3, r3
   13516:	9306      	str	r3, [sp, #24]
   13518:	2300      	movs	r3, #0
   1351a:	9208      	str	r2, [sp, #32]
   1351c:	9307      	str	r3, [sp, #28]
   1351e:	e6ce      	b.n	132be <_vfiprintf_r+0x1fa>
   13520:	06fb      	lsls	r3, r7, #27
   13522:	d500      	bpl.n	13526 <_vfiprintf_r+0x462>
   13524:	e34e      	b.n	13bc4 <_vfiprintf_r+0xb00>
   13526:	067b      	lsls	r3, r7, #25
   13528:	d400      	bmi.n	1352c <_vfiprintf_r+0x468>
   1352a:	e348      	b.n	13bbe <_vfiprintf_r+0xafa>
   1352c:	ca08      	ldmia	r2!, {r3}
   1352e:	b21b      	sxth	r3, r3
   13530:	9306      	str	r3, [sp, #24]
   13532:	17db      	asrs	r3, r3, #31
   13534:	9307      	str	r3, [sp, #28]
   13536:	9208      	str	r2, [sp, #32]
   13538:	e682      	b.n	13240 <_vfiprintf_r+0x17c>
   1353a:	f7fa fda7 	bl	e08c <__sinit>
   1353e:	e5d4      	b.n	130ea <_vfiprintf_r+0x26>
   13540:	9b08      	ldr	r3, [sp, #32]
   13542:	aa10      	add	r2, sp, #64	; 0x40
   13544:	cb10      	ldmia	r3!, {r4}
   13546:	4698      	mov	r8, r3
   13548:	2300      	movs	r3, #0
   1354a:	70d3      	strb	r3, [r2, #3]
   1354c:	2c00      	cmp	r4, #0
   1354e:	d101      	bne.n	13554 <_vfiprintf_r+0x490>
   13550:	f000 fbf5 	bl	13d3e <_vfiprintf_r+0xc7a>
   13554:	9a02      	ldr	r2, [sp, #8]
   13556:	1c53      	adds	r3, r2, #1
   13558:	d100      	bne.n	1355c <_vfiprintf_r+0x498>
   1355a:	e38a      	b.n	13c72 <_vfiprintf_r+0xbae>
   1355c:	2100      	movs	r1, #0
   1355e:	0020      	movs	r0, r4
   13560:	f7ff fc3c 	bl	12ddc <memchr>
   13564:	2800      	cmp	r0, #0
   13566:	d101      	bne.n	1356c <_vfiprintf_r+0x4a8>
   13568:	f000 fc43 	bl	13df2 <_vfiprintf_r+0xd2e>
   1356c:	1b03      	subs	r3, r0, r4
   1356e:	9303      	str	r3, [sp, #12]
   13570:	4643      	mov	r3, r8
   13572:	9308      	str	r3, [sp, #32]
   13574:	2300      	movs	r3, #0
   13576:	9302      	str	r3, [sp, #8]
   13578:	e688      	b.n	1328c <_vfiprintf_r+0x1c8>
   1357a:	9a08      	ldr	r2, [sp, #32]
   1357c:	ac25      	add	r4, sp, #148	; 0x94
   1357e:	ca08      	ldmia	r2!, {r3}
   13580:	a910      	add	r1, sp, #64	; 0x40
   13582:	7023      	strb	r3, [r4, #0]
   13584:	2300      	movs	r3, #0
   13586:	70cb      	strb	r3, [r1, #3]
   13588:	3301      	adds	r3, #1
   1358a:	4699      	mov	r9, r3
   1358c:	9208      	str	r2, [sp, #32]
   1358e:	9303      	str	r3, [sp, #12]
   13590:	e6ff      	b.n	13392 <_vfiprintf_r+0x2ce>
   13592:	9b08      	ldr	r3, [sp, #32]
   13594:	cb04      	ldmia	r3!, {r2}
   13596:	9204      	str	r2, [sp, #16]
   13598:	2a00      	cmp	r2, #0
   1359a:	db00      	blt.n	1359e <_vfiprintf_r+0x4da>
   1359c:	e2fd      	b.n	13b9a <_vfiprintf_r+0xad6>
   1359e:	9a04      	ldr	r2, [sp, #16]
   135a0:	9308      	str	r3, [sp, #32]
   135a2:	4252      	negs	r2, r2
   135a4:	9204      	str	r2, [sp, #16]
   135a6:	2304      	movs	r3, #4
   135a8:	782a      	ldrb	r2, [r5, #0]
   135aa:	431f      	orrs	r7, r3
   135ac:	e5ee      	b.n	1318c <_vfiprintf_r+0xc8>
   135ae:	2310      	movs	r3, #16
   135b0:	431f      	orrs	r7, r3
   135b2:	46b9      	mov	r9, r7
   135b4:	464b      	mov	r3, r9
   135b6:	069b      	lsls	r3, r3, #26
   135b8:	d400      	bmi.n	135bc <_vfiprintf_r+0x4f8>
   135ba:	e2ad      	b.n	13b18 <_vfiprintf_r+0xa54>
   135bc:	2307      	movs	r3, #7
   135be:	9a08      	ldr	r2, [sp, #32]
   135c0:	3207      	adds	r2, #7
   135c2:	439a      	bics	r2, r3
   135c4:	ca18      	ldmia	r2!, {r3, r4}
   135c6:	9306      	str	r3, [sp, #24]
   135c8:	9407      	str	r4, [sp, #28]
   135ca:	9208      	str	r2, [sp, #32]
   135cc:	2301      	movs	r3, #1
   135ce:	e67a      	b.n	132c6 <_vfiprintf_r+0x202>
   135d0:	782a      	ldrb	r2, [r5, #0]
   135d2:	2a68      	cmp	r2, #104	; 0x68
   135d4:	d100      	bne.n	135d8 <_vfiprintf_r+0x514>
   135d6:	e3a4      	b.n	13d22 <_vfiprintf_r+0xc5e>
   135d8:	2340      	movs	r3, #64	; 0x40
   135da:	431f      	orrs	r7, r3
   135dc:	e5d6      	b.n	1318c <_vfiprintf_r+0xc8>
   135de:	232b      	movs	r3, #43	; 0x2b
   135e0:	aa10      	add	r2, sp, #64	; 0x40
   135e2:	70d3      	strb	r3, [r2, #3]
   135e4:	782a      	ldrb	r2, [r5, #0]
   135e6:	e5d1      	b.n	1318c <_vfiprintf_r+0xc8>
   135e8:	2380      	movs	r3, #128	; 0x80
   135ea:	782a      	ldrb	r2, [r5, #0]
   135ec:	431f      	orrs	r7, r3
   135ee:	e5cd      	b.n	1318c <_vfiprintf_r+0xc8>
   135f0:	782a      	ldrb	r2, [r5, #0]
   135f2:	1c6b      	adds	r3, r5, #1
   135f4:	2a2a      	cmp	r2, #42	; 0x2a
   135f6:	d101      	bne.n	135fc <_vfiprintf_r+0x538>
   135f8:	f000 fc2f 	bl	13e5a <_vfiprintf_r+0xd96>
   135fc:	0011      	movs	r1, r2
   135fe:	2400      	movs	r4, #0
   13600:	3930      	subs	r1, #48	; 0x30
   13602:	0018      	movs	r0, r3
   13604:	001d      	movs	r5, r3
   13606:	9402      	str	r4, [sp, #8]
   13608:	2909      	cmp	r1, #9
   1360a:	d900      	bls.n	1360e <_vfiprintf_r+0x54a>
   1360c:	e5bf      	b.n	1318e <_vfiprintf_r+0xca>
   1360e:	2300      	movs	r3, #0
   13610:	009a      	lsls	r2, r3, #2
   13612:	18d3      	adds	r3, r2, r3
   13614:	0002      	movs	r2, r0
   13616:	7812      	ldrb	r2, [r2, #0]
   13618:	005b      	lsls	r3, r3, #1
   1361a:	185b      	adds	r3, r3, r1
   1361c:	0011      	movs	r1, r2
   1361e:	3001      	adds	r0, #1
   13620:	3930      	subs	r1, #48	; 0x30
   13622:	0005      	movs	r5, r0
   13624:	2909      	cmp	r1, #9
   13626:	d9f3      	bls.n	13610 <_vfiprintf_r+0x54c>
   13628:	9302      	str	r3, [sp, #8]
   1362a:	e5b0      	b.n	1318e <_vfiprintf_r+0xca>
   1362c:	2301      	movs	r3, #1
   1362e:	782a      	ldrb	r2, [r5, #0]
   13630:	431f      	orrs	r7, r3
   13632:	e5ab      	b.n	1318c <_vfiprintf_r+0xc8>
   13634:	ab10      	add	r3, sp, #64	; 0x40
   13636:	78db      	ldrb	r3, [r3, #3]
   13638:	2b00      	cmp	r3, #0
   1363a:	d000      	beq.n	1363e <_vfiprintf_r+0x57a>
   1363c:	e5e8      	b.n	13210 <_vfiprintf_r+0x14c>
   1363e:	2320      	movs	r3, #32
   13640:	aa10      	add	r2, sp, #64	; 0x40
   13642:	70d3      	strb	r3, [r2, #3]
   13644:	782a      	ldrb	r2, [r5, #0]
   13646:	e5a1      	b.n	1318c <_vfiprintf_r+0xc8>
   13648:	9908      	ldr	r1, [sp, #32]
   1364a:	2230      	movs	r2, #48	; 0x30
   1364c:	c908      	ldmia	r1!, {r3}
   1364e:	9306      	str	r3, [sp, #24]
   13650:	2300      	movs	r3, #0
   13652:	9307      	str	r3, [sp, #28]
   13654:	3302      	adds	r3, #2
   13656:	431f      	orrs	r7, r3
   13658:	ab11      	add	r3, sp, #68	; 0x44
   1365a:	701a      	strb	r2, [r3, #0]
   1365c:	3248      	adds	r2, #72	; 0x48
   1365e:	705a      	strb	r2, [r3, #1]
   13660:	4bce      	ldr	r3, [pc, #824]	; (1399c <_vfiprintf_r+0x8d8>)
   13662:	46b9      	mov	r9, r7
   13664:	930c      	str	r3, [sp, #48]	; 0x30
   13666:	9108      	str	r1, [sp, #32]
   13668:	2302      	movs	r3, #2
   1366a:	e62c      	b.n	132c6 <_vfiprintf_r+0x202>
   1366c:	06bb      	lsls	r3, r7, #26
   1366e:	d500      	bpl.n	13672 <_vfiprintf_r+0x5ae>
   13670:	e2bc      	b.n	13bec <_vfiprintf_r+0xb28>
   13672:	06fb      	lsls	r3, r7, #27
   13674:	d500      	bpl.n	13678 <_vfiprintf_r+0x5b4>
   13676:	e35b      	b.n	13d30 <_vfiprintf_r+0xc6c>
   13678:	067b      	lsls	r3, r7, #25
   1367a:	d500      	bpl.n	1367e <_vfiprintf_r+0x5ba>
   1367c:	e3ac      	b.n	13dd8 <_vfiprintf_r+0xd14>
   1367e:	05bb      	lsls	r3, r7, #22
   13680:	d400      	bmi.n	13684 <_vfiprintf_r+0x5c0>
   13682:	e355      	b.n	13d30 <_vfiprintf_r+0xc6c>
   13684:	9a08      	ldr	r2, [sp, #32]
   13686:	9905      	ldr	r1, [sp, #20]
   13688:	ca08      	ldmia	r2!, {r3}
   1368a:	7019      	strb	r1, [r3, #0]
   1368c:	9208      	str	r2, [sp, #32]
   1368e:	e55e      	b.n	1314e <_vfiprintf_r+0x8a>
   13690:	782a      	ldrb	r2, [r5, #0]
   13692:	2a6c      	cmp	r2, #108	; 0x6c
   13694:	d100      	bne.n	13698 <_vfiprintf_r+0x5d4>
   13696:	e33e      	b.n	13d16 <_vfiprintf_r+0xc52>
   13698:	2310      	movs	r3, #16
   1369a:	431f      	orrs	r7, r3
   1369c:	e576      	b.n	1318c <_vfiprintf_r+0xc8>
   1369e:	46b9      	mov	r9, r7
   136a0:	2b01      	cmp	r3, #1
   136a2:	d100      	bne.n	136a6 <_vfiprintf_r+0x5e2>
   136a4:	e5de      	b.n	13264 <_vfiprintf_r+0x1a0>
   136a6:	ac3e      	add	r4, sp, #248	; 0xf8
   136a8:	2b02      	cmp	r3, #2
   136aa:	d100      	bne.n	136ae <_vfiprintf_r+0x5ea>
   136ac:	e10b      	b.n	138c6 <_vfiprintf_r+0x802>
   136ae:	2307      	movs	r3, #7
   136b0:	46b2      	mov	sl, r6
   136b2:	46a8      	mov	r8, r5
   136b4:	469c      	mov	ip, r3
   136b6:	9a06      	ldr	r2, [sp, #24]
   136b8:	9b07      	ldr	r3, [sp, #28]
   136ba:	075e      	lsls	r6, r3, #29
   136bc:	08d7      	lsrs	r7, r2, #3
   136be:	4661      	mov	r1, ip
   136c0:	08d8      	lsrs	r0, r3, #3
   136c2:	433e      	orrs	r6, r7
   136c4:	0003      	movs	r3, r0
   136c6:	0030      	movs	r0, r6
   136c8:	4011      	ands	r1, r2
   136ca:	0025      	movs	r5, r4
   136cc:	3130      	adds	r1, #48	; 0x30
   136ce:	3c01      	subs	r4, #1
   136d0:	0032      	movs	r2, r6
   136d2:	7021      	strb	r1, [r4, #0]
   136d4:	4318      	orrs	r0, r3
   136d6:	d1f0      	bne.n	136ba <_vfiprintf_r+0x5f6>
   136d8:	9206      	str	r2, [sp, #24]
   136da:	9307      	str	r3, [sp, #28]
   136dc:	464a      	mov	r2, r9
   136de:	002f      	movs	r7, r5
   136e0:	4656      	mov	r6, sl
   136e2:	4645      	mov	r5, r8
   136e4:	07d2      	lsls	r2, r2, #31
   136e6:	d400      	bmi.n	136ea <_vfiprintf_r+0x626>
   136e8:	e143      	b.n	13972 <_vfiprintf_r+0x8ae>
   136ea:	2930      	cmp	r1, #48	; 0x30
   136ec:	d100      	bne.n	136f0 <_vfiprintf_r+0x62c>
   136ee:	e140      	b.n	13972 <_vfiprintf_r+0x8ae>
   136f0:	2230      	movs	r2, #48	; 0x30
   136f2:	3c01      	subs	r4, #1
   136f4:	1ebb      	subs	r3, r7, #2
   136f6:	7022      	strb	r2, [r4, #0]
   136f8:	aa3e      	add	r2, sp, #248	; 0xf8
   136fa:	1ad2      	subs	r2, r2, r3
   136fc:	464f      	mov	r7, r9
   136fe:	001c      	movs	r4, r3
   13700:	9203      	str	r2, [sp, #12]
   13702:	e5c3      	b.n	1328c <_vfiprintf_r+0x1c8>
   13704:	2301      	movs	r3, #1
   13706:	9803      	ldr	r0, [sp, #12]
   13708:	9415      	str	r4, [sp, #84]	; 0x54
   1370a:	9016      	str	r0, [sp, #88]	; 0x58
   1370c:	9014      	str	r0, [sp, #80]	; 0x50
   1370e:	9313      	str	r3, [sp, #76]	; 0x4c
   13710:	ae15      	add	r6, sp, #84	; 0x54
   13712:	3608      	adds	r6, #8
   13714:	e6a9      	b.n	1346a <_vfiprintf_r+0x3a6>
   13716:	464a      	mov	r2, r9
   13718:	9b04      	ldr	r3, [sp, #16]
   1371a:	1a9b      	subs	r3, r3, r2
   1371c:	469a      	mov	sl, r3
   1371e:	2b00      	cmp	r3, #0
   13720:	dc00      	bgt.n	13724 <_vfiprintf_r+0x660>
   13722:	e684      	b.n	1342e <_vfiprintf_r+0x36a>
   13724:	2b10      	cmp	r3, #16
   13726:	dc00      	bgt.n	1372a <_vfiprintf_r+0x666>
   13728:	e383      	b.n	13e32 <_vfiprintf_r+0xd6e>
   1372a:	4b9d      	ldr	r3, [pc, #628]	; (139a0 <_vfiprintf_r+0x8dc>)
   1372c:	46a0      	mov	r8, r4
   1372e:	0031      	movs	r1, r6
   13730:	4654      	mov	r4, sl
   13732:	4662      	mov	r2, ip
   13734:	46ba      	mov	sl, r7
   13736:	465f      	mov	r7, fp
   13738:	46ab      	mov	fp, r5
   1373a:	001d      	movs	r5, r3
   1373c:	e005      	b.n	1374a <_vfiprintf_r+0x686>
   1373e:	1c96      	adds	r6, r2, #2
   13740:	001a      	movs	r2, r3
   13742:	3108      	adds	r1, #8
   13744:	3c10      	subs	r4, #16
   13746:	2c10      	cmp	r4, #16
   13748:	dd1a      	ble.n	13780 <_vfiprintf_r+0x6bc>
   1374a:	2310      	movs	r3, #16
   1374c:	3010      	adds	r0, #16
   1374e:	604b      	str	r3, [r1, #4]
   13750:	1c53      	adds	r3, r2, #1
   13752:	600d      	str	r5, [r1, #0]
   13754:	9014      	str	r0, [sp, #80]	; 0x50
   13756:	9313      	str	r3, [sp, #76]	; 0x4c
   13758:	2b07      	cmp	r3, #7
   1375a:	ddf0      	ble.n	1373e <_vfiprintf_r+0x67a>
   1375c:	2800      	cmp	r0, #0
   1375e:	d100      	bne.n	13762 <_vfiprintf_r+0x69e>
   13760:	e091      	b.n	13886 <_vfiprintf_r+0x7c2>
   13762:	0039      	movs	r1, r7
   13764:	9801      	ldr	r0, [sp, #4]
   13766:	aa12      	add	r2, sp, #72	; 0x48
   13768:	f7ff fc68 	bl	1303c <__sprint_r.part.0>
   1376c:	2800      	cmp	r0, #0
   1376e:	d000      	beq.n	13772 <_vfiprintf_r+0x6ae>
   13770:	e1b1      	b.n	13ad6 <_vfiprintf_r+0xa12>
   13772:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13774:	3c10      	subs	r4, #16
   13776:	9814      	ldr	r0, [sp, #80]	; 0x50
   13778:	1c56      	adds	r6, r2, #1
   1377a:	a915      	add	r1, sp, #84	; 0x54
   1377c:	2c10      	cmp	r4, #16
   1377e:	dce4      	bgt.n	1374a <_vfiprintf_r+0x686>
   13780:	002b      	movs	r3, r5
   13782:	46b4      	mov	ip, r6
   13784:	465d      	mov	r5, fp
   13786:	000e      	movs	r6, r1
   13788:	46bb      	mov	fp, r7
   1378a:	4657      	mov	r7, sl
   1378c:	46a2      	mov	sl, r4
   1378e:	4644      	mov	r4, r8
   13790:	4698      	mov	r8, r3
   13792:	4643      	mov	r3, r8
   13794:	6033      	str	r3, [r6, #0]
   13796:	4653      	mov	r3, sl
   13798:	6073      	str	r3, [r6, #4]
   1379a:	4663      	mov	r3, ip
   1379c:	4450      	add	r0, sl
   1379e:	9014      	str	r0, [sp, #80]	; 0x50
   137a0:	9313      	str	r3, [sp, #76]	; 0x4c
   137a2:	2b07      	cmp	r3, #7
   137a4:	dc00      	bgt.n	137a8 <_vfiprintf_r+0x6e4>
   137a6:	e1fc      	b.n	13ba2 <_vfiprintf_r+0xade>
   137a8:	2800      	cmp	r0, #0
   137aa:	d100      	bne.n	137ae <_vfiprintf_r+0x6ea>
   137ac:	e2d9      	b.n	13d62 <_vfiprintf_r+0xc9e>
   137ae:	4659      	mov	r1, fp
   137b0:	9801      	ldr	r0, [sp, #4]
   137b2:	aa12      	add	r2, sp, #72	; 0x48
   137b4:	f7ff fc42 	bl	1303c <__sprint_r.part.0>
   137b8:	2800      	cmp	r0, #0
   137ba:	d15b      	bne.n	13874 <_vfiprintf_r+0x7b0>
   137bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   137be:	9a03      	ldr	r2, [sp, #12]
   137c0:	469c      	mov	ip, r3
   137c2:	1c59      	adds	r1, r3, #1
   137c4:	9b02      	ldr	r3, [sp, #8]
   137c6:	9814      	ldr	r0, [sp, #80]	; 0x50
   137c8:	1a9b      	subs	r3, r3, r2
   137ca:	469a      	mov	sl, r3
   137cc:	ae15      	add	r6, sp, #84	; 0x54
   137ce:	2b00      	cmp	r3, #0
   137d0:	dc00      	bgt.n	137d4 <_vfiprintf_r+0x710>
   137d2:	e633      	b.n	1343c <_vfiprintf_r+0x378>
   137d4:	2b10      	cmp	r3, #16
   137d6:	dc00      	bgt.n	137da <_vfiprintf_r+0x716>
   137d8:	e2bc      	b.n	13d54 <_vfiprintf_r+0xc90>
   137da:	4b71      	ldr	r3, [pc, #452]	; (139a0 <_vfiprintf_r+0x8dc>)
   137dc:	46a0      	mov	r8, r4
   137de:	0031      	movs	r1, r6
   137e0:	4654      	mov	r4, sl
   137e2:	4662      	mov	r2, ip
   137e4:	46ba      	mov	sl, r7
   137e6:	465f      	mov	r7, fp
   137e8:	46ab      	mov	fp, r5
   137ea:	001d      	movs	r5, r3
   137ec:	e005      	b.n	137fa <_vfiprintf_r+0x736>
   137ee:	1c96      	adds	r6, r2, #2
   137f0:	001a      	movs	r2, r3
   137f2:	3108      	adds	r1, #8
   137f4:	3c10      	subs	r4, #16
   137f6:	2c10      	cmp	r4, #16
   137f8:	dd19      	ble.n	1382e <_vfiprintf_r+0x76a>
   137fa:	2310      	movs	r3, #16
   137fc:	3010      	adds	r0, #16
   137fe:	604b      	str	r3, [r1, #4]
   13800:	1c53      	adds	r3, r2, #1
   13802:	600d      	str	r5, [r1, #0]
   13804:	9014      	str	r0, [sp, #80]	; 0x50
   13806:	9313      	str	r3, [sp, #76]	; 0x4c
   13808:	2b07      	cmp	r3, #7
   1380a:	ddf0      	ble.n	137ee <_vfiprintf_r+0x72a>
   1380c:	2800      	cmp	r0, #0
   1380e:	d025      	beq.n	1385c <_vfiprintf_r+0x798>
   13810:	0039      	movs	r1, r7
   13812:	9801      	ldr	r0, [sp, #4]
   13814:	aa12      	add	r2, sp, #72	; 0x48
   13816:	f7ff fc11 	bl	1303c <__sprint_r.part.0>
   1381a:	2800      	cmp	r0, #0
   1381c:	d000      	beq.n	13820 <_vfiprintf_r+0x75c>
   1381e:	e15a      	b.n	13ad6 <_vfiprintf_r+0xa12>
   13820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13822:	3c10      	subs	r4, #16
   13824:	9814      	ldr	r0, [sp, #80]	; 0x50
   13826:	1c56      	adds	r6, r2, #1
   13828:	a915      	add	r1, sp, #84	; 0x54
   1382a:	2c10      	cmp	r4, #16
   1382c:	dce5      	bgt.n	137fa <_vfiprintf_r+0x736>
   1382e:	0032      	movs	r2, r6
   13830:	002b      	movs	r3, r5
   13832:	000e      	movs	r6, r1
   13834:	465d      	mov	r5, fp
   13836:	0011      	movs	r1, r2
   13838:	46bb      	mov	fp, r7
   1383a:	4657      	mov	r7, sl
   1383c:	46a2      	mov	sl, r4
   1383e:	4644      	mov	r4, r8
   13840:	4698      	mov	r8, r3
   13842:	4643      	mov	r3, r8
   13844:	6033      	str	r3, [r6, #0]
   13846:	4653      	mov	r3, sl
   13848:	4450      	add	r0, sl
   1384a:	6073      	str	r3, [r6, #4]
   1384c:	9014      	str	r0, [sp, #80]	; 0x50
   1384e:	9113      	str	r1, [sp, #76]	; 0x4c
   13850:	2907      	cmp	r1, #7
   13852:	dd00      	ble.n	13856 <_vfiprintf_r+0x792>
   13854:	e141      	b.n	13ada <_vfiprintf_r+0xa16>
   13856:	3608      	adds	r6, #8
   13858:	3101      	adds	r1, #1
   1385a:	e5ef      	b.n	1343c <_vfiprintf_r+0x378>
   1385c:	2601      	movs	r6, #1
   1385e:	2200      	movs	r2, #0
   13860:	a915      	add	r1, sp, #84	; 0x54
   13862:	e7c7      	b.n	137f4 <_vfiprintf_r+0x730>
   13864:	4659      	mov	r1, fp
   13866:	9801      	ldr	r0, [sp, #4]
   13868:	aa12      	add	r2, sp, #72	; 0x48
   1386a:	f7ff fbe7 	bl	1303c <__sprint_r.part.0>
   1386e:	2800      	cmp	r0, #0
   13870:	d100      	bne.n	13874 <_vfiprintf_r+0x7b0>
   13872:	e60e      	b.n	13492 <_vfiprintf_r+0x3ce>
   13874:	46da      	mov	sl, fp
   13876:	4653      	mov	r3, sl
   13878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1387a:	07db      	lsls	r3, r3, #31
   1387c:	d400      	bmi.n	13880 <_vfiprintf_r+0x7bc>
   1387e:	e61d      	b.n	134bc <_vfiprintf_r+0x3f8>
   13880:	4653      	mov	r3, sl
   13882:	899b      	ldrh	r3, [r3, #12]
   13884:	e620      	b.n	134c8 <_vfiprintf_r+0x404>
   13886:	2601      	movs	r6, #1
   13888:	2200      	movs	r2, #0
   1388a:	a915      	add	r1, sp, #84	; 0x54
   1388c:	e75a      	b.n	13744 <_vfiprintf_r+0x680>
   1388e:	2800      	cmp	r0, #0
   13890:	d100      	bne.n	13894 <_vfiprintf_r+0x7d0>
   13892:	e151      	b.n	13b38 <_vfiprintf_r+0xa74>
   13894:	4659      	mov	r1, fp
   13896:	9801      	ldr	r0, [sp, #4]
   13898:	aa12      	add	r2, sp, #72	; 0x48
   1389a:	f7ff fbcf 	bl	1303c <__sprint_r.part.0>
   1389e:	2800      	cmp	r0, #0
   138a0:	d1e8      	bne.n	13874 <_vfiprintf_r+0x7b0>
   138a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   138a4:	9814      	ldr	r0, [sp, #80]	; 0x50
   138a6:	469c      	mov	ip, r3
   138a8:	1c59      	adds	r1, r3, #1
   138aa:	ae15      	add	r6, sp, #84	; 0x54
   138ac:	e59e      	b.n	133ec <_vfiprintf_r+0x328>
   138ae:	ab11      	add	r3, sp, #68	; 0x44
   138b0:	9315      	str	r3, [sp, #84]	; 0x54
   138b2:	2302      	movs	r3, #2
   138b4:	2101      	movs	r1, #1
   138b6:	2002      	movs	r0, #2
   138b8:	9316      	str	r3, [sp, #88]	; 0x58
   138ba:	ae15      	add	r6, sp, #84	; 0x54
   138bc:	468c      	mov	ip, r1
   138be:	4663      	mov	r3, ip
   138c0:	3608      	adds	r6, #8
   138c2:	1c59      	adds	r1, r3, #1
   138c4:	e5af      	b.n	13426 <_vfiprintf_r+0x362>
   138c6:	200f      	movs	r0, #15
   138c8:	9a06      	ldr	r2, [sp, #24]
   138ca:	9b07      	ldr	r3, [sp, #28]
   138cc:	46a8      	mov	r8, r5
   138ce:	46b4      	mov	ip, r6
   138d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   138d2:	0001      	movs	r1, r0
   138d4:	4011      	ands	r1, r2
   138d6:	5c71      	ldrb	r1, [r6, r1]
   138d8:	071d      	lsls	r5, r3, #28
   138da:	0917      	lsrs	r7, r2, #4
   138dc:	3c01      	subs	r4, #1
   138de:	433d      	orrs	r5, r7
   138e0:	7021      	strb	r1, [r4, #0]
   138e2:	0919      	lsrs	r1, r3, #4
   138e4:	000b      	movs	r3, r1
   138e6:	0029      	movs	r1, r5
   138e8:	002a      	movs	r2, r5
   138ea:	4319      	orrs	r1, r3
   138ec:	d1f1      	bne.n	138d2 <_vfiprintf_r+0x80e>
   138ee:	9206      	str	r2, [sp, #24]
   138f0:	9307      	str	r3, [sp, #28]
   138f2:	ab3e      	add	r3, sp, #248	; 0xf8
   138f4:	1b1b      	subs	r3, r3, r4
   138f6:	4666      	mov	r6, ip
   138f8:	4645      	mov	r5, r8
   138fa:	464f      	mov	r7, r9
   138fc:	9303      	str	r3, [sp, #12]
   138fe:	e4c5      	b.n	1328c <_vfiprintf_r+0x1c8>
   13900:	2380      	movs	r3, #128	; 0x80
   13902:	464a      	mov	r2, r9
   13904:	00db      	lsls	r3, r3, #3
   13906:	2700      	movs	r7, #0
   13908:	401a      	ands	r2, r3
   1390a:	464b      	mov	r3, r9
   1390c:	46aa      	mov	sl, r5
   1390e:	46b1      	mov	r9, r6
   13910:	003d      	movs	r5, r7
   13912:	9e06      	ldr	r6, [sp, #24]
   13914:	9f07      	ldr	r7, [sp, #28]
   13916:	4690      	mov	r8, r2
   13918:	ac3e      	add	r4, sp, #248	; 0xf8
   1391a:	9303      	str	r3, [sp, #12]
   1391c:	e00a      	b.n	13934 <_vfiprintf_r+0x870>
   1391e:	220a      	movs	r2, #10
   13920:	2300      	movs	r3, #0
   13922:	0030      	movs	r0, r6
   13924:	0039      	movs	r1, r7
   13926:	f7f0 fe81 	bl	462c <__aeabi_uldivmod>
   1392a:	2f00      	cmp	r7, #0
   1392c:	d100      	bne.n	13930 <_vfiprintf_r+0x86c>
   1392e:	e214      	b.n	13d5a <_vfiprintf_r+0xc96>
   13930:	0006      	movs	r6, r0
   13932:	000f      	movs	r7, r1
   13934:	220a      	movs	r2, #10
   13936:	2300      	movs	r3, #0
   13938:	0030      	movs	r0, r6
   1393a:	0039      	movs	r1, r7
   1393c:	f7f0 fe76 	bl	462c <__aeabi_uldivmod>
   13940:	4643      	mov	r3, r8
   13942:	3c01      	subs	r4, #1
   13944:	3230      	adds	r2, #48	; 0x30
   13946:	7022      	strb	r2, [r4, #0]
   13948:	3501      	adds	r5, #1
   1394a:	2b00      	cmp	r3, #0
   1394c:	d0e7      	beq.n	1391e <_vfiprintf_r+0x85a>
   1394e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13950:	781b      	ldrb	r3, [r3, #0]
   13952:	42ab      	cmp	r3, r5
   13954:	d1e3      	bne.n	1391e <_vfiprintf_r+0x85a>
   13956:	2dff      	cmp	r5, #255	; 0xff
   13958:	d0e1      	beq.n	1391e <_vfiprintf_r+0x85a>
   1395a:	2f00      	cmp	r7, #0
   1395c:	d000      	beq.n	13960 <_vfiprintf_r+0x89c>
   1395e:	e1a0      	b.n	13ca2 <_vfiprintf_r+0xbde>
   13960:	2e09      	cmp	r6, #9
   13962:	d900      	bls.n	13966 <_vfiprintf_r+0x8a2>
   13964:	e19d      	b.n	13ca2 <_vfiprintf_r+0xbde>
   13966:	9b03      	ldr	r3, [sp, #12]
   13968:	9606      	str	r6, [sp, #24]
   1396a:	9707      	str	r7, [sp, #28]
   1396c:	4655      	mov	r5, sl
   1396e:	464e      	mov	r6, r9
   13970:	4699      	mov	r9, r3
   13972:	ab3e      	add	r3, sp, #248	; 0xf8
   13974:	1b1b      	subs	r3, r3, r4
   13976:	464f      	mov	r7, r9
   13978:	9303      	str	r3, [sp, #12]
   1397a:	e487      	b.n	1328c <_vfiprintf_r+0x1c8>
   1397c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1397e:	2b10      	cmp	r3, #16
   13980:	dc00      	bgt.n	13984 <_vfiprintf_r+0x8c0>
   13982:	e23e      	b.n	13e02 <_vfiprintf_r+0xd3e>
   13984:	46a4      	mov	ip, r4
   13986:	4b07      	ldr	r3, [pc, #28]	; (139a4 <_vfiprintf_r+0x8e0>)
   13988:	4644      	mov	r4, r8
   1398a:	46ba      	mov	sl, r7
   1398c:	0032      	movs	r2, r6
   1398e:	465f      	mov	r7, fp
   13990:	46e0      	mov	r8, ip
   13992:	46ab      	mov	fp, r5
   13994:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13996:	001d      	movs	r5, r3
   13998:	e00c      	b.n	139b4 <_vfiprintf_r+0x8f0>
   1399a:	46c0      	nop			; (mov r8, r8)
   1399c:	00016b44 	.word	0x00016b44
   139a0:	00017050 	.word	0x00017050
   139a4:	00017040 	.word	0x00017040
   139a8:	1c8e      	adds	r6, r1, #2
   139aa:	0019      	movs	r1, r3
   139ac:	3208      	adds	r2, #8
   139ae:	3c10      	subs	r4, #16
   139b0:	2c10      	cmp	r4, #16
   139b2:	dd18      	ble.n	139e6 <_vfiprintf_r+0x922>
   139b4:	2310      	movs	r3, #16
   139b6:	3010      	adds	r0, #16
   139b8:	6053      	str	r3, [r2, #4]
   139ba:	1c4b      	adds	r3, r1, #1
   139bc:	6015      	str	r5, [r2, #0]
   139be:	9014      	str	r0, [sp, #80]	; 0x50
   139c0:	9313      	str	r3, [sp, #76]	; 0x4c
   139c2:	2b07      	cmp	r3, #7
   139c4:	ddf0      	ble.n	139a8 <_vfiprintf_r+0x8e4>
   139c6:	2800      	cmp	r0, #0
   139c8:	d026      	beq.n	13a18 <_vfiprintf_r+0x954>
   139ca:	0039      	movs	r1, r7
   139cc:	9801      	ldr	r0, [sp, #4]
   139ce:	aa12      	add	r2, sp, #72	; 0x48
   139d0:	f7ff fb34 	bl	1303c <__sprint_r.part.0>
   139d4:	2800      	cmp	r0, #0
   139d6:	d17e      	bne.n	13ad6 <_vfiprintf_r+0xa12>
   139d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   139da:	3c10      	subs	r4, #16
   139dc:	9814      	ldr	r0, [sp, #80]	; 0x50
   139de:	1c4e      	adds	r6, r1, #1
   139e0:	aa15      	add	r2, sp, #84	; 0x54
   139e2:	2c10      	cmp	r4, #16
   139e4:	dce6      	bgt.n	139b4 <_vfiprintf_r+0x8f0>
   139e6:	4643      	mov	r3, r8
   139e8:	0029      	movs	r1, r5
   139ea:	46a0      	mov	r8, r4
   139ec:	0034      	movs	r4, r6
   139ee:	465d      	mov	r5, fp
   139f0:	46a4      	mov	ip, r4
   139f2:	46bb      	mov	fp, r7
   139f4:	0016      	movs	r6, r2
   139f6:	4657      	mov	r7, sl
   139f8:	001c      	movs	r4, r3
   139fa:	468a      	mov	sl, r1
   139fc:	4653      	mov	r3, sl
   139fe:	6033      	str	r3, [r6, #0]
   13a00:	4643      	mov	r3, r8
   13a02:	6073      	str	r3, [r6, #4]
   13a04:	4663      	mov	r3, ip
   13a06:	4440      	add	r0, r8
   13a08:	9014      	str	r0, [sp, #80]	; 0x50
   13a0a:	9313      	str	r3, [sp, #76]	; 0x4c
   13a0c:	2b07      	cmp	r3, #7
   13a0e:	dd00      	ble.n	13a12 <_vfiprintf_r+0x94e>
   13a10:	e0b1      	b.n	13b76 <_vfiprintf_r+0xab2>
   13a12:	3608      	adds	r6, #8
   13a14:	1c59      	adds	r1, r3, #1
   13a16:	e4d7      	b.n	133c8 <_vfiprintf_r+0x304>
   13a18:	2100      	movs	r1, #0
   13a1a:	2601      	movs	r6, #1
   13a1c:	aa15      	add	r2, sp, #84	; 0x54
   13a1e:	e7c6      	b.n	139ae <_vfiprintf_r+0x8ea>
   13a20:	9013      	str	r0, [sp, #76]	; 0x4c
   13a22:	077b      	lsls	r3, r7, #29
   13a24:	d54d      	bpl.n	13ac2 <_vfiprintf_r+0x9fe>
   13a26:	464a      	mov	r2, r9
   13a28:	9b04      	ldr	r3, [sp, #16]
   13a2a:	1a9c      	subs	r4, r3, r2
   13a2c:	2c00      	cmp	r4, #0
   13a2e:	dd48      	ble.n	13ac2 <_vfiprintf_r+0x9fe>
   13a30:	ae15      	add	r6, sp, #84	; 0x54
   13a32:	2c10      	cmp	r4, #16
   13a34:	dc00      	bgt.n	13a38 <_vfiprintf_r+0x974>
   13a36:	e1eb      	b.n	13e10 <_vfiprintf_r+0xd4c>
   13a38:	4bd7      	ldr	r3, [pc, #860]	; (13d98 <_vfiprintf_r+0xcd4>)
   13a3a:	46a8      	mov	r8, r5
   13a3c:	001d      	movs	r5, r3
   13a3e:	9b01      	ldr	r3, [sp, #4]
   13a40:	2710      	movs	r7, #16
   13a42:	0031      	movs	r1, r6
   13a44:	469a      	mov	sl, r3
   13a46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13a48:	e005      	b.n	13a56 <_vfiprintf_r+0x992>
   13a4a:	1c96      	adds	r6, r2, #2
   13a4c:	001a      	movs	r2, r3
   13a4e:	3108      	adds	r1, #8
   13a50:	3c10      	subs	r4, #16
   13a52:	2c10      	cmp	r4, #16
   13a54:	dd18      	ble.n	13a88 <_vfiprintf_r+0x9c4>
   13a56:	3010      	adds	r0, #16
   13a58:	1c53      	adds	r3, r2, #1
   13a5a:	600d      	str	r5, [r1, #0]
   13a5c:	604f      	str	r7, [r1, #4]
   13a5e:	9014      	str	r0, [sp, #80]	; 0x50
   13a60:	9313      	str	r3, [sp, #76]	; 0x4c
   13a62:	2b07      	cmp	r3, #7
   13a64:	ddf1      	ble.n	13a4a <_vfiprintf_r+0x986>
   13a66:	2800      	cmp	r0, #0
   13a68:	d027      	beq.n	13aba <_vfiprintf_r+0x9f6>
   13a6a:	4659      	mov	r1, fp
   13a6c:	4650      	mov	r0, sl
   13a6e:	aa12      	add	r2, sp, #72	; 0x48
   13a70:	f7ff fae4 	bl	1303c <__sprint_r.part.0>
   13a74:	2800      	cmp	r0, #0
   13a76:	d000      	beq.n	13a7a <_vfiprintf_r+0x9b6>
   13a78:	e6fc      	b.n	13874 <_vfiprintf_r+0x7b0>
   13a7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13a7c:	3c10      	subs	r4, #16
   13a7e:	9814      	ldr	r0, [sp, #80]	; 0x50
   13a80:	1c56      	adds	r6, r2, #1
   13a82:	a915      	add	r1, sp, #84	; 0x54
   13a84:	2c10      	cmp	r4, #16
   13a86:	dce6      	bgt.n	13a56 <_vfiprintf_r+0x992>
   13a88:	0033      	movs	r3, r6
   13a8a:	46aa      	mov	sl, r5
   13a8c:	000e      	movs	r6, r1
   13a8e:	4645      	mov	r5, r8
   13a90:	0019      	movs	r1, r3
   13a92:	4653      	mov	r3, sl
   13a94:	1900      	adds	r0, r0, r4
   13a96:	c618      	stmia	r6!, {r3, r4}
   13a98:	9014      	str	r0, [sp, #80]	; 0x50
   13a9a:	9113      	str	r1, [sp, #76]	; 0x4c
   13a9c:	2907      	cmp	r1, #7
   13a9e:	dc00      	bgt.n	13aa2 <_vfiprintf_r+0x9de>
   13aa0:	e4eb      	b.n	1347a <_vfiprintf_r+0x3b6>
   13aa2:	2800      	cmp	r0, #0
   13aa4:	d00d      	beq.n	13ac2 <_vfiprintf_r+0x9fe>
   13aa6:	4659      	mov	r1, fp
   13aa8:	9801      	ldr	r0, [sp, #4]
   13aaa:	aa12      	add	r2, sp, #72	; 0x48
   13aac:	f7ff fac6 	bl	1303c <__sprint_r.part.0>
   13ab0:	2800      	cmp	r0, #0
   13ab2:	d000      	beq.n	13ab6 <_vfiprintf_r+0x9f2>
   13ab4:	e6de      	b.n	13874 <_vfiprintf_r+0x7b0>
   13ab6:	9814      	ldr	r0, [sp, #80]	; 0x50
   13ab8:	e4df      	b.n	1347a <_vfiprintf_r+0x3b6>
   13aba:	2601      	movs	r6, #1
   13abc:	2200      	movs	r2, #0
   13abe:	a915      	add	r1, sp, #84	; 0x54
   13ac0:	e7c6      	b.n	13a50 <_vfiprintf_r+0x98c>
   13ac2:	9b04      	ldr	r3, [sp, #16]
   13ac4:	454b      	cmp	r3, r9
   13ac6:	da00      	bge.n	13aca <_vfiprintf_r+0xa06>
   13ac8:	464b      	mov	r3, r9
   13aca:	9a05      	ldr	r2, [sp, #20]
   13acc:	4694      	mov	ip, r2
   13ace:	449c      	add	ip, r3
   13ad0:	4663      	mov	r3, ip
   13ad2:	9305      	str	r3, [sp, #20]
   13ad4:	e4dd      	b.n	13492 <_vfiprintf_r+0x3ce>
   13ad6:	46ba      	mov	sl, r7
   13ad8:	e4eb      	b.n	134b2 <_vfiprintf_r+0x3ee>
   13ada:	2800      	cmp	r0, #0
   13adc:	d100      	bne.n	13ae0 <_vfiprintf_r+0xa1c>
   13ade:	e611      	b.n	13704 <_vfiprintf_r+0x640>
   13ae0:	4659      	mov	r1, fp
   13ae2:	9801      	ldr	r0, [sp, #4]
   13ae4:	aa12      	add	r2, sp, #72	; 0x48
   13ae6:	f7ff faa9 	bl	1303c <__sprint_r.part.0>
   13aea:	2800      	cmp	r0, #0
   13aec:	d000      	beq.n	13af0 <_vfiprintf_r+0xa2c>
   13aee:	e6c1      	b.n	13874 <_vfiprintf_r+0x7b0>
   13af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13af2:	9814      	ldr	r0, [sp, #80]	; 0x50
   13af4:	9302      	str	r3, [sp, #8]
   13af6:	1c59      	adds	r1, r3, #1
   13af8:	ae15      	add	r6, sp, #84	; 0x54
   13afa:	e49f      	b.n	1343c <_vfiprintf_r+0x378>
   13afc:	9213      	str	r2, [sp, #76]	; 0x4c
   13afe:	ae15      	add	r6, sp, #84	; 0x54
   13b00:	e426      	b.n	13350 <_vfiprintf_r+0x28c>
   13b02:	9b02      	ldr	r3, [sp, #8]
   13b04:	2b00      	cmp	r3, #0
   13b06:	d001      	beq.n	13b0c <_vfiprintf_r+0xa48>
   13b08:	f7ff fbb4 	bl	13274 <_vfiprintf_r+0x1b0>
   13b0c:	2300      	movs	r3, #0
   13b0e:	ac3e      	add	r4, sp, #248	; 0xf8
   13b10:	9302      	str	r3, [sp, #8]
   13b12:	9303      	str	r3, [sp, #12]
   13b14:	f7ff fbba 	bl	1328c <_vfiprintf_r+0x1c8>
   13b18:	464b      	mov	r3, r9
   13b1a:	06db      	lsls	r3, r3, #27
   13b1c:	d45d      	bmi.n	13bda <_vfiprintf_r+0xb16>
   13b1e:	464b      	mov	r3, r9
   13b20:	065b      	lsls	r3, r3, #25
   13b22:	d556      	bpl.n	13bd2 <_vfiprintf_r+0xb0e>
   13b24:	9a08      	ldr	r2, [sp, #32]
   13b26:	ca08      	ldmia	r2!, {r3}
   13b28:	b29b      	uxth	r3, r3
   13b2a:	9306      	str	r3, [sp, #24]
   13b2c:	2300      	movs	r3, #0
   13b2e:	9208      	str	r2, [sp, #32]
   13b30:	9307      	str	r3, [sp, #28]
   13b32:	3301      	adds	r3, #1
   13b34:	f7ff fbc7 	bl	132c6 <_vfiprintf_r+0x202>
   13b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13b3a:	2b00      	cmp	r3, #0
   13b3c:	d070      	beq.n	13c20 <_vfiprintf_r+0xb5c>
   13b3e:	ab11      	add	r3, sp, #68	; 0x44
   13b40:	9315      	str	r3, [sp, #84]	; 0x54
   13b42:	2302      	movs	r3, #2
   13b44:	9316      	str	r3, [sp, #88]	; 0x58
   13b46:	3b01      	subs	r3, #1
   13b48:	469c      	mov	ip, r3
   13b4a:	2002      	movs	r0, #2
   13b4c:	ae15      	add	r6, sp, #84	; 0x54
   13b4e:	e6b6      	b.n	138be <_vfiprintf_r+0x7fa>
   13b50:	2300      	movs	r3, #0
   13b52:	2101      	movs	r1, #1
   13b54:	469c      	mov	ip, r3
   13b56:	ae15      	add	r6, sp, #84	; 0x54
   13b58:	e465      	b.n	13426 <_vfiprintf_r+0x362>
   13b5a:	9906      	ldr	r1, [sp, #24]
   13b5c:	9a07      	ldr	r2, [sp, #28]
   13b5e:	2400      	movs	r4, #0
   13b60:	424b      	negs	r3, r1
   13b62:	4194      	sbcs	r4, r2
   13b64:	9306      	str	r3, [sp, #24]
   13b66:	9407      	str	r4, [sp, #28]
   13b68:	232d      	movs	r3, #45	; 0x2d
   13b6a:	aa10      	add	r2, sp, #64	; 0x40
   13b6c:	70d3      	strb	r3, [r2, #3]
   13b6e:	46b9      	mov	r9, r7
   13b70:	3b2c      	subs	r3, #44	; 0x2c
   13b72:	f7ff fbab 	bl	132cc <_vfiprintf_r+0x208>
   13b76:	2800      	cmp	r0, #0
   13b78:	d100      	bne.n	13b7c <_vfiprintf_r+0xab8>
   13b7a:	e084      	b.n	13c86 <_vfiprintf_r+0xbc2>
   13b7c:	4659      	mov	r1, fp
   13b7e:	9801      	ldr	r0, [sp, #4]
   13b80:	aa12      	add	r2, sp, #72	; 0x48
   13b82:	f7ff fa5b 	bl	1303c <__sprint_r.part.0>
   13b86:	2800      	cmp	r0, #0
   13b88:	d000      	beq.n	13b8c <_vfiprintf_r+0xac8>
   13b8a:	e673      	b.n	13874 <_vfiprintf_r+0x7b0>
   13b8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13b8e:	9814      	ldr	r0, [sp, #80]	; 0x50
   13b90:	469c      	mov	ip, r3
   13b92:	1c59      	adds	r1, r3, #1
   13b94:	ae15      	add	r6, sp, #84	; 0x54
   13b96:	f7ff fc17 	bl	133c8 <_vfiprintf_r+0x304>
   13b9a:	782a      	ldrb	r2, [r5, #0]
   13b9c:	9308      	str	r3, [sp, #32]
   13b9e:	f7ff faf5 	bl	1318c <_vfiprintf_r+0xc8>
   13ba2:	3608      	adds	r6, #8
   13ba4:	1c59      	adds	r1, r3, #1
   13ba6:	e442      	b.n	1342e <_vfiprintf_r+0x36a>
   13ba8:	05bb      	lsls	r3, r7, #22
   13baa:	d500      	bpl.n	13bae <_vfiprintf_r+0xaea>
   13bac:	e0eb      	b.n	13d86 <_vfiprintf_r+0xcc2>
   13bae:	9b08      	ldr	r3, [sp, #32]
   13bb0:	cb04      	ldmia	r3!, {r2}
   13bb2:	9206      	str	r2, [sp, #24]
   13bb4:	2200      	movs	r2, #0
   13bb6:	9308      	str	r3, [sp, #32]
   13bb8:	9207      	str	r2, [sp, #28]
   13bba:	f7ff fb80 	bl	132be <_vfiprintf_r+0x1fa>
   13bbe:	05bb      	lsls	r3, r7, #22
   13bc0:	d500      	bpl.n	13bc4 <_vfiprintf_r+0xb00>
   13bc2:	e0f5      	b.n	13db0 <_vfiprintf_r+0xcec>
   13bc4:	ca08      	ldmia	r2!, {r3}
   13bc6:	9306      	str	r3, [sp, #24]
   13bc8:	17db      	asrs	r3, r3, #31
   13bca:	9307      	str	r3, [sp, #28]
   13bcc:	9208      	str	r2, [sp, #32]
   13bce:	f7ff fb37 	bl	13240 <_vfiprintf_r+0x17c>
   13bd2:	464b      	mov	r3, r9
   13bd4:	059b      	lsls	r3, r3, #22
   13bd6:	d500      	bpl.n	13bda <_vfiprintf_r+0xb16>
   13bd8:	e0f2      	b.n	13dc0 <_vfiprintf_r+0xcfc>
   13bda:	9b08      	ldr	r3, [sp, #32]
   13bdc:	cb04      	ldmia	r3!, {r2}
   13bde:	9206      	str	r2, [sp, #24]
   13be0:	2200      	movs	r2, #0
   13be2:	9308      	str	r3, [sp, #32]
   13be4:	9207      	str	r2, [sp, #28]
   13be6:	2301      	movs	r3, #1
   13be8:	f7ff fb6d 	bl	132c6 <_vfiprintf_r+0x202>
   13bec:	9908      	ldr	r1, [sp, #32]
   13bee:	9a05      	ldr	r2, [sp, #20]
   13bf0:	c908      	ldmia	r1!, {r3}
   13bf2:	601a      	str	r2, [r3, #0]
   13bf4:	17d2      	asrs	r2, r2, #31
   13bf6:	605a      	str	r2, [r3, #4]
   13bf8:	9108      	str	r1, [sp, #32]
   13bfa:	f7ff faa8 	bl	1314e <_vfiprintf_r+0x8a>
   13bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13c00:	2b00      	cmp	r3, #0
   13c02:	d101      	bne.n	13c08 <_vfiprintf_r+0xb44>
   13c04:	f7ff fb04 	bl	13210 <_vfiprintf_r+0x14c>
   13c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13c0a:	781b      	ldrb	r3, [r3, #0]
   13c0c:	2b00      	cmp	r3, #0
   13c0e:	d101      	bne.n	13c14 <_vfiprintf_r+0xb50>
   13c10:	f7ff fafe 	bl	13210 <_vfiprintf_r+0x14c>
   13c14:	2380      	movs	r3, #128	; 0x80
   13c16:	00db      	lsls	r3, r3, #3
   13c18:	782a      	ldrb	r2, [r5, #0]
   13c1a:	431f      	orrs	r7, r3
   13c1c:	f7ff fab6 	bl	1318c <_vfiprintf_r+0xc8>
   13c20:	469c      	mov	ip, r3
   13c22:	2101      	movs	r1, #1
   13c24:	ae15      	add	r6, sp, #84	; 0x54
   13c26:	f7ff fbfe 	bl	13426 <_vfiprintf_r+0x362>
   13c2a:	4b5c      	ldr	r3, [pc, #368]	; (13d9c <_vfiprintf_r+0xcd8>)
   13c2c:	930c      	str	r3, [sp, #48]	; 0x30
   13c2e:	06bb      	lsls	r3, r7, #26
   13c30:	d54e      	bpl.n	13cd0 <_vfiprintf_r+0xc0c>
   13c32:	2307      	movs	r3, #7
   13c34:	9908      	ldr	r1, [sp, #32]
   13c36:	3107      	adds	r1, #7
   13c38:	4399      	bics	r1, r3
   13c3a:	c918      	ldmia	r1!, {r3, r4}
   13c3c:	9306      	str	r3, [sp, #24]
   13c3e:	9407      	str	r4, [sp, #28]
   13c40:	9108      	str	r1, [sp, #32]
   13c42:	07fb      	lsls	r3, r7, #31
   13c44:	d50a      	bpl.n	13c5c <_vfiprintf_r+0xb98>
   13c46:	9806      	ldr	r0, [sp, #24]
   13c48:	9907      	ldr	r1, [sp, #28]
   13c4a:	0003      	movs	r3, r0
   13c4c:	430b      	orrs	r3, r1
   13c4e:	d005      	beq.n	13c5c <_vfiprintf_r+0xb98>
   13c50:	2130      	movs	r1, #48	; 0x30
   13c52:	ab11      	add	r3, sp, #68	; 0x44
   13c54:	7019      	strb	r1, [r3, #0]
   13c56:	705a      	strb	r2, [r3, #1]
   13c58:	2302      	movs	r3, #2
   13c5a:	431f      	orrs	r7, r3
   13c5c:	4b50      	ldr	r3, [pc, #320]	; (13da0 <_vfiprintf_r+0xcdc>)
   13c5e:	401f      	ands	r7, r3
   13c60:	46b9      	mov	r9, r7
   13c62:	2302      	movs	r3, #2
   13c64:	f7ff fb2f 	bl	132c6 <_vfiprintf_r+0x202>
   13c68:	46b9      	mov	r9, r7
   13c6a:	e4a3      	b.n	135b4 <_vfiprintf_r+0x4f0>
   13c6c:	4b4d      	ldr	r3, [pc, #308]	; (13da4 <_vfiprintf_r+0xce0>)
   13c6e:	930c      	str	r3, [sp, #48]	; 0x30
   13c70:	e7dd      	b.n	13c2e <_vfiprintf_r+0xb6a>
   13c72:	0020      	movs	r0, r4
   13c74:	f7fb fce2 	bl	f63c <strlen>
   13c78:	4643      	mov	r3, r8
   13c7a:	9308      	str	r3, [sp, #32]
   13c7c:	2300      	movs	r3, #0
   13c7e:	9003      	str	r0, [sp, #12]
   13c80:	9302      	str	r3, [sp, #8]
   13c82:	f7ff fb03 	bl	1328c <_vfiprintf_r+0x1c8>
   13c86:	ab10      	add	r3, sp, #64	; 0x40
   13c88:	78db      	ldrb	r3, [r3, #3]
   13c8a:	2b00      	cmp	r3, #0
   13c8c:	d072      	beq.n	13d74 <_vfiprintf_r+0xcb0>
   13c8e:	ab10      	add	r3, sp, #64	; 0x40
   13c90:	3303      	adds	r3, #3
   13c92:	9315      	str	r3, [sp, #84]	; 0x54
   13c94:	2301      	movs	r3, #1
   13c96:	2101      	movs	r1, #1
   13c98:	2001      	movs	r0, #1
   13c9a:	9316      	str	r3, [sp, #88]	; 0x58
   13c9c:	ae15      	add	r6, sp, #84	; 0x54
   13c9e:	f7ff fba2 	bl	133e6 <_vfiprintf_r+0x322>
   13ca2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
   13ca6:	1ae4      	subs	r4, r4, r3
   13ca8:	001a      	movs	r2, r3
   13caa:	0020      	movs	r0, r4
   13cac:	f7fb fd2e 	bl	f70c <strncpy>
   13cb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13cb2:	0030      	movs	r0, r6
   13cb4:	784b      	ldrb	r3, [r1, #1]
   13cb6:	468c      	mov	ip, r1
   13cb8:	1e5a      	subs	r2, r3, #1
   13cba:	4193      	sbcs	r3, r2
   13cbc:	449c      	add	ip, r3
   13cbe:	4663      	mov	r3, ip
   13cc0:	220a      	movs	r2, #10
   13cc2:	930b      	str	r3, [sp, #44]	; 0x2c
   13cc4:	0039      	movs	r1, r7
   13cc6:	2300      	movs	r3, #0
   13cc8:	f7f0 fcb0 	bl	462c <__aeabi_uldivmod>
   13ccc:	2500      	movs	r5, #0
   13cce:	e62f      	b.n	13930 <_vfiprintf_r+0x86c>
   13cd0:	06fb      	lsls	r3, r7, #27
   13cd2:	d40b      	bmi.n	13cec <_vfiprintf_r+0xc28>
   13cd4:	067b      	lsls	r3, r7, #25
   13cd6:	d507      	bpl.n	13ce8 <_vfiprintf_r+0xc24>
   13cd8:	9908      	ldr	r1, [sp, #32]
   13cda:	c908      	ldmia	r1!, {r3}
   13cdc:	b29b      	uxth	r3, r3
   13cde:	9306      	str	r3, [sp, #24]
   13ce0:	2300      	movs	r3, #0
   13ce2:	9108      	str	r1, [sp, #32]
   13ce4:	9307      	str	r3, [sp, #28]
   13ce6:	e7ac      	b.n	13c42 <_vfiprintf_r+0xb7e>
   13ce8:	05bb      	lsls	r3, r7, #22
   13cea:	d46d      	bmi.n	13dc8 <_vfiprintf_r+0xd04>
   13cec:	9b08      	ldr	r3, [sp, #32]
   13cee:	cb02      	ldmia	r3!, {r1}
   13cf0:	9106      	str	r1, [sp, #24]
   13cf2:	2100      	movs	r1, #0
   13cf4:	9308      	str	r3, [sp, #32]
   13cf6:	9107      	str	r1, [sp, #28]
   13cf8:	e7a3      	b.n	13c42 <_vfiprintf_r+0xb7e>
   13cfa:	4653      	mov	r3, sl
   13cfc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13cfe:	f7fa fe31 	bl	e964 <__retarget_lock_release_recursive>
   13d02:	4653      	mov	r3, sl
   13d04:	899b      	ldrh	r3, [r3, #12]
   13d06:	f7ff fbdf 	bl	134c8 <_vfiprintf_r+0x404>
   13d0a:	46b9      	mov	r9, r7
   13d0c:	2b01      	cmp	r3, #1
   13d0e:	d000      	beq.n	13d12 <_vfiprintf_r+0xc4e>
   13d10:	e4c9      	b.n	136a6 <_vfiprintf_r+0x5e2>
   13d12:	f7ff faaf 	bl	13274 <_vfiprintf_r+0x1b0>
   13d16:	2320      	movs	r3, #32
   13d18:	786a      	ldrb	r2, [r5, #1]
   13d1a:	431f      	orrs	r7, r3
   13d1c:	3501      	adds	r5, #1
   13d1e:	f7ff fa35 	bl	1318c <_vfiprintf_r+0xc8>
   13d22:	2380      	movs	r3, #128	; 0x80
   13d24:	009b      	lsls	r3, r3, #2
   13d26:	786a      	ldrb	r2, [r5, #1]
   13d28:	431f      	orrs	r7, r3
   13d2a:	3501      	adds	r5, #1
   13d2c:	f7ff fa2e 	bl	1318c <_vfiprintf_r+0xc8>
   13d30:	9a08      	ldr	r2, [sp, #32]
   13d32:	9905      	ldr	r1, [sp, #20]
   13d34:	ca08      	ldmia	r2!, {r3}
   13d36:	6019      	str	r1, [r3, #0]
   13d38:	9208      	str	r2, [sp, #32]
   13d3a:	f7ff fa08 	bl	1314e <_vfiprintf_r+0x8a>
   13d3e:	9b02      	ldr	r3, [sp, #8]
   13d40:	9303      	str	r3, [sp, #12]
   13d42:	2b06      	cmp	r3, #6
   13d44:	d813      	bhi.n	13d6e <_vfiprintf_r+0xcaa>
   13d46:	9b03      	ldr	r3, [sp, #12]
   13d48:	4c17      	ldr	r4, [pc, #92]	; (13da8 <_vfiprintf_r+0xce4>)
   13d4a:	4699      	mov	r9, r3
   13d4c:	4643      	mov	r3, r8
   13d4e:	9308      	str	r3, [sp, #32]
   13d50:	f7ff fb1f 	bl	13392 <_vfiprintf_r+0x2ce>
   13d54:	4b15      	ldr	r3, [pc, #84]	; (13dac <_vfiprintf_r+0xce8>)
   13d56:	4698      	mov	r8, r3
   13d58:	e573      	b.n	13842 <_vfiprintf_r+0x77e>
   13d5a:	2e09      	cmp	r6, #9
   13d5c:	d900      	bls.n	13d60 <_vfiprintf_r+0xc9c>
   13d5e:	e5e7      	b.n	13930 <_vfiprintf_r+0x86c>
   13d60:	e601      	b.n	13966 <_vfiprintf_r+0x8a2>
   13d62:	2300      	movs	r3, #0
   13d64:	2101      	movs	r1, #1
   13d66:	469c      	mov	ip, r3
   13d68:	ae15      	add	r6, sp, #84	; 0x54
   13d6a:	f7ff fb60 	bl	1342e <_vfiprintf_r+0x36a>
   13d6e:	2306      	movs	r3, #6
   13d70:	9303      	str	r3, [sp, #12]
   13d72:	e7e8      	b.n	13d46 <_vfiprintf_r+0xc82>
   13d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13d76:	2b00      	cmp	r3, #0
   13d78:	d000      	beq.n	13d7c <_vfiprintf_r+0xcb8>
   13d7a:	e598      	b.n	138ae <_vfiprintf_r+0x7ea>
   13d7c:	469c      	mov	ip, r3
   13d7e:	2101      	movs	r1, #1
   13d80:	ae15      	add	r6, sp, #84	; 0x54
   13d82:	f7ff fb54 	bl	1342e <_vfiprintf_r+0x36a>
   13d86:	9a08      	ldr	r2, [sp, #32]
   13d88:	ca08      	ldmia	r2!, {r3}
   13d8a:	b2db      	uxtb	r3, r3
   13d8c:	9306      	str	r3, [sp, #24]
   13d8e:	2300      	movs	r3, #0
   13d90:	9208      	str	r2, [sp, #32]
   13d92:	9307      	str	r3, [sp, #28]
   13d94:	f7ff fa93 	bl	132be <_vfiprintf_r+0x1fa>
   13d98:	00017040 	.word	0x00017040
   13d9c:	00016b58 	.word	0x00016b58
   13da0:	fffffbff 	.word	0xfffffbff
   13da4:	00016b44 	.word	0x00016b44
   13da8:	00016b6c 	.word	0x00016b6c
   13dac:	00017050 	.word	0x00017050
   13db0:	ca08      	ldmia	r2!, {r3}
   13db2:	b25b      	sxtb	r3, r3
   13db4:	9306      	str	r3, [sp, #24]
   13db6:	17db      	asrs	r3, r3, #31
   13db8:	9307      	str	r3, [sp, #28]
   13dba:	9208      	str	r2, [sp, #32]
   13dbc:	f7ff fa40 	bl	13240 <_vfiprintf_r+0x17c>
   13dc0:	9a08      	ldr	r2, [sp, #32]
   13dc2:	ca08      	ldmia	r2!, {r3}
   13dc4:	b2db      	uxtb	r3, r3
   13dc6:	e6b0      	b.n	13b2a <_vfiprintf_r+0xa66>
   13dc8:	9908      	ldr	r1, [sp, #32]
   13dca:	c908      	ldmia	r1!, {r3}
   13dcc:	b2db      	uxtb	r3, r3
   13dce:	9306      	str	r3, [sp, #24]
   13dd0:	2300      	movs	r3, #0
   13dd2:	9108      	str	r1, [sp, #32]
   13dd4:	9307      	str	r3, [sp, #28]
   13dd6:	e734      	b.n	13c42 <_vfiprintf_r+0xb7e>
   13dd8:	9a08      	ldr	r2, [sp, #32]
   13dda:	9905      	ldr	r1, [sp, #20]
   13ddc:	ca08      	ldmia	r2!, {r3}
   13dde:	8019      	strh	r1, [r3, #0]
   13de0:	9208      	str	r2, [sp, #32]
   13de2:	f7ff f9b4 	bl	1314e <_vfiprintf_r+0x8a>
   13de6:	4653      	mov	r3, sl
   13de8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13dea:	f7fa fdbb 	bl	e964 <__retarget_lock_release_recursive>
   13dee:	f7ff f9f2 	bl	131d6 <_vfiprintf_r+0x112>
   13df2:	4643      	mov	r3, r8
   13df4:	9308      	str	r3, [sp, #32]
   13df6:	9b02      	ldr	r3, [sp, #8]
   13df8:	9303      	str	r3, [sp, #12]
   13dfa:	2300      	movs	r3, #0
   13dfc:	9302      	str	r3, [sp, #8]
   13dfe:	f7ff fa45 	bl	1328c <_vfiprintf_r+0x1c8>
   13e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13e04:	930f      	str	r3, [sp, #60]	; 0x3c
   13e06:	3301      	adds	r3, #1
   13e08:	469c      	mov	ip, r3
   13e0a:	4b1a      	ldr	r3, [pc, #104]	; (13e74 <_vfiprintf_r+0xdb0>)
   13e0c:	469a      	mov	sl, r3
   13e0e:	e5f5      	b.n	139fc <_vfiprintf_r+0x938>
   13e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13e12:	9302      	str	r3, [sp, #8]
   13e14:	1c59      	adds	r1, r3, #1
   13e16:	4b17      	ldr	r3, [pc, #92]	; (13e74 <_vfiprintf_r+0xdb0>)
   13e18:	469a      	mov	sl, r3
   13e1a:	e63a      	b.n	13a92 <_vfiprintf_r+0x9ce>
   13e1c:	4659      	mov	r1, fp
   13e1e:	9801      	ldr	r0, [sp, #4]
   13e20:	aa12      	add	r2, sp, #72	; 0x48
   13e22:	f7ff f90b 	bl	1303c <__sprint_r.part.0>
   13e26:	2800      	cmp	r0, #0
   13e28:	d101      	bne.n	13e2e <_vfiprintf_r+0xd6a>
   13e2a:	f7ff fb40 	bl	134ae <_vfiprintf_r+0x3ea>
   13e2e:	f7ff fb40 	bl	134b2 <_vfiprintf_r+0x3ee>
   13e32:	4b11      	ldr	r3, [pc, #68]	; (13e78 <_vfiprintf_r+0xdb4>)
   13e34:	468c      	mov	ip, r1
   13e36:	4698      	mov	r8, r3
   13e38:	e4ab      	b.n	13792 <_vfiprintf_r+0x6ce>
   13e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13e3c:	07db      	lsls	r3, r3, #31
   13e3e:	d407      	bmi.n	13e50 <_vfiprintf_r+0xd8c>
   13e40:	4653      	mov	r3, sl
   13e42:	899b      	ldrh	r3, [r3, #12]
   13e44:	059b      	lsls	r3, r3, #22
   13e46:	d403      	bmi.n	13e50 <_vfiprintf_r+0xd8c>
   13e48:	4653      	mov	r3, sl
   13e4a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   13e4c:	f7fa fd8a 	bl	e964 <__retarget_lock_release_recursive>
   13e50:	2301      	movs	r3, #1
   13e52:	425b      	negs	r3, r3
   13e54:	9305      	str	r3, [sp, #20]
   13e56:	f7ff fb3b 	bl	134d0 <_vfiprintf_r+0x40c>
   13e5a:	9908      	ldr	r1, [sp, #32]
   13e5c:	c904      	ldmia	r1!, {r2}
   13e5e:	9202      	str	r2, [sp, #8]
   13e60:	2a00      	cmp	r2, #0
   13e62:	da02      	bge.n	13e6a <_vfiprintf_r+0xda6>
   13e64:	2201      	movs	r2, #1
   13e66:	4252      	negs	r2, r2
   13e68:	9202      	str	r2, [sp, #8]
   13e6a:	786a      	ldrb	r2, [r5, #1]
   13e6c:	9108      	str	r1, [sp, #32]
   13e6e:	001d      	movs	r5, r3
   13e70:	f7ff f98c 	bl	1318c <_vfiprintf_r+0xc8>
   13e74:	00017040 	.word	0x00017040
   13e78:	00017050 	.word	0x00017050

00013e7c <__sbprintf>:
   13e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e7e:	001f      	movs	r7, r3
   13e80:	2302      	movs	r3, #2
   13e82:	4c1f      	ldr	r4, [pc, #124]	; (13f00 <__sbprintf+0x84>)
   13e84:	0015      	movs	r5, r2
   13e86:	44a5      	add	sp, r4
   13e88:	000c      	movs	r4, r1
   13e8a:	8989      	ldrh	r1, [r1, #12]
   13e8c:	466a      	mov	r2, sp
   13e8e:	4399      	bics	r1, r3
   13e90:	466b      	mov	r3, sp
   13e92:	8199      	strh	r1, [r3, #12]
   13e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13e96:	2180      	movs	r1, #128	; 0x80
   13e98:	9319      	str	r3, [sp, #100]	; 0x64
   13e9a:	89e3      	ldrh	r3, [r4, #14]
   13e9c:	0006      	movs	r6, r0
   13e9e:	81d3      	strh	r3, [r2, #14]
   13ea0:	69e3      	ldr	r3, [r4, #28]
   13ea2:	00c9      	lsls	r1, r1, #3
   13ea4:	9307      	str	r3, [sp, #28]
   13ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13ea8:	a816      	add	r0, sp, #88	; 0x58
   13eaa:	9309      	str	r3, [sp, #36]	; 0x24
   13eac:	ab1a      	add	r3, sp, #104	; 0x68
   13eae:	9300      	str	r3, [sp, #0]
   13eb0:	9304      	str	r3, [sp, #16]
   13eb2:	2300      	movs	r3, #0
   13eb4:	9102      	str	r1, [sp, #8]
   13eb6:	9105      	str	r1, [sp, #20]
   13eb8:	9306      	str	r3, [sp, #24]
   13eba:	f7fa fd4d 	bl	e958 <__retarget_lock_init_recursive>
   13ebe:	002a      	movs	r2, r5
   13ec0:	003b      	movs	r3, r7
   13ec2:	4669      	mov	r1, sp
   13ec4:	0030      	movs	r0, r6
   13ec6:	f7ff f8fd 	bl	130c4 <_vfiprintf_r>
   13eca:	1e05      	subs	r5, r0, #0
   13ecc:	da0e      	bge.n	13eec <__sbprintf+0x70>
   13ece:	466b      	mov	r3, sp
   13ed0:	899b      	ldrh	r3, [r3, #12]
   13ed2:	065b      	lsls	r3, r3, #25
   13ed4:	d503      	bpl.n	13ede <__sbprintf+0x62>
   13ed6:	2240      	movs	r2, #64	; 0x40
   13ed8:	89a3      	ldrh	r3, [r4, #12]
   13eda:	4313      	orrs	r3, r2
   13edc:	81a3      	strh	r3, [r4, #12]
   13ede:	9816      	ldr	r0, [sp, #88]	; 0x58
   13ee0:	f7fa fd3c 	bl	e95c <__retarget_lock_close_recursive>
   13ee4:	0028      	movs	r0, r5
   13ee6:	4b07      	ldr	r3, [pc, #28]	; (13f04 <__sbprintf+0x88>)
   13ee8:	449d      	add	sp, r3
   13eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13eec:	4669      	mov	r1, sp
   13eee:	0030      	movs	r0, r6
   13ef0:	f7fa f852 	bl	df98 <_fflush_r>
   13ef4:	2800      	cmp	r0, #0
   13ef6:	d0ea      	beq.n	13ece <__sbprintf+0x52>
   13ef8:	2501      	movs	r5, #1
   13efa:	426d      	negs	r5, r5
   13efc:	e7e7      	b.n	13ece <__sbprintf+0x52>
   13efe:	46c0      	nop			; (mov r8, r8)
   13f00:	fffffb94 	.word	0xfffffb94
   13f04:	0000046c 	.word	0x0000046c

00013f08 <__swbuf_r>:
   13f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f0a:	0005      	movs	r5, r0
   13f0c:	000e      	movs	r6, r1
   13f0e:	0014      	movs	r4, r2
   13f10:	2800      	cmp	r0, #0
   13f12:	d002      	beq.n	13f1a <__swbuf_r+0x12>
   13f14:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13f16:	2b00      	cmp	r3, #0
   13f18:	d04b      	beq.n	13fb2 <__swbuf_r+0xaa>
   13f1a:	69a3      	ldr	r3, [r4, #24]
   13f1c:	89a2      	ldrh	r2, [r4, #12]
   13f1e:	60a3      	str	r3, [r4, #8]
   13f20:	230c      	movs	r3, #12
   13f22:	5ee0      	ldrsh	r0, [r4, r3]
   13f24:	0713      	lsls	r3, r2, #28
   13f26:	d51f      	bpl.n	13f68 <__swbuf_r+0x60>
   13f28:	6923      	ldr	r3, [r4, #16]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	d01c      	beq.n	13f68 <__swbuf_r+0x60>
   13f2e:	21ff      	movs	r1, #255	; 0xff
   13f30:	b2f7      	uxtb	r7, r6
   13f32:	400e      	ands	r6, r1
   13f34:	2180      	movs	r1, #128	; 0x80
   13f36:	0189      	lsls	r1, r1, #6
   13f38:	420a      	tst	r2, r1
   13f3a:	d026      	beq.n	13f8a <__swbuf_r+0x82>
   13f3c:	6822      	ldr	r2, [r4, #0]
   13f3e:	6961      	ldr	r1, [r4, #20]
   13f40:	1ad3      	subs	r3, r2, r3
   13f42:	4299      	cmp	r1, r3
   13f44:	dd2c      	ble.n	13fa0 <__swbuf_r+0x98>
   13f46:	3301      	adds	r3, #1
   13f48:	68a1      	ldr	r1, [r4, #8]
   13f4a:	3901      	subs	r1, #1
   13f4c:	60a1      	str	r1, [r4, #8]
   13f4e:	1c51      	adds	r1, r2, #1
   13f50:	6021      	str	r1, [r4, #0]
   13f52:	7017      	strb	r7, [r2, #0]
   13f54:	6962      	ldr	r2, [r4, #20]
   13f56:	429a      	cmp	r2, r3
   13f58:	d02e      	beq.n	13fb8 <__swbuf_r+0xb0>
   13f5a:	89a3      	ldrh	r3, [r4, #12]
   13f5c:	07db      	lsls	r3, r3, #31
   13f5e:	d501      	bpl.n	13f64 <__swbuf_r+0x5c>
   13f60:	2e0a      	cmp	r6, #10
   13f62:	d029      	beq.n	13fb8 <__swbuf_r+0xb0>
   13f64:	0030      	movs	r0, r6
   13f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f68:	0021      	movs	r1, r4
   13f6a:	0028      	movs	r0, r5
   13f6c:	f000 f830 	bl	13fd0 <__swsetup_r>
   13f70:	2800      	cmp	r0, #0
   13f72:	d127      	bne.n	13fc4 <__swbuf_r+0xbc>
   13f74:	21ff      	movs	r1, #255	; 0xff
   13f76:	b2f7      	uxtb	r7, r6
   13f78:	400e      	ands	r6, r1
   13f7a:	2180      	movs	r1, #128	; 0x80
   13f7c:	89a2      	ldrh	r2, [r4, #12]
   13f7e:	0189      	lsls	r1, r1, #6
   13f80:	230c      	movs	r3, #12
   13f82:	5ee0      	ldrsh	r0, [r4, r3]
   13f84:	6923      	ldr	r3, [r4, #16]
   13f86:	420a      	tst	r2, r1
   13f88:	d1d8      	bne.n	13f3c <__swbuf_r+0x34>
   13f8a:	4301      	orrs	r1, r0
   13f8c:	4a0f      	ldr	r2, [pc, #60]	; (13fcc <__swbuf_r+0xc4>)
   13f8e:	81a1      	strh	r1, [r4, #12]
   13f90:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13f92:	400a      	ands	r2, r1
   13f94:	6662      	str	r2, [r4, #100]	; 0x64
   13f96:	6961      	ldr	r1, [r4, #20]
   13f98:	6822      	ldr	r2, [r4, #0]
   13f9a:	1ad3      	subs	r3, r2, r3
   13f9c:	4299      	cmp	r1, r3
   13f9e:	dcd2      	bgt.n	13f46 <__swbuf_r+0x3e>
   13fa0:	0021      	movs	r1, r4
   13fa2:	0028      	movs	r0, r5
   13fa4:	f7f9 fff8 	bl	df98 <_fflush_r>
   13fa8:	2800      	cmp	r0, #0
   13faa:	d10b      	bne.n	13fc4 <__swbuf_r+0xbc>
   13fac:	2301      	movs	r3, #1
   13fae:	6822      	ldr	r2, [r4, #0]
   13fb0:	e7ca      	b.n	13f48 <__swbuf_r+0x40>
   13fb2:	f7fa f86b 	bl	e08c <__sinit>
   13fb6:	e7b0      	b.n	13f1a <__swbuf_r+0x12>
   13fb8:	0021      	movs	r1, r4
   13fba:	0028      	movs	r0, r5
   13fbc:	f7f9 ffec 	bl	df98 <_fflush_r>
   13fc0:	2800      	cmp	r0, #0
   13fc2:	d0cf      	beq.n	13f64 <__swbuf_r+0x5c>
   13fc4:	2601      	movs	r6, #1
   13fc6:	4276      	negs	r6, r6
   13fc8:	e7cc      	b.n	13f64 <__swbuf_r+0x5c>
   13fca:	46c0      	nop			; (mov r8, r8)
   13fcc:	ffffdfff 	.word	0xffffdfff

00013fd0 <__swsetup_r>:
   13fd0:	4b35      	ldr	r3, [pc, #212]	; (140a8 <__swsetup_r+0xd8>)
   13fd2:	b570      	push	{r4, r5, r6, lr}
   13fd4:	0005      	movs	r5, r0
   13fd6:	6818      	ldr	r0, [r3, #0]
   13fd8:	000c      	movs	r4, r1
   13fda:	2800      	cmp	r0, #0
   13fdc:	d002      	beq.n	13fe4 <__swsetup_r+0x14>
   13fde:	6b83      	ldr	r3, [r0, #56]	; 0x38
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	d021      	beq.n	14028 <__swsetup_r+0x58>
   13fe4:	230c      	movs	r3, #12
   13fe6:	5ee2      	ldrsh	r2, [r4, r3]
   13fe8:	89a3      	ldrh	r3, [r4, #12]
   13fea:	0719      	lsls	r1, r3, #28
   13fec:	d523      	bpl.n	14036 <__swsetup_r+0x66>
   13fee:	6921      	ldr	r1, [r4, #16]
   13ff0:	2900      	cmp	r1, #0
   13ff2:	d02b      	beq.n	1404c <__swsetup_r+0x7c>
   13ff4:	07d8      	lsls	r0, r3, #31
   13ff6:	d508      	bpl.n	1400a <__swsetup_r+0x3a>
   13ff8:	2000      	movs	r0, #0
   13ffa:	60a0      	str	r0, [r4, #8]
   13ffc:	6960      	ldr	r0, [r4, #20]
   13ffe:	4240      	negs	r0, r0
   14000:	61a0      	str	r0, [r4, #24]
   14002:	2000      	movs	r0, #0
   14004:	2900      	cmp	r1, #0
   14006:	d008      	beq.n	1401a <__swsetup_r+0x4a>
   14008:	bd70      	pop	{r4, r5, r6, pc}
   1400a:	2000      	movs	r0, #0
   1400c:	079d      	lsls	r5, r3, #30
   1400e:	d400      	bmi.n	14012 <__swsetup_r+0x42>
   14010:	6960      	ldr	r0, [r4, #20]
   14012:	60a0      	str	r0, [r4, #8]
   14014:	2000      	movs	r0, #0
   14016:	2900      	cmp	r1, #0
   14018:	d1f6      	bne.n	14008 <__swsetup_r+0x38>
   1401a:	061b      	lsls	r3, r3, #24
   1401c:	d5f4      	bpl.n	14008 <__swsetup_r+0x38>
   1401e:	2340      	movs	r3, #64	; 0x40
   14020:	431a      	orrs	r2, r3
   14022:	81a2      	strh	r2, [r4, #12]
   14024:	3801      	subs	r0, #1
   14026:	e7ef      	b.n	14008 <__swsetup_r+0x38>
   14028:	f7fa f830 	bl	e08c <__sinit>
   1402c:	230c      	movs	r3, #12
   1402e:	5ee2      	ldrsh	r2, [r4, r3]
   14030:	89a3      	ldrh	r3, [r4, #12]
   14032:	0719      	lsls	r1, r3, #28
   14034:	d4db      	bmi.n	13fee <__swsetup_r+0x1e>
   14036:	06d9      	lsls	r1, r3, #27
   14038:	d52d      	bpl.n	14096 <__swsetup_r+0xc6>
   1403a:	075b      	lsls	r3, r3, #29
   1403c:	d416      	bmi.n	1406c <__swsetup_r+0x9c>
   1403e:	6921      	ldr	r1, [r4, #16]
   14040:	2308      	movs	r3, #8
   14042:	431a      	orrs	r2, r3
   14044:	81a2      	strh	r2, [r4, #12]
   14046:	b293      	uxth	r3, r2
   14048:	2900      	cmp	r1, #0
   1404a:	d1d3      	bne.n	13ff4 <__swsetup_r+0x24>
   1404c:	20a0      	movs	r0, #160	; 0xa0
   1404e:	2680      	movs	r6, #128	; 0x80
   14050:	0080      	lsls	r0, r0, #2
   14052:	00b6      	lsls	r6, r6, #2
   14054:	4018      	ands	r0, r3
   14056:	42b0      	cmp	r0, r6
   14058:	d0cc      	beq.n	13ff4 <__swsetup_r+0x24>
   1405a:	0021      	movs	r1, r4
   1405c:	0028      	movs	r0, r5
   1405e:	f7fa fc83 	bl	e968 <__smakebuf_r>
   14062:	230c      	movs	r3, #12
   14064:	5ee2      	ldrsh	r2, [r4, r3]
   14066:	6921      	ldr	r1, [r4, #16]
   14068:	89a3      	ldrh	r3, [r4, #12]
   1406a:	e7c3      	b.n	13ff4 <__swsetup_r+0x24>
   1406c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1406e:	2900      	cmp	r1, #0
   14070:	d00a      	beq.n	14088 <__swsetup_r+0xb8>
   14072:	0023      	movs	r3, r4
   14074:	3340      	adds	r3, #64	; 0x40
   14076:	4299      	cmp	r1, r3
   14078:	d004      	beq.n	14084 <__swsetup_r+0xb4>
   1407a:	0028      	movs	r0, r5
   1407c:	f7f9 fdfe 	bl	dc7c <_free_r>
   14080:	230c      	movs	r3, #12
   14082:	5ee2      	ldrsh	r2, [r4, r3]
   14084:	2300      	movs	r3, #0
   14086:	6323      	str	r3, [r4, #48]	; 0x30
   14088:	2324      	movs	r3, #36	; 0x24
   1408a:	439a      	bics	r2, r3
   1408c:	2300      	movs	r3, #0
   1408e:	6921      	ldr	r1, [r4, #16]
   14090:	6063      	str	r3, [r4, #4]
   14092:	6021      	str	r1, [r4, #0]
   14094:	e7d4      	b.n	14040 <__swsetup_r+0x70>
   14096:	2309      	movs	r3, #9
   14098:	602b      	str	r3, [r5, #0]
   1409a:	2340      	movs	r3, #64	; 0x40
   1409c:	2001      	movs	r0, #1
   1409e:	431a      	orrs	r2, r3
   140a0:	81a2      	strh	r2, [r4, #12]
   140a2:	4240      	negs	r0, r0
   140a4:	e7b0      	b.n	14008 <__swsetup_r+0x38>
   140a6:	46c0      	nop			; (mov r8, r8)
   140a8:	0001737c 	.word	0x0001737c

000140ac <__env_lock>:
   140ac:	b510      	push	{r4, lr}
   140ae:	4802      	ldr	r0, [pc, #8]	; (140b8 <__env_lock+0xc>)
   140b0:	f7fa fc56 	bl	e960 <__retarget_lock_acquire_recursive>
   140b4:	bd10      	pop	{r4, pc}
   140b6:	46c0      	nop			; (mov r8, r8)
   140b8:	00018768 	.word	0x00018768

000140bc <__env_unlock>:
   140bc:	b510      	push	{r4, lr}
   140be:	4802      	ldr	r0, [pc, #8]	; (140c8 <__env_unlock+0xc>)
   140c0:	f7fa fc50 	bl	e964 <__retarget_lock_release_recursive>
   140c4:	bd10      	pop	{r4, pc}
   140c6:	46c0      	nop			; (mov r8, r8)
   140c8:	00018768 	.word	0x00018768

000140cc <__fputwc>:
   140cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   140ce:	46ce      	mov	lr, r9
   140d0:	4647      	mov	r7, r8
   140d2:	b580      	push	{r7, lr}
   140d4:	b083      	sub	sp, #12
   140d6:	4680      	mov	r8, r0
   140d8:	4689      	mov	r9, r1
   140da:	0014      	movs	r4, r2
   140dc:	f000 f870 	bl	141c0 <__locale_mb_cur_max>
   140e0:	2801      	cmp	r0, #1
   140e2:	d103      	bne.n	140ec <__fputwc+0x20>
   140e4:	464b      	mov	r3, r9
   140e6:	3b01      	subs	r3, #1
   140e8:	2bfe      	cmp	r3, #254	; 0xfe
   140ea:	d930      	bls.n	1414e <__fputwc+0x82>
   140ec:	0023      	movs	r3, r4
   140ee:	af01      	add	r7, sp, #4
   140f0:	464a      	mov	r2, r9
   140f2:	0039      	movs	r1, r7
   140f4:	4640      	mov	r0, r8
   140f6:	335c      	adds	r3, #92	; 0x5c
   140f8:	f000 f880 	bl	141fc <_wcrtomb_r>
   140fc:	0006      	movs	r6, r0
   140fe:	1c43      	adds	r3, r0, #1
   14100:	d02b      	beq.n	1415a <__fputwc+0x8e>
   14102:	2800      	cmp	r0, #0
   14104:	d021      	beq.n	1414a <__fputwc+0x7e>
   14106:	7839      	ldrb	r1, [r7, #0]
   14108:	2500      	movs	r5, #0
   1410a:	e007      	b.n	1411c <__fputwc+0x50>
   1410c:	6823      	ldr	r3, [r4, #0]
   1410e:	1c5a      	adds	r2, r3, #1
   14110:	6022      	str	r2, [r4, #0]
   14112:	7019      	strb	r1, [r3, #0]
   14114:	3501      	adds	r5, #1
   14116:	42b5      	cmp	r5, r6
   14118:	d217      	bcs.n	1414a <__fputwc+0x7e>
   1411a:	5d79      	ldrb	r1, [r7, r5]
   1411c:	68a3      	ldr	r3, [r4, #8]
   1411e:	3b01      	subs	r3, #1
   14120:	60a3      	str	r3, [r4, #8]
   14122:	2b00      	cmp	r3, #0
   14124:	daf2      	bge.n	1410c <__fputwc+0x40>
   14126:	69a2      	ldr	r2, [r4, #24]
   14128:	4293      	cmp	r3, r2
   1412a:	db01      	blt.n	14130 <__fputwc+0x64>
   1412c:	290a      	cmp	r1, #10
   1412e:	d1ed      	bne.n	1410c <__fputwc+0x40>
   14130:	0022      	movs	r2, r4
   14132:	4640      	mov	r0, r8
   14134:	f7ff fee8 	bl	13f08 <__swbuf_r>
   14138:	1c43      	adds	r3, r0, #1
   1413a:	d1eb      	bne.n	14114 <__fputwc+0x48>
   1413c:	0006      	movs	r6, r0
   1413e:	0030      	movs	r0, r6
   14140:	b003      	add	sp, #12
   14142:	bcc0      	pop	{r6, r7}
   14144:	46b9      	mov	r9, r7
   14146:	46b0      	mov	r8, r6
   14148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1414a:	464e      	mov	r6, r9
   1414c:	e7f7      	b.n	1413e <__fputwc+0x72>
   1414e:	464b      	mov	r3, r9
   14150:	af01      	add	r7, sp, #4
   14152:	b2d9      	uxtb	r1, r3
   14154:	2601      	movs	r6, #1
   14156:	7039      	strb	r1, [r7, #0]
   14158:	e7d6      	b.n	14108 <__fputwc+0x3c>
   1415a:	2240      	movs	r2, #64	; 0x40
   1415c:	89a3      	ldrh	r3, [r4, #12]
   1415e:	4313      	orrs	r3, r2
   14160:	81a3      	strh	r3, [r4, #12]
   14162:	e7ec      	b.n	1413e <__fputwc+0x72>

00014164 <_fputwc_r>:
   14164:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14166:	b570      	push	{r4, r5, r6, lr}
   14168:	0005      	movs	r5, r0
   1416a:	000e      	movs	r6, r1
   1416c:	0014      	movs	r4, r2
   1416e:	07db      	lsls	r3, r3, #31
   14170:	d41e      	bmi.n	141b0 <_fputwc_r+0x4c>
   14172:	89a1      	ldrh	r1, [r4, #12]
   14174:	230c      	movs	r3, #12
   14176:	5ed2      	ldrsh	r2, [r2, r3]
   14178:	058b      	lsls	r3, r1, #22
   1417a:	d516      	bpl.n	141aa <_fputwc_r+0x46>
   1417c:	2380      	movs	r3, #128	; 0x80
   1417e:	019b      	lsls	r3, r3, #6
   14180:	4219      	tst	r1, r3
   14182:	d104      	bne.n	1418e <_fputwc_r+0x2a>
   14184:	431a      	orrs	r2, r3
   14186:	81a2      	strh	r2, [r4, #12]
   14188:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1418a:	4313      	orrs	r3, r2
   1418c:	6663      	str	r3, [r4, #100]	; 0x64
   1418e:	0028      	movs	r0, r5
   14190:	0022      	movs	r2, r4
   14192:	0031      	movs	r1, r6
   14194:	f7ff ff9a 	bl	140cc <__fputwc>
   14198:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1419a:	0005      	movs	r5, r0
   1419c:	07db      	lsls	r3, r3, #31
   1419e:	d402      	bmi.n	141a6 <_fputwc_r+0x42>
   141a0:	89a3      	ldrh	r3, [r4, #12]
   141a2:	059b      	lsls	r3, r3, #22
   141a4:	d508      	bpl.n	141b8 <_fputwc_r+0x54>
   141a6:	0028      	movs	r0, r5
   141a8:	bd70      	pop	{r4, r5, r6, pc}
   141aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   141ac:	f7fa fbd8 	bl	e960 <__retarget_lock_acquire_recursive>
   141b0:	230c      	movs	r3, #12
   141b2:	5ee2      	ldrsh	r2, [r4, r3]
   141b4:	89a1      	ldrh	r1, [r4, #12]
   141b6:	e7e1      	b.n	1417c <_fputwc_r+0x18>
   141b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   141ba:	f7fa fbd3 	bl	e964 <__retarget_lock_release_recursive>
   141be:	e7f2      	b.n	141a6 <_fputwc_r+0x42>

000141c0 <__locale_mb_cur_max>:
   141c0:	2394      	movs	r3, #148	; 0x94
   141c2:	4a02      	ldr	r2, [pc, #8]	; (141cc <__locale_mb_cur_max+0xc>)
   141c4:	005b      	lsls	r3, r3, #1
   141c6:	5cd0      	ldrb	r0, [r2, r3]
   141c8:	4770      	bx	lr
   141ca:	46c0      	nop			; (mov r8, r8)
   141cc:	000177ac 	.word	0x000177ac

000141d0 <__ascii_mbtowc>:
   141d0:	b082      	sub	sp, #8
   141d2:	2900      	cmp	r1, #0
   141d4:	d00a      	beq.n	141ec <__ascii_mbtowc+0x1c>
   141d6:	2a00      	cmp	r2, #0
   141d8:	d00b      	beq.n	141f2 <__ascii_mbtowc+0x22>
   141da:	2b00      	cmp	r3, #0
   141dc:	d00b      	beq.n	141f6 <__ascii_mbtowc+0x26>
   141de:	7813      	ldrb	r3, [r2, #0]
   141e0:	600b      	str	r3, [r1, #0]
   141e2:	7810      	ldrb	r0, [r2, #0]
   141e4:	1e43      	subs	r3, r0, #1
   141e6:	4198      	sbcs	r0, r3
   141e8:	b002      	add	sp, #8
   141ea:	4770      	bx	lr
   141ec:	a901      	add	r1, sp, #4
   141ee:	2a00      	cmp	r2, #0
   141f0:	d1f3      	bne.n	141da <__ascii_mbtowc+0xa>
   141f2:	2000      	movs	r0, #0
   141f4:	e7f8      	b.n	141e8 <__ascii_mbtowc+0x18>
   141f6:	2002      	movs	r0, #2
   141f8:	4240      	negs	r0, r0
   141fa:	e7f5      	b.n	141e8 <__ascii_mbtowc+0x18>

000141fc <_wcrtomb_r>:
   141fc:	b570      	push	{r4, r5, r6, lr}
   141fe:	0004      	movs	r4, r0
   14200:	001d      	movs	r5, r3
   14202:	b084      	sub	sp, #16
   14204:	2900      	cmp	r1, #0
   14206:	d009      	beq.n	1421c <_wcrtomb_r+0x20>
   14208:	23e0      	movs	r3, #224	; 0xe0
   1420a:	480b      	ldr	r0, [pc, #44]	; (14238 <_wcrtomb_r+0x3c>)
   1420c:	58c6      	ldr	r6, [r0, r3]
   1420e:	002b      	movs	r3, r5
   14210:	0020      	movs	r0, r4
   14212:	47b0      	blx	r6
   14214:	1c43      	adds	r3, r0, #1
   14216:	d00a      	beq.n	1422e <_wcrtomb_r+0x32>
   14218:	b004      	add	sp, #16
   1421a:	bd70      	pop	{r4, r5, r6, pc}
   1421c:	23e0      	movs	r3, #224	; 0xe0
   1421e:	4a06      	ldr	r2, [pc, #24]	; (14238 <_wcrtomb_r+0x3c>)
   14220:	a901      	add	r1, sp, #4
   14222:	58d6      	ldr	r6, [r2, r3]
   14224:	002b      	movs	r3, r5
   14226:	2200      	movs	r2, #0
   14228:	47b0      	blx	r6
   1422a:	1c43      	adds	r3, r0, #1
   1422c:	d1f4      	bne.n	14218 <_wcrtomb_r+0x1c>
   1422e:	2300      	movs	r3, #0
   14230:	602b      	str	r3, [r5, #0]
   14232:	338a      	adds	r3, #138	; 0x8a
   14234:	6023      	str	r3, [r4, #0]
   14236:	e7ef      	b.n	14218 <_wcrtomb_r+0x1c>
   14238:	000177ac 	.word	0x000177ac

0001423c <__ascii_wctomb>:
   1423c:	2900      	cmp	r1, #0
   1423e:	d009      	beq.n	14254 <__ascii_wctomb+0x18>
   14240:	2aff      	cmp	r2, #255	; 0xff
   14242:	d802      	bhi.n	1424a <__ascii_wctomb+0xe>
   14244:	2001      	movs	r0, #1
   14246:	700a      	strb	r2, [r1, #0]
   14248:	4770      	bx	lr
   1424a:	238a      	movs	r3, #138	; 0x8a
   1424c:	6003      	str	r3, [r0, #0]
   1424e:	2001      	movs	r0, #1
   14250:	4240      	negs	r0, r0
   14252:	e7f9      	b.n	14248 <__ascii_wctomb+0xc>
   14254:	2000      	movs	r0, #0
   14256:	e7f7      	b.n	14248 <__ascii_wctomb+0xc>

00014258 <__coremark_main_veneer>:
   14258:	b401      	push	{r0}
   1425a:	4802      	ldr	r0, [pc, #8]	; (14264 <__coremark_main_veneer+0xc>)
   1425c:	4684      	mov	ip, r0
   1425e:	bc01      	pop	{r0}
   14260:	4760      	bx	ip
   14262:	bf00      	nop
   14264:	200004a5 	.word	0x200004a5
   14268:	00015b14 	.word	0x00015b14
   1426c:	00015b28 	.word	0x00015b28
   14270:	00015b38 	.word	0x00015b38
   14274:	00015b4c 	.word	0x00015b4c
   14278:	00015b58 	.word	0x00015b58
   1427c:	00015b64 	.word	0x00015b64
   14280:	00015b68 	.word	0x00015b68
   14284:	00015b78 	.word	0x00015b78
   14288:	00015b88 	.word	0x00015b88
   1428c:	00015b90 	.word	0x00015b90
   14290:	00015ba4 	.word	0x00015ba4
   14294:	00015bb4 	.word	0x00015bb4
   14298:	00015bbc 	.word	0x00015bbc
   1429c:	00015bc8 	.word	0x00015bc8
   142a0:	00015bd4 	.word	0x00015bd4
   142a4:	00015be8 	.word	0x00015be8
   142a8:	00015bf0 	.word	0x00015bf0
   142ac:	00015c00 	.word	0x00015c00
   142b0:	00015c10 	.word	0x00015c10
   142b4:	00015c28 	.word	0x00015c28
   142b8:	00015c38 	.word	0x00015c38
   142bc:	00015c48 	.word	0x00015c48
   142c0:	00004d70 	.word	0x00004d70
   142c4:	00004cfc 	.word	0x00004cfc
   142c8:	00004c58 	.word	0x00004c58
   142cc:	00004c10 	.word	0x00004c10
   142d0:	00004c58 	.word	0x00004c58
   142d4:	00004d38 	.word	0x00004d38
   142d8:	00004c58 	.word	0x00004c58
   142dc:	00004c10 	.word	0x00004c10
   142e0:	00004cfc 	.word	0x00004cfc
   142e4:	00004cfc 	.word	0x00004cfc
   142e8:	00004d38 	.word	0x00004d38
   142ec:	00004c10 	.word	0x00004c10
   142f0:	00004c16 	.word	0x00004c16
   142f4:	00004c16 	.word	0x00004c16
   142f8:	00004c16 	.word	0x00004c16
   142fc:	00004d46 	.word	0x00004d46
   14300:	00004cfc 	.word	0x00004cfc
   14304:	00004cfc 	.word	0x00004cfc
   14308:	00004c58 	.word	0x00004c58
   1430c:	00004c0c 	.word	0x00004c0c
   14310:	00004c58 	.word	0x00004c58
   14314:	00004d38 	.word	0x00004d38
   14318:	00004c58 	.word	0x00004c58
   1431c:	00004c0c 	.word	0x00004c0c
   14320:	00004cfc 	.word	0x00004cfc
   14324:	00004cfc 	.word	0x00004cfc
   14328:	00004d38 	.word	0x00004d38
   1432c:	00004c0c 	.word	0x00004c0c
   14330:	00004c16 	.word	0x00004c16
   14334:	00004c16 	.word	0x00004c16
   14338:	00004c16 	.word	0x00004c16
   1433c:	00004d42 	.word	0x00004d42
   14340:	00005680 	.word	0x00005680
   14344:	0000566e 	.word	0x0000566e
   14348:	0000564c 	.word	0x0000564c
   1434c:	00005676 	.word	0x00005676
   14350:	0000564c 	.word	0x0000564c
   14354:	0000594e 	.word	0x0000594e
   14358:	0000564c 	.word	0x0000564c
   1435c:	00005676 	.word	0x00005676
   14360:	0000566e 	.word	0x0000566e
   14364:	0000566e 	.word	0x0000566e
   14368:	0000594e 	.word	0x0000594e
   1436c:	00005676 	.word	0x00005676
   14370:	00005638 	.word	0x00005638
   14374:	00005638 	.word	0x00005638
   14378:	00005638 	.word	0x00005638
   1437c:	000059c4 	.word	0x000059c4
   14380:	00005e8e 	.word	0x00005e8e
   14384:	00005e4c 	.word	0x00005e4c
   14388:	00005e4c 	.word	0x00005e4c
   1438c:	00005e48 	.word	0x00005e48
   14390:	00005e52 	.word	0x00005e52
   14394:	00005e52 	.word	0x00005e52
   14398:	00006162 	.word	0x00006162
   1439c:	00005e48 	.word	0x00005e48
   143a0:	00005e52 	.word	0x00005e52
   143a4:	00006162 	.word	0x00006162
   143a8:	00005e52 	.word	0x00005e52
   143ac:	00005e48 	.word	0x00005e48
   143b0:	000060f6 	.word	0x000060f6
   143b4:	000060f6 	.word	0x000060f6
   143b8:	000060f6 	.word	0x000060f6
   143bc:	000061cc 	.word	0x000061cc

000143c0 <g_uart2Dev>:
   143c0:	feb50000 00000000 00000000 00000000     ................
   143d0:	2a010188 00000000 00000000              ...*........

000143dc <rk_intc_table>:
   143dc:	00017224 0001722c 00017234 0001723c     $r..,r..4r..<r..
   143ec:	00017244 0001724c 00017254 0001725c     Dr..Lr..Tr..\r..
   143fc:	6574616c 3d79636e 736e6625 756f6328     latency=%fns(cou
   1440c:	253d746e 000a2964 00007325 6574616c     nt=%d)..%s..late
   1441c:	2079636e 3d677661 6d2c6625 253d7861     ncy avg=%f,max=%
   1442c:	00000a66 74737973 72656d69 20733120     f...systimer 1s 
   1443c:	6e756f63 25203a74 2528646c 2c646c6c     count: %ld(%lld,
   1444c:	6c6c2520 000a2964 5f4c4c50 55504e49      %lld)..PLL_INPU
   1445c:	534f5f54 41525f43 2d204554 756f6320     T_OSC_RATE - cou
   1446c:	3c20746e 30303120 30303030 00000000     nt < 1000000....
   1447c:	74736574 74786520 616e7265 7269206c     test external ir
   1448c:	00000a71 65747865 6c616e72 6d697420     q...external tim
   1449c:	31207265 6f632073 3a746e75 646c2520     er 1s count: %ld
   144ac:	6c6c2528 25202c64 29646c6c 6966202c     (%lld, %lld), fi
   144bc:	5f646578 6e657073 64253d64 0000000a     xed_spend=%d....
   144cc:	656d6974 00000072 65740a0a 69207473     timer.....test i
   144dc:	7265746e 206c616e 0a717269 00000000     nternal irq.....
   144ec:	65746e69 6c616e72 6d697420 31207265     internal timer 1
   144fc:	6f632073 3a746e75 646c2520 6c6c2528     s count: %ld(%ll
   1450c:	25202c64 29646c6c 6966202c 5f646578     d, %lld), fixed_
   1451c:	6e657073 64253d64 0000000a              spend=%d....

00014528 <__FUNCTION__.2>:
   14528:	656d6974 65745f72 00007473              timer_test..

00014534 <__fsym___cmd_invalid_test_desc>:
   14534:	63616364 74206568 00747365              dcache test.

00014540 <__fsym___cmd_invalid_test_name>:
   14540:	6d635f5f 6e695f64 696c6176 65745f64     __cmd_invalid_te
   14550:	00007473 6b636974 00000000 74726175     st..tick....uart
   14560:	00000032                                2...

00014564 <g_uart2_board>:
   14564:	0016e360 00000503 00000040 00000000     `.......@.......
   14574:	74726175 00000032 69726573 21206c61     uart2...serial !
   14584:	5452203d 4c554e5f 0000004c 504f5453     = RT_NULL...STOP
   14594:	5449425f 20335f53 20646e61 504f5453     _BITS_3 and STOP
   145a4:	5449425f 20345f53 20657261 20746f6e     _BITS_4 are not 
   145b4:	70707573 6574726f 00000a64              supported...

000145c0 <__FUNCTION__.0>:
   145c0:	6b636f72 70696863 7261755f 6f635f74     rockchip_uart_co
   145d0:	6769666e 00657275                       nfigure.

000145d8 <__FUNCTION__.1>:
   145d8:	6b636f72 70696863 7261755f 6f635f74     rockchip_uart_co
   145e8:	6f72746e 0000006c                       ntrol...

000145f0 <__FUNCTION__.2>:
   145f0:	6b636f72 70696863 7261755f 75705f74     rockchip_uart_pu
   14600:	00006374                                tc..

00014604 <__FUNCTION__.3>:
   14604:	6b636f72 70696863 7261755f 65675f74     rockchip_uart_ge
   14614:	00006374                                tc..

00014618 <rockchip_uart_ops>:
   14618:	00008945 000088c5 00008851 00008881     E.......Q.......
   14628:	00000000 20776152 6f6d656d 69207972     ....Raw memory i
   14638:	75206f2f 696c6974 2d207974 65522420     /o utility - $Re
   14648:	69736976 203a6e6f 20352e31 000a0a24     vision: 1.5 $...
   14658:	2d206f69 312d2076 347c327c 7c722d20     io -v -1|2|4 -r|
   14668:	2d5b2077 6c3c206c 5d3e6e65 64613c20     w [-l <len>] <ad
   14678:	203e7264 61763c5b 3e65756c 000a0a5d     dr> [<value>]...
   14688:	20202020 2020762d 20202020 56202020         -v         V
   14698:	6f627265 202c6573 736b7361 726f6620     erbose, asks for
   146a8:	6e6f6320 6d726966 6f697461 00000a6e      confirmation...
   146b8:	20202020 327c312d 2020347c 53202020         -1|2|4     S
   146c8:	20737465 6f6d656d 61207972 73656363     ets memory acces
   146d8:	69732073 6920657a 7962206e 20736574     s size in bytes 
   146e8:	66656428 746c7561 74796220 000a2965     (default byte)..
   146f8:	20202020 3c206c2d 3e6e656c 4c202020         -l <len>   L
   14708:	74676e65 6e692068 74796220 6f207365     ength in bytes o
   14718:	72612066 74206165 6361206f 73736563     f area to access
   14728:	65642820 6c756166 74207374 00000a6f      (defaults to...
   14738:	20202020 20202020 20202020 6f202020                    o
   14748:	6120656e 73656363 6f202c73 68772072     ne access, or wh
   14758:	20656c6f 656c6966 6e656c20 29687467     ole file length)
   14768:	0000000a 20202020 777c722d 20202020     ....    -r|w    
   14778:	52202020 20646165 6d6f7266 20726f20        Read from or 
   14788:	74697257 6f742065 6d656d20 2079726f     Write to memory 
   14798:	66656428 746c7561 61657220 000a2964     (default read)..
   147a8:	20202020 6464613c 20203e72 54202020         <addr>     T
   147b8:	6d206568 726f6d65 64612079 73657264     he memory addres
   147c8:	6f742073 63636120 0a737365 00000000     s to access.....
   147d8:	20202020 6c61763c 2020203e 54202020         <val>      T
   147e8:	76206568 65756c61 206f7420 74697277     he value to writ
   147f8:	69282065 696c706d 2d207365 0a0a2977     e (implies -w)..
   14808:	00000000 6d617845 73656c70 00000a3a     ....Examples:...
   14818:	20202020 30206f69 30303178 20202030         io 0x1000   
   14828:	20202020 20202020 20202020 52202020                    R
   14838:	73646165 656e6f20 74796220 72662065     eads one byte fr
   14848:	30206d6f 30303178 00000a30 20202020     om 0x1000...    
   14858:	30206f69 30303178 78302030 20203231     io 0x1000 0x12  
   14868:	20202020 20202020 57202020 65746972                Write
   14878:	78302073 74203231 6f6c206f 69746163     s 0x12 to locati
   14888:	30206e6f 30303178 00000a30 20202020     on 0x1000...    
   14898:	2d206f69 6c2d2032 30203820 30303178     io -2 -l 8 0x100
   148a8:	20202030 20202020 52202020 73646165     0          Reads
   148b8:	77203820 7364726f 6f726620 7830206d      8 words from 0x
   148c8:	30303031 00000a0a 65746f4e 63636120     1000....Note acc
   148d8:	20737365 657a6973 312d2820 347c327c     ess size (-1|2|4
   148e8:	6f642029 6e207365 6120746f 796c7070     ) does not apply
   148f8:	206f7420 656c6966 73616220 61206465      to file based a
   14908:	73656363 2e736573 00000a0a 20646142     ccesses.....Bad 
   14918:	7a69733c 76203e65 65756c61 73252720     <size> value '%s
   14928:	00000a27 6e6b6e55 206e776f 6974706f     '...Unknown opti
   14938:	203a6e6f 000a6325 32317668 6c777234     on: %c..hv124rwl
   14948:	003a663a 61206f4e 65726464 67207373     :f:.No address g
   14958:	6e657669 0000000a 20646142 6464613c     iven....Bad <add
   14968:	76203e72 65756c61 73252720 00000a27     r> value '%s'...
   14978:	76206f4e 65756c61 76696720 66206e65     No value given f
   14988:	5720726f 45544952 0000000a 20646142     or WRITE....Bad 
   14998:	6c61763c 203e6575 756c6176 25272065     <value> value '%
   149a8:	000a2773 6c61763c 203e6575 206f6f74     s'..<value> too 
   149b8:	6772616c 00000a65 206f6f54 796e616d     large...Too many
   149c8:	67726120 6e656d75 27207374 2e277325      arguments '%s'.
   149d8:	000a2e2e 6c646142 6c612079 656e6769     ....Badly aligne
   149e8:	613c2064 3e726464 726f6620 63636120     d <addr> for acc
   149f8:	20737365 657a6973 0000000a 6c646142     ess size....Badl
   14a08:	6c612079 656e6769 733c2064 3e657a69     y aligned <size>
   14a18:	726f6620 63636120 20737365 657a6973      for access size
   14a28:	0000000a 75716552 20747365 6d206f74     ....Request to m
   14a38:	65726d65 30206461 20782578 65747962     emread 0x%x byte
   14a48:	72662073 61206d6f 65726464 30207373     s from address 0
   14a58:	38302578 090a786c 6e697375 64252067     x%08lx..using %d
   14a68:	74796220 63612065 73736563 000a7365      byte accesses..
   14a78:	75716552 20747365 77206f74 65746972     Request to write
   14a88:	25783020 79622078 20736574 61206f74      0x%x bytes to a
   14a98:	65726464 30207373 38302578 090a786c     ddress 0x%08lx..
   14aa8:	6e697375 64252067 74796220 63612065     using %d byte ac
   14ab8:	73736563 6f207365 61762066 2065756c     cesses of value 
   14ac8:	30257830 0a786c2a 00000000 6c383025     0x%0*lx.....%08l
   14ad8:	00203a78 32302520 00000078 34302520     x: . %02x... %04
   14ae8:	00000078 38302520 0000786c 00008cde     x... %08lx......
   14af8:	00008c52 00008c52 00008c52 00008cee     R...R...R.......
   14b08:	00008c52 00008c52 00008c52 00008c52     R...R...R...R...
   14b18:	00008c52 00008d10 00008c52 00008c52     R.......R...R...
   14b28:	00008c52 00008ce2 00008ce8              R...........

00014b34 <__fsym___cmd_io_desc>:
   14b34:	6f6d656d 72207972 20646165 7720726f     memory read or w
   14b44:	65746972 646d6320 00000000              rite cmd....

00014b50 <__fsym___cmd_io_name>:
   14b50:	6d635f5f 6f695f64 00000000 73696874     __cmd_io....this
   14b60:	20736920 6f6d6564 7365745f 00000a74      is demo_test...

00014b70 <__fsym___cmd_demo_test_desc>:
   14b70:	6f6d6564 73657420 6f662074 72642072     demo test for dr
   14b80:	72657669 00000000                       iver....

00014b88 <__fsym___cmd_demo_test_name>:
   14b88:	6d635f5f 65645f64 745f6f6d 00747365     __cmd_demo_test.
   14b98:	203a5852 3d646d63 78257830 74616420     RX: cmd=0x%x dat
   14ba8:	78303d61 66207825 206d6f72 6e616863     a=0x%x from chan
   14bb8:	0a642520 00000000 3a515249 0a642520      %d.....IRQ: %d.
   14bc8:	00000000 00423241 00413242 67617355     ....A2B.B2A.Usag
   14bd8:	0a203a65 00000000 786f626d 7365745f     e: .....mbox_tes
   14be8:	78302074 35303434 30303030 2c303120     t 0x44050000 10,
   14bf8:	202c3120 00000a31 6e61656d 0a203a73      1, 1...means: .
   14c08:	00000000 786f626d 20706920 72646461     ....mbox ip addr
   14c18:	3a737365 34783020 30353034 0a303030     ess: 0x44050000.
   14c28:	00000000 786f626d 61686320 6c656e6e     ....mbox channel
   14c38:	71726920 6d756e20 20726562 72617473      irq number star
   14c48:	31203a74 00000a30 786f626d 61686320     t: 10...mbox cha
   14c58:	6c656e6e 6e697320 20656c67 20717269     nnel single irq 
   14c68:	67616c66 2031203a 6e61656d 69732073     flag: 1 means si
   14c78:	656c676e 2030202c 6e61656d 756d2073     ngle, 0 means mu
   14c88:	0a69746c 00000000 786f626d 6e657320     lti.....mbox sen
   14c98:	69642064 74636572 3a6e6f69 6d203120     d direction: 1 m
   14ca8:	736e6165 42324120 2030202c 6e61656d     eans A2B, 0 mean
   14cb8:	32422073 00000a41 786f624d 696c6320     s B2A...Mbox cli
   14cc8:	20746e65 69676572 72657473 69616620     ent register fai
   14cd8:	2c64656c 74657220 0a64253d 00000000     led, ret=%d.....
   14ce8:	786f626d 73657420 74732074 2c747261     mbox test start,
   14cf8:	72696420 69746365 203a6e6f 000a7325      direction: %s..
   14d08:	203a5854 3d646d63 78257830 74616420     TX: cmd=0x%x dat
   14d18:	78303d61 74207825 6863206f 25206e61     a=0x%x to chan %
   14d28:	00000a64 786f626d 73657420 6e652074     d...mbox test en
   14d38:	00000a64 786f624d 696c6320 20746e65     d...Mbox client 
   14d48:	65726e75 74736967 66207265 656c6961     unregister faile
   14d58:	72202c64 253d7465 00000a64 786f624d     d, ret=%d...Mbox
   14d68:	69656420 2074696e 6c696166 202c6465      deinit failed, 
   14d78:	3d746572 000a6425                       ret=%d..

00014d80 <__fsym___cmd_mbox_test_desc>:
   14d80:	786f626d 73657420 6d632074 00000064     mbox test cmd...

00014d90 <__fsym___cmd_mbox_test_name>:
   14d90:	6d635f5f 626d5f64 745f786f 00747365     __cmd_mbox_test.
   14da0:	6e69616d 00000000 20646974 52203d21     main....tid != R
   14db0:	554e5f54 00004c4c                       T_NULL..

00014db8 <__FUNCTION__.0>:
   14db8:	615f7472 696c7070 69746163 695f6e6f     rt_application_i
   14dc8:	0074696e 20766564 52203d21 554e5f54     nit.dev != RT_NU
   14dd8:	00004c4c 6f5f7472 63656a62 65675f74     LL..rt_object_ge
   14de8:	79745f74 26286570 2d766564 7261703e     t_type(&dev->par
   14df8:	29746e65 203d3d20 4f5f5452 63656a62     ent) == RT_Objec
   14e08:	6c435f74 5f737361 69766544 00006563     t_Class_Device..
   14e18:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
   14e28:	6f6d6574 63656a62 64262874 3e2d7665     temobject(&dev->
   14e38:	65726170 0029746e 6f666e69 74616d72     parent).informat
   14e48:	206e6f69 52203d21 554e5f54 00004c4c     ion != RT_NULL..
   14e58:	69206f54 6974696e 7a696c61 65642065     To initialize de
   14e68:	65636976 2073253a 6c696166 202e6465     vice:%s failed. 
   14e78:	20656854 6f727265 6f632072 69206564     The error code i
   14e88:	64252073 0000000a 2d766564 6665723e     s %d....dev->ref
   14e98:	756f635f 2120746e 0030203d              _count != 0.

00014ea4 <__FUNCTION__.1>:
   14ea4:	645f7472 63697665 65735f65 78725f74     rt_device_set_rx
   14eb4:	646e695f 74616369 00000065              _indicate...

00014ec0 <__FUNCTION__.3>:
   14ec0:	645f7472 63697665 72775f65 00657469     rt_device_write.

00014ed0 <__FUNCTION__.4>:
   14ed0:	645f7472 63697665 65725f65 00006461     rt_device_read..

00014ee0 <__FUNCTION__.5>:
   14ee0:	645f7472 63697665 6c635f65 0065736f     rt_device_close.

00014ef0 <__FUNCTION__.6>:
   14ef0:	645f7472 63697665 706f5f65 00006e65     rt_device_open..

00014f00 <__FUNCTION__.9>:
   14f00:	645f7472 63697665 69665f65 0000646e     rt_device_find..
   14f10:	636e7546 6e6f6974 5d73255b 61687320     Function[%s] sha
   14f20:	6e206c6c 6220746f 73752065 69206465     ll not be used i
   14f30:	5349206e 00000a52 6c646974 00000065     n ISR...tidle...

00014f40 <__FUNCTION__.0>:
   14f40:	745f7472 61657268 64695f64 655f656c     rt_thread_idle_e
   14f50:	74756378 00000065 206d6573 52203d21     xcute...sem != R
   14f60:	554e5f54 00004c4c 6f5f7472 63656a62     T_NULL..rt_objec
   14f70:	65675f74 79745f74 26286570 2d6d6573     t_get_type(&sem-
   14f80:	7261703e 2e746e65 65726170 2029746e     >parent.parent) 
   14f90:	52203d3d 624f5f54 7463656a 616c435f     == RT_Object_Cla
   14fa0:	535f7373 70616d65 65726f68 00000000     ss_Semaphore....
   14fb0:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
   14fc0:	6f6d6574 63656a62 73262874 3e2d6d65     temobject(&sem->
   14fd0:	65726170 702e746e 6e657261 00002974     parent.parent)..
   14fe0:	636e7546 6e6f6974 5d73255b 61687320     Function[%s] sha
   14ff0:	6e206c6c 6220746f 73752065 62206465     ll not be used b
   15000:	726f6665 63732065 75646568 2072656c     efore scheduler 
   15010:	72617473 00000a74                       start...

00015018 <__FUNCTION__.30>:
   15018:	735f7472 725f6d65 61656c65 00006573     rt_sem_release..

00015028 <__FUNCTION__.31>:
   15028:	735f7472 745f6d65 00656b61              rt_sem_take.

00015034 <__FUNCTION__.35>:
   15034:	735f7472 695f6d65 0074696e 4c554e28     rt_sem_init.(NUL
   15044:	0000294c 0000a020 00009f2a 00009f2a     L).. ...*...*...
   15054:	00009f2a 00009f2a 00009f2a 00009f2a     *...*...*...*...
   15064:	00009f2a 00009f2a 00009f2a 00009f2a     *...*...*...*...
   15074:	00009fee 00009fb6 00009f2a 00009f2a     ........*...*...
   15084:	00009f2a 00009f2a 00009fb6 00009f2a     *...*.......*...
   15094:	00009f2a 00009f2a 00009f2a 00009f2a     *...*...*...*...
   150a4:	0000a120 0000a09c 00009f2a 00009f2a      .......*...*...
   150b4:	0000a02c 00009f2a 0000a028 00009f2a     ,...*...(...*...
   150c4:	00009f2a 0000a138 205c200a 0a2f207c     *...8.... \ | /.
   150d4:	00000000 5452202d 20202d20 54202020     ....- RT -     T
   150e4:	61657268 704f2064 74617265 20676e69     hread Operating 
   150f4:	74737953 000a6d65 7c202f20 20205c20     System.. / | \  
   15104:	25202020 64252e64 2064252e 6c697562        %d.%d.%d buil
   15114:	73252064 0000000a 20766f4e 32203931     d %s....Nov 19 2
   15124:	00313230 30303220 202d2036 39313032     021. 2006 - 2019
   15134:	706f4320 67697279 62207468 74722079      Copyright by rt
   15144:	7268742d 20646165 6d616574 0000000a     -thread team....
   15154:	29732528 73736120 69747265 66206e6f     (%s) assertion f
   15164:	656c6961 74612064 6e756620 6f697463     ailed at functio
   15174:	73253a6e 696c202c 6e20656e 65626d75     n:%s, line numbe
   15184:	64253a72 00000a20                       r:%d ...

0001518c <__lowest_bit_bitmap>:
   1518c:	00010000 00010002 00010003 00010002     ................
   1519c:	00010004 00010002 00010003 00010002     ................
   151ac:	00010005 00010002 00010003 00010002     ................
   151bc:	00010004 00010002 00010003 00010002     ................
   151cc:	00010006 00010002 00010003 00010002     ................
   151dc:	00010004 00010002 00010003 00010002     ................
   151ec:	00010005 00010002 00010003 00010002     ................
   151fc:	00010004 00010002 00010003 00010002     ................
   1520c:	00010007 00010002 00010003 00010002     ................
   1521c:	00010004 00010002 00010003 00010002     ................
   1522c:	00010005 00010002 00010003 00010002     ................
   1523c:	00010004 00010002 00010003 00010002     ................
   1524c:	00010006 00010002 00010003 00010002     ................
   1525c:	00010004 00010002 00010003 00010002     ................
   1526c:	00010005 00010002 00010003 00010002     ................
   1527c:	00010004 00010002 00010003 00010002     ................

0001528c <large_digits.2>:
   1528c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1529c:	00000000                                ....

000152a0 <small_digits.1>:
   152a0:	33323130 37363534 62613938 66656463     0123456789abcdef
   152b0:	00000000 61746f74 656d206c 79726f6d     ....total memory
   152c0:	6425203a 0000000a 64657375 6d656d20     : %d....used mem
   152d0:	2079726f 6425203a 0000000a 6978616d     ory : %d....maxi
   152e0:	206d756d 6f6c6c61 65746163 656d2064     mum allocated me
   152f0:	79726f6d 6425203a 0000000a 5f747228     mory: %d....(rt_
   15300:	746e6975 20745f38 656d292a 3d3e206d     uint8_t *)mem >=
   15310:	61656820 74705f70 00000072 5f747228      heap_ptr...(rt_
   15320:	746e6975 20745f38 656d292a 203c206d     uint8_t *)mem < 
   15330:	5f747228 746e6975 20745f38 6568292a     (rt_uint8_t *)he
   15340:	655f7061 0000646e 2d6d656d 6573753e     ap_end..mem->use
   15350:	3d3d2064 00003020 72282828 69755f74     d == 0..(((rt_ui
   15360:	3233746e 7229745f 296d656d 28202620     nt32_t)rmem) & (
   15370:	415f5452 4e47494c 5a49535f 202d2045     RT_ALIGN_SIZE - 
   15380:	20292931 30203d3d 00000000 5f747228     1)) == 0....(rt_
   15390:	746e6975 20745f38 6d72292a 3e206d65     uint8_t *)rmem >
   153a0:	7228203d 69755f74 5f38746e 292a2074     = (rt_uint8_t *)
   153b0:	70616568 7274705f 20262620 5f747228     heap_ptr && (rt_
   153c0:	746e6975 20745f38 6d72292a 3c206d65     uint8_t *)rmem <
   153d0:	74722820 6e69755f 745f3874 68292a20      (rt_uint8_t *)h
   153e0:	5f706165 00646e65 66206f74 20656572     eap_end.to free 
   153f0:	61622061 61642064 62206174 6b636f6c     a bad data block
   15400:	00000a3a 3a6d656d 25783020 2c783830     :...mem: 0x%08x,
   15410:	65737520 6c662064 203a6761 202c6425      used flag: %d, 
   15420:	6967616d 6f632063 203a6564 30257830     magic code: 0x%0
   15430:	000a7834 2d6d656d 6573753e 00000064     4x..mem->used...
   15440:	2d6d656d 67616d3e 3d206369 4548203d     mem->magic == HE
   15450:	4d5f5041 43494741 00000000 70616568     AP_MAGIC....heap
   15460:	00000000 206d656d 74696e69 7265202c     ....mem init, er
   15470:	20726f72 69676562 6461206e 73657264     ror begin addres
   15480:	78302073 202c7825 20646e61 20646e65     s 0x%x, and end 
   15490:	72646461 20737365 78257830 0000000a     address 0x%x....
   154a0:	5f747228 746e6975 745f3233 6d656d29     (rt_uint32_t)mem
   154b0:	53202b20 4f455a49 54535f46 54435552      + SIZEOF_STRUCT
   154c0:	4d454d5f 73202b20 20657a69 28203d3c     _MEM + size <= (
   154d0:	755f7472 33746e69 29745f32 70616568     rt_uint32_t)heap
   154e0:	646e655f 00000000 5f747228 746e6975     _end....(rt_uint
   154f0:	745f3233 72282829 69755f74 5f38746e     32_t)((rt_uint8_
   15500:	292a2074 206d656d 4953202b 464f455a     t *)mem + SIZEOF
   15510:	5254535f 5f544355 294d454d 52202520     _STRUCT_MEM) % R
   15520:	4c415f54 5f4e4749 455a4953 203d3d20     T_ALIGN_SIZE == 
   15530:	00000030 72282828 69755f74 3233746e     0...(((rt_uint32
   15540:	6d29745f 20296d65 52282026 4c415f54     _t)mem) & (RT_AL
   15550:	5f4e4749 455a4953 31202d20 3d202929     IGN_SIZE - 1)) =
   15560:	0030203d                                = 0.

00015564 <__FUNCTION__.0>:
   15564:	665f7472 00656572                       rt_free.

0001556c <__FUNCTION__.1>:
   1556c:	67756c70 6c6f685f 00007365              plug_holes..

00015578 <__FUNCTION__.2>:
   15578:	725f7472 6c6c6165 0000636f              rt_realloc..

00015584 <__FUNCTION__.3>:
   15584:	6d5f7472 6f6c6c61 00000063              rt_malloc...

00015590 <__FUNCTION__.4>:
   15590:	735f7472 65747379 65685f6d 695f7061     rt_system_heap_i
   155a0:	0074696e                                nit.

000155a4 <__fsym_list_mem_desc>:
   155a4:	7473696c 6d656d20 2079726f 67617375     list memory usag
   155b4:	6e692065 6d726f66 6f697461 0000006e     e information...

000155c4 <__fsym_list_mem_name>:
   155c4:	7473696c 6d656d5f 00000000 656a626f     list_mem....obje
   155d4:	21207463 5452203d 4c554e5f 0000004c     ct != RT_NULL...
   155e4:	626f2821 7463656a 79743e2d 26206570     !(object->type &
   155f4:	5f545220 656a624f 435f7463 7373616c      RT_Object_Class
   15604:	6174535f 29636974 00000000              _Static)....

00015610 <__FUNCTION__.1>:
   15610:	6f5f7472 63656a62 65675f74 79745f74     rt_object_get_ty
   15620:	00006570                                pe..

00015624 <__FUNCTION__.2>:
   15624:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
   15634:	6f6d6574 63656a62 00000074              temobject...

00015640 <__FUNCTION__.3>:
   15640:	6f5f7472 63656a62 65645f74 6574656c     rt_object_delete
   15650:	00000000                                ....

00015654 <__FUNCTION__.4>:
   15654:	6f5f7472 63656a62 6c615f74 61636f6c     rt_object_alloca
   15664:	00006574                                te..

00015668 <__FUNCTION__.5>:
   15668:	6f5f7472 63656a62 65645f74 68636174     rt_object_detach
   15678:	00000000                                ....

0001567c <__FUNCTION__.6>:
   1567c:	6f5f7472 63656a62 6e695f74 00007469     rt_object_init..
   1568c:	65726874 253a6461 74732073 206b6361     thread:%s stack 
   1569c:	7265766f 776f6c66 0000000a 6e726177     overflow....warn
   156ac:	3a676e69 20732520 63617473 7369206b     ing: %s stack is
   156bc:	6f6c6320 74206573 6874206f 6f622065      close to the bo
   156cc:	6d6f7474 20666f20 63617473 6461206b     ttom of stack ad
   156dc:	73657264 000a2e73 65726874 21206461     dress...thread !
   156ec:	5452203d 4c554e5f 0000004c              = RT_NULL...

000156f8 <__FUNCTION__.0>:
   156f8:	735f7472 64656863 5f656c75 6f6d6572     rt_schedule_remo
   15708:	745f6576 61657268 00000064              ve_thread...

00015714 <__FUNCTION__.1>:
   15714:	735f7472 64656863 5f656c75 65736e69     rt_schedule_inse
   15724:	745f7472 61657268 00000064 72687428     rt_thread...(thr
   15734:	2d646165 6174733e 20262074 545f5452     ead->stat & RT_T
   15744:	41455248 54535f44 4d5f5441 294b5341     HREAD_STAT_MASK)
   15754:	203d3d20 545f5452 41455248 55535f44      == RT_THREAD_SU
   15764:	4e455053 00000044 6f5f7472 63656a62     SPEND...rt_objec
   15774:	65675f74 79745f74 28286570 6f5f7472     t_get_type((rt_o
   15784:	63656a62 29745f74 65726874 20296461     bject_t)thread) 
   15794:	52203d3d 624f5f54 7463656a 616c435f     == RT_Object_Cla
   157a4:	545f7373 61657268 00000064 6f697270     ss_Thread...prio
   157b4:	79746972 52203c20 48545f54 44414552     rity < RT_THREAD
   157c4:	4952505f 5449524f 414d5f59 00000058     _PRIORITY_MAX...
   157d4:	63617473 74735f6b 20747261 52203d21     stack_start != R
   157e4:	554e5f54 00004c4c 72687428 2d646165     T_NULL..(thread-
   157f4:	6174733e 20262074 545f5452 41455248     >stat & RT_THREA
   15804:	54535f44 4d5f5441 294b5341 203d3d20     D_STAT_MASK) == 
   15814:	545f5452 41455248 4e495f44 00005449     RT_THREAD_INIT..

00015824 <__FUNCTION__.1>:
   15824:	745f7472 61657268 69745f64 756f656d     rt_thread_timeou
   15834:	00000074                                t...

00015838 <__FUNCTION__.10>:
   15838:	745f7472 61657268 6e695f64 00007469     rt_thread_init..

00015848 <__FUNCTION__.2>:
   15848:	745f7472 61657268 65725f64 656d7573     rt_thread_resume
   15858:	00000000                                ....

0001585c <__FUNCTION__.3>:
   1585c:	745f7472 61657268 75735f64 6e657073     rt_thread_suspen
   1586c:	00000064                                d...

00015870 <__FUNCTION__.5>:
   15870:	745f7472 61657268 6c735f64 00706565     rt_thread_sleep.

00015880 <__FUNCTION__.8>:
   15880:	745f7472 61657268 74735f64 75747261     rt_thread_startu
   15890:	00000070                                p...

00015894 <__FUNCTION__.9>:
   15894:	5f74725f 65726874 695f6461 0074696e     _rt_thread_init.
   158a4:	656d6974 3d212072 5f545220 4c4c554e     timer != RT_NULL
   158b4:	00000000 6f5f7472 63656a62 65675f74     ....rt_object_ge
   158c4:	79745f74 26286570 656d6974 703e2d72     t_type(&timer->p
   158d4:	6e657261 3d202974 5452203d 6a624f5f     arent) == RT_Obj
   158e4:	5f746365 73616c43 69545f73 0072656d     ect_Class_Timer.
   158f4:	6f5f7472 63656a62 73695f74 7379735f     rt_object_is_sys
   15904:	6f6d6574 63656a62 74262874 72656d69     temobject(&timer
   15914:	61703e2d 746e6572 00000029 656d6974     ->parent)...time
   15924:	693e2d72 5f74696e 6b636974 52203c20     r->init_tick < R
   15934:	49545f54 4d5f4b43 2f205841 00003220     T_TICK_MAX / 2..

00015944 <__FUNCTION__.0>:
   15944:	745f7472 72656d69 6e6f635f 6c6f7274     rt_timer_control
   15954:	00000000                                ....

00015958 <__FUNCTION__.1>:
   15958:	745f7472 72656d69 6f74735f 00000070     rt_timer_stop...

00015968 <__FUNCTION__.3>:
   15968:	745f7472 72656d69 6174735f 00007472     rt_timer_start..

00015978 <__FUNCTION__.5>:
   15978:	745f7472 72656d69 7465645f 00686361     rt_timer_detach.

00015988 <__FUNCTION__.6>:
   15988:	745f7472 72656d69 696e695f 00000074     rt_timer_init...
   15998:	3a727370 25783020 0a783830 00000000     psr: 0x%08x.....
   159a8:	3a637020 25783020 0a783830 00000000      pc: 0x%08x.....
   159b8:	3a726c20 25783020 0a783830 00000000      lr: 0x%08x.....
   159c8:	3a323172 25783020 0a783830 00000000     r12: 0x%08x.....
   159d8:	3a333072 25783020 0a783830 00000000     r03: 0x%08x.....
   159e8:	3a323072 25783020 0a783830 00000000     r02: 0x%08x.....
   159f8:	3a313072 25783020 0a783830 00000000     r01: 0x%08x.....
   15a08:	3a303072 25783020 0a783830 00000000     r00: 0x%08x.....
   15a18:	64726168 75616620 6f20746c 6874206e     hard fault on th
   15a28:	64616572 7325203a 0000000a 6c656873     read: %s....shel
   15a38:	3d21206c 5f545220 4c4c554e 00000000     l != RT_NULL....
   15a48:	6d206f6e 726f6d65 6f662079 68732072     no memory for sh
   15a58:	0a6c6c65 00000000 65687374 00006c6c     ell.....tshell..
   15a68:	78726873 00000000 2068736d 00000000     shrx....msh ....
   15a78:	736e6966 00002068 0000003e 736e6966     finsh ..>...fins
   15a88:	63203a68 6e206e61 6620746f 20646e69     h: can not find 
   15a98:	69766564 203a6563 000a7325 4b325b1b     device: %s...[2K
   15aa8:	0000000d 73257325 00000000 00000008     ....%s%s........
   15ab8:	00006325 20732508 00000820 00082008     %c...%s  .... ..

00015ac8 <__FUNCTION__.0>:
   15ac8:	736e6966 65675f68 61686374 00000072     finsh_getchar...

00015ad8 <__FUNCTION__.4>:
   15ad8:	736e6966 78725f68 646e695f 00000000     finsh_rx_ind....

00015ae8 <__FUNCTION__.5>:
   15ae8:	736e6966 65735f68 65645f74 65636976     finsh_set_device
   15af8:	00000000                                ....

00015afc <__FUNCTION__.6>:
   15afc:	736e6966 65735f68 72705f74 74706d6f     finsh_set_prompt
   15b0c:	646f6d5f 00000065 72616843 65746361     _mode...Characte
   15b1c:	65442072 65636976 00000000 636f6c42     r Device....Bloc
   15b2c:	6544206b 65636976 00000000 7774654e     k Device....Netw
   15b3c:	206b726f 65746e49 63616672 00000065     ork Interface...
   15b4c:	2044544d 69766544 00006563 204e4143     MTD Device..CAN 
   15b5c:	69766544 00006563 00435452 6e756f53     Device..RTC.Soun
   15b6c:	65442064 65636976 00000000 70617247     d Device....Grap
   15b7c:	20636968 69766544 00006563 20433249     hic Device..I2C 
   15b8c:	00737542 20425355 76616c53 65442065     Bus.USB Slave De
   15b9c:	65636976 00000000 20425355 74736f48     vice....USB Host
   15bac:	73754220 00000000 20495053 00737542      Bus....SPI Bus.
   15bbc:	20495053 69766544 00006563 4f494453     SPI Device..SDIO
   15bcc:	73754220 00000000 50204d50 64756573      Bus....PM Pseud
   15bdc:	6544206f 65636976 00000000 65706950     o Device....Pipe
   15bec:	00000000 74726f50 44206c61 63697665     ....Portal Devic
   15bfc:	00000065 656d6954 65442072 65636976     e...Timer Device
   15c0c:	00000000 6373694d 616c6c65 756f656e     ....Miscellaneou
   15c1c:	65442073 65636976 00000000 736e6553     s Device....Sens
   15c2c:	4420726f 63697665 00000065 63756f54     or Device...Touc
   15c3c:	65442068 65636976 00000000 6e6b6e55     h Device....Unkn
   15c4c:	006e776f 6c6c6548 5452206f 7268542d     own.Hello RT-Thr
   15c5c:	21646165 0000000a 65726874 00006461     ead!....thread..
   15c6c:	2e2a2d25 72702073 73202069 75746174     %-*.s pri  statu
   15c7c:	20202073 73202020 20202070 74732020     s      sp     st
   15c8c:	206b6361 657a6973 78616d20 65737520     ack size max use
   15c9c:	656c2064 74207466 206b6369 72726520     d left tick  err
   15cac:	000a726f 2d2d2d20 2d2d2020 2d2d2d2d     or.. ---  ------
   15cbc:	2d2d202d 2d2d2d2d 2d2d2d2d 2d2d2d20     - ---------- ---
   15ccc:	2d2d2d2d 202d2d2d 2d2d2d20 202d2d2d     -------  ------ 
   15cdc:	2d2d2d20 2d2d2d2d 202d2d2d 0a2d2d2d      ---------- ---.
   15cec:	00000000 2e2a2d25 2520732a 00206433     ....%-*.*s %3d .
   15cfc:	61657220 20207964 00000000 73757320      ready  .... sus
   15d0c:	646e6570 00000000 696e6920 20202074     pend.... init   
   15d1c:	00000000 6f6c6320 20206573 00000000     .... close  ....
   15d2c:	25783020 20783830 30257830 20207838      0x%08x 0x%08x  
   15d3c:	30252020 25256432 30202020 38302578       %02d%%   0x%08
   15d4c:	30252078 000a6433 75462d2d 6974636e     x %03d..--Functi
   15d5c:	4c206e6f 3a747369 0000000a 36312d25     on List:....%-16
   15d6c:	2d2d2073 0a732520 00000000 6574756d     s -- %s.....mute
   15d7c:	00000078 2e2a2d25 20202073 656e776f     x...%-*.s   owne
   15d8c:	68202072 20646c6f 70737573 20646e65     r  hold suspend 
   15d9c:	65726874 000a6461 2d2d2d20 2d2d2d2d     thread.. -------
   15dac:	2d2d202d 2d202d2d 2d2d2d2d 2d2d2d2d     - ---- ---------
   15dbc:	2d2d2d2d 00000a2d 2e2a2d25 2520732a     -----...%-*.*s %
   15dcc:	2a2e382d 30252073 25206434 00000a64     -8.*s %04d %d...
   15ddc:	69766564 00006563 2e2a2d25 20202073     device..%-*.s   
   15dec:	20202020 79742020 20206570 20202020           type      
   15dfc:	72202020 63206665 746e756f 0000000a        ref count....
   15e0c:	2d2d2d20 2d2d2d2d 2d2d2d2d 2d2d2d2d      ---------------
   15e1c:	2d2d2d2d 2d2d202d 2d2d2d2d 2d2d2d2d     ----- ----------
   15e2c:	0000000a 2e2a2d25 2520732a 7330322d     ....%-*.*s %-20s
   15e3c:	382d2520 00000a64 2e2a2d25 70202073      %-8d...%-*.s  p
   15e4c:	6f697265 20636964 69742020 756f656d     eriodic   timeou
   15e5c:	20202074 20202020 67616c66 0000000a     t       flag....
   15e6c:	2d2d2d20 2d2d2d2d 202d2d2d 2d2d2d2d      ---------- ----
   15e7c:	2d2d2d2d 2d202d2d 2d2d2d2d 2d2d2d2d     ------ ---------
   15e8c:	000a2d2d 2e2a2d25 3020732a 38302578     --..%-*.*s 0x%08
   15e9c:	78302078 78383025 00000020 69746361     x 0x%08x ...acti
   15eac:	65746176 00000a64 63616564 61766974     vated...deactiva
   15ebc:	0a646574 00000000 72727563 20746e65     ted.....current 
   15ecc:	6b636974 2578303a 0a783830 00000000     tick:0x%08x.....
   15edc:	6e657665 00000074 2e2a2d25 20202073     event...%-*.s   
   15eec:	73202020 20207465 75732020 6e657073        set    suspen
   15efc:	68742064 64616572 0000000a 2d2d2020     d thread....  --
   15f0c:	2d2d2d2d 2d2d2d2d 2d2d2d20 2d2d2d2d     -------- -------
   15f1c:	2d2d2d2d 0a2d2d2d 00000000 2e2a2d25     -------.....%-*.
   15f2c:	2020732a 30257830 25207838 3a643330     *s  0x%08x %03d:
   15f3c:	00000000 0000002f 2e2a2d25 2020732a     ..../...%-*.*s  
   15f4c:	30257830 30207838 0000000a 7167736d     0x%08x 0....msgq
   15f5c:	65756575 00000000 2e2a2d25 6e652073     ueue....%-*.s en
   15f6c:	20797274 70737573 20646e65 65726874     try suspend thre
   15f7c:	000a6461 2d2d2d20 2d20202d 2d2d2d2d     ad.. ----  -----
   15f8c:	2d2d2d2d 2d2d2d2d 00000a2d 2e2a2d25     ---------...%-*.
   15f9c:	2520732a 20643430 3a642520 00000000     *s %04d  %d:....
   15fac:	2e2a2d25 2520732a 20643430 0a642520     %-*.*s %04d  %d.
   15fbc:	00000000 616d6573 726f6870 00000065     ....semaphore...
   15fcc:	2e2a2d25 20762073 75732020 6e657073     %-*.s v   suspen
   15fdc:	68742064 64616572 0000000a 2d2d2d20     d thread.... ---
   15fec:	2d2d2d20 2d2d2d2d 2d2d2d2d 0a2d2d2d      --------------.
   15ffc:	00000000 2e2a2d25 2520732a 20643330     ....%-*.*s %03d 
   1600c:	003a6425 2e2a2d25 2520732a 20643330     %d:.%-*.*s %03d 
   1601c:	000a6425 6c69616d 00786f62 2e2a2d25     %d..mailbox.%-*.
   1602c:	6e652073 20797274 657a6973 73757320     s entry size sus
   1603c:	646e6570 72687420 0a646165 00000000     pend thread.....
   1604c:	2d2d2d20 2d20202d 202d2d2d 2d2d2d2d      ----  ---- ----
   1605c:	2d2d2d2d 2d2d2d2d 000a2d2d 2e2a2d25     ----------..%-*.
   1606c:	2520732a 20643430 34302520 64252064     *s %04d  %04d %d
   1607c:	0000003a 2e2a2d25 2520732a 20643430     :...%-*.*s %04d 
   1608c:	34302520 64252064 0000000a 706d656d      %04d %d....memp
   1609c:	006c6f6f 2e2a2d25 6c622073 206b636f     ool.%-*.s block 
   160ac:	61746f74 7266206c 73206565 65707375     total free suspe
   160bc:	7420646e 61657268 00000a64 2d2d2d20     nd thread... ---
   160cc:	2d20202d 202d2d2d 2d2d2d20 2d2d202d     -  ----  ---- --
   160dc:	2d2d2d2d 2d2d2d2d 2d2d2d2d 0000000a     ------------....
   160ec:	2e2a2d25 2520732a 20643430 34302520     %-*.*s %04d  %04
   160fc:	25202064 20643430 003a6425 2e2a2d25     d  %04d %d:.%-*.
   1610c:	2520732a 20643430 34302520 25202064     *s %04d  %04d  %
   1611c:	20643430 000a6425                       04d %d..

00016124 <__fsym_list_desc>:
   16124:	7473696c 6c6c6120 6d797320 206c6f62     list all symbol 
   16134:	73206e69 65747379 0000006d              in system...

00016140 <__fsym_list_name>:
   16140:	7473696c 00000000                       list....

00016148 <__fsym___cmd_list_device_desc>:
   16148:	7473696c 76656420 20656369 73206e69     list device in s
   16158:	65747379 0000006d                       ystem...

00016160 <__fsym___cmd_list_device_name>:
   16160:	6d635f5f 696c5f64 645f7473 63697665     __cmd_list_devic
   16170:	00000065                                e...

00016174 <__fsym_list_device_desc>:
   16174:	7473696c 76656420 20656369 73206e69     list device in s
   16184:	65747379 0000006d                       ystem...

0001618c <__fsym_list_device_name>:
   1618c:	7473696c 7665645f 00656369              list_device.

00016198 <__fsym___cmd_list_timer_desc>:
   16198:	7473696c 6d697420 69207265 7973206e     list timer in sy
   161a8:	6d657473 00000000                       stem....

000161b0 <__fsym___cmd_list_timer_name>:
   161b0:	6d635f5f 696c5f64 745f7473 72656d69     __cmd_list_timer
   161c0:	00000000                                ....

000161c4 <__fsym_list_timer_desc>:
   161c4:	7473696c 6d697420 69207265 7973206e     list timer in sy
   161d4:	6d657473 00000000                       stem....

000161dc <__fsym_list_timer_name>:
   161dc:	7473696c 6d69745f 00007265              list_timer..

000161e8 <__fsym___cmd_list_mempool_desc>:
   161e8:	7473696c 6d656d20 2079726f 6c6f6f70     list memory pool
   161f8:	206e6920 74737973 00006d65               in system..

00016204 <__fsym___cmd_list_mempool_name>:
   16204:	6d635f5f 696c5f64 6d5f7473 6f706d65     __cmd_list_mempo
   16214:	00006c6f                                ol..

00016218 <__fsym_list_mempool_desc>:
   16218:	7473696c 6d656d20 2079726f 6c6f6f70     list memory pool
   16228:	206e6920 74737973 00006d65               in system..

00016234 <__fsym_list_mempool_name>:
   16234:	7473696c 6d656d5f 6c6f6f70 00000000     list_mempool....

00016244 <__fsym___cmd_list_msgqueue_desc>:
   16244:	7473696c 73656d20 65676173 65757120     list message que
   16254:	69206575 7973206e 6d657473 00000000     ue in system....

00016264 <__fsym___cmd_list_msgqueue_name>:
   16264:	6d635f5f 696c5f64 6d5f7473 75716773     __cmd_list_msgqu
   16274:	00657565                                eue.

00016278 <__fsym_list_msgqueue_desc>:
   16278:	7473696c 73656d20 65676173 65757120     list message que
   16288:	69206575 7973206e 6d657473 00000000     ue in system....

00016298 <__fsym_list_msgqueue_name>:
   16298:	7473696c 67736d5f 75657571 00000065     list_msgqueue...

000162a8 <__fsym___cmd_list_mailbox_desc>:
   162a8:	7473696c 69616d20 6f62206c 6e692078     list mail box in
   162b8:	73797320 006d6574                        system.

000162c0 <__fsym___cmd_list_mailbox_name>:
   162c0:	6d635f5f 696c5f64 6d5f7473 626c6961     __cmd_list_mailb
   162d0:	0000786f                                ox..

000162d4 <__fsym_list_mailbox_desc>:
   162d4:	7473696c 69616d20 6f62206c 6e692078     list mail box in
   162e4:	73797320 006d6574                        system.

000162ec <__fsym_list_mailbox_name>:
   162ec:	7473696c 69616d5f 786f626c 00000000     list_mailbox....

000162fc <__fsym___cmd_list_mutex_desc>:
   162fc:	7473696c 74756d20 69207865 7973206e     list mutex in sy
   1630c:	6d657473 00000000                       stem....

00016314 <__fsym___cmd_list_mutex_name>:
   16314:	6d635f5f 696c5f64 6d5f7473 78657475     __cmd_list_mutex
   16324:	00000000                                ....

00016328 <__fsym_list_mutex_desc>:
   16328:	7473696c 74756d20 69207865 7973206e     list mutex in sy
   16338:	6d657473 00000000                       stem....

00016340 <__fsym_list_mutex_name>:
   16340:	7473696c 74756d5f 00007865              list_mutex..

0001634c <__fsym___cmd_list_event_desc>:
   1634c:	7473696c 65766520 6920746e 7973206e     list event in sy
   1635c:	6d657473 00000000                       stem....

00016364 <__fsym___cmd_list_event_name>:
   16364:	6d635f5f 696c5f64 655f7473 746e6576     __cmd_list_event
   16374:	00000000                                ....

00016378 <__fsym_list_event_desc>:
   16378:	7473696c 65766520 6920746e 7973206e     list event in sy
   16388:	6d657473 00000000                       stem....

00016390 <__fsym_list_event_name>:
   16390:	7473696c 6576655f 0000746e              list_event..

0001639c <__fsym___cmd_list_sem_desc>:
   1639c:	7473696c 6d657320 6f687061 69206572     list semaphore i
   163ac:	7973206e 6d657473 00000000              n system....

000163b8 <__fsym___cmd_list_sem_name>:
   163b8:	6d635f5f 696c5f64 735f7473 00006d65     __cmd_list_sem..

000163c8 <__fsym_list_sem_desc>:
   163c8:	7473696c 6d657320 6f687061 69206572     list semaphore i
   163d8:	7973206e 6d657473 00000000              n system....

000163e4 <__fsym_list_sem_name>:
   163e4:	7473696c 6d65735f 00000000              list_sem....

000163f0 <__fsym___cmd_list_thread_desc>:
   163f0:	7473696c 72687420 00646165              list thread.

000163fc <__fsym___cmd_list_thread_name>:
   163fc:	6d635f5f 696c5f64 745f7473 61657268     __cmd_list_threa
   1640c:	00000064                                d...

00016410 <__fsym_list_thread_desc>:
   16410:	7473696c 72687420 00646165              list thread.

0001641c <__fsym_list_thread_name>:
   1641c:	7473696c 7268745f 00646165              list_thread.

00016428 <__fsym___cmd_version_desc>:
   16428:	776f6873 2d545220 65726854 76206461     show RT-Thread v
   16438:	69737265 69206e6f 726f666e 6974616d     ersion informati
   16448:	00006e6f                                on..

0001644c <__fsym___cmd_version_name>:
   1644c:	6d635f5f 65765f64 6f697372 0000006e     __cmd_version...

0001645c <__fsym_version_desc>:
   1645c:	776f6873 2d545220 65726854 76206461     show RT-Thread v
   1646c:	69737265 69206e6f 726f666e 6974616d     ersion informati
   1647c:	00006e6f                                on..

00016480 <__fsym_version_name>:
   16480:	73726576 006e6f69                       version.

00016488 <__fsym_hello_desc>:
   16488:	20796173 6c6c6568 6f77206f 00646c72     say hello world.

00016498 <__fsym_hello_name>:
   16498:	6c6c6568 0000006f 542d5452 61657268     hello...RT-Threa
   164a8:	68732064 206c6c65 6d6d6f63 73646e61     d shell commands
   164b8:	00000a3a 6d635f5f 00005f64 36312d25     :...__cmd_..%-16
   164c8:	202d2073 000a7325 206f6f54 796e616d     s - %s..Too many
   164d8:	67726120 20212073 6f206557 20796c6e      args ! We only 
   164e8:	3a657355 0000000a 00207325 203a7325     Use:....%s .%s: 
   164f8:	6d6d6f63 20646e61 20746f6e 6e756f66     command not foun
   16508:	000a2e64                                d...

0001650c <__fsym___cmd_help_desc>:
   1650c:	542d5452 61657268 68732064 206c6c65     RT-Thread shell 
   1651c:	706c6568 0000002e                       help....

00016524 <__fsym___cmd_help_name>:
   16524:	6d635f5f 65685f64 0000706c              __cmd_help..

00016530 <__fsym___cmd_free_desc>:
   16530:	776f6853 65687420 6d656d20 2079726f     Show the memory 
   16540:	67617375 6e692065 65687420 73797320     usage in the sys
   16550:	2e6d6574 00000000                       tem.....

00016558 <__fsym___cmd_free_name>:
   16558:	6d635f5f 72665f64 00006565              __cmd_free..

00016564 <__fsym___cmd_time_desc>:
   16564:	63657845 20657475 6d6d6f63 20646e61     Execute command 
   16574:	68746977 6d697420 00002e65              with time...

00016580 <__fsym___cmd_time_name>:
   16580:	6d635f5f 69745f64 0000656d              __cmd_time..

0001658c <__fsym___cmd_ps_desc>:
   1658c:	7473694c 72687420 73646165 206e6920     List threads in 
   1659c:	20656874 74737973 002e6d65              the system..

000165a8 <__fsym___cmd_ps_name>:
   165a8:	6d635f5f 73705f64 00000000 706d6f63     __cmd_ps....comp
   165b8:	6974656c 21206e6f 5452203d 4c554e5f     letion != RT_NUL
   165c8:	0000004c 6c5f7472 5f747369 6d657369     L...rt_list_isem
   165d8:	28797470 6f632826 656c706d 6e6f6974     pty(&(completion
   165e8:	75733e2d 6e657073 5f646564 7473696c     ->suspended_list
   165f8:	00002929                                ))..

000165fc <__FUNCTION__.0>:
   165fc:	635f7472 6c706d6f 6f697465 6f645f6e     rt_completion_do
   1660c:	0000656e                                ne..

00016610 <__FUNCTION__.1>:
   16610:	635f7472 6c706d6f 6f697465 61775f6e     rt_completion_wa
   16620:	00007469                                it..

00016624 <__FUNCTION__.2>:
   16624:	635f7472 6c706d6f 6f697465 6e695f6e     rt_completion_in
   16634:	00007469 75657571 3d212065 5f545220     it..queue != RT_
   16644:	4c4c554e 00000000 61746164 7274705f     NULL....data_ptr
   16654:	203d2120 4e5f5452 004c4c55 657a6973      != RT_NULL.size
   16664:	203d2120 4e5f5452 004c4c55               != RT_NULL.

00016670 <__FUNCTION__.0>:
   16670:	645f7472 5f617461 75657571 65705f65     rt_data_queue_pe
   16680:	00006b61                                ak..

00016684 <__FUNCTION__.1>:
   16684:	645f7472 5f617461 75657571 6f705f65     rt_data_queue_po
   16694:	00000070                                p...

00016698 <__FUNCTION__.2>:
   16698:	645f7472 5f617461 75657571 75705f65     rt_data_queue_pu
   166a8:	00006873                                sh..

000166ac <__FUNCTION__.3>:
   166ac:	645f7472 5f617461 75657571 6e695f65     rt_data_queue_in
   166bc:	00007469 665f7872 206f6669 52203d21     it..rx_fifo != R
   166cc:	554e5f54 00004c4c 645f7872 2120616d     T_NULL..rx_dma !
   166dc:	5452203d 4c554e5f 0000004c 665f7874     = RT_NULL...tx_f
   166ec:	206f6669 52203d21 554e5f54 00004c4c     ifo != RT_NULL..
   166fc:	645f7874 2120616d 5452203d 4c554e5f     tx_dma != RT_NUL
   1670c:	0000004c 21207874 5452203d 4c554e5f     L...tx != RT_NUL
   1671c:	0000004c 72657328 206c6169 52203d21     L...(serial != R
   1672c:	554e5f54 20294c4c 28202626 61746164     T_NULL) && (data
   1673c:	203d2120 4e5f5452 294c4c55 00000000      != RT_NULL)....
   1674c:	69726573 3e2d6c61 2d73706f 616d643e     serial->ops->dma
   1675c:	6172745f 696d736e 3d212074 5f545220     _transmit != RT_
   1676c:	4c4c554e 00000000 206e656c 72203d3c     NULL....len <= r
   1677c:	6d645f74 61635f61 725f636c 65766365     t_dma_calc_recve
   1678c:	656c5f64 6573286e 6c616972 00000029     d_len(serial)...
   1679c:	69726573 3e2d6c61 65726170 722e746e     serial->parent.r
   167ac:	6e695f78 61636964 21206574 5452203d     x_indicate != RT
   167bc:	4c554e5f 0000004c                       _NULL...

000167c4 <__FUNCTION__.0>:
   167c4:	645f7472 725f616d 5f766365 61647075     rt_dma_recv_upda
   167d4:	705f6574 695f7475 7865646e 00000000     te_put_index....

000167e4 <__FUNCTION__.1>:
   167e4:	685f7472 65735f77 6c616972 7273695f     rt_hw_serial_isr
   167f4:	00000000                                ....

000167f8 <__FUNCTION__.10>:
   167f8:	735f7472 61697265 65725f6c 00006461     rt_serial_read..

00016808 <__FUNCTION__.12>:
   16808:	7265735f 5f6c6169 5f746e69 00007874     _serial_int_tx..

00016818 <__FUNCTION__.13>:
   16818:	735f7472 61697265 72775f6c 00657469     rt_serial_write.

00016828 <__FUNCTION__.14>:
   16828:	735f7472 61697265 6f635f6c 6f72746e     rt_serial_contro
   16838:	0000006c                                l...

0001683c <__FUNCTION__.15>:
   1683c:	685f7472 65735f77 6c616972 6765725f     rt_hw_serial_reg
   1684c:	65747369 00000072                       ister...

00016854 <__FUNCTION__.2>:
   16854:	735f7472 61697265 6e695f6c 00007469     rt_serial_init..

00016864 <__FUNCTION__.3>:
   16864:	735f7472 61697265 706f5f6c 00006e65     rt_serial_open..

00016874 <__FUNCTION__.4>:
   16874:	735f7472 61697265 6c635f6c 0065736f     rt_serial_close.

00016884 <__FUNCTION__.6>:
   16884:	645f7472 725f616d 5f766365 61647075     rt_dma_recv_upda
   16894:	675f6574 695f7465 7865646e 00000000     te_get_index....

000168a4 <__FUNCTION__.7>:
   168a4:	7265735f 5f6c6169 6f666966 6c61635f     _serial_fifo_cal
   168b4:	65725f63 64657663 6e656c5f 00000000     c_recved_len....

000168c4 <__FUNCTION__.8>:
   168c4:	7265735f 5f6c6169 5f616d64 00007872     _serial_dma_rx..

000168d4 <__FUNCTION__.9>:
   168d4:	7265735f 5f6c6169 5f746e69 00007872     _serial_int_rx..

000168e4 <__fsym___cmd_benchmark_desc>:
   168e4:	636e6562 72616d68 0000006b              benchmark...

000168f0 <__fsym___cmd_benchmark_name>:
   168f0:	6d635f5f 65625f64 6d68636e 006b7261     __cmd_benchmark.
   16900:	65726874 253a6461 2a2e382d 62612073     thread:%-8.*s ab
   16910:	2174726f 0000000a 00002d2d 706f203a     ort!....--..: op
   16920:	6e6f6974 00006020 73692027 626d6120     tion `..' is amb
   16930:	6f756769 28207375 6c756f63 65622064     iguous (could be
   16940:	2d2d6020 00000000 726f2027 2d2d6020      `--....' or `--
   16950:	00000000 000a2927 6e69203a 696c6176     ....')..: invali
   16960:	706f2064 6e6f6974 202d2d20 00002d60     d option -- `-..
   16970:	7261203a 656d7567 7220746e 69757165     : argument requi
   16980:	20646572 20726f66 6974706f 60206e6f     red for option `
   16990:	0000002d 49534f50 5f594c58 52524f43     -...POSIXLY_CORR
   169a0:	00544345 6c6c6142 7320636f 65636375     ECT.Balloc succe
   169b0:	64656465 00000000 746e6d2f 726f772f     eded..../mnt/wor
   169c0:	6170736b 772f6563 736b726f 65636170     kspace/workspace
   169d0:	4343472f 2d30312d 65706970 656e696c     /GCC-10-pipeline
   169e0:	6e656a2f 736e696b 4343472d 2d30312d     /jenkins-GCC-10-
   169f0:	65706970 656e696c 5f38342d 30323032     pipeline-48_2020
   16a00:	34323131 3036315f 30383136 2f313436     1124_1606180641/
   16a10:	2f637273 6c77656e 6e2f6269 696c7765     src/newlib/newli
   16a20:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   16a30:	2e636572 00000063                       rec.c...

00016a38 <__mprec_bigtens>:
   16a38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   16a48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   16a58:	7f73bf3c 75154fdd                       <.s..O.u

00016a60 <__mprec_tens>:
   16a60:	00000000 3ff00000 00000000 40240000     .......?......$@
   16a70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   16a80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   16a90:	00000000 412e8480 00000000 416312d0     .......A......cA
   16aa0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   16ab0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   16ac0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   16ad0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   16ae0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   16af0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   16b00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   16b10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   16b20:	79d99db4 44ea7843                       ...yCx.D

00016b28 <p05.0>:
   16b28:	00000005 00000019 0000007d 00464e49     ........}...INF.
   16b38:	00666e69 004e414e 006e616e 33323130     inf.NAN.nan.0123
   16b48:	37363534 62613938 66656463 00000000     456789abcdef....
   16b58:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   16b68:	00000000 6c756e28 0000296c 00010148     ....(null)..H...
   16b78:	0000fd48 0000fd48 00010140 0000fd48     H...H...@...H...
   16b88:	0000fd48 0000fd48 0000fcaa 0000fd48     H...H.......H...
   16b98:	0000fd48 000100d4 000100f2 0000fd48     H...........H...
   16ba8:	000100ea 00010104 0000fd48 000100fc     ........H.......
   16bb8:	0000fe8c 0000fe8c 0000fe8c 0000fe8c     ................
   16bc8:	0000fe8c 0000fe8c 0000fe8c 0000fe8c     ................
   16bd8:	0000fe8c 0000fd48 0000fd48 0000fd48     ....H...H...H...
   16be8:	0000fd48 0000fd48 0000fd48 0000fd48     H...H...H...H...
   16bf8:	0000feb0 0000fd48 000100bc 00010224     ....H.......$...
   16c08:	0000feb0 0000feb0 0000feb0 0000fd48     ............H...
   16c18:	0000fd48 0000fd48 0000fd48 0001021c     H...H...H.......
   16c28:	0000fd48 0000fd48 000101ea 0000fd48     H...H.......H...
   16c38:	0000fd48 0000fd48 00010066 0000fd48     H...H...f...H...
   16c48:	0001015c 0000fd48 0000fd48 00010c46     \...H...H...F...
   16c58:	0000fd48 0000fd48 0000fd48 0000fd48     H...H...H...H...
   16c68:	0000fd48 0000fd48 0000fd48 0000fd48     H...H...H...H...
   16c78:	0000feb0 0000fd48 000100bc 00010934     ....H.......4...
   16c88:	0000feb0 0000feb0 0000feb0 000102aa     ................
   16c98:	00010934 0000fcd6 0000fd48 0001029a     4.......H.......
   16ca8:	0000fd48 000102e6 00010c3c 000102ba     H.......<.......
   16cb8:	0000fcd6 0000fd48 00010066 0000fcd2     ....H...f.......
   16cc8:	00010c0a 0000fd48 0000fd48 00010bb6     ....H...H.......
   16cd8:	0000fd48 0000fcd2                       H.......

00016ce0 <blanks.1>:
   16ce0:	20202020 20202020 20202020 20202020                     

00016cf0 <zeroes.0>:
   16cf0:	30303030 30303030 30303030 30303030     0000000000000000
   16d00:	7566202c 6974636e 203a6e6f 00000000     , function: ....
   16d10:	65737361 6f697472 2522206e 66202273     assertion "%s" f
   16d20:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
   16d30:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...

00016d40 <_ctype_>:
   16d40:	20202000 20202020 28282020 20282828     .         ((((( 
   16d50:	20202020 20202020 20202020 20202020                     
   16d60:	10108820 10101010 10101010 10101010      ...............
   16d70:	04040410 04040404 10040404 10101010     ................
   16d80:	41411010 41414141 01010101 01010101     ..AAAAAA........
   16d90:	01010101 01010101 01010101 10101010     ................
   16da0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   16db0:	02020202 02020202 02020202 10101010     ................
   16dc0:	00000020 00000000 00000000 00000000      ...............
	...
   16e44:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   16e54:	746e6d2f 726f772f 6170736b 772f6563     /mnt/workspace/w
   16e64:	736b726f 65636170 4343472f 2d30312d     orkspace/GCC-10-
   16e74:	65706970 656e696c 6e656a2f 736e696b     pipeline/jenkins
   16e84:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   16e94:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   16ea4:	30383136 2f313436 2f637273 6c77656e     6180641/src/newl
   16eb4:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   16ec4:	696c6474 74642f62 632e616f 00000000     tdlib/dtoa.c....
   16ed4:	00013634 0001337c 0001337c 0001362c     46..|3..|3..,6..
   16ee4:	0001337c 0001337c 0001337c 000131e6     |3..|3..|3...1..
   16ef4:	0001337c 0001337c 00013592 000135de     |3..|3...5...5..
   16f04:	0001337c 000135a6 000135f0 0001337c     |3...5...5..|3..
   16f14:	000135e8 000134e0 000134e0 000134e0     .5...4...4...4..
   16f24:	000134e0 000134e0 000134e0 000134e0     .4...4...4...4..
   16f34:	000134e0 000134e0 0001337c 0001337c     .4...4..|3..|3..
   16f44:	0001337c 0001337c 0001337c 0001337c     |3..|3..|3..|3..
   16f54:	0001337c 0001337c 0001337c 0001357a     |3..|3..|3..z5..
   16f64:	0001321c 0001337c 0001337c 0001337c     .2..|3..|3..|3..
   16f74:	0001337c 0001337c 0001337c 0001337c     |3..|3..|3..|3..
   16f84:	0001337c 0001337c 0001337c 000132a4     |3..|3..|3...2..
   16f94:	0001337c 0001337c 0001337c 00013540     |3..|3..|3..@5..
   16fa4:	0001337c 000135ae 0001337c 0001337c     |3...5..|3..|3..
   16fb4:	00013c2a 0001337c 0001337c 0001337c     *<..|3..|3..|3..
   16fc4:	0001337c 0001337c 0001337c 0001337c     |3..|3..|3..|3..
   16fd4:	0001337c 0001337c 0001337c 0001357a     |3..|3..|3..z5..
   16fe4:	00013220 0001337c 0001337c 0001337c      2..|3..|3..|3..
   16ff4:	000135d0 00013220 00013214 0001337c     .5.. 2...2..|3..
   17004:	00013690 0001337c 0001366c 000132a8     .6..|3..l6...2..
   17014:	00013648 00013214 0001337c 00013540     H6...2..|3..@5..
   17024:	00013210 00013c68 0001337c 0001337c     .2..h<..|3..|3..
   17034:	00013c6c 0001337c 00013210              l<..|3...2..

00017040 <blanks.1>:
   17040:	20202020 20202020 20202020 20202020                     

00017050 <zeroes.0>:
   17050:	30303030 30303030 30303030 30303030     0000000000000000
   17060:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00017070 <__fsym___cmd_invalid_test>:
   17070:	00014540 00014534 00008599              @E..4E......

0001707c <__fsym___cmd_io>:
   1707c:	00014b50 00014b34 00008bed              PK..4K......

00017088 <__fsym___cmd_demo_test>:
   17088:	00014b88 00014b70 00008f05              .K..pK......

00017094 <__fsym___cmd_mbox_test>:
   17094:	00014d90 00014d80 00008fd9              .M...M......

000170a0 <__fsym_list_mem>:
   170a0:	000155c4 000155a4 0000a371              .U...U..q...

000170ac <__fsym_list>:
   170ac:	00016140 00016124 0000bfa9              @a..$a......

000170b8 <__fsym___cmd_list_device>:
   170b8:	00016160 00016148 0000c0dd              `a..Ha......

000170c4 <__fsym_list_device>:
   170c4:	0001618c 00016174 0000c0dd              .a..ta......

000170d0 <__fsym___cmd_list_timer>:
   170d0:	000161b0 00016198 0000c1c1              .a...a......

000170dc <__fsym_list_timer>:
   170dc:	000161dc 000161c4 0000c1c1              .a...a......

000170e8 <__fsym___cmd_list_mempool>:
   170e8:	00016204 000161e8 0000c78d              .b...a......

000170f4 <__fsym_list_mempool>:
   170f4:	00016234 00016218 0000c78d              4b...b......

00017100 <__fsym___cmd_list_msgqueue>:
   17100:	00016264 00016244 0000c3f5              db..Db......

0001710c <__fsym_list_msgqueue>:
   1710c:	00016298 00016278 0000c3f5              .b..xb......

00017118 <__fsym___cmd_list_mailbox>:
   17118:	000162c0 000162a8 0000c655              .b...b..U...

00017124 <__fsym_list_mailbox>:
   17124:	000162ec 000162d4 0000c655              .b...b..U...

00017130 <__fsym___cmd_list_mutex>:
   17130:	00016314 000162fc 0000bffd              .c...b......

0001713c <__fsym_list_mutex>:
   1713c:	00016340 00016328 0000bffd              @c..(c......

00017148 <__fsym___cmd_list_event>:
   17148:	00016364 0001634c 0000c2c9              dc..Lc......

00017154 <__fsym_list_event>:
   17154:	00016390 00016378 0000c2c9              .c..xc......

00017160 <__fsym___cmd_list_sem>:
   17160:	000163b8 0001639c 0000c525              .c...c..%...

0001716c <__fsym_list_sem>:
   1716c:	000163e4 000163c8 0000c525              .c...c..%...

00017178 <__fsym___cmd_list_thread>:
   17178:	000163fc 000163f0 0000be49              .c...c..I...

00017184 <__fsym_list_thread>:
   17184:	0001641c 00016410 0000be49              .d...d..I...

00017190 <__fsym___cmd_version>:
   17190:	0001644c 00016428 0000be3d              Ld..(d..=...

0001719c <__fsym_version>:
   1719c:	00016480 0001645c 0000be3d              .d..\d..=...

000171a8 <__fsym_hello>:
   171a8:	00016498 00016488 0000be2d              .d...d..-...

000171b4 <__fsym___cmd_help>:
   171b4:	00016524 0001650c 0000c8c1              $e...e......

000171c0 <__fsym___cmd_free>:
   171c0:	00016558 00016530 0000cbed              Xe..0e......

000171cc <__fsym___cmd_time>:
   171cc:	00016580 00016564 0000cbdd              .e..de......

000171d8 <__fsym___cmd_ps>:
   171d8:	000165a8 0001658c 0000cbe1              .e...e......

000171e4 <__fsym___cmd_benchmark>:
   171e4:	000168f0 000168e4 0000dbc9              .h...h......

000171f0 <__rt_init_rti_start>:
   171f0:	00009251                                Q...

000171f4 <__rt_init_rti_board_start>:
   171f4:	0000928d                                ....

000171f8 <__rt_init_rti_board_end>:
   171f8:	00009291                                ....

000171fc <__rt_init_libc_system_init>:
   171fc:	0000dbd1                                ....

00017200 <__rt_init_finsh_system_init>:
   17200:	0000b7c5                                ....

00017204 <__rt_init_rti_end>:
   17204:	00009289                                ....

00017208 <__rt_init_end>:
	...
